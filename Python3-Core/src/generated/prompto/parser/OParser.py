# Generated from OParser.g4 by ANTLR 4.7.1
# encoding: utf-8
from antlr4 import *
from io import StringIO
from typing.io import TextIO
import sys

from .AbstractParser import AbstractParser

def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\3\u00b6")
        buf.write("\u0aef\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7")
        buf.write("\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r\4\16")
        buf.write("\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23\t\23")
        buf.write("\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31")
        buf.write("\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36")
        buf.write("\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t")
        buf.write("&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t,\4-\t-\4.\t.\4")
        buf.write("/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64\t\64")
        buf.write("\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\49\t9\4:\t:\4;\t")
        buf.write(";\4<\t<\4=\t=\4>\t>\4?\t?\4@\t@\4A\tA\4B\tB\4C\tC\4D\t")
        buf.write("D\4E\tE\4F\tF\4G\tG\4H\tH\4I\tI\4J\tJ\4K\tK\4L\tL\4M\t")
        buf.write("M\4N\tN\4O\tO\4P\tP\4Q\tQ\4R\tR\4S\tS\4T\tT\4U\tU\4V\t")
        buf.write("V\4W\tW\4X\tX\4Y\tY\4Z\tZ\4[\t[\4\\\t\\\4]\t]\4^\t^\4")
        buf.write("_\t_\4`\t`\4a\ta\4b\tb\4c\tc\4d\td\4e\te\4f\tf\4g\tg\4")
        buf.write("h\th\4i\ti\4j\tj\4k\tk\4l\tl\4m\tm\4n\tn\4o\to\4p\tp\4")
        buf.write("q\tq\4r\tr\4s\ts\4t\tt\4u\tu\4v\tv\4w\tw\4x\tx\4y\ty\4")
        buf.write("z\tz\4{\t{\4|\t|\4}\t}\4~\t~\4\177\t\177\4\u0080\t\u0080")
        buf.write("\4\u0081\t\u0081\4\u0082\t\u0082\4\u0083\t\u0083\4\u0084")
        buf.write("\t\u0084\4\u0085\t\u0085\4\u0086\t\u0086\4\u0087\t\u0087")
        buf.write("\4\u0088\t\u0088\4\u0089\t\u0089\4\u008a\t\u008a\4\u008b")
        buf.write("\t\u008b\4\u008c\t\u008c\4\u008d\t\u008d\4\u008e\t\u008e")
        buf.write("\4\u008f\t\u008f\4\u0090\t\u0090\4\u0091\t\u0091\4\u0092")
        buf.write("\t\u0092\4\u0093\t\u0093\4\u0094\t\u0094\4\u0095\t\u0095")
        buf.write("\4\u0096\t\u0096\4\u0097\t\u0097\4\u0098\t\u0098\4\u0099")
        buf.write("\t\u0099\4\u009a\t\u009a\4\u009b\t\u009b\4\u009c\t\u009c")
        buf.write("\4\u009d\t\u009d\4\u009e\t\u009e\4\u009f\t\u009f\4\u00a0")
        buf.write("\t\u00a0\4\u00a1\t\u00a1\4\u00a2\t\u00a2\4\u00a3\t\u00a3")
        buf.write("\4\u00a4\t\u00a4\4\u00a5\t\u00a5\4\u00a6\t\u00a6\4\u00a7")
        buf.write("\t\u00a7\4\u00a8\t\u00a8\4\u00a9\t\u00a9\4\u00aa\t\u00aa")
        buf.write("\4\u00ab\t\u00ab\4\u00ac\t\u00ac\4\u00ad\t\u00ad\4\u00ae")
        buf.write("\t\u00ae\4\u00af\t\u00af\4\u00b0\t\u00b0\4\u00b1\t\u00b1")
        buf.write("\4\u00b2\t\u00b2\4\u00b3\t\u00b3\4\u00b4\t\u00b4\4\u00b5")
        buf.write("\t\u00b5\4\u00b6\t\u00b6\4\u00b7\t\u00b7\4\u00b8\t\u00b8")
        buf.write("\4\u00b9\t\u00b9\4\u00ba\t\u00ba\4\u00bb\t\u00bb\4\u00bc")
        buf.write("\t\u00bc\4\u00bd\t\u00bd\4\u00be\t\u00be\4\u00bf\t\u00bf")
        buf.write("\4\u00c0\t\u00c0\4\u00c1\t\u00c1\4\u00c2\t\u00c2\4\u00c3")
        buf.write("\t\u00c3\4\u00c4\t\u00c4\4\u00c5\t\u00c5\4\u00c6\t\u00c6")
        buf.write("\4\u00c7\t\u00c7\4\u00c8\t\u00c8\4\u00c9\t\u00c9\4\u00ca")
        buf.write("\t\u00ca\4\u00cb\t\u00cb\4\u00cc\t\u00cc\4\u00cd\t\u00cd")
        buf.write("\4\u00ce\t\u00ce\4\u00cf\t\u00cf\4\u00d0\t\u00d0\4\u00d1")
        buf.write("\t\u00d1\4\u00d2\t\u00d2\4\u00d3\t\u00d3\4\u00d4\t\u00d4")
        buf.write("\4\u00d5\t\u00d5\4\u00d6\t\u00d6\4\u00d7\t\u00d7\4\u00d8")
        buf.write("\t\u00d8\4\u00d9\t\u00d9\4\u00da\t\u00da\4\u00db\t\u00db")
        buf.write("\4\u00dc\t\u00dc\4\u00dd\t\u00dd\4\u00de\t\u00de\4\u00df")
        buf.write("\t\u00df\4\u00e0\t\u00e0\4\u00e1\t\u00e1\4\u00e2\t\u00e2")
        buf.write("\4\u00e3\t\u00e3\4\u00e4\t\u00e4\4\u00e5\t\u00e5\4\u00e6")
        buf.write("\t\u00e6\4\u00e7\t\u00e7\4\u00e8\t\u00e8\4\u00e9\t\u00e9")
        buf.write("\4\u00ea\t\u00ea\4\u00eb\t\u00eb\4\u00ec\t\u00ec\4\u00ed")
        buf.write("\t\u00ed\4\u00ee\t\u00ee\4\u00ef\t\u00ef\4\u00f0\t\u00f0")
        buf.write("\4\u00f1\t\u00f1\4\u00f2\t\u00f2\4\u00f3\t\u00f3\4\u00f4")
        buf.write("\t\u00f4\4\u00f5\t\u00f5\4\u00f6\t\u00f6\4\u00f7\t\u00f7")
        buf.write("\4\u00f8\t\u00f8\4\u00f9\t\u00f9\4\u00fa\t\u00fa\4\u00fb")
        buf.write("\t\u00fb\4\u00fc\t\u00fc\4\u00fd\t\u00fd\3\2\3\2\3\2\3")
        buf.write("\2\3\2\3\2\3\2\5\2\u0202\n\2\3\2\3\2\5\2\u0206\n\2\3\2")
        buf.write("\3\2\3\2\3\2\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\4\3")
        buf.write("\4\3\4\3\4\3\4\3\4\3\5\3\5\3\5\3\5\3\5\3\6\5\6\u0221\n")
        buf.write("\6\3\6\3\6\3\6\3\6\3\6\5\6\u0228\n\6\3\6\3\6\3\6\3\6\3")
        buf.write("\6\3\6\5\6\u0230\n\6\5\6\u0232\n\6\3\6\3\6\3\7\3\7\3\7")
        buf.write("\3\7\5\7\u023a\n\7\3\7\3\7\3\b\3\b\3\b\3\b\3\b\3\b\3\b")
        buf.write("\3\b\3\t\5\t\u0247\n\t\3\t\3\t\3\t\3\t\3\t\3\t\5\t\u024f")
        buf.write("\n\t\3\t\3\t\5\t\u0253\n\t\3\t\3\t\3\n\3\n\3\n\3\n\3\n")
        buf.write("\3\n\5\n\u025d\n\n\3\n\3\n\3\13\3\13\3\13\3\13\3\13\3")
        buf.write("\13\7\13\u0267\n\13\f\13\16\13\u026a\13\13\3\f\3\f\3\f")
        buf.write("\5\f\u026f\n\f\3\f\5\f\u0272\n\f\3\r\5\r\u0275\n\r\3\r")
        buf.write("\3\r\3\r\3\r\3\r\3\r\3\r\5\r\u027e\n\r\3\r\3\r\3\16\3")
        buf.write("\16\3\16\3\16\5\16\u0286\n\16\3\16\3\16\3\17\5\17\u028b")
        buf.write("\n\17\3\17\3\17\3\17\3\17\5\17\u0291\n\17\3\17\3\17\3")
        buf.write("\20\3\20\3\20\3\20\5\20\u0299\n\20\3\20\3\20\3\21\5\21")
        buf.write("\u029e\n\21\3\21\3\21\3\21\3\21\5\21\u02a4\n\21\3\21\3")
        buf.write("\21\3\22\5\22\u02a9\n\22\3\22\3\22\3\22\3\22\3\22\3\22")
        buf.write("\3\22\5\22\u02b2\n\22\3\22\3\22\3\22\5\22\u02b7\n\22\3")
        buf.write("\22\3\22\3\23\5\23\u02bc\n\23\3\23\3\23\3\23\3\23\3\23")
        buf.write("\3\23\3\23\5\23\u02c5\n\23\3\23\3\23\3\23\5\23\u02ca\n")
        buf.write("\23\3\23\3\23\3\24\3\24\3\24\3\24\3\24\3\24\3\25\3\25")
        buf.write("\3\25\3\25\3\25\3\25\3\25\3\25\7\25\u02dc\n\25\f\25\16")
        buf.write("\25\u02df\13\25\3\26\3\26\5\26\u02e3\n\26\3\26\5\26\u02e6")
        buf.write("\n\26\3\26\3\26\3\26\3\26\5\26\u02ec\n\26\3\26\3\26\3")
        buf.write("\26\3\27\5\27\u02f2\n\27\3\27\5\27\u02f5\n\27\3\27\3\27")
        buf.write("\3\27\3\27\5\27\u02fb\n\27\3\27\3\27\3\27\5\27\u0300\n")
        buf.write("\27\3\27\3\27\3\30\5\30\u0305\n\30\3\30\5\30\u0308\n\30")
        buf.write("\3\30\3\30\3\30\3\30\5\30\u030e\n\30\3\30\3\30\3\30\3")
        buf.write("\30\3\30\3\31\3\31\3\31\3\31\3\31\3\31\3\31\3\31\3\31")
        buf.write("\3\31\3\31\3\31\3\31\3\31\3\31\3\31\5\31\u0325\n\31\3")
        buf.write("\32\3\32\3\32\3\33\3\33\3\33\3\33\3\33\5\33\u032f\n\33")
        buf.write("\3\33\3\33\3\33\5\33\u0334\n\33\3\34\3\34\3\34\3\34\3")
        buf.write("\34\5\34\u033b\n\34\5\34\u033d\n\34\3\35\3\35\3\35\3\35")
        buf.write("\3\35\3\35\3\35\3\35\3\35\3\35\3\35\3\35\3\35\3\35\3\35")
        buf.write("\3\35\3\35\3\35\3\35\3\35\5\35\u0353\n\35\3\36\3\36\3")
        buf.write("\36\3\36\3\36\3\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37")
        buf.write("\3\37\3\37\5\37\u0364\n\37\3\37\3\37\3\37\3\37\3\37\5")
        buf.write("\37\u036b\n\37\3\37\3\37\3\37\3\37\3\37\3\37\5\37\u0373")
        buf.write("\n\37\3 \3 \3 \3 \3 \3 \3!\3!\3!\3!\3!\3!\3\"\3\"\3\"")
        buf.write("\3\"\3\"\3\"\3\"\3\"\3\"\5\"\u038a\n\"\5\"\u038c\n\"\3")
        buf.write("\"\3\"\3#\3#\3#\3#\3#\3#\3#\3#\3#\3#\3#\5#\u039b\n#\3")
        buf.write("$\3$\3$\3$\3$\3$\5$\u03a3\n$\3$\3$\3$\3$\3$\3%\3%\3%\5")
        buf.write("%\u03ad\n%\3%\3%\3%\3%\3%\3%\3%\3&\3&\3&\3&\3&\3&\3\'")
        buf.write("\3\'\3\'\3\'\3\'\3\'\5\'\u03c2\n\'\3\'\3\'\5\'\u03c6\n")
        buf.write("\'\3(\3(\3(\3(\3(\3(\3(\3(\3(\3(\3(\3(\3(\3(\3(\3(\7(")
        buf.write("\u03d8\n(\f(\16(\u03db\13(\3)\3)\3)\3)\3*\3*\3*\3*\3*")
        buf.write("\3*\5*\u03e7\n*\3*\3*\5*\u03eb\n*\3*\3*\3*\3*\3*\3*\5")
        buf.write("*\u03f3\n*\3*\5*\u03f6\n*\3*\3*\3*\5*\u03fb\n*\3*\5*\u03fe")
        buf.write("\n*\3+\3+\3+\3+\3+\3+\5+\u0406\n+\3+\3+\3+\3+\3+\3+\3")
        buf.write("+\3+\3+\5+\u0411\n+\3+\3+\5+\u0415\n+\3,\3,\3,\3-\3-\5")
        buf.write("-\u041c\n-\3-\3-\3.\3.\3.\5.\u0423\n.\3.\3.\3/\3/\3/\5")
        buf.write("/\u042a\n/\3/\3/\3/\3/\5/\u0430\n/\3/\3/\3/\3/\3/\5/\u0437")
        buf.write("\n/\3\60\3\60\3\61\3\61\3\61\3\61\3\61\3\61\3\61\3\61")
        buf.write("\3\61\3\61\3\61\3\61\3\61\3\61\3\61\3\61\3\61\3\61\3\61")
        buf.write("\3\61\3\61\3\61\3\61\3\61\3\61\3\61\5\61\u0455\n\61\3")
        buf.write("\61\3\61\3\61\3\61\3\61\3\61\3\61\3\61\3\61\3\61\3\61")
        buf.write("\3\61\3\61\3\61\3\61\3\61\3\61\3\61\3\61\3\61\3\61\3\61")
        buf.write("\3\61\3\61\3\61\3\61\3\61\3\61\3\61\3\61\3\61\3\61\3\61")
        buf.write("\3\61\3\61\3\61\3\61\3\61\3\61\3\61\3\61\3\61\3\61\3\61")
        buf.write("\3\61\3\61\3\61\3\61\3\61\3\61\3\61\3\61\3\61\3\61\3\61")
        buf.write("\3\61\3\61\3\61\3\61\3\61\3\61\3\61\3\61\3\61\3\61\3\61")
        buf.write("\3\61\3\61\3\61\3\61\3\61\3\61\3\61\3\61\3\61\3\61\3\61")
        buf.write("\3\61\3\61\3\61\3\61\3\61\3\61\3\61\3\61\3\61\3\61\3\61")
        buf.write("\3\61\3\61\3\61\3\61\3\61\3\61\3\61\3\61\3\61\3\61\3\61")
        buf.write("\3\61\3\61\3\61\3\61\3\61\3\61\3\61\3\61\3\61\3\61\3\61")
        buf.write("\3\61\3\61\3\61\3\61\7\61\u04c9\n\61\f\61\16\61\u04cc")
        buf.write("\13\61\3\62\3\62\3\62\3\62\3\63\3\63\3\64\3\64\3\64\3")
        buf.write("\64\3\64\3\64\5\64\u04da\n\64\3\65\3\65\3\65\3\65\3\65")
        buf.write("\7\65\u04e1\n\65\f\65\16\65\u04e4\13\65\3\66\3\66\3\66")
        buf.write("\3\66\3\66\3\66\7\66\u04ec\n\66\f\66\16\66\u04ef\13\66")
        buf.write("\3\67\3\67\3\67\3\67\3\67\3\67\3\67\3\67\3\67\5\67\u04fa")
        buf.write("\n\67\38\38\38\38\38\39\39\39\59\u0504\n9\39\39\3:\3:")
        buf.write("\3:\3:\3:\3:\3:\3:\3;\3;\3;\3;\3;\3;\3;\3;\3;\5;\u0519")
        buf.write("\n;\3;\3;\3;\3;\3;\3<\3<\3<\3<\3<\3<\5<\u0526\n<\3<\3")
        buf.write("<\3<\3<\3<\3<\3<\3<\3<\3<\3<\5<\u0533\n<\3<\3<\3<\3<\5")
        buf.write("<\u0539\n<\3<\3<\3<\3<\3<\3<\3<\5<\u0542\n<\3<\3<\3<\3")
        buf.write("<\3<\5<\u0549\n<\3<\3<\3<\3<\3<\3<\5<\u0551\n<\5<\u0553")
        buf.write("\n<\3=\3=\3=\3=\3=\3=\5=\u055b\n=\3=\3=\3=\3=\3=\3=\3")
        buf.write("=\3=\3=\3=\3=\3=\3=\3=\3=\3=\3=\5=\u056e\n=\3=\3=\3=\3")
        buf.write("=\5=\u0574\n=\3=\3=\3=\3=\3=\3=\3=\5=\u057d\n=\3=\3=\3")
        buf.write("=\3=\3=\5=\u0584\n=\3=\3=\3=\3=\3=\3=\5=\u058c\n=\3=\3")
        buf.write("=\3=\3=\3=\3=\3=\5=\u0595\n=\3>\3>\5>\u0599\n>\3>\3>\3")
        buf.write(">\3>\3>\3>\3>\5>\u05a2\n>\3>\3>\3?\3?\3?\3?\3?\3?\3?\3")
        buf.write("?\3?\3?\3?\3?\5?\u05b2\n?\3@\3@\3@\3@\3@\5@\u05b9\n@\3")
        buf.write("@\3@\3@\3@\3@\5@\u05c0\n@\3@\3@\5@\u05c4\n@\3A\3A\3A\3")
        buf.write("A\3A\3B\3B\3B\3B\3B\5B\u05d0\nB\3B\3B\3B\7B\u05d5\nB\f")
        buf.write("B\16B\u05d8\13B\3C\3C\3C\3C\5C\u05de\nC\3D\3D\3D\3D\3")
        buf.write("D\3E\3E\3E\3E\3E\3E\5E\u05eb\nE\3F\3F\3F\3F\3F\3G\3G\3")
        buf.write("H\3H\3I\7I\u05f7\nI\fI\16I\u05fa\13I\3J\3J\3J\5J\u05ff")
        buf.write("\nJ\3K\5K\u0602\nK\3K\3K\3K\3L\3L\3L\3L\7L\u060b\nL\f")
        buf.write("L\16L\u060e\13L\3M\3M\3M\7M\u0613\nM\fM\16M\u0616\13M")
        buf.write("\3M\3M\3M\7M\u061b\nM\fM\16M\u061e\13M\3M\3M\3M\3M\3M")
        buf.write("\3M\5M\u0626\nM\3N\3N\3N\3N\3N\3N\7N\u062e\nN\fN\16N\u0631")
        buf.write("\13N\5N\u0633\nN\3N\3N\5N\u0637\nN\3O\3O\3P\3P\3P\3P\3")
        buf.write("Q\3Q\3R\3R\5R\u0643\nR\3S\3S\3T\3T\5T\u0649\nT\3U\3U\3")
        buf.write("U\3U\7U\u064f\nU\fU\16U\u0652\13U\3V\3V\3V\3V\7V\u0658")
        buf.write("\nV\fV\16V\u065b\13V\3W\3W\3W\7W\u0660\nW\fW\16W\u0663")
        buf.write("\13W\3X\3X\3X\3X\3X\3X\3X\3X\3X\3X\5X\u066f\nX\3Y\5Y\u0672")
        buf.write("\nY\3Y\3Y\5Y\u0676\nY\3Y\3Y\3Z\5Z\u067b\nZ\3Z\3Z\5Z\u067f")
        buf.write("\nZ\3Z\3Z\3[\3[\3[\7[\u0686\n[\f[\16[\u0689\13[\3\\\3")
        buf.write("\\\3\\\3\\\3\\\3\\\3]\3]\3]\3]\3]\3]\3]\3]\3]\3]\3]\3")
        buf.write("]\5]\u069d\n]\3]\3]\3]\3]\3]\3]\3]\7]\u06a6\n]\f]\16]")
        buf.write("\u06a9\13]\3^\3^\5^\u06ad\n^\3_\3_\3_\3_\3_\3_\3_\3_\3")
        buf.write("_\3_\3_\3_\3_\3_\3_\3_\3_\5_\u06c0\n_\3`\3`\3a\5a\u06c5")
        buf.write("\na\3a\3a\3b\3b\3c\3c\3c\5c\u06ce\nc\3d\3d\5d\u06d2\n")
        buf.write("d\3e\3e\3e\7e\u06d7\ne\fe\16e\u06da\13e\3f\3f\5f\u06de")
        buf.write("\nf\3g\3g\5g\u06e2\ng\3h\3h\3h\3h\3i\3i\3i\3j\3j\3j\5")
        buf.write("j\u06ee\nj\3k\3k\3l\3l\3m\3m\3n\3n\3o\3o\3p\3p\3p\7p\u06fd")
        buf.write("\np\fp\16p\u0700\13p\3q\3q\5q\u0704\nq\3q\5q\u0707\nq")
        buf.write("\3r\3r\5r\u070b\nr\3s\3s\3s\5s\u0710\ns\3t\3t\3t\3u\3")
        buf.write("u\5u\u0717\nu\3v\3v\3v\3v\3v\3v\3v\3v\3v\7v\u0722\nv\f")
        buf.write("v\16v\u0725\13v\3w\3w\3w\3w\7w\u072b\nw\fw\16w\u072e\13")
        buf.write("w\3x\3x\3x\7x\u0733\nx\fx\16x\u0736\13x\3x\3x\3x\7x\u073b")
        buf.write("\nx\fx\16x\u073e\13x\3x\3x\3x\3x\3x\5x\u0745\nx\3y\3y")
        buf.write("\3y\3y\7y\u074b\ny\fy\16y\u074e\13y\3z\3z\3z\5z\u0753")
        buf.write("\nz\3{\3{\3{\3{\3{\3{\3{\3{\3{\3{\5{\u075f\n{\3|\3|\5")
        buf.write("|\u0763\n|\3}\3}\3}\3}\3}\3}\7}\u076b\n}\f}\16}\u076e")
        buf.write("\13}\3~\3~\3~\7~\u0773\n~\f~\16~\u0776\13~\3~\5~\u0779")
        buf.write("\n~\3\177\3\177\3\177\3\177\5\177\u077f\n\177\3\177\3")
        buf.write("\177\3\177\7\177\u0784\n\177\f\177\16\177\u0787\13\177")
        buf.write("\3\177\3\177\5\177\u078b\n\177\3\u0080\3\u0080\3\u0080")
        buf.write("\7\u0080\u0790\n\u0080\f\u0080\16\u0080\u0793\13\u0080")
        buf.write("\3\u0081\3\u0081\3\u0081\7\u0081\u0798\n\u0081\f\u0081")
        buf.write("\16\u0081\u079b\13\u0081\3\u0082\3\u0082\3\u0082\3\u0082")
        buf.write("\5\u0082\u07a1\n\u0082\3\u0083\3\u0083\3\u0084\3\u0084")
        buf.write("\3\u0084\3\u0084\7\u0084\u07a9\n\u0084\f\u0084\16\u0084")
        buf.write("\u07ac\13\u0084\3\u0085\3\u0085\3\u0085\3\u0085\3\u0085")
        buf.write("\3\u0085\3\u0085\3\u0085\3\u0085\3\u0085\5\u0085\u07b8")
        buf.write("\n\u0085\3\u0086\3\u0086\5\u0086\u07bc\n\u0086\3\u0086")
        buf.write("\5\u0086\u07bf\n\u0086\3\u0087\3\u0087\5\u0087\u07c3\n")
        buf.write("\u0087\3\u0087\5\u0087\u07c6\n\u0087\3\u0088\3\u0088\3")
        buf.write("\u0088\3\u0088\7\u0088\u07cc\n\u0088\f\u0088\16\u0088")
        buf.write("\u07cf\13\u0088\3\u0089\3\u0089\3\u0089\3\u0089\7\u0089")
        buf.write("\u07d5\n\u0089\f\u0089\16\u0089\u07d8\13\u0089\3\u008a")
        buf.write("\3\u008a\3\u008a\3\u008a\7\u008a\u07de\n\u008a\f\u008a")
        buf.write("\16\u008a\u07e1\13\u008a\3\u008b\3\u008b\3\u008b\3\u008b")
        buf.write("\7\u008b\u07e7\n\u008b\f\u008b\16\u008b\u07ea\13\u008b")
        buf.write("\3\u008c\3\u008c\3\u008c\3\u008c\3\u008c\3\u008c\3\u008c")
        buf.write("\3\u008c\3\u008c\3\u008c\3\u008c\3\u008c\3\u008c\3\u008c")
        buf.write("\5\u008c\u07fa\n\u008c\3\u008d\3\u008d\3\u008d\3\u008d")
        buf.write("\3\u008d\3\u008d\3\u008d\3\u008d\3\u008d\3\u008d\3\u008d")
        buf.write("\3\u008d\3\u008d\3\u008d\3\u008d\3\u008d\3\u008d\5\u008d")
        buf.write("\u080d\n\u008d\3\u008e\3\u008e\3\u008e\7\u008e\u0812\n")
        buf.write("\u008e\f\u008e\16\u008e\u0815\13\u008e\3\u008f\3\u008f")
        buf.write("\3\u0090\3\u0090\3\u0090\5\u0090\u081c\n\u0090\3\u0090")
        buf.write("\3\u0090\3\u0091\3\u0091\3\u0091\3\u0091\3\u0092\3\u0092")
        buf.write("\5\u0092\u0826\n\u0092\3\u0093\3\u0093\3\u0093\3\u0093")
        buf.write("\3\u0093\3\u0093\5\u0093\u082e\n\u0093\3\u0094\5\u0094")
        buf.write("\u0831\n\u0094\3\u0094\3\u0094\5\u0094\u0835\n\u0094\3")
        buf.write("\u0094\3\u0094\3\u0095\5\u0095\u083a\n\u0095\3\u0095\3")
        buf.write("\u0095\3\u0095\3\u0095\3\u0095\3\u0095\3\u0095\3\u0095")
        buf.write("\5\u0095\u0844\n\u0095\3\u0096\3\u0096\5\u0096\u0848\n")
        buf.write("\u0096\3\u0096\3\u0096\3\u0097\3\u0097\3\u0097\3\u0097")
        buf.write("\3\u0097\7\u0097\u0851\n\u0097\f\u0097\16\u0097\u0854")
        buf.write("\13\u0097\5\u0097\u0856\n\u0097\3\u0098\3\u0098\3\u0098")
        buf.write("\7\u0098\u085b\n\u0098\f\u0098\16\u0098\u085e\13\u0098")
        buf.write("\3\u0099\3\u0099\3\u0099\3\u0099\3\u009a\3\u009a\5\u009a")
        buf.write("\u0866\n\u009a\3\u009b\3\u009b\3\u009b\3\u009b\3\u009b")
        buf.write("\3\u009b\3\u009b\3\u009b\3\u009b\5\u009b\u0871\n\u009b")
        buf.write("\3\u009c\3\u009c\3\u009c\3\u009c\3\u009d\3\u009d\3\u009d")
        buf.write("\3\u009d\3\u009d\7\u009d\u087c\n\u009d\f\u009d\16\u009d")
        buf.write("\u087f\13\u009d\3\u009e\3\u009e\3\u009e\3\u009e\5\u009e")
        buf.write("\u0885\n\u009e\3\u009f\3\u009f\3\u009f\3\u009f\3\u009f")
        buf.write("\3\u009f\3\u009f\3\u009f\5\u009f\u088f\n\u009f\3\u00a0")
        buf.write("\3\u00a0\3\u00a0\3\u00a0\3\u00a0\3\u00a1\3\u00a1\3\u00a1")
        buf.write("\5\u00a1\u0899\n\u00a1\3\u00a1\5\u00a1\u089c\n\u00a1\3")
        buf.write("\u00a2\3\u00a2\5\u00a2\u08a0\n\u00a2\3\u00a3\3\u00a3\3")
        buf.write("\u00a3\3\u00a3\3\u00a3\3\u00a4\3\u00a4\3\u00a4\3\u00a4")
        buf.write("\3\u00a4\3\u00a5\3\u00a5\3\u00a5\7\u00a5\u08af\n\u00a5")
        buf.write("\f\u00a5\16\u00a5\u08b2\13\u00a5\3\u00a6\3\u00a6\3\u00a6")
        buf.write("\7\u00a6\u08b7\n\u00a6\f\u00a6\16\u00a6\u08ba\13\u00a6")
        buf.write("\3\u00a6\5\u00a6\u08bd\n\u00a6\3\u00a7\3\u00a7\3\u00a7")
        buf.write("\3\u00a7\3\u00a7\3\u00a7\5\u00a7\u08c5\n\u00a7\3\u00a8")
        buf.write("\3\u00a8\3\u00a9\3\u00a9\3\u00a9\3\u00aa\3\u00aa\3\u00aa")
        buf.write("\3\u00ab\3\u00ab\3\u00ab\3\u00ac\3\u00ac\3\u00ac\3\u00ad")
        buf.write("\3\u00ad\3\u00ad\3\u00ae\3\u00ae\3\u00af\3\u00af\3\u00b0")
        buf.write("\3\u00b0\3\u00b1\3\u00b1\3\u00b2\3\u00b2\3\u00b3\3\u00b3")
        buf.write("\3\u00b4\3\u00b4\3\u00b5\3\u00b5\3\u00b5\3\u00b5\3\u00b5")
        buf.write("\3\u00b5\3\u00b5\5\u00b5\u08ed\n\u00b5\3\u00b6\3\u00b6")
        buf.write("\3\u00b6\3\u00b6\3\u00b6\7\u00b6\u08f4\n\u00b6\f\u00b6")
        buf.write("\16\u00b6\u08f7\13\u00b6\3\u00b7\3\u00b7\3\u00b7\3\u00b7")
        buf.write("\3\u00b7\3\u00b7\3\u00b7\5\u00b7\u0900\n\u00b7\3\u00b8")
        buf.write("\3\u00b8\3\u00b9\3\u00b9\3\u00b9\3\u00ba\3\u00ba\3\u00ba")
        buf.write("\3\u00ba\3\u00ba\5\u00ba\u090c\n\u00ba\3\u00bb\3\u00bb")
        buf.write("\3\u00bb\5\u00bb\u0911\n\u00bb\3\u00bb\3\u00bb\3\u00bc")
        buf.write("\3\u00bc\3\u00bc\3\u00bc\3\u00bc\3\u00bc\7\u00bc\u091b")
        buf.write("\n\u00bc\f\u00bc\16\u00bc\u091e\13\u00bc\3\u00bd\3\u00bd")
        buf.write("\3\u00bd\3\u00bd\3\u00be\3\u00be\3\u00be\3\u00be\3\u00bf")
        buf.write("\3\u00bf\3\u00c0\3\u00c0\3\u00c0\3\u00c0\3\u00c0\5\u00c0")
        buf.write("\u092f\n\u00c0\3\u00c1\3\u00c1\3\u00c1\3\u00c1\3\u00c1")
        buf.write("\5\u00c1\u0936\n\u00c1\3\u00c2\3\u00c2\3\u00c2\5\u00c2")
        buf.write("\u093b\n\u00c2\3\u00c3\3\u00c3\3\u00c3\3\u00c3\3\u00c3")
        buf.write("\7\u00c3\u0942\n\u00c3\f\u00c3\16\u00c3\u0945\13\u00c3")
        buf.write("\3\u00c4\3\u00c4\3\u00c4\3\u00c4\3\u00c4\5\u00c4\u094c")
        buf.write("\n\u00c4\3\u00c5\3\u00c5\3\u00c6\3\u00c6\3\u00c6\3\u00c6")
        buf.write("\3\u00c6\3\u00c6\5\u00c6\u0956\n\u00c6\3\u00c7\3\u00c7")
        buf.write("\3\u00c7\5\u00c7\u095b\n\u00c7\3\u00c7\3\u00c7\3\u00c8")
        buf.write("\3\u00c8\3\u00c8\3\u00c8\3\u00c8\3\u00c8\5\u00c8\u0965")
        buf.write("\n\u00c8\3\u00c9\3\u00c9\3\u00c9\3\u00c9\3\u00c9\3\u00c9")
        buf.write("\7\u00c9\u096d\n\u00c9\f\u00c9\16\u00c9\u0970\13\u00c9")
        buf.write("\3\u00ca\3\u00ca\3\u00ca\3\u00ca\3\u00ca\3\u00ca\3\u00ca")
        buf.write("\3\u00ca\3\u00ca\3\u00ca\3\u00ca\7\u00ca\u097d\n\u00ca")
        buf.write("\f\u00ca\16\u00ca\u0980\13\u00ca\3\u00cb\3\u00cb\3\u00cb")
        buf.write("\3\u00cb\3\u00cc\3\u00cc\3\u00cc\5\u00cc\u0989\n\u00cc")
        buf.write("\3\u00cc\3\u00cc\3\u00cc\7\u00cc\u098e\n\u00cc\f\u00cc")
        buf.write("\16\u00cc\u0991\13\u00cc\3\u00cd\3\u00cd\3\u00cd\3\u00cd")
        buf.write("\3\u00cd\5\u00cd\u0998\n\u00cd\3\u00ce\3\u00ce\3\u00ce")
        buf.write("\3\u00ce\3\u00ce\5\u00ce\u099f\n\u00ce\3\u00cf\3\u00cf")
        buf.write("\3\u00cf\3\u00cf\3\u00cf\3\u00cf\3\u00cf\5\u00cf\u09a8")
        buf.write("\n\u00cf\3\u00d0\3\u00d0\3\u00d0\3\u00d0\3\u00d0\7\u00d0")
        buf.write("\u09af\n\u00d0\f\u00d0\16\u00d0\u09b2\13\u00d0\3\u00d1")
        buf.write("\3\u00d1\3\u00d1\3\u00d1\3\u00d1\5\u00d1\u09b9\n\u00d1")
        buf.write("\3\u00d2\3\u00d2\3\u00d3\3\u00d3\3\u00d3\3\u00d4\3\u00d4")
        buf.write("\3\u00d4\5\u00d4\u09c3\n\u00d4\3\u00d5\3\u00d5\3\u00d5")
        buf.write("\5\u00d5\u09c8\n\u00d5\3\u00d5\3\u00d5\3\u00d6\3\u00d6")
        buf.write("\3\u00d6\3\u00d6\3\u00d6\3\u00d6\7\u00d6\u09d2\n\u00d6")
        buf.write("\f\u00d6\16\u00d6\u09d5\13\u00d6\3\u00d7\3\u00d7\3\u00d7")
        buf.write("\3\u00d7\3\u00d8\3\u00d8\3\u00d8\3\u00d8\3\u00d9\3\u00d9")
        buf.write("\3\u00d9\3\u00d9\3\u00d9\3\u00d9\7\u00d9\u09e5\n\u00d9")
        buf.write("\f\u00d9\16\u00d9\u09e8\13\u00d9\3\u00da\3\u00da\3\u00da")
        buf.write("\3\u00da\3\u00da\7\u00da\u09ef\n\u00da\f\u00da\16\u00da")
        buf.write("\u09f2\13\u00da\3\u00db\3\u00db\3\u00db\3\u00db\3\u00db")
        buf.write("\5\u00db\u09f9\n\u00db\3\u00dc\3\u00dc\3\u00dc\3\u00dc")
        buf.write("\3\u00dc\5\u00dc\u0a00\n\u00dc\3\u00dd\3\u00dd\3\u00dd")
        buf.write("\3\u00dd\3\u00dd\3\u00dd\3\u00dd\5\u00dd\u0a09\n\u00dd")
        buf.write("\3\u00de\3\u00de\3\u00de\3\u00de\3\u00de\7\u00de\u0a10")
        buf.write("\n\u00de\f\u00de\16\u00de\u0a13\13\u00de\3\u00df\3\u00df")
        buf.write("\3\u00df\3\u00df\3\u00df\5\u00df\u0a1a\n\u00df\3\u00e0")
        buf.write("\3\u00e0\3\u00e1\3\u00e1\3\u00e1\3\u00e2\3\u00e2\3\u00e2")
        buf.write("\5\u00e2\u0a24\n\u00e2\3\u00e3\3\u00e3\3\u00e3\5\u00e3")
        buf.write("\u0a29\n\u00e3\3\u00e3\3\u00e3\3\u00e4\3\u00e4\3\u00e4")
        buf.write("\3\u00e4\3\u00e4\3\u00e4\7\u00e4\u0a33\n\u00e4\f\u00e4")
        buf.write("\16\u00e4\u0a36\13\u00e4\3\u00e5\3\u00e5\3\u00e5\3\u00e5")
        buf.write("\3\u00e6\3\u00e6\3\u00e6\3\u00e6\3\u00e7\3\u00e7\3\u00e7")
        buf.write("\5\u00e7\u0a43\n\u00e7\3\u00e7\3\u00e7\3\u00e7\7\u00e7")
        buf.write("\u0a48\n\u00e7\f\u00e7\16\u00e7\u0a4b\13\u00e7\3\u00e8")
        buf.write("\3\u00e8\3\u00e8\3\u00e8\3\u00e8\5\u00e8\u0a52\n\u00e8")
        buf.write("\3\u00e9\3\u00e9\3\u00e9\3\u00e9\3\u00e9\5\u00e9\u0a59")
        buf.write("\n\u00e9\3\u00ea\3\u00ea\5\u00ea\u0a5d\n\u00ea\3\u00eb")
        buf.write("\3\u00eb\3\u00eb\5\u00eb\u0a62\n\u00eb\3\u00eb\3\u00eb")
        buf.write("\5\u00eb\u0a66\n\u00eb\3\u00ec\3\u00ec\3\u00ec\5\u00ec")
        buf.write("\u0a6b\n\u00ec\3\u00ec\3\u00ec\3\u00ec\3\u00ed\3\u00ed")
        buf.write("\3\u00ed\5\u00ed\u0a73\n\u00ed\3\u00ee\3\u00ee\3\u00ee")
        buf.write("\3\u00ee\3\u00ef\3\u00ef\3\u00ef\3\u00ef\7\u00ef\u0a7d")
        buf.write("\n\u00ef\f\u00ef\16\u00ef\u0a80\13\u00ef\3\u00ef\3\u00ef")
        buf.write("\3\u00ef\3\u00f0\3\u00f0\3\u00f0\3\u00f0\7\u00f0\u0a89")
        buf.write("\n\u00f0\f\u00f0\16\u00f0\u0a8c\13\u00f0\3\u00f0\3\u00f0")
        buf.write("\3\u00f1\3\u00f1\3\u00f1\3\u00f1\3\u00f1\3\u00f2\3\u00f2")
        buf.write("\3\u00f2\7\u00f2\u0a98\n\u00f2\f\u00f2\16\u00f2\u0a9b")
        buf.write("\13\u00f2\3\u00f3\3\u00f3\7\u00f3\u0a9f\n\u00f3\f\u00f3")
        buf.write("\16\u00f3\u0aa2\13\u00f3\3\u00f4\3\u00f4\3\u00f4\5\u00f4")
        buf.write("\u0aa7\n\u00f4\3\u00f4\3\u00f4\3\u00f5\3\u00f5\3\u00f5")
        buf.write("\3\u00f5\3\u00f5\5\u00f5\u0ab0\n\u00f5\3\u00f6\6\u00f6")
        buf.write("\u0ab3\n\u00f6\r\u00f6\16\u00f6\u0ab4\3\u00f7\3\u00f7")
        buf.write("\3\u00f7\3\u00f7\5\u00f7\u0abb\n\u00f7\3\u00f7\5\u00f7")
        buf.write("\u0abe\n\u00f7\3\u00f8\6\u00f8\u0ac1\n\u00f8\r\u00f8\16")
        buf.write("\u00f8\u0ac2\3\u00f9\3\u00f9\6\u00f9\u0ac7\n\u00f9\r\u00f9")
        buf.write("\16\u00f9\u0ac8\3\u00f9\3\u00f9\3\u00fa\3\u00fa\3\u00fa")
        buf.write("\3\u00fa\3\u00fa\3\u00fb\3\u00fb\3\u00fb\3\u00fb\5\u00fb")
        buf.write("\u0ad6\n\u00fb\3\u00fb\3\u00fb\6\u00fb\u0ada\n\u00fb\r")
        buf.write("\u00fb\16\u00fb\u0adb\7\u00fb\u0ade\n\u00fb\f\u00fb\16")
        buf.write("\u00fb\u0ae1\13\u00fb\3\u00fc\3\u00fc\3\u00fc\3\u00fc")
        buf.write("\3\u00fc\5\u00fc\u0ae8\n\u00fc\3\u00fd\6\u00fd\u0aeb\n")
        buf.write("\u00fd\r\u00fd\16\u00fd\u0aec\3\u00fd\2\32\24(N`hj\u0082")
        buf.write("\u00b8\u00ea\u0138\u016a\u0176\u0184\u0190\u0192\u0196")
        buf.write("\u019e\u01aa\u01b0\u01b2\u01ba\u01c6\u01cc\u01f4\u00fe")
        buf.write("\2\4\6\b\n\f\16\20\22\24\26\30\32\34\36 \"$&(*,.\60\62")
        buf.write("\64\668:<>@BDFHJLNPRTVXZ\\^`bdfhjlnprtvxz|~\u0080\u0082")
        buf.write("\u0084\u0086\u0088\u008a\u008c\u008e\u0090\u0092\u0094")
        buf.write("\u0096\u0098\u009a\u009c\u009e\u00a0\u00a2\u00a4\u00a6")
        buf.write("\u00a8\u00aa\u00ac\u00ae\u00b0\u00b2\u00b4\u00b6\u00b8")
        buf.write("\u00ba\u00bc\u00be\u00c0\u00c2\u00c4\u00c6\u00c8\u00ca")
        buf.write("\u00cc\u00ce\u00d0\u00d2\u00d4\u00d6\u00d8\u00da\u00dc")
        buf.write("\u00de\u00e0\u00e2\u00e4\u00e6\u00e8\u00ea\u00ec\u00ee")
        buf.write("\u00f0\u00f2\u00f4\u00f6\u00f8\u00fa\u00fc\u00fe\u0100")
        buf.write("\u0102\u0104\u0106\u0108\u010a\u010c\u010e\u0110\u0112")
        buf.write("\u0114\u0116\u0118\u011a\u011c\u011e\u0120\u0122\u0124")
        buf.write("\u0126\u0128\u012a\u012c\u012e\u0130\u0132\u0134\u0136")
        buf.write("\u0138\u013a\u013c\u013e\u0140\u0142\u0144\u0146\u0148")
        buf.write("\u014a\u014c\u014e\u0150\u0152\u0154\u0156\u0158\u015a")
        buf.write("\u015c\u015e\u0160\u0162\u0164\u0166\u0168\u016a\u016c")
        buf.write("\u016e\u0170\u0172\u0174\u0176\u0178\u017a\u017c\u017e")
        buf.write("\u0180\u0182\u0184\u0186\u0188\u018a\u018c\u018e\u0190")
        buf.write("\u0192\u0194\u0196\u0198\u019a\u019c\u019e\u01a0\u01a2")
        buf.write("\u01a4\u01a6\u01a8\u01aa\u01ac\u01ae\u01b0\u01b2\u01b4")
        buf.write("\u01b6\u01b8\u01ba\u01bc\u01be\u01c0\u01c2\u01c4\u01c6")
        buf.write("\u01c8\u01ca\u01cc\u01ce\u01d0\u01d2\u01d4\u01d6\u01d8")
        buf.write("\u01da\u01dc\u01de\u01e0\u01e2\u01e4\u01e6\u01e8\u01ea")
        buf.write("\u01ec\u01ee\u01f0\u01f2\u01f4\u01f6\u01f8\2\r\3\2\36")
        buf.write("\37\3\2\4\5\5\2oo\u008f\u008f\u00a9\u00a9\4\2VV\u00a9")
        buf.write("\u00a9\4\2\u0092\u0092\u00a9\u00a9\4\2\u008e\u008e\u0098")
        buf.write("\u0098\4\2MM^^\t\2\7\f\62\62\64<>EGsu\u0096\u0098\u00a2")
        buf.write("\4\2##yy\5\2\26\27$$&&\5\2\4\4\r\16\26\27\2\u0ba2\2\u01fa")
        buf.write("\3\2\2\2\4\u020b\3\2\2\2\6\u0214\3\2\2\2\b\u021a\3\2\2")
        buf.write("\2\n\u0220\3\2\2\2\f\u0235\3\2\2\2\16\u023d\3\2\2\2\20")
        buf.write("\u0246\3\2\2\2\22\u0256\3\2\2\2\24\u0260\3\2\2\2\26\u0271")
        buf.write("\3\2\2\2\30\u0274\3\2\2\2\32\u0281\3\2\2\2\34\u028a\3")
        buf.write("\2\2\2\36\u0294\3\2\2\2 \u029d\3\2\2\2\"\u02a8\3\2\2\2")
        buf.write("$\u02bb\3\2\2\2&\u02cd\3\2\2\2(\u02d3\3\2\2\2*\u02e0\3")
        buf.write("\2\2\2,\u02f4\3\2\2\2.\u0304\3\2\2\2\60\u0314\3\2\2\2")
        buf.write("\62\u0326\3\2\2\2\64\u0329\3\2\2\2\66\u033c\3\2\2\28\u0352")
        buf.write("\3\2\2\2:\u0354\3\2\2\2<\u036a\3\2\2\2>\u0374\3\2\2\2")
        buf.write("@\u037a\3\2\2\2B\u0380\3\2\2\2D\u039a\3\2\2\2F\u039c\3")
        buf.write("\2\2\2H\u03a9\3\2\2\2J\u03b5\3\2\2\2L\u03bb\3\2\2\2N\u03c7")
        buf.write("\3\2\2\2P\u03dc\3\2\2\2R\u03e0\3\2\2\2T\u0414\3\2\2\2")
        buf.write("V\u0416\3\2\2\2X\u0419\3\2\2\2Z\u041f\3\2\2\2\\\u0429")
        buf.write("\3\2\2\2^\u0438\3\2\2\2`\u0454\3\2\2\2b\u04cd\3\2\2\2")
        buf.write("d\u04d1\3\2\2\2f\u04d9\3\2\2\2h\u04db\3\2\2\2j\u04e5\3")
        buf.write("\2\2\2l\u04f9\3\2\2\2n\u04fb\3\2\2\2p\u0500\3\2\2\2r\u0507")
        buf.write("\3\2\2\2t\u050f\3\2\2\2v\u0552\3\2\2\2x\u0594\3\2\2\2")
        buf.write("z\u0596\3\2\2\2|\u05b1\3\2\2\2~\u05c3\3\2\2\2\u0080\u05c5")
        buf.write("\3\2\2\2\u0082\u05cf\3\2\2\2\u0084\u05d9\3\2\2\2\u0086")
        buf.write("\u05df\3\2\2\2\u0088\u05ea\3\2\2\2\u008a\u05ec\3\2\2\2")
        buf.write("\u008c\u05f1\3\2\2\2\u008e\u05f3\3\2\2\2\u0090\u05f8\3")
        buf.write("\2\2\2\u0092\u05fe\3\2\2\2\u0094\u0601\3\2\2\2\u0096\u0606")
        buf.write("\3\2\2\2\u0098\u0614\3\2\2\2\u009a\u0627\3\2\2\2\u009c")
        buf.write("\u0638\3\2\2\2\u009e\u063a\3\2\2\2\u00a0\u063e\3\2\2\2")
        buf.write("\u00a2\u0642\3\2\2\2\u00a4\u0644\3\2\2\2\u00a6\u0648\3")
        buf.write("\2\2\2\u00a8\u064a\3\2\2\2\u00aa\u0653\3\2\2\2\u00ac\u065c")
        buf.write("\3\2\2\2\u00ae\u066e\3\2\2\2\u00b0\u0671\3\2\2\2\u00b2")
        buf.write("\u067a\3\2\2\2\u00b4\u0682\3\2\2\2\u00b6\u068a\3\2\2\2")
        buf.write("\u00b8\u069c\3\2\2\2\u00ba\u06ac\3\2\2\2\u00bc\u06bf\3")
        buf.write("\2\2\2\u00be\u06c1\3\2\2\2\u00c0\u06c4\3\2\2\2\u00c2\u06c8")
        buf.write("\3\2\2\2\u00c4\u06cd\3\2\2\2\u00c6\u06d1\3\2\2\2\u00c8")
        buf.write("\u06d3\3\2\2\2\u00ca\u06dd\3\2\2\2\u00cc\u06e1\3\2\2\2")
        buf.write("\u00ce\u06e3\3\2\2\2\u00d0\u06e7\3\2\2\2\u00d2\u06ed\3")
        buf.write("\2\2\2\u00d4\u06ef\3\2\2\2\u00d6\u06f1\3\2\2\2\u00d8\u06f3")
        buf.write("\3\2\2\2\u00da\u06f5\3\2\2\2\u00dc\u06f7\3\2\2\2\u00de")
        buf.write("\u06f9\3\2\2\2\u00e0\u0706\3\2\2\2\u00e2\u070a\3\2\2\2")
        buf.write("\u00e4\u070c\3\2\2\2\u00e6\u0711\3\2\2\2\u00e8\u0716\3")
        buf.write("\2\2\2\u00ea\u0718\3\2\2\2\u00ec\u0726\3\2\2\2\u00ee\u0734")
        buf.write("\3\2\2\2\u00f0\u0746\3\2\2\2\u00f2\u0752\3\2\2\2\u00f4")
        buf.write("\u075e\3\2\2\2\u00f6\u0760\3\2\2\2\u00f8\u0764\3\2\2\2")
        buf.write("\u00fa\u076f\3\2\2\2\u00fc\u077a\3\2\2\2\u00fe\u078c\3")
        buf.write("\2\2\2\u0100\u0794\3\2\2\2\u0102\u07a0\3\2\2\2\u0104\u07a2")
        buf.write("\3\2\2\2\u0106\u07a4\3\2\2\2\u0108\u07b7\3\2\2\2\u010a")
        buf.write("\u07b9\3\2\2\2\u010c\u07c0\3\2\2\2\u010e\u07c7\3\2\2\2")
        buf.write("\u0110\u07d0\3\2\2\2\u0112\u07d9\3\2\2\2\u0114\u07e2\3")
        buf.write("\2\2\2\u0116\u07f9\3\2\2\2\u0118\u080c\3\2\2\2\u011a\u080e")
        buf.write("\3\2\2\2\u011c\u0816\3\2\2\2\u011e\u081b\3\2\2\2\u0120")
        buf.write("\u081f\3\2\2\2\u0122\u0825\3\2\2\2\u0124\u082d\3\2\2\2")
        buf.write("\u0126\u0830\3\2\2\2\u0128\u0839\3\2\2\2\u012a\u0845\3")
        buf.write("\2\2\2\u012c\u084b\3\2\2\2\u012e\u0857\3\2\2\2\u0130\u085f")
        buf.write("\3\2\2\2\u0132\u0865\3\2\2\2\u0134\u0870\3\2\2\2\u0136")
        buf.write("\u0872\3\2\2\2\u0138\u0876\3\2\2\2\u013a\u0884\3\2\2\2")
        buf.write("\u013c\u088e\3\2\2\2\u013e\u0890\3\2\2\2\u0140\u089b\3")
        buf.write("\2\2\2\u0142\u089f\3\2\2\2\u0144\u08a1\3\2\2\2\u0146\u08a6")
        buf.write("\3\2\2\2\u0148\u08ab\3\2\2\2\u014a\u08b3\3\2\2\2\u014c")
        buf.write("\u08c4\3\2\2\2\u014e\u08c6\3\2\2\2\u0150\u08c8\3\2\2\2")
        buf.write("\u0152\u08cb\3\2\2\2\u0154\u08ce\3\2\2\2\u0156\u08d1\3")
        buf.write("\2\2\2\u0158\u08d4\3\2\2\2\u015a\u08d7\3\2\2\2\u015c\u08d9")
        buf.write("\3\2\2\2\u015e\u08db\3\2\2\2\u0160\u08dd\3\2\2\2\u0162")
        buf.write("\u08df\3\2\2\2\u0164\u08e1\3\2\2\2\u0166\u08e3\3\2\2\2")
        buf.write("\u0168\u08ec\3\2\2\2\u016a\u08ee\3\2\2\2\u016c\u08ff\3")
        buf.write("\2\2\2\u016e\u0901\3\2\2\2\u0170\u0903\3\2\2\2\u0172\u090b")
        buf.write("\3\2\2\2\u0174\u090d\3\2\2\2\u0176\u0914\3\2\2\2\u0178")
        buf.write("\u091f\3\2\2\2\u017a\u0923\3\2\2\2\u017c\u0927\3\2\2\2")
        buf.write("\u017e\u092e\3\2\2\2\u0180\u0935\3\2\2\2\u0182\u093a\3")
        buf.write("\2\2\2\u0184\u093c\3\2\2\2\u0186\u094b\3\2\2\2\u0188\u094d")
        buf.write("\3\2\2\2\u018a\u0955\3\2\2\2\u018c\u0957\3\2\2\2\u018e")
        buf.write("\u0964\3\2\2\2\u0190\u0966\3\2\2\2\u0192\u0971\3\2\2\2")
        buf.write("\u0194\u0981\3\2\2\2\u0196\u0988\3\2\2\2\u0198\u0997\3")
        buf.write("\2\2\2\u019a\u099e\3\2\2\2\u019c\u09a7\3\2\2\2\u019e\u09a9")
        buf.write("\3\2\2\2\u01a0\u09b8\3\2\2\2\u01a2\u09ba\3\2\2\2\u01a4")
        buf.write("\u09bc\3\2\2\2\u01a6\u09c2\3\2\2\2\u01a8\u09c4\3\2\2\2")
        buf.write("\u01aa\u09cb\3\2\2\2\u01ac\u09d6\3\2\2\2\u01ae\u09da\3")
        buf.write("\2\2\2\u01b0\u09de\3\2\2\2\u01b2\u09e9\3\2\2\2\u01b4\u09f8")
        buf.write("\3\2\2\2\u01b6\u09ff\3\2\2\2\u01b8\u0a08\3\2\2\2\u01ba")
        buf.write("\u0a0a\3\2\2\2\u01bc\u0a19\3\2\2\2\u01be\u0a1b\3\2\2\2")
        buf.write("\u01c0\u0a1d\3\2\2\2\u01c2\u0a23\3\2\2\2\u01c4\u0a25\3")
        buf.write("\2\2\2\u01c6\u0a2c\3\2\2\2\u01c8\u0a37\3\2\2\2\u01ca\u0a3b")
        buf.write("\3\2\2\2\u01cc\u0a42\3\2\2\2\u01ce\u0a51\3\2\2\2\u01d0")
        buf.write("\u0a58\3\2\2\2\u01d2\u0a5c\3\2\2\2\u01d4\u0a65\3\2\2\2")
        buf.write("\u01d6\u0a67\3\2\2\2\u01d8\u0a72\3\2\2\2\u01da\u0a74\3")
        buf.write("\2\2\2\u01dc\u0a78\3\2\2\2\u01de\u0a84\3\2\2\2\u01e0\u0a8f")
        buf.write("\3\2\2\2\u01e2\u0a94\3\2\2\2\u01e4\u0a9c\3\2\2\2\u01e6")
        buf.write("\u0aa3\3\2\2\2\u01e8\u0aaf\3\2\2\2\u01ea\u0ab2\3\2\2\2")
        buf.write("\u01ec\u0abd\3\2\2\2\u01ee\u0ac0\3\2\2\2\u01f0\u0ac4\3")
        buf.write("\2\2\2\u01f2\u0acc\3\2\2\2\u01f4\u0ad5\3\2\2\2\u01f6\u0ae7")
        buf.write("\3\2\2\2\u01f8\u0aea\3\2\2\2\u01fa\u01fb\7d\2\2\u01fb")
        buf.write("\u01fc\7V\2\2\u01fc\u0201\5\u00dan\2\u01fd\u01fe\7\22")
        buf.write("\2\2\u01fe\u01ff\5\u0100\u0081\2\u01ff\u0200\7\23\2\2")
        buf.write("\u0200\u0202\3\2\2\2\u0201\u01fd\3\2\2\2\u0201\u0202\3")
        buf.write("\2\2\2\u0202\u0205\3\2\2\2\u0203\u0204\7h\2\2\u0204\u0206")
        buf.write("\5\u00dan\2\u0205\u0203\3\2\2\2\u0205\u0206\3\2\2\2\u0206")
        buf.write("\u0207\3\2\2\2\u0207\u0208\7\26\2\2\u0208\u0209\5\u00aa")
        buf.write("V\2\u0209\u020a\7\27\2\2\u020a\3\3\2\2\2\u020b\u020c\7")
        buf.write("d\2\2\u020c\u020d\5\u00dan\2\u020d\u020e\7\22\2\2\u020e")
        buf.write("\u020f\5\u00bc_\2\u020f\u0210\7\23\2\2\u0210\u0211\7\26")
        buf.write("\2\2\u0211\u0212\5\u00a8U\2\u0212\u0213\7\27\2\2\u0213")
        buf.write("\5\3\2\2\2\u0214\u0215\5\u00dco\2\u0215\u0216\7\22\2\2")
        buf.write("\u0216\u0217\5\u0082B\2\u0217\u0218\7\23\2\2\u0218\u0219")
        buf.write("\7\16\2\2\u0219\7\3\2\2\2\u021a\u021b\5\u00dco\2\u021b")
        buf.write("\u021c\7*\2\2\u021c\u021d\5`\61\2\u021d\u021e\7\16\2\2")
        buf.write("\u021e\t\3\2\2\2\u021f\u0221\7\u0092\2\2\u0220\u021f\3")
        buf.write("\2\2\2\u0220\u0221\3\2\2\2\u0221\u0222\3\2\2\2\u0222\u0223")
        buf.write("\7O\2\2\u0223\u0224\5\u00d8m\2\u0224\u0225\7\r\2\2\u0225")
        buf.write("\u0227\5\u00b8]\2\u0226\u0228\5\u00aeX\2\u0227\u0226\3")
        buf.write("\2\2\2\u0227\u0228\3\2\2\2\u0228\u0231\3\2\2\2\u0229\u022a")
        buf.write("\7\u009e\2\2\u022a\u022f\7s\2\2\u022b\u022c\7\22\2\2\u022c")
        buf.write("\u022d\5\u00fe\u0080\2\u022d\u022e\7\23\2\2\u022e\u0230")
        buf.write("\3\2\2\2\u022f\u022b\3\2\2\2\u022f\u0230\3\2\2\2\u0230")
        buf.write("\u0232\3\2\2\2\u0231\u0229\3\2\2\2\u0231\u0232\3\2\2\2")
        buf.write("\u0232\u0233\3\2\2\2\u0233\u0234\7\16\2\2\u0234\13\3\2")
        buf.write("\2\2\u0235\u0236\7\u009d\2\2\u0236\u0239\5\u00dan\2\u0237")
        buf.write("\u0238\7h\2\2\u0238\u023a\5\u00dan\2\u0239\u0237\3\2\2")
        buf.write("\2\u0239\u023a\3\2\2\2\u023a\u023b\3\2\2\2\u023b\u023c")
        buf.write("\5\26\f\2\u023c\r\3\2\2\2\u023d\u023e\7{\2\2\u023e\u023f")
        buf.write("\7\u009d\2\2\u023f\u0240\5\u00dan\2\u0240\u0241\7\26\2")
        buf.write("\2\u0241\u0242\5&\24\2\u0242\u0243\5\u00f0y\2\u0243\u0244")
        buf.write("\7\27\2\2\u0244\17\3\2\2\2\u0245\u0247\7\u0092\2\2\u0246")
        buf.write("\u0245\3\2\2\2\u0246\u0247\3\2\2\2\u0247\u0248\3\2\2\2")
        buf.write("\u0248\u0249\7V\2\2\u0249\u024e\5\u00dan\2\u024a\u024b")
        buf.write("\7\22\2\2\u024b\u024c\5\u0100\u0081\2\u024c\u024d\7\23")
        buf.write("\2\2\u024d\u024f\3\2\2\2\u024e\u024a\3\2\2\2\u024e\u024f")
        buf.write("\3\2\2\2\u024f\u0252\3\2\2\2\u0250\u0251\7h\2\2\u0251")
        buf.write("\u0253\5\24\13\2\u0252\u0250\3\2\2\2\u0252\u0253\3\2\2")
        buf.write("\2\u0253\u0254\3\2\2\2\u0254\u0255\5\26\f\2\u0255\21\3")
        buf.write("\2\2\2\u0256\u0257\7\u0090\2\2\u0257\u025c\5\u00dan\2")
        buf.write("\u0258\u0259\7\22\2\2\u0259\u025a\5\u0100\u0081\2\u025a")
        buf.write("\u025b\7\23\2\2\u025b\u025d\3\2\2\2\u025c\u0258\3\2\2")
        buf.write("\2\u025c\u025d\3\2\2\2\u025d\u025e\3\2\2\2\u025e\u025f")
        buf.write("\5\26\f\2\u025f\23\3\2\2\2\u0260\u0261\b\13\1\2\u0261")
        buf.write("\u0262\5\u00dan\2\u0262\u0268\3\2\2\2\u0263\u0264\f\3")
        buf.write("\2\2\u0264\u0265\7\17\2\2\u0265\u0267\5\u00dan\2\u0266")
        buf.write("\u0263\3\2\2\2\u0267\u026a\3\2\2\2\u0268\u0266\3\2\2\2")
        buf.write("\u0268\u0269\3\2\2\2\u0269\25\3\2\2\2\u026a\u0268\3\2")
        buf.write("\2\2\u026b\u0272\7\16\2\2\u026c\u026e\7\26\2\2\u026d\u026f")
        buf.write("\5\u00ecw\2\u026e\u026d\3\2\2\2\u026e\u026f\3\2\2\2\u026f")
        buf.write("\u0270\3\2\2\2\u0270\u0272\7\27\2\2\u0271\u026b\3\2\2")
        buf.write("\2\u0271\u026c\3\2\2\2\u0272\27\3\2\2\2\u0273\u0275\5")
        buf.write("\u00b8]\2\u0274\u0273\3\2\2\2\u0274\u0275\3\2\2\2\u0275")
        buf.write("\u0276\3\2\2\2\u0276\u0277\7\u0082\2\2\u0277\u0278\5\u014c")
        buf.write("\u00a7\2\u0278\u0279\7\22\2\2\u0279\u027a\5\u00e2r\2\u027a")
        buf.write("\u027b\7\23\2\2\u027b\u027d\7\26\2\2\u027c\u027e\5\u010e")
        buf.write("\u0088\2\u027d\u027c\3\2\2\2\u027d\u027e\3\2\2\2\u027e")
        buf.write("\u027f\3\2\2\2\u027f\u0280\7\27\2\2\u0280\31\3\2\2\2\u0281")
        buf.write("\u0282\7\u008f\2\2\u0282\u0283\5\u00d6l\2\u0283\u0285")
        buf.write("\7\26\2\2\u0284\u0286\5\u010e\u0088\2\u0285\u0284\3\2")
        buf.write("\2\2\u0285\u0286\3\2\2\2\u0286\u0287\3\2\2\2\u0287\u0288")
        buf.write("\7\27\2\2\u0288\33\3\2\2\2\u0289\u028b\7{\2\2\u028a\u0289")
        buf.write("\3\2\2\2\u028a\u028b\3\2\2\2\u028b\u028c\3\2\2\2\u028c")
        buf.write("\u028d\7\u008f\2\2\u028d\u028e\5\u00d6l\2\u028e\u0290")
        buf.write("\7\26\2\2\u028f\u0291\5\u0106\u0084\2\u0290\u028f\3\2")
        buf.write("\2\2\u0290\u0291\3\2\2\2\u0291\u0292\3\2\2\2\u0292\u0293")
        buf.write("\7\27\2\2\u0293\35\3\2\2\2\u0294\u0295\7o\2\2\u0295\u0296")
        buf.write("\5\u00d6l\2\u0296\u0298\7\26\2\2\u0297\u0299\5\u010e\u0088")
        buf.write("\2\u0298\u0297\3\2\2\2\u0298\u0299\3\2\2\2\u0299\u029a")
        buf.write("\3\2\2\2\u029a\u029b\7\27\2\2\u029b\37\3\2\2\2\u029c\u029e")
        buf.write("\7{\2\2\u029d\u029c\3\2\2\2\u029d\u029e\3\2\2\2\u029e")
        buf.write("\u029f\3\2\2\2\u029f\u02a0\7o\2\2\u02a0\u02a1\5\u00d6")
        buf.write("l\2\u02a1\u02a3\7\26\2\2\u02a2\u02a4\5\u0106\u0084\2\u02a3")
        buf.write("\u02a2\3\2\2\2\u02a3\u02a4\3\2\2\2\u02a4\u02a5\3\2\2\2")
        buf.write("\u02a5\u02a6\7\27\2\2\u02a6!\3\2\2\2\u02a7\u02a9\7\u0092")
        buf.write("\2\2\u02a8\u02a7\3\2\2\2\u02a8\u02a9\3\2\2\2\u02a9\u02aa")
        buf.write("\3\2\2\2\u02aa\u02ab\7{\2\2\u02ab\u02ac\7\u008a\2\2\u02ac")
        buf.write("\u02b1\5\u00dan\2\u02ad\u02ae\7\22\2\2\u02ae\u02af\5\u0100")
        buf.write("\u0081\2\u02af\u02b0\7\23\2\2\u02b0\u02b2\3\2\2\2\u02b1")
        buf.write("\u02ad\3\2\2\2\u02b1\u02b2\3\2\2\2\u02b2\u02b3\3\2\2\2")
        buf.write("\u02b3\u02b4\7\26\2\2\u02b4\u02b6\5&\24\2\u02b5\u02b7")
        buf.write("\5\u00f0y\2\u02b6\u02b5\3\2\2\2\u02b6\u02b7\3\2\2\2\u02b7")
        buf.write("\u02b8\3\2\2\2\u02b8\u02b9\7\27\2\2\u02b9#\3\2\2\2\u02ba")
        buf.write("\u02bc\7\u0092\2\2\u02bb\u02ba\3\2\2\2\u02bb\u02bc\3\2")
        buf.write("\2\2\u02bc\u02bd\3\2\2\2\u02bd\u02be\7{\2\2\u02be\u02bf")
        buf.write("\7V\2\2\u02bf\u02c4\5\u00dan\2\u02c0\u02c1\7\22\2\2\u02c1")
        buf.write("\u02c2\5\u0100\u0081\2\u02c2\u02c3\7\23\2\2\u02c3\u02c5")
        buf.write("\3\2\2\2\u02c4\u02c0\3\2\2\2\u02c4\u02c5\3\2\2\2\u02c5")
        buf.write("\u02c6\3\2\2\2\u02c6\u02c7\7\26\2\2\u02c7\u02c9\5&\24")
        buf.write("\2\u02c8\u02ca\5\u00f0y\2\u02c9\u02c8\3\2\2\2\u02c9\u02ca")
        buf.write("\3\2\2\2\u02ca\u02cb\3\2\2\2\u02cb\u02cc\7\27\2\2\u02cc")
        buf.write("%\3\2\2\2\u02cd\u02ce\7V\2\2\u02ce\u02cf\7Q\2\2\u02cf")
        buf.write("\u02d0\7\26\2\2\u02d0\u02d1\5(\25\2\u02d1\u02d2\7\27\2")
        buf.write("\2\u02d2\'\3\2\2\2\u02d3\u02d4\b\25\1\2\u02d4\u02d5\5")
        buf.write("\u00f4{\2\u02d5\u02d6\7\16\2\2\u02d6\u02dd\3\2\2\2\u02d7")
        buf.write("\u02d8\f\3\2\2\u02d8\u02d9\5\u00f4{\2\u02d9\u02da\7\16")
        buf.write("\2\2\u02da\u02dc\3\2\2\2\u02db\u02d7\3\2\2\2\u02dc\u02df")
        buf.write("\3\2\2\2\u02dd\u02db\3\2\2\2\u02dd\u02de\3\2\2\2\u02de")
        buf.write(")\3\2\2\2\u02df\u02dd\3\2\2\2\u02e0\u02e5\7G\2\2\u02e1")
        buf.write("\u02e3\7z\2\2\u02e2\u02e1\3\2\2\2\u02e2\u02e3\3\2\2\2")
        buf.write("\u02e3\u02e4\3\2\2\2\u02e4\u02e6\5\u00b8]\2\u02e5\u02e2")
        buf.write("\3\2\2\2\u02e5\u02e6\3\2\2\2\u02e6\u02e7\3\2\2\2\u02e7")
        buf.write("\u02e8\7w\2\2\u02e8\u02e9\5\u00caf\2\u02e9\u02eb\7\22")
        buf.write("\2\2\u02ea\u02ec\5\u00dep\2\u02eb\u02ea\3\2\2\2\u02eb")
        buf.write("\u02ec\3\2\2\2\u02ec\u02ed\3\2\2\2\u02ed\u02ee\7\23\2")
        buf.write("\2\u02ee\u02ef\7\16\2\2\u02ef+\3\2\2\2\u02f0\u02f2\7z")
        buf.write("\2\2\u02f1\u02f0\3\2\2\2\u02f1\u02f2\3\2\2\2\u02f2\u02f3")
        buf.write("\3\2\2\2\u02f3\u02f5\5\u00b8]\2\u02f4\u02f1\3\2\2\2\u02f4")
        buf.write("\u02f5\3\2\2\2\u02f5\u02f6\3\2\2\2\u02f6\u02f7\7w\2\2")
        buf.write("\u02f7\u02f8\5\u00caf\2\u02f8\u02fa\7\22\2\2\u02f9\u02fb")
        buf.write("\5\u00dep\2\u02fa\u02f9\3\2\2\2\u02fa\u02fb\3\2\2\2\u02fb")
        buf.write("\u02fc\3\2\2\2\u02fc\u02fd\7\23\2\2\u02fd\u02ff\7\26\2")
        buf.write("\2\u02fe\u0300\5\u010e\u0088\2\u02ff\u02fe\3\2\2\2\u02ff")
        buf.write("\u0300\3\2\2\2\u0300\u0301\3\2\2\2\u0301\u0302\7\27\2")
        buf.write("\2\u0302-\3\2\2\2\u0303\u0305\5\u00e8u\2\u0304\u0303\3")
        buf.write("\2\2\2\u0304\u0305\3\2\2\2\u0305\u0307\3\2\2\2\u0306\u0308")
        buf.write("\7{\2\2\u0307\u0306\3\2\2\2\u0307\u0308\3\2\2\2\u0308")
        buf.write("\u0309\3\2\2\2\u0309\u030a\7w\2\2\u030a\u030b\5\u00ca")
        buf.write("f\2\u030b\u030d\7\22\2\2\u030c\u030e\5\u00dep\2\u030d")
        buf.write("\u030c\3\2\2\2\u030d\u030e\3\2\2\2\u030e\u030f\3\2\2\2")
        buf.write("\u030f\u0310\7\23\2\2\u0310\u0311\7\26\2\2\u0311\u0312")
        buf.write("\5\u0106\u0084\2\u0312\u0313\7\27\2\2\u0313/\3\2\2\2\u0314")
        buf.write("\u0315\7\u0096\2\2\u0315\u0316\7w\2\2\u0316\u0317\7\u00ad")
        buf.write("\2\2\u0317\u0318\7\22\2\2\u0318\u0319\7\23\2\2\u0319\u031a")
        buf.write("\7\26\2\2\u031a\u031b\5\u010e\u0088\2\u031b\u031c\7\27")
        buf.write("\2\2\u031c\u0324\7\u009c\2\2\u031d\u031e\7\26\2\2\u031e")
        buf.write("\u031f\5\u0110\u0089\2\u031f\u0320\7\27\2\2\u0320\u0325")
        buf.write("\3\2\2\2\u0321\u0322\5\u00dco\2\u0322\u0323\7\16\2\2\u0323")
        buf.write("\u0325\3\2\2\2\u0324\u031d\3\2\2\2\u0324\u0321\3\2\2\2")
        buf.write("\u0325\61\3\2\2\2\u0326\u0327\5`\61\2\u0327\u0328\7\16")
        buf.write("\2\2\u0328\63\3\2\2\2\u0329\u032e\5\u00e8u\2\u032a\u032b")
        buf.write("\7\22\2\2\u032b\u032c\5\u0100\u0081\2\u032c\u032d\7\23")
        buf.write("\2\2\u032d\u032f\3\2\2\2\u032e\u032a\3\2\2\2\u032e\u032f")
        buf.write("\3\2\2\2\u032f\u0330\3\2\2\2\u0330\u0333\5\u00d6l\2\u0331")
        buf.write("\u0332\7*\2\2\u0332\u0334\5\u0122\u0092\2\u0333\u0331")
        buf.write("\3\2\2\2\u0333\u0334\3\2\2\2\u0334\65\3\2\2\2\u0335\u033d")
        buf.write("\58\35\2\u0336\u033a\7\26\2\2\u0337\u0338\5\u010e\u0088")
        buf.write("\2\u0338\u0339\7\27\2\2\u0339\u033b\3\2\2\2\u033a\u0337")
        buf.write("\3\2\2\2\u033a\u033b\3\2\2\2\u033b\u033d\3\2\2\2\u033c")
        buf.write("\u0335\3\2\2\2\u033c\u0336\3\2\2\2\u033d\67\3\2\2\2\u033e")
        buf.write("\u0353\5\\/\2\u033f\u0353\5\u0086D\2\u0340\u0353\5\u008a")
        buf.write("F\2\u0341\u0353\5<\37\2\u0342\u0353\5x=\2\u0343\u0353")
        buf.write("\5:\36\2\u0344\u0353\5V,\2\u0345\u0353\5X-\2\u0346\u0353")
        buf.write("\5L\'\2\u0347\u0353\5B\"\2\u0348\u0353\5F$\2\u0349\u0353")
        buf.write("\5J&\2\u034a\u0353\5H%\2\u034b\u0353\5R*\2\u034c\u0353")
        buf.write("\5P)\2\u034d\u0353\5r:\2\u034e\u0353\5> \2\u034f\u0353")
        buf.write("\5@!\2\u0350\u0353\5,\27\2\u0351\u0353\5\u0104\u0083\2")
        buf.write("\u0352\u033e\3\2\2\2\u0352\u033f\3\2\2\2\u0352\u0340\3")
        buf.write("\2\2\2\u0352\u0341\3\2\2\2\u0352\u0342\3\2\2\2\u0352\u0343")
        buf.write("\3\2\2\2\u0352\u0344\3\2\2\2\u0352\u0345\3\2\2\2\u0352")
        buf.write("\u0346\3\2\2\2\u0352\u0347\3\2\2\2\u0352\u0348\3\2\2\2")
        buf.write("\u0352\u0349\3\2\2\2\u0352\u034a\3\2\2\2\u0352\u034b\3")
        buf.write("\2\2\2\u0352\u034c\3\2\2\2\u0352\u034d\3\2\2\2\u0352\u034e")
        buf.write("\3\2\2\2\u0352\u034f\3\2\2\2\u0352\u0350\3\2\2\2\u0352")
        buf.write("\u0351\3\2\2\2\u03539\3\2\2\2\u0354\u0355\7l\2\2\u0355")
        buf.write("\u0356\7\22\2\2\u0356\u0357\7\23\2\2\u0357\u0358\7\16")
        buf.write("\2\2\u0358;\3\2\2\2\u0359\u035a\7]\2\2\u035a\u035b\7\22")
        buf.write("\2\2\u035b\u035c\5\u00b4[\2\u035c\u0363\7\23\2\2\u035d")
        buf.write("\u035e\7J\2\2\u035e\u035f\7\u0093\2\2\u035f\u0360\7\22")
        buf.write("\2\2\u0360\u0361\5\u00b4[\2\u0361\u0362\7\23\2\2\u0362")
        buf.write("\u0364\3\2\2\2\u0363\u035d\3\2\2\2\u0363\u0364\3\2\2\2")
        buf.write("\u0364\u036b\3\2\2\2\u0365\u0366\7\u0093\2\2\u0366\u0367")
        buf.write("\7\22\2\2\u0367\u0368\5\u00b4[\2\u0368\u0369\7\23\2\2")
        buf.write("\u0369\u036b\3\2\2\2\u036a\u0359\3\2\2\2\u036a\u0365\3")
        buf.write("\2\2\2\u036b\u0372\3\2\2\2\u036c\u036d\7\u0097\2\2\u036d")
        buf.write("\u036e\7\26\2\2\u036e\u036f\5\u010e\u0088\2\u036f\u0370")
        buf.write("\7\27\2\2\u0370\u0373\3\2\2\2\u0371\u0373\7\16\2\2\u0372")
        buf.write("\u036c\3\2\2\2\u0372\u0371\3\2\2\2\u0373=\3\2\2\2\u0374")
        buf.write("\u0375\7\u009e\2\2\u0375\u0376\7\22\2\2\u0376\u0377\5")
        buf.write("\u0136\u009c\2\u0377\u0378\7\23\2\2\u0378\u0379\5\66\34")
        buf.write("\2\u0379?\3\2\2\2\u037a\u037b\7\u009e\2\2\u037b\u037c")
        buf.write("\7\22\2\2\u037c\u037d\5\u00dan\2\u037d\u037e\7\23\2\2")
        buf.write("\u037e\u037f\5\66\34\2\u037fA\3\2\2\2\u0380\u0381\7\u0095")
        buf.write("\2\2\u0381\u0382\7\22\2\2\u0382\u0383\5`\61\2\u0383\u0384")
        buf.write("\7\23\2\2\u0384\u0385\7\26\2\2\u0385\u038b\5\u0112\u008a")
        buf.write("\2\u0386\u0387\7[\2\2\u0387\u0389\7\r\2\2\u0388\u038a")
        buf.write("\5\u010e\u0088\2\u0389\u0388\3\2\2\2\u0389\u038a\3\2\2")
        buf.write("\2\u038a\u038c\3\2\2\2\u038b\u0386\3\2\2\2\u038b\u038c")
        buf.write("\3\2\2\2\u038c\u038d\3\2\2\2\u038d\u038e\7\27\2\2\u038e")
        buf.write("C\3\2\2\2\u038f\u0390\7T\2\2\u0390\u0391\5\u0118\u008d")
        buf.write("\2\u0391\u0392\7\r\2\2\u0392\u0393\5\u010e\u0088\2\u0393")
        buf.write("\u039b\3\2\2\2\u0394\u0395\7T\2\2\u0395\u0396\7r\2\2\u0396")
        buf.write("\u0397\5\u0116\u008c\2\u0397\u0398\7\r\2\2\u0398\u0399")
        buf.write("\5\u010e\u0088\2\u0399\u039b\3\2\2\2\u039a\u038f\3\2\2")
        buf.write("\2\u039a\u0394\3\2\2\2\u039bE\3\2\2\2\u039c\u039d\7m\2")
        buf.write("\2\u039d\u039e\7a\2\2\u039e\u039f\7\22\2\2\u039f\u03a2")
        buf.write("\5\u00d6l\2\u03a0\u03a1\7\17\2\2\u03a1\u03a3\5\u00d6l")
        buf.write("\2\u03a2\u03a0\3\2\2\2\u03a2\u03a3\3\2\2\2\u03a3\u03a4")
        buf.write("\3\2\2\2\u03a4\u03a5\7r\2\2\u03a5\u03a6\5`\61\2\u03a6")
        buf.write("\u03a7\7\23\2\2\u03a7\u03a8\5\66\34\2\u03a8G\3\2\2\2\u03a9")
        buf.write("\u03aa\7_\2\2\u03aa\u03ac\7\26\2\2\u03ab\u03ad\5\u010e")
        buf.write("\u0088\2\u03ac\u03ab\3\2\2\2\u03ac\u03ad\3\2\2\2\u03ad")
        buf.write("\u03ae\3\2\2\2\u03ae\u03af\7\27\2\2\u03af\u03b0\7\u00a1")
        buf.write("\2\2\u03b0\u03b1\7\22\2\2\u03b1\u03b2\5`\61\2\u03b2\u03b3")
        buf.write("\7\23\2\2\u03b3\u03b4\7\16\2\2\u03b4I\3\2\2\2\u03b5\u03b6")
        buf.write("\7\u00a1\2\2\u03b6\u03b7\7\22\2\2\u03b7\u03b8\5`\61\2")
        buf.write("\u03b8\u03b9\7\23\2\2\u03b9\u03ba\5\66\34\2\u03baK\3\2")
        buf.write("\2\2\u03bb\u03bc\7q\2\2\u03bc\u03bd\7\22\2\2\u03bd\u03be")
        buf.write("\5`\61\2\u03be\u03bf\7\23\2\2\u03bf\u03c1\5\66\34\2\u03c0")
        buf.write("\u03c2\5N(\2\u03c1\u03c0\3\2\2\2\u03c1\u03c2\3\2\2\2\u03c2")
        buf.write("\u03c5\3\2\2\2\u03c3\u03c4\7b\2\2\u03c4\u03c6\5\66\34")
        buf.write("\2\u03c5\u03c3\3\2\2\2\u03c5\u03c6\3\2\2\2\u03c6M\3\2")
        buf.write("\2\2\u03c7\u03c8\b(\1\2\u03c8\u03c9\7b\2\2\u03c9\u03ca")
        buf.write("\7q\2\2\u03ca\u03cb\7\22\2\2\u03cb\u03cc\5`\61\2\u03cc")
        buf.write("\u03cd\7\23\2\2\u03cd\u03ce\5\66\34\2\u03ce\u03d9\3\2")
        buf.write("\2\2\u03cf\u03d0\f\3\2\2\u03d0\u03d1\7b\2\2\u03d1\u03d2")
        buf.write("\7q\2\2\u03d2\u03d3\7\22\2\2\u03d3\u03d4\5`\61\2\u03d4")
        buf.write("\u03d5\7\23\2\2\u03d5\u03d6\5\66\34\2\u03d6\u03d8\3\2")
        buf.write("\2\2\u03d7\u03cf\3\2\2\2\u03d8\u03db\3\2\2\2\u03d9\u03d7")
        buf.write("\3\2\2\2\u03d9\u03da\3\2\2\2\u03daO\3\2\2\2\u03db\u03d9")
        buf.write("\3\2\2\2\u03dc\u03dd\7\u0099\2\2\u03dd\u03de\5`\61\2\u03de")
        buf.write("\u03df\7\16\2\2\u03dfQ\3\2\2\2\u03e0\u03e1\7\u009b\2\2")
        buf.write("\u03e1\u03e2\7\22\2\2\u03e2\u03e3\5\u00d6l\2\u03e3\u03e4")
        buf.write("\7\23\2\2\u03e4\u03e6\7\26\2\2\u03e5\u03e7\5\u010e\u0088")
        buf.write("\2\u03e6\u03e5\3\2\2\2\u03e6\u03e7\3\2\2\2\u03e7\u03e8")
        buf.write("\3\2\2\2\u03e8\u03ea\7\27\2\2\u03e9\u03eb\5\u0114\u008b")
        buf.write("\2\u03ea\u03e9\3\2\2\2\u03ea\u03eb\3\2\2\2\u03eb\u03f5")
        buf.write("\3\2\2\2\u03ec\u03ed\7U\2\2\u03ed\u03ee\7\22\2\2\u03ee")
        buf.write("\u03ef\7K\2\2\u03ef\u03f0\7\23\2\2\u03f0\u03f2\7\26\2")
        buf.write("\2\u03f1\u03f3\5\u010e\u0088\2\u03f2\u03f1\3\2\2\2\u03f2")
        buf.write("\u03f3\3\2\2\2\u03f3\u03f4\3\2\2\2\u03f4\u03f6\7\27\2")
        buf.write("\2\u03f5\u03ec\3\2\2\2\u03f5\u03f6\3\2\2\2\u03f6\u03fd")
        buf.write("\3\2\2\2\u03f7\u03f8\7k\2\2\u03f8\u03fa\7\26\2\2\u03f9")
        buf.write("\u03fb\5\u010e\u0088\2\u03fa\u03f9\3\2\2\2\u03fa\u03fb")
        buf.write("\3\2\2\2\u03fb\u03fc\3\2\2\2\u03fc\u03fe\7\27\2\2\u03fd")
        buf.write("\u03f7\3\2\2\2\u03fd\u03fe\3\2\2\2\u03feS\3\2\2\2\u03ff")
        buf.write("\u0400\7U\2\2\u0400\u0401\7\22\2\2\u0401\u0402\5\u00dc")
        buf.write("o\2\u0402\u0403\7\23\2\2\u0403\u0405\7\26\2\2\u0404\u0406")
        buf.write("\5\u010e\u0088\2\u0405\u0404\3\2\2\2\u0405\u0406\3\2\2")
        buf.write("\2\u0406\u0407\3\2\2\2\u0407\u0408\7\27\2\2\u0408\u0415")
        buf.write("\3\2\2\2\u0409\u040a\7U\2\2\u040a\u040b\7r\2\2\u040b\u040c")
        buf.write("\7\22\2\2\u040c\u040d\5\u00acW\2\u040d\u040e\7\23\2\2")
        buf.write("\u040e\u0410\7\26\2\2\u040f\u0411\5\u010e\u0088\2\u0410")
        buf.write("\u040f\3\2\2\2\u0410\u0411\3\2\2\2\u0411\u0412\3\2\2\2")
        buf.write("\u0412\u0413\7\27\2\2\u0413\u0415\3\2\2\2\u0414\u03ff")
        buf.write("\3\2\2\2\u0414\u0409\3\2\2\2\u0415U\3\2\2\2\u0416\u0417")
        buf.write("\7R\2\2\u0417\u0418\7\16\2\2\u0418W\3\2\2\2\u0419\u041b")
        buf.write("\7\u008b\2\2\u041a\u041c\5`\61\2\u041b\u041a\3\2\2\2\u041b")
        buf.write("\u041c\3\2\2\2\u041c\u041d\3\2\2\2\u041d\u041e\7\16\2")
        buf.write("\2\u041eY\3\2\2\2\u041f\u0420\5\u00caf\2\u0420\u0422\7")
        buf.write("\22\2\2\u0421\u0423\5\u0082B\2\u0422\u0421\3\2\2\2\u0422")
        buf.write("\u0423\3\2\2\2\u0423\u0424\3\2\2\2\u0424\u0425\7\23\2")
        buf.write("\2\u0425[\3\2\2\2\u0426\u0427\5h\65\2\u0427\u0428\7\21")
        buf.write("\2\2\u0428\u042a\3\2\2\2\u0429\u0426\3\2\2\2\u0429\u042a")
        buf.write("\3\2\2\2\u042a\u042b\3\2\2\2\u042b\u0436\5Z.\2\u042c\u042f")
        buf.write("\7\u0097\2\2\u042d\u042e\7\u009e\2\2\u042e\u0430\5\u00d6")
        buf.write("l\2\u042f\u042d\3\2\2\2\u042f\u0430\3\2\2\2\u0430\u0431")
        buf.write("\3\2\2\2\u0431\u0432\7\26\2\2\u0432\u0433\5\u010e\u0088")
        buf.write("\2\u0433\u0434\7\27\2\2\u0434\u0437\3\2\2\2\u0435\u0437")
        buf.write("\7\16\2\2\u0436\u042c\3\2\2\2\u0436\u0435\3\2\2\2\u0437")
        buf.write("]\3\2\2\2\u0438\u0439\5\u01f0\u00f9\2\u0439_\3\2\2\2\u043a")
        buf.write("\u043b\b\61\1\2\u043b\u0455\5\u01f0\u00f9\2\u043c\u0455")
        buf.write("\5\u01d2\u00ea\2\u043d\u0455\5h\65\2\u043e\u0455\5j\66")
        buf.write("\2\u043f\u0455\5\u013c\u009f\2\u0440\u0441\7\37\2\2\u0441")
        buf.write("\u0455\5`\61&\u0442\u0443\7\31\2\2\u0443\u0455\5`\61%")
        buf.write("\u0444\u0445\7\22\2\2\u0445\u0446\5\u00e8u\2\u0446\u0447")
        buf.write("\7\23\2\2\u0447\u0448\5`\61\37\u0448\u0455\3\2\2\2\u0449")
        buf.write("\u044a\7>\2\2\u044a\u044b\7\22\2\2\u044b\u044c\5`\61\2")
        buf.write("\u044c\u044d\7\23\2\2\u044d\u0455\3\2\2\2\u044e\u044f")
        buf.write("\7f\2\2\u044f\u0450\7\22\2\2\u0450\u0451\5\u00d6l\2\u0451")
        buf.write("\u0452\7\23\2\2\u0452\u0455\3\2\2\2\u0453\u0455\5d\63")
        buf.write("\2\u0454\u043a\3\2\2\2\u0454\u043c\3\2\2\2\u0454\u043d")
        buf.write("\3\2\2\2\u0454\u043e\3\2\2\2\u0454\u043f\3\2\2\2\u0454")
        buf.write("\u0440\3\2\2\2\u0454\u0442\3\2\2\2\u0454\u0444\3\2\2\2")
        buf.write("\u0454\u0449\3\2\2\2\u0454\u044e\3\2\2\2\u0454\u0453\3")
        buf.write("\2\2\2\u0455\u04ca\3\2\2\2\u0456\u0457\f$\2\2\u0457\u0458")
        buf.write("\5\u015c\u00af\2\u0458\u0459\5`\61%\u0459\u04c9\3\2\2")
        buf.write("\2\u045a\u045b\f#\2\2\u045b\u045c\5\u015e\u00b0\2\u045c")
        buf.write("\u045d\5`\61$\u045d\u04c9\3\2\2\2\u045e\u045f\f\"\2\2")
        buf.write("\u045f\u0460\5\u0162\u00b2\2\u0460\u0461\5`\61#\u0461")
        buf.write("\u04c9\3\2\2\2\u0462\u0463\f!\2\2\u0463\u0464\5\u0160")
        buf.write("\u00b1\2\u0464\u0465\5`\61\"\u0465\u04c9\3\2\2\2\u0466")
        buf.write("\u0467\f \2\2\u0467\u0468\t\2\2\2\u0468\u04c9\5`\61!\u0469")
        buf.write("\u046a\f\36\2\2\u046a\u046b\7&\2\2\u046b\u04c9\5`\61\37")
        buf.write("\u046c\u046d\f\35\2\2\u046d\u046e\7\'\2\2\u046e\u04c9")
        buf.write("\5`\61\36\u046f\u0470\f\34\2\2\u0470\u0471\7$\2\2\u0471")
        buf.write("\u04c9\5`\61\35\u0472\u0473\f\33\2\2\u0473\u0474\7%\2")
        buf.write("\2\u0474\u04c9\5`\61\34\u0475\u0476\f\30\2\2\u0476\u0477")
        buf.write("\7u\2\2\u0477\u0478\7}\2\2\u0478\u04c9\5`\61\31\u0479")
        buf.write("\u047a\f\27\2\2\u047a\u047b\7u\2\2\u047b\u04c9\5`\61\30")
        buf.write("\u047c\u047d\f\26\2\2\u047d\u047e\7,\2\2\u047e\u04c9\5")
        buf.write("`\61\27\u047f\u0480\f\25\2\2\u0480\u0481\7+\2\2\u0481")
        buf.write("\u04c9\5`\61\26\u0482\u0483\f\24\2\2\u0483\u0484\7-\2")
        buf.write("\2\u0484\u04c9\5`\61\25\u0485\u0486\f\23\2\2\u0486\u0487")
        buf.write("\7Y\2\2\u0487\u04c9\5`\61\24\u0488\u0489\f\22\2\2\u0489")
        buf.write("\u048a\7r\2\2\u048a\u04c9\5`\61\23\u048b\u048c\f\21\2")
        buf.write("\2\u048c\u048d\7p\2\2\u048d\u04c9\5`\61\22\u048e\u048f")
        buf.write("\f\20\2\2\u048f\u0490\7p\2\2\u0490\u0491\7H\2\2\u0491")
        buf.write("\u04c9\5`\61\21\u0492\u0493\f\17\2\2\u0493\u0494\7p\2")
        buf.write("\2\u0494\u0495\7K\2\2\u0495\u04c9\5`\61\20\u0496\u0497")
        buf.write("\f\16\2\2\u0497\u0498\7}\2\2\u0498\u0499\7Y\2\2\u0499")
        buf.write("\u04c9\5`\61\17\u049a\u049b\f\r\2\2\u049b\u049c\7}\2\2")
        buf.write("\u049c\u049d\7r\2\2\u049d\u04c9\5`\61\16\u049e\u049f\f")
        buf.write("\f\2\2\u049f\u04a0\7}\2\2\u04a0\u04a1\7p\2\2\u04a1\u04c9")
        buf.write("\5`\61\r\u04a2\u04a3\f\13\2\2\u04a3\u04a4\7}\2\2\u04a4")
        buf.write("\u04a5\7p\2\2\u04a5\u04a6\7H\2\2\u04a6\u04c9\5`\61\f\u04a7")
        buf.write("\u04a8\f\n\2\2\u04a8\u04a9\7}\2\2\u04a9\u04aa\7p\2\2\u04aa")
        buf.write("\u04ab\7K\2\2\u04ab\u04c9\5`\61\13\u04ac\u04ad\f\t\2\2")
        buf.write("\u04ad\u04ae\7\35\2\2\u04ae\u04c9\5`\61\n\u04af\u04b0")
        buf.write("\f\b\2\2\u04b0\u04b1\7\33\2\2\u04b1\u04c9\5`\61\t\u04b2")
        buf.write("\u04b3\f\7\2\2\u04b3\u04b4\7\30\2\2\u04b4\u04b5\5`\61")
        buf.write("\2\u04b5\u04b6\7\r\2\2\u04b6\u04b7\5`\61\b\u04b7\u04c9")
        buf.write("\3\2\2\2\u04b8\u04b9\f\32\2\2\u04b9\u04ba\7u\2\2\u04ba")
        buf.write("\u04bb\7}\2\2\u04bb\u04c9\5b\62\2\u04bc\u04bd\f\31\2\2")
        buf.write("\u04bd\u04be\7u\2\2\u04be\u04c9\5b\62\2\u04bf\u04c0\f")
        buf.write("\3\2\2\u04c0\u04c1\7m\2\2\u04c1\u04c2\7a\2\2\u04c2\u04c3")
        buf.write("\7\22\2\2\u04c3\u04c4\5\u00d6l\2\u04c4\u04c5\7r\2\2\u04c5")
        buf.write("\u04c6\5`\61\2\u04c6\u04c7\7\23\2\2\u04c7\u04c9\3\2\2")
        buf.write("\2\u04c8\u0456\3\2\2\2\u04c8\u045a\3\2\2\2\u04c8\u045e")
        buf.write("\3\2\2\2\u04c8\u0462\3\2\2\2\u04c8\u0466\3\2\2\2\u04c8")
        buf.write("\u0469\3\2\2\2\u04c8\u046c\3\2\2\2\u04c8\u046f\3\2\2\2")
        buf.write("\u04c8\u0472\3\2\2\2\u04c8\u0475\3\2\2\2\u04c8\u0479\3")
        buf.write("\2\2\2\u04c8\u047c\3\2\2\2\u04c8\u047f\3\2\2\2\u04c8\u0482")
        buf.write("\3\2\2\2\u04c8\u0485\3\2\2\2\u04c8\u0488\3\2\2\2\u04c8")
        buf.write("\u048b\3\2\2\2\u04c8\u048e\3\2\2\2\u04c8\u0492\3\2\2\2")
        buf.write("\u04c8\u0496\3\2\2\2\u04c8\u049a\3\2\2\2\u04c8\u049e\3")
        buf.write("\2\2\2\u04c8\u04a2\3\2\2\2\u04c8\u04a7\3\2\2\2\u04c8\u04ac")
        buf.write("\3\2\2\2\u04c8\u04af\3\2\2\2\u04c8\u04b2\3\2\2\2\u04c8")
        buf.write("\u04b8\3\2\2\2\u04c8\u04bc\3\2\2\2\u04c8\u04bf\3\2\2\2")
        buf.write("\u04c9\u04cc\3\2\2\2\u04ca\u04c8\3\2\2\2\u04ca\u04cb\3")
        buf.write("\2\2\2\u04cba\3\2\2\2\u04cc\u04ca\3\2\2\2\u04cd\u04ce")
        buf.write("\6\62#\3\u04ce\u04cf\7\u00a9\2\2\u04cf\u04d0\5\u00e8u")
        buf.write("\2\u04d0c\3\2\2\2\u04d1\u04d2\5\u00dan\2\u04d2e\3\2\2")
        buf.write("\2\u04d3\u04da\5l\67\2\u04d4\u04da\5\u0120\u0091\2\u04d5")
        buf.write("\u04da\5\u0122\u0092\2\u04d6\u04da\5\u00d2j\2\u04d7\u04da")
        buf.write("\5\u011c\u008f\2\u04d8\u04da\5\u011e\u0090\2\u04d9\u04d3")
        buf.write("\3\2\2\2\u04d9\u04d4\3\2\2\2\u04d9\u04d5\3\2\2\2\u04d9")
        buf.write("\u04d6\3\2\2\2\u04d9\u04d7\3\2\2\2\u04d9\u04d8\3\2\2\2")
        buf.write("\u04dag\3\2\2\2\u04db\u04dc\b\65\1\2\u04dc\u04dd\5f\64")
        buf.write("\2\u04dd\u04e2\3\2\2\2\u04de\u04df\f\3\2\2\u04df\u04e1")
        buf.write("\5|?\2\u04e0\u04de\3\2\2\2\u04e1\u04e4\3\2\2\2\u04e2\u04e0")
        buf.write("\3\2\2\2\u04e2\u04e3\3\2\2\2\u04e3i\3\2\2\2\u04e4\u04e2")
        buf.write("\3\2\2\2\u04e5\u04e6\b\66\1\2\u04e6\u04e7\7z\2\2\u04e7")
        buf.write("\u04e8\5\u00d2j\2\u04e8\u04ed\3\2\2\2\u04e9\u04ea\f\3")
        buf.write("\2\2\u04ea\u04ec\5|?\2\u04eb\u04e9\3\2\2\2\u04ec\u04ef")
        buf.write("\3\2\2\2\u04ed\u04eb\3\2\2\2\u04ed\u04ee\3\2\2\2\u04ee")
        buf.write("k\3\2\2\2\u04ef\u04ed\3\2\2\2\u04f0\u04fa\5n8\2\u04f1")
        buf.write("\u04fa\5p9\2\u04f2\u04fa\5t;\2\u04f3\u04fa\5v<\2\u04f4")
        buf.write("\u04fa\5\u0144\u00a3\2\u04f5\u04fa\5\u0146\u00a4\2\u04f6")
        buf.write("\u04fa\5z>\2\u04f7\u04fa\5Z.\2\u04f8\u04fa\5~@\2\u04f9")
        buf.write("\u04f0\3\2\2\2\u04f9\u04f1\3\2\2\2\u04f9\u04f2\3\2\2\2")
        buf.write("\u04f9\u04f3\3\2\2\2\u04f9\u04f4\3\2\2\2\u04f9\u04f5\3")
        buf.write("\2\2\2\u04f9\u04f6\3\2\2\2\u04f9\u04f7\3\2\2\2\u04f9\u04f8")
        buf.write("\3\2\2\2\u04fam\3\2\2\2\u04fb\u04fc\7@\2\2\u04fc\u04fd")
        buf.write("\7\22\2\2\u04fd\u04fe\5`\61\2\u04fe\u04ff\7\23\2\2\u04ff")
        buf.write("o\3\2\2\2\u0500\u0501\7?\2\2\u0501\u0503\7\22\2\2\u0502")
        buf.write("\u0504\5`\61\2\u0503\u0502\3\2\2\2\u0503\u0504\3\2\2\2")
        buf.write("\u0504\u0505\3\2\2\2\u0505\u0506\7\23\2\2\u0506q\3\2\2")
        buf.write("\2\u0507\u0508\7\u00a2\2\2\u0508\u0509\7\22\2\2\u0509")
        buf.write("\u050a\5`\61\2\u050a\u050b\7\23\2\2\u050b\u050c\7\u009a")
        buf.write("\2\2\u050c\u050d\5`\61\2\u050d\u050e\7\16\2\2\u050es\3")
        buf.write("\2\2\2\u050f\u0510\7j\2\2\u0510\u0511\7\22\2\2\u0511\u0512")
        buf.write("\5`\61\2\u0512\u0518\7\23\2\2\u0513\u0514\7\u009e\2\2")
        buf.write("\u0514\u0515\7\22\2\2\u0515\u0516\5\u00d6l\2\u0516\u0517")
        buf.write("\7\23\2\2\u0517\u0519\3\2\2\2\u0518\u0513\3\2\2\2\u0518")
        buf.write("\u0519\3\2\2\2\u0519\u051a\3\2\2\2\u051a\u051b\7\u00a0")
        buf.write("\2\2\u051b\u051c\7\22\2\2\u051c\u051d\5`\61\2\u051d\u051e")
        buf.write("\7\23\2\2\u051eu\3\2\2\2\u051f\u0520\7i\2\2\u0520\u0525")
        buf.write("\7\u0081\2\2\u0521\u0522\7\22\2\2\u0522\u0523\5\u00c0")
        buf.write("a\2\u0523\u0524\7\23\2\2\u0524\u0526\3\2\2\2\u0525\u0521")
        buf.write("\3\2\2\2\u0525\u0526\3\2\2\2\u0526\u0527\3\2\2\2\u0527")
        buf.write("\u0528\7\u00a0\2\2\u0528\u0529\7\22\2\2\u0529\u052a\5")
        buf.write("`\61\2\u052a\u052b\7\23\2\2\u052b\u0553\3\2\2\2\u052c")
        buf.write("\u0541\7i\2\2\u052d\u0532\7H\2\2\u052e\u052f\7\22\2\2")
        buf.write("\u052f\u0530\5\u00c0a\2\u0530\u0531\7\23\2\2\u0531\u0533")
        buf.write("\3\2\2\2\u0532\u052e\3\2\2\2\u0532\u0533\3\2\2\2\u0533")
        buf.write("\u0542\3\2\2\2\u0534\u0535\7\22\2\2\u0535\u0536\5\u00c0")
        buf.write("a\2\u0536\u0537\7\23\2\2\u0537\u0539\3\2\2\2\u0538\u0534")
        buf.write("\3\2\2\2\u0538\u0539\3\2\2\2\u0539\u053a\3\2\2\2\u053a")
        buf.write("\u053b\7\u008d\2\2\u053b\u053c\7\22\2\2\u053c\u053d\5")
        buf.write("`\61\2\u053d\u053e\7\u009a\2\2\u053e\u053f\5`\61\2\u053f")
        buf.write("\u0540\7\23\2\2\u0540\u0542\3\2\2\2\u0541\u052d\3\2\2")
        buf.write("\2\u0541\u0538\3\2\2\2\u0542\u0548\3\2\2\2\u0543\u0544")
        buf.write("\7\u00a0\2\2\u0544\u0545\7\22\2\2\u0545\u0546\5`\61\2")
        buf.write("\u0546\u0547\7\23\2\2\u0547\u0549\3\2\2\2\u0548\u0543")
        buf.write("\3\2\2\2\u0548\u0549\3\2\2\2\u0549\u0550\3\2\2\2\u054a")
        buf.write("\u054b\7\u0084\2\2\u054b\u054c\7S\2\2\u054c\u054d\7\22")
        buf.write("\2\2\u054d\u054e\5\u0148\u00a5\2\u054e\u054f\7\23\2\2")
        buf.write("\u054f\u0551\3\2\2\2\u0550\u054a\3\2\2\2\u0550\u0551\3")
        buf.write("\2\2\2\u0551\u0553\3\2\2\2\u0552\u051f\3\2\2\2\u0552\u052c")
        buf.write("\3\2\2\2\u0553w\3\2\2\2\u0554\u0555\7i\2\2\u0555\u055a")
        buf.write("\7\u0081\2\2\u0556\u0557\7\22\2\2\u0557\u0558\5\u00c0")
        buf.write("a\2\u0558\u0559\7\23\2\2\u0559\u055b\3\2\2\2\u055a\u0556")
        buf.write("\3\2\2\2\u055a\u055b\3\2\2\2\u055b\u055c\3\2\2\2\u055c")
        buf.write("\u055d\7\u00a0\2\2\u055d\u055e\7\22\2\2\u055e\u055f\5")
        buf.write("`\61\2\u055f\u0560\7\23\2\2\u0560\u0561\7\u0097\2\2\u0561")
        buf.write("\u0562\7\u009e\2\2\u0562\u0563\5\u00d6l\2\u0563\u0564")
        buf.write("\7\26\2\2\u0564\u0565\5\u010e\u0088\2\u0565\u0566\7\27")
        buf.write("\2\2\u0566\u0595\3\2\2\2\u0567\u057c\7i\2\2\u0568\u056d")
        buf.write("\7H\2\2\u0569\u056a\7\22\2\2\u056a\u056b\5\u00c0a\2\u056b")
        buf.write("\u056c\7\23\2\2\u056c\u056e\3\2\2\2\u056d\u0569\3\2\2")
        buf.write("\2\u056d\u056e\3\2\2\2\u056e\u057d\3\2\2\2\u056f\u0570")
        buf.write("\7\22\2\2\u0570\u0571\5\u00c0a\2\u0571\u0572\7\23\2\2")
        buf.write("\u0572\u0574\3\2\2\2\u0573\u056f\3\2\2\2\u0573\u0574\3")
        buf.write("\2\2\2\u0574\u0575\3\2\2\2\u0575\u0576\7\u008d\2\2\u0576")
        buf.write("\u0577\7\22\2\2\u0577\u0578\5`\61\2\u0578\u0579\7\u009a")
        buf.write("\2\2\u0579\u057a\5`\61\2\u057a\u057b\7\23\2\2\u057b\u057d")
        buf.write("\3\2\2\2\u057c\u0568\3\2\2\2\u057c\u0573\3\2\2\2\u057d")
        buf.write("\u0583\3\2\2\2\u057e\u057f\7\u00a0\2\2\u057f\u0580\7\22")
        buf.write("\2\2\u0580\u0581\5`\61\2\u0581\u0582\7\23\2\2\u0582\u0584")
        buf.write("\3\2\2\2\u0583\u057e\3\2\2\2\u0583\u0584\3\2\2\2\u0584")
        buf.write("\u058b\3\2\2\2\u0585\u0586\7\u0084\2\2\u0586\u0587\7S")
        buf.write("\2\2\u0587\u0588\7\22\2\2\u0588\u0589\5\u0148\u00a5\2")
        buf.write("\u0589\u058a\7\23\2\2\u058a\u058c\3\2\2\2\u058b\u0585")
        buf.write("\3\2\2\2\u058b\u058c\3\2\2\2\u058c\u058d\3\2\2\2\u058d")
        buf.write("\u058e\7\u0097\2\2\u058e\u058f\7\u009e\2\2\u058f\u0590")
        buf.write("\5\u00d6l\2\u0590\u0591\7\26\2\2\u0591\u0592\5\u010e\u0088")
        buf.write("\2\u0592\u0593\7\27\2\2\u0593\u0595\3\2\2\2\u0594\u0554")
        buf.write("\3\2\2\2\u0594\u0567\3\2\2\2\u0595y\3\2\2\2\u0596\u0598")
        buf.write("\7\u0091\2\2\u0597\u0599\7^\2\2\u0598\u0597\3\2\2\2\u0598")
        buf.write("\u0599\3\2\2\2\u0599\u059a\3\2\2\2\u059a\u059b\7\22\2")
        buf.write("\2\u059b\u05a1\5h\65\2\u059c\u059d\7\17\2\2\u059d\u059e")
        buf.write("\5\u0152\u00aa\2\u059e\u059f\7*\2\2\u059f\u05a0\5\u0142")
        buf.write("\u00a2\2\u05a0\u05a2\3\2\2\2\u05a1\u059c\3\2\2\2\u05a1")
        buf.write("\u05a2\3\2\2\2\u05a2\u05a3\3\2\2\2\u05a3\u05a4\7\23\2")
        buf.write("\2\u05a4{\3\2\2\2\u05a5\u05a6\7\21\2\2\u05a6\u05b2\5\u00d4")
        buf.write("k\2\u05a7\u05a8\7\21\2\2\u05a8\u05b2\5Z.\2\u05a9\u05aa")
        buf.write("\7\24\2\2\u05aa\u05ab\5`\61\2\u05ab\u05ac\7\25\2\2\u05ac")
        buf.write("\u05b2\3\2\2\2\u05ad\u05ae\7\24\2\2\u05ae\u05af\5\u0134")
        buf.write("\u009b\2\u05af\u05b0\7\25\2\2\u05b0\u05b2\3\2\2\2\u05b1")
        buf.write("\u05a5\3\2\2\2\u05b1\u05a7\3\2\2\2\u05b1\u05a9\3\2\2\2")
        buf.write("\u05b1\u05ad\3\2\2\2\u05b2}\3\2\2\2\u05b3\u05b4\5\u00c0")
        buf.write("a\2\u05b4\u05b5\7\22\2\2\u05b5\u05b8\5\u0080A\2\u05b6")
        buf.write("\u05b7\7\17\2\2\u05b7\u05b9\5\u0082B\2\u05b8\u05b6\3\2")
        buf.write("\2\2\u05b8\u05b9\3\2\2\2\u05b9\u05ba\3\2\2\2\u05ba\u05bb")
        buf.write("\7\23\2\2\u05bb\u05c4\3\2\2\2\u05bc\u05bd\5\u00c0a\2\u05bd")
        buf.write("\u05bf\7\22\2\2\u05be\u05c0\5\u0082B\2\u05bf\u05be\3\2")
        buf.write("\2\2\u05bf\u05c0\3\2\2\2\u05c0\u05c1\3\2\2\2\u05c1\u05c2")
        buf.write("\7\23\2\2\u05c2\u05c4\3\2\2\2\u05c3\u05b3\3\2\2\2\u05c3")
        buf.write("\u05bc\3\2\2\2\u05c4\177\3\2\2\2\u05c5\u05c6\7n\2\2\u05c6")
        buf.write("\u05c7\5\u015a\u00ae\2\u05c7\u05c8\5`\61\2\u05c8\u05c9")
        buf.write("\6A&\3\u05c9\u0081\3\2\2\2\u05ca\u05cb\bB\1\2\u05cb\u05cc")
        buf.write("\5`\61\2\u05cc\u05cd\6B\'\3\u05cd\u05d0\3\2\2\2\u05ce")
        buf.write("\u05d0\5\u0084C\2\u05cf\u05ca\3\2\2\2\u05cf\u05ce\3\2")
        buf.write("\2\2\u05d0\u05d6\3\2\2\2\u05d1\u05d2\f\3\2\2\u05d2\u05d3")
        buf.write("\7\17\2\2\u05d3\u05d5\5\u0084C\2\u05d4\u05d1\3\2\2\2\u05d5")
        buf.write("\u05d8\3\2\2\2\u05d6\u05d4\3\2\2\2\u05d6\u05d7\3\2\2\2")
        buf.write("\u05d7\u0083\3\2\2\2\u05d8\u05d6\3\2\2\2\u05d9\u05dd\5")
        buf.write("\u00d6l\2\u05da\u05db\5\u015a\u00ae\2\u05db\u05dc\5`\61")
        buf.write("\2\u05dc\u05de\3\2\2\2\u05dd\u05da\3\2\2\2\u05dd\u05de")
        buf.write("\3\2\2\2\u05de\u0085\3\2\2\2\u05df\u05e0\5\u0138\u009d")
        buf.write("\2\u05e0\u05e1\5\u015a\u00ae\2\u05e1\u05e2\5`\61\2\u05e2")
        buf.write("\u05e3\7\16\2\2\u05e3\u0087\3\2\2\2\u05e4\u05e5\7\21\2")
        buf.write("\2\u05e5\u05eb\5\u00d6l\2\u05e6\u05e7\7\24\2\2\u05e7\u05e8")
        buf.write("\5`\61\2\u05e8\u05e9\7\25\2\2\u05e9\u05eb\3\2\2\2\u05ea")
        buf.write("\u05e4\3\2\2\2\u05ea\u05e6\3\2\2\2\u05eb\u0089\3\2\2\2")
        buf.write("\u05ec\u05ed\5\u00fe\u0080\2\u05ed\u05ee\5\u015a\u00ae")
        buf.write("\2\u05ee\u05ef\5`\61\2\u05ef\u05f0\7\16\2\2\u05f0\u008b")
        buf.write("\3\2\2\2\u05f1\u05f2\5\u00e8u\2\u05f2\u008d\3\2\2\2\u05f3")
        buf.write("\u05f4\7\177\2\2\u05f4\u008f\3\2\2\2\u05f5\u05f7\t\3\2")
        buf.write("\2\u05f6\u05f5\3\2\2\2\u05f7\u05fa\3\2\2\2\u05f8\u05f6")
        buf.write("\3\2\2\2\u05f8\u05f9\3\2\2\2\u05f9\u0091\3\2\2\2\u05fa")
        buf.write("\u05f8\3\2\2\2\u05fb\u05ff\5\u0098M\2\u05fc\u05ff\58\35")
        buf.write("\2\u05fd\u05ff\5`\61\2\u05fe\u05fb\3\2\2\2\u05fe\u05fc")
        buf.write("\3\2\2\2\u05fe\u05fd\3\2\2\2\u05ff\u0093\3\2\2\2\u0600")
        buf.write("\u0602\5\u0096L\2\u0601\u0600\3\2\2\2\u0601\u0602\3\2")
        buf.write("\2\2\u0602\u0603\3\2\2\2\u0603\u0604\5\u0164\u00b3\2\u0604")
        buf.write("\u0605\7\2\2\3\u0605\u0095\3\2\2\2\u0606\u060c\5\u0098")
        buf.write("M\2\u0607\u0608\5\u0166\u00b4\2\u0608\u0609\5\u0098M\2")
        buf.write("\u0609\u060b\3\2\2\2\u060a\u0607\3\2\2\2\u060b\u060e\3")
        buf.write("\2\2\2\u060c\u060a\3\2\2\2\u060c\u060d\3\2\2\2\u060d\u0097")
        buf.write("\3\2\2\2\u060e\u060c\3\2\2\2\u060f\u0610\5\u0104\u0083")
        buf.write("\2\u0610\u0611\5\u0166\u00b4\2\u0611\u0613\3\2\2\2\u0612")
        buf.write("\u060f\3\2\2\2\u0613\u0616\3\2\2\2\u0614\u0612\3\2\2\2")
        buf.write("\u0614\u0615\3\2\2\2\u0615\u061c\3\2\2\2\u0616\u0614\3")
        buf.write("\2\2\2\u0617\u0618\5\u009aN\2\u0618\u0619\5\u0166\u00b4")
        buf.write("\2\u0619\u061b\3\2\2\2\u061a\u0617\3\2\2\2\u061b\u061e")
        buf.write("\3\2\2\2\u061c\u061a\3\2\2\2\u061c\u061d\3\2\2\2\u061d")
        buf.write("\u0625\3\2\2\2\u061e\u061c\3\2\2\2\u061f\u0626\5\n\6\2")
        buf.write("\u0620\u0626\5\u00c4c\2\u0621\u0626\5\u00a4S\2\u0622\u0626")
        buf.write("\5\u00a6T\2\u0623\u0626\5\u00c6d\2\u0624\u0626\5\u0102")
        buf.write("\u0082\2\u0625\u061f\3\2\2\2\u0625\u0620\3\2\2\2\u0625")
        buf.write("\u0621\3\2\2\2\u0625\u0622\3\2\2\2\u0625\u0623\3\2\2\2")
        buf.write("\u0625\u0624\3\2\2\2\u0626\u0099\3\2\2\2\u0627\u0636\5")
        buf.write("\u009cO\2\u0628\u0632\7\22\2\2\u0629\u0633\5\u00a2R\2")
        buf.write("\u062a\u062f\5\u009eP\2\u062b\u062c\7\17\2\2\u062c\u062e")
        buf.write("\5\u009eP\2\u062d\u062b\3\2\2\2\u062e\u0631\3\2\2\2\u062f")
        buf.write("\u062d\3\2\2\2\u062f\u0630\3\2\2\2\u0630\u0633\3\2\2\2")
        buf.write("\u0631\u062f\3\2\2\2\u0632\u0629\3\2\2\2\u0632\u062a\3")
        buf.write("\2\2\2\u0633\u0634\3\2\2\2\u0634\u0635\7\23\2\2\u0635")
        buf.write("\u0637\3\2\2\2\u0636\u0628\3\2\2\2\u0636\u0637\3\2\2\2")
        buf.write("\u0637\u009b\3\2\2\2\u0638\u0639\7\u00ac\2\2\u0639\u009d")
        buf.write("\3\2\2\2\u063a\u063b\5\u00a0Q\2\u063b\u063c\7*\2\2\u063c")
        buf.write("\u063d\5\u00a2R\2\u063d\u009f\3\2\2\2\u063e\u063f\t\4")
        buf.write("\2\2\u063f\u00a1\3\2\2\2\u0640\u0643\5\u0122\u0092\2\u0641")
        buf.write("\u0643\5\u00ba^\2\u0642\u0640\3\2\2\2\u0642\u0641\3\2")
        buf.write("\2\2\u0643\u00a3\3\2\2\2\u0644\u0645\5\"\22\2\u0645\u00a5")
        buf.write("\3\2\2\2\u0646\u0649\5\2\2\2\u0647\u0649\5\4\3\2\u0648")
        buf.write("\u0646\3\2\2\2\u0648\u0647\3\2\2\2\u0649\u00a7\3\2\2\2")
        buf.write("\u064a\u0650\5\b\5\2\u064b\u064c\5\u0166\u00b4\2\u064c")
        buf.write("\u064d\5\b\5\2\u064d\u064f\3\2\2\2\u064e\u064b\3\2\2\2")
        buf.write("\u064f\u0652\3\2\2\2\u0650\u064e\3\2\2\2\u0650\u0651\3")
        buf.write("\2\2\2\u0651\u00a9\3\2\2\2\u0652\u0650\3\2\2\2\u0653\u0659")
        buf.write("\5\6\4\2\u0654\u0655\5\u0166\u00b4\2\u0655\u0656\5\6\4")
        buf.write("\2\u0656\u0658\3\2\2\2\u0657\u0654\3\2\2\2\u0658\u065b")
        buf.write("\3\2\2\2\u0659\u0657\3\2\2\2\u0659\u065a\3\2\2\2\u065a")
        buf.write("\u00ab\3\2\2\2\u065b\u0659\3\2\2\2\u065c\u0661\5\u00dc")
        buf.write("o\2\u065d\u065e\7\17\2\2\u065e\u0660\5\u00dco\2\u065f")
        buf.write("\u065d\3\2\2\2\u0660\u0663\3\2\2\2\u0661\u065f\3\2\2\2")
        buf.write("\u0661\u0662\3\2\2\2\u0662\u00ad\3\2\2\2\u0663\u0661\3")
        buf.write("\2\2\2\u0664\u0665\7r\2\2\u0665\u066f\5\u00b0Y\2\u0666")
        buf.write("\u0667\7r\2\2\u0667\u066f\5\u00b2Z\2\u0668\u0669\7r\2")
        buf.write("\2\u0669\u066f\5\u00b6\\\2\u066a\u066b\7v\2\2\u066b\u066f")
        buf.write("\7\u00ad\2\2\u066c\u066d\7v\2\2\u066d\u066f\5`\61\2\u066e")
        buf.write("\u0664\3\2\2\2\u066e\u0666\3\2\2\2\u066e\u0668\3\2\2\2")
        buf.write("\u066e\u066a\3\2\2\2\u066e\u066c\3\2\2\2\u066f\u00af\3")
        buf.write("\2\2\2\u0670\u0672\7z\2\2\u0671\u0670\3\2\2\2\u0671\u0672")
        buf.write("\3\2\2\2\u0672\u0673\3\2\2\2\u0673\u0675\7\24\2\2\u0674")
        buf.write("\u0676\5\u00b4[\2\u0675\u0674\3\2\2\2\u0675\u0676\3\2")
        buf.write("\2\2\u0676\u0677\3\2\2\2\u0677\u0678\7\25\2\2\u0678\u00b1")
        buf.write("\3\2\2\2\u0679\u067b\7z\2\2\u067a\u0679\3\2\2\2\u067a")
        buf.write("\u067b\3\2\2\2\u067b\u067c\3\2\2\2\u067c\u067e\7&\2\2")
        buf.write("\u067d\u067f\5\u00b4[\2\u067e\u067d\3\2\2\2\u067e\u067f")
        buf.write("\3\2\2\2\u067f\u0680\3\2\2\2\u0680\u0681\7$\2\2\u0681")
        buf.write("\u00b3\3\2\2\2\u0682\u0687\5`\61\2\u0683\u0684\7\17\2")
        buf.write("\2\u0684\u0686\5`\61\2\u0685\u0683\3\2\2\2\u0686\u0689")
        buf.write("\3\2\2\2\u0687\u0685\3\2\2\2\u0687\u0688\3\2\2\2\u0688")
        buf.write("\u00b5\3\2\2\2\u0689\u0687\3\2\2\2\u068a\u068b\7\24\2")
        buf.write("\2\u068b\u068c\5`\61\2\u068c\u068d\7\20\2\2\u068d\u068e")
        buf.write("\5`\61\2\u068e\u068f\7\25\2\2\u068f\u00b7\3\2\2\2\u0690")
        buf.write("\u0691\b]\1\2\u0691\u069d\5\u00ba^\2\u0692\u0693\7D\2")
        buf.write("\2\u0693\u0694\7&\2\2\u0694\u0695\5\u00b8]\2\u0695\u0696")
        buf.write("\7$\2\2\u0696\u069d\3\2\2\2\u0697\u0698\7C\2\2\u0698\u0699")
        buf.write("\7&\2\2\u0699\u069a\5\u00b8]\2\u069a\u069b\7$\2\2\u069b")
        buf.write("\u069d\3\2\2\2\u069c\u0690\3\2\2\2\u069c\u0692\3\2\2\2")
        buf.write("\u069c\u0697\3\2\2\2\u069d\u06a7\3\2\2\2\u069e\u069f\f")
        buf.write("\7\2\2\u069f\u06a6\7(\2\2\u06a0\u06a1\f\6\2\2\u06a1\u06a2")
        buf.write("\7\24\2\2\u06a2\u06a6\7\25\2\2\u06a3\u06a4\f\5\2\2\u06a4")
        buf.write("\u06a6\7)\2\2\u06a5\u069e\3\2\2\2\u06a5\u06a0\3\2\2\2")
        buf.write("\u06a5\u06a3\3\2\2\2\u06a6\u06a9\3\2\2\2\u06a7\u06a5\3")
        buf.write("\2\2\2\u06a7\u06a8\3\2\2\2\u06a8\u00b9\3\2\2\2\u06a9\u06a7")
        buf.write("\3\2\2\2\u06aa\u06ad\5\u00bc_\2\u06ab\u06ad\5\u00be`\2")
        buf.write("\u06ac\u06aa\3\2\2\2\u06ac\u06ab\3\2\2\2\u06ad\u00bb\3")
        buf.write("\2\2\2\u06ae\u06c0\7\62\2\2\u06af\u06c0\7\63\2\2\u06b0")
        buf.write("\u06c0\7\64\2\2\u06b1\u06c0\7\65\2\2\u06b2\u06c0\7A\2")
        buf.write("\2\u06b3\u06c0\7\66\2\2\u06b4\u06c0\7\67\2\2\u06b5\u06c0")
        buf.write("\7?\2\2\u06b6\u06c0\78\2\2\u06b7\u06c0\7:\2\2\u06b8\u06c0")
        buf.write("\79\2\2\u06b9\u06c0\7;\2\2\u06ba\u06c0\7<\2\2\u06bb\u06c0")
        buf.write("\7>\2\2\u06bc\u06c0\7@\2\2\u06bd\u06c0\7B\2\2\u06be\u06c0")
        buf.write("\7E\2\2\u06bf\u06ae\3\2\2\2\u06bf\u06af\3\2\2\2\u06bf")
        buf.write("\u06b0\3\2\2\2\u06bf\u06b1\3\2\2\2\u06bf\u06b2\3\2\2\2")
        buf.write("\u06bf\u06b3\3\2\2\2\u06bf\u06b4\3\2\2\2\u06bf\u06b5\3")
        buf.write("\2\2\2\u06bf\u06b6\3\2\2\2\u06bf\u06b7\3\2\2\2\u06bf\u06b8")
        buf.write("\3\2\2\2\u06bf\u06b9\3\2\2\2\u06bf\u06ba\3\2\2\2\u06bf")
        buf.write("\u06bb\3\2\2\2\u06bf\u06bc\3\2\2\2\u06bf\u06bd\3\2\2\2")
        buf.write("\u06bf\u06be\3\2\2\2\u06c0\u00bd\3\2\2\2\u06c1\u06c2\7")
        buf.write("\u00a8\2\2\u06c2\u00bf\3\2\2\2\u06c3\u06c5\7z\2\2\u06c4")
        buf.write("\u06c3\3\2\2\2\u06c4\u06c5\3\2\2\2\u06c5\u06c6\3\2\2\2")
        buf.write("\u06c6\u06c7\5\u00be`\2\u06c7\u00c1\3\2\2\2\u06c8\u06c9")
        buf.write("\7>\2\2\u06c9\u00c3\3\2\2\2\u06ca\u06ce\5\20\t\2\u06cb")
        buf.write("\u06ce\5$\23\2\u06cc\u06ce\5\22\n\2\u06cd\u06ca\3\2\2")
        buf.write("\2\u06cd\u06cb\3\2\2\2\u06cd\u06cc\3\2\2\2\u06ce\u00c5")
        buf.write("\3\2\2\2\u06cf\u06d2\5\f\7\2\u06d0\u06d2\5\16\b\2\u06d1")
        buf.write("\u06cf\3\2\2\2\u06d1\u06d0\3\2\2\2\u06d2\u00c7\3\2\2\2")
        buf.write("\u06d3\u06d8\5\u00dan\2\u06d4\u06d5\7\17\2\2\u06d5\u06d7")
        buf.write("\5\u00dan\2\u06d6\u06d4\3\2\2\2\u06d7\u06da\3\2\2\2\u06d8")
        buf.write("\u06d6\3\2\2\2\u06d8\u06d9\3\2\2\2\u06d9\u00c9\3\2\2\2")
        buf.write("\u06da\u06d8\3\2\2\2\u06db\u06de\5\u00d6l\2\u06dc\u06de")
        buf.write("\5\u00dan\2\u06dd\u06db\3\2\2\2\u06dd\u06dc\3\2\2\2\u06de")
        buf.write("\u00cb\3\2\2\2\u06df\u06e2\5\u00d2j\2\u06e0\u06e2\5\u014e")
        buf.write("\u00a8\2\u06e1\u06df\3\2\2\2\u06e1\u06e0\3\2\2\2\u06e2")
        buf.write("\u00cd\3\2\2\2\u06e3\u06e4\6h,\3\u06e4\u06e5\7\37\2\2")
        buf.write("\u06e5\u06e6\5\u00d0i\2\u06e6\u00cf\3\2\2\2\u06e7\u06e8")
        buf.write("\6i-\3\u06e8\u06e9\5\u00ccg\2\u06e9\u00d1\3\2\2\2\u06ea")
        buf.write("\u06ee\5\u00d6l\2\u06eb\u06ee\5\u00dan\2\u06ec\u06ee\5")
        buf.write("\u00dco\2\u06ed\u06ea\3\2\2\2\u06ed\u06eb\3\2\2\2\u06ed")
        buf.write("\u06ec\3\2\2\2\u06ee\u00d3\3\2\2\2\u06ef\u06f0\t\5\2\2")
        buf.write("\u06f0\u00d5\3\2\2\2\u06f1\u06f2\7\u00a9\2\2\u06f2\u00d7")
        buf.write("\3\2\2\2\u06f3\u06f4\t\6\2\2\u06f4\u00d9\3\2\2\2\u06f5")
        buf.write("\u06f6\7\u00a8\2\2\u06f6\u00db\3\2\2\2\u06f7\u06f8\7\u00a7")
        buf.write("\2\2\u06f8\u00dd\3\2\2\2\u06f9\u06fe\5\u00e0q\2\u06fa")
        buf.write("\u06fb\7\17\2\2\u06fb\u06fd\5\u00e0q\2\u06fc\u06fa\3\2")
        buf.write("\2\2\u06fd\u0700\3\2\2\2\u06fe\u06fc\3\2\2\2\u06fe\u06ff")
        buf.write("\3\2\2\2\u06ff\u00df\3\2\2\2\u0700\u06fe\3\2\2\2\u0701")
        buf.write("\u0707\5\u00e6t\2\u0702\u0704\7z\2\2\u0703\u0702\3\2\2")
        buf.write("\2\u0703\u0704\3\2\2\2\u0704\u0705\3\2\2\2\u0705\u0707")
        buf.write("\5\u00e2r\2\u0706\u0701\3\2\2\2\u0706\u0703\3\2\2\2\u0707")
        buf.write("\u00e1\3\2\2\2\u0708\u070b\5\u00e4s\2\u0709\u070b\5\64")
        buf.write("\33\2\u070a\u0708\3\2\2\2\u070a\u0709\3\2\2\2\u070b\u00e3")
        buf.write("\3\2\2\2\u070c\u070f\5\u00d6l\2\u070d\u070e\7*\2\2\u070e")
        buf.write("\u0710\5\u0122\u0092\2\u070f\u070d\3\2\2\2\u070f\u0710")
        buf.write("\3\2\2\2\u0710\u00e5\3\2\2\2\u0711\u0712\5\u00c2b\2\u0712")
        buf.write("\u0713\5\u00d6l\2\u0713\u00e7\3\2\2\2\u0714\u0717\5\u00b8")
        buf.write("]\2\u0715\u0717\5\u00eav\2\u0716\u0714\3\2\2\2\u0716\u0715")
        buf.write("\3\2\2\2\u0717\u00e9\3\2\2\2\u0718\u0719\bv\1\2\u0719")
        buf.write("\u071a\7K\2\2\u071a\u0723\3\2\2\2\u071b\u071c\f\4\2\2")
        buf.write("\u071c\u071d\7\24\2\2\u071d\u0722\7\25\2\2\u071e\u071f")
        buf.write("\f\3\2\2\u071f\u0720\7\26\2\2\u0720\u0722\7\27\2\2\u0721")
        buf.write("\u071b\3\2\2\2\u0721\u071e\3\2\2\2\u0722\u0725\3\2\2\2")
        buf.write("\u0723\u0721\3\2\2\2\u0723\u0724\3\2\2\2\u0724\u00eb\3")
        buf.write("\2\2\2\u0725\u0723\3\2\2\2\u0726\u072c\5\u00eex\2\u0727")
        buf.write("\u0728\5\u0166\u00b4\2\u0728\u0729\5\u00eex\2\u0729\u072b")
        buf.write("\3\2\2\2\u072a\u0727\3\2\2\2\u072b\u072e\3\2\2\2\u072c")
        buf.write("\u072a\3\2\2\2\u072c\u072d\3\2\2\2\u072d\u00ed\3\2\2\2")
        buf.write("\u072e\u072c\3\2\2\2\u072f\u0730\5\u0104\u0083\2\u0730")
        buf.write("\u0731\5\u0166\u00b4\2\u0731\u0733\3\2\2\2\u0732\u072f")
        buf.write("\3\2\2\2\u0733\u0736\3\2\2\2\u0734\u0732\3\2\2\2\u0734")
        buf.write("\u0735\3\2\2\2\u0735\u073c\3\2\2\2\u0736\u0734\3\2\2\2")
        buf.write("\u0737\u0738\5\u009aN\2\u0738\u0739\5\u0166\u00b4\2\u0739")
        buf.write("\u073b\3\2\2\2\u073a\u0737\3\2\2\2\u073b\u073e\3\2\2\2")
        buf.write("\u073c\u073a\3\2\2\2\u073c\u073d\3\2\2\2\u073d\u0744\3")
        buf.write("\2\2\2\u073e\u073c\3\2\2\2\u073f\u0745\5\32\16\2\u0740")
        buf.write("\u0745\5\36\20\2\u0741\u0745\5,\27\2\u0742\u0745\5*\26")
        buf.write("\2\u0743\u0745\5\30\r\2\u0744\u073f\3\2\2\2\u0744\u0740")
        buf.write("\3\2\2\2\u0744\u0741\3\2\2\2\u0744\u0742\3\2\2\2\u0744")
        buf.write("\u0743\3\2\2\2\u0745\u00ef\3\2\2\2\u0746\u074c\5\u00f2")
        buf.write("z\2\u0747\u0748\5\u0166\u00b4\2\u0748\u0749\5\u00f2z\2")
        buf.write("\u0749\u074b\3\2\2\2\u074a\u0747\3\2\2\2\u074b\u074e\3")
        buf.write("\2\2\2\u074c\u074a\3\2\2\2\u074c\u074d\3\2\2\2\u074d\u00f1")
        buf.write("\3\2\2\2\u074e\u074c\3\2\2\2\u074f\u0753\5 \21\2\u0750")
        buf.write("\u0753\5\34\17\2\u0751\u0753\5.\30\2\u0752\u074f\3\2\2")
        buf.write("\2\u0752\u0750\3\2\2\2\u0752\u0751\3\2\2\2\u0753\u00f3")
        buf.write("\3\2\2\2\u0754\u0755\7\7\2\2\u0755\u075f\5\u01b2\u00da")
        buf.write("\2\u0756\u0757\7\b\2\2\u0757\u075f\5\u01cc\u00e7\2\u0758")
        buf.write("\u0759\7\t\2\2\u0759\u075f\5\u00f6|\2\u075a\u075b\7\n")
        buf.write("\2\2\u075b\u075f\5\u00f6|\2\u075c\u075d\7\13\2\2\u075d")
        buf.write("\u075f\5\u00fa~\2\u075e\u0754\3\2\2\2\u075e\u0756\3\2")
        buf.write("\2\2\u075e\u0758\3\2\2\2\u075e\u075a\3\2\2\2\u075e\u075c")
        buf.write("\3\2\2\2\u075f\u00f5\3\2\2\2\u0760\u0762\5\u00d2j\2\u0761")
        buf.write("\u0763\5\u00f8}\2\u0762\u0761\3\2\2\2\u0762\u0763\3\2")
        buf.write("\2\2\u0763\u00f7\3\2\2\2\u0764\u0765\7n\2\2\u0765\u0766")
        buf.write("\5\u0154\u00ab\2\u0766\u0767\7\r\2\2\u0767\u076c\5\u019a")
        buf.write("\u00ce\2\u0768\u0769\7\21\2\2\u0769\u076b\5\u019a\u00ce")
        buf.write("\2\u076a\u0768\3\2\2\2\u076b\u076e\3\2\2\2\u076c\u076a")
        buf.write("\3\2\2\2\u076c\u076d\3\2\2\2\u076d\u00f9\3\2\2\2\u076e")
        buf.write("\u076c\3\2\2\2\u076f\u0774\5\u0180\u00c1\2\u0770\u0771")
        buf.write("\7\21\2\2\u0771\u0773\5\u0180\u00c1\2\u0772\u0770\3\2")
        buf.write("\2\2\u0773\u0776\3\2\2\2\u0774\u0772\3\2\2\2\u0774\u0775")
        buf.write("\3\2\2\2\u0775\u0778\3\2\2\2\u0776\u0774\3\2\2\2\u0777")
        buf.write("\u0779\5\u00fc\177\2\u0778\u0777\3\2\2\2\u0778\u0779\3")
        buf.write("\2\2\2\u0779\u00fb\3\2\2\2\u077a\u077b\7n\2\2\u077b\u077c")
        buf.write("\5\u0154\u00ab\2\u077c\u077e\7\r\2\2\u077d\u077f\7!\2")
        buf.write("\2\u077e\u077d\3\2\2\2\u077e\u077f\3\2\2\2\u077f\u0780")
        buf.write("\3\2\2\2\u0780\u0785\5\u0180\u00c1\2\u0781\u0782\7!\2")
        buf.write("\2\u0782\u0784\5\u0180\u00c1\2\u0783\u0781\3\2\2\2\u0784")
        buf.write("\u0787\3\2\2\2\u0785\u0783\3\2\2\2\u0785\u0786\3\2\2\2")
        buf.write("\u0786\u078a\3\2\2\2\u0787\u0785\3\2\2\2\u0788\u0789\7")
        buf.write("\21\2\2\u0789\u078b\5\u0180\u00c1\2\u078a\u0788\3\2\2")
        buf.write("\2\u078a\u078b\3\2\2\2\u078b\u00fd\3\2\2\2\u078c\u0791")
        buf.write("\5\u00d6l\2\u078d\u078e\7\17\2\2\u078e\u0790\5\u00d6l")
        buf.write("\2\u078f\u078d\3\2\2\2\u0790\u0793\3\2\2\2\u0791\u078f")
        buf.write("\3\2\2\2\u0791\u0792\3\2\2\2\u0792\u00ff\3\2\2\2\u0793")
        buf.write("\u0791\3\2\2\2\u0794\u0799\5\u00d8m\2\u0795\u0796\7\17")
        buf.write("\2\2\u0796\u0798\5\u00d8m\2\u0797\u0795\3\2\2\2\u0798")
        buf.write("\u079b\3\2\2\2\u0799\u0797\3\2\2\2\u0799\u079a\3\2\2\2")
        buf.write("\u079a\u0101\3\2\2\2\u079b\u0799\3\2\2\2\u079c\u07a1\5")
        buf.write("*\26\2\u079d\u07a1\5,\27\2\u079e\u07a1\5.\30\2\u079f\u07a1")
        buf.write("\5\60\31\2\u07a0\u079c\3\2\2\2\u07a0\u079d\3\2\2\2\u07a0")
        buf.write("\u079e\3\2\2\2\u07a0\u079f\3\2\2\2\u07a1\u0103\3\2\2\2")
        buf.write("\u07a2\u07a3\7\6\2\2\u07a3\u0105\3\2\2\2\u07a4\u07aa\5")
        buf.write("\u0108\u0085\2\u07a5\u07a6\5\u0166\u00b4\2\u07a6\u07a7")
        buf.write("\5\u0108\u0085\2\u07a7\u07a9\3\2\2\2\u07a8\u07a5\3\2\2")
        buf.write("\2\u07a9\u07ac\3\2\2\2\u07aa\u07a8\3\2\2\2\u07aa\u07ab")
        buf.write("\3\2\2\2\u07ab\u0107\3\2\2\2\u07ac\u07aa\3\2\2\2\u07ad")
        buf.write("\u07ae\7\7\2\2\u07ae\u07b8\5\u019c\u00cf\2\u07af\u07b0")
        buf.write("\7\b\2\2\u07b0\u07b8\5\u01b8\u00dd\2\u07b1\u07b2\7\t\2")
        buf.write("\2\u07b2\u07b8\5\u010a\u0086\2\u07b3\u07b4\7\n\2\2\u07b4")
        buf.write("\u07b8\5\u010a\u0086\2\u07b5\u07b6\7\13\2\2\u07b6\u07b8")
        buf.write("\5\u010c\u0087\2\u07b7\u07ad\3\2\2\2\u07b7\u07af\3\2\2")
        buf.write("\2\u07b7\u07b1\3\2\2\2\u07b7\u07b3\3\2\2\2\u07b7\u07b5")
        buf.write("\3\2\2\2\u07b8\u0109\3\2\2\2\u07b9\u07bb\5\u0182\u00c2")
        buf.write("\2\u07ba\u07bc\7\16\2\2\u07bb\u07ba\3\2\2\2\u07bb\u07bc")
        buf.write("\3\2\2\2\u07bc\u07be\3\2\2\2\u07bd\u07bf\5\u00f8}\2\u07be")
        buf.write("\u07bd\3\2\2\2\u07be\u07bf\3\2\2\2\u07bf\u010b\3\2\2\2")
        buf.write("\u07c0\u07c2\5\u0168\u00b5\2\u07c1\u07c3\7\16\2\2\u07c2")
        buf.write("\u07c1\3\2\2\2\u07c2\u07c3\3\2\2\2\u07c3\u07c5\3\2\2\2")
        buf.write("\u07c4\u07c6\5\u00fc\177\2\u07c5\u07c4\3\2\2\2\u07c5\u07c6")
        buf.write("\3\2\2\2\u07c6\u010d\3\2\2\2\u07c7\u07cd\58\35\2\u07c8")
        buf.write("\u07c9\5\u0166\u00b4\2\u07c9\u07ca\58\35\2\u07ca\u07cc")
        buf.write("\3\2\2\2\u07cb\u07c8\3\2\2\2\u07cc\u07cf\3\2\2\2\u07cd")
        buf.write("\u07cb\3\2\2\2\u07cd\u07ce\3\2\2\2\u07ce\u010f\3\2\2\2")
        buf.write("\u07cf\u07cd\3\2\2\2\u07d0\u07d6\5\62\32\2\u07d1\u07d2")
        buf.write("\5\u0166\u00b4\2\u07d2\u07d3\5\62\32\2\u07d3\u07d5\3\2")
        buf.write("\2\2\u07d4\u07d1\3\2\2\2\u07d5\u07d8\3\2\2\2\u07d6\u07d4")
        buf.write("\3\2\2\2\u07d6\u07d7\3\2\2\2\u07d7\u0111\3\2\2\2\u07d8")
        buf.write("\u07d6\3\2\2\2\u07d9\u07df\5D#\2\u07da\u07db\5\u0166\u00b4")
        buf.write("\2\u07db\u07dc\5D#\2\u07dc\u07de\3\2\2\2\u07dd\u07da\3")
        buf.write("\2\2\2\u07de\u07e1\3\2\2\2\u07df\u07dd\3\2\2\2\u07df\u07e0")
        buf.write("\3\2\2\2\u07e0\u0113\3\2\2\2\u07e1\u07df\3\2\2\2\u07e2")
        buf.write("\u07e8\5T+\2\u07e3\u07e4\5\u0166\u00b4\2\u07e4\u07e5\5")
        buf.write("T+\2\u07e5\u07e7\3\2\2\2\u07e6\u07e3\3\2\2\2\u07e7\u07ea")
        buf.write("\3\2\2\2\u07e8\u07e6\3\2\2\2\u07e8\u07e9\3\2\2\2\u07e9")
        buf.write("\u0115\3\2\2\2\u07ea\u07e8\3\2\2\2\u07eb\u07ec\7\24\2")
        buf.write("\2\u07ec\u07ed\5\u0118\u008d\2\u07ed\u07ee\7\20\2\2\u07ee")
        buf.write("\u07ef\5\u0118\u008d\2\u07ef\u07f0\7\25\2\2\u07f0\u07fa")
        buf.write("\3\2\2\2\u07f1\u07f2\7\24\2\2\u07f2\u07f3\5\u011a\u008e")
        buf.write("\2\u07f3\u07f4\7\25\2\2\u07f4\u07fa\3\2\2\2\u07f5\u07f6")
        buf.write("\7&\2\2\u07f6\u07f7\5\u011a\u008e\2\u07f7\u07f8\7$\2\2")
        buf.write("\u07f8\u07fa\3\2\2\2\u07f9\u07eb\3\2\2\2\u07f9\u07f1\3")
        buf.write("\2\2\2\u07f9\u07f5\3\2\2\2\u07fa\u0117\3\2\2\2\u07fb\u080d")
        buf.write("\7\u00a5\2\2\u07fc\u080d\7\u00a6\2\2\u07fd\u080d\7\u00af")
        buf.write("\2\2\u07fe\u080d\7\u00b0\2\2\u07ff\u080d\7\u00a4\2\2\u0800")
        buf.write("\u080d\7\u00b4\2\2\u0801\u080d\7\u00b3\2\2\u0802\u080d")
        buf.write("\7\u00ad\2\2\u0803\u080d\7\u00b1\2\2\u0804\u080d\7\u00b2")
        buf.write("\2\2\u0805\u080d\7\u00a3\2\2\u0806\u080d\7\u00b5\2\2\u0807")
        buf.write("\u080d\7\u00b6\2\2\u0808\u080d\7\u00ae\2\2\u0809\u080d")
        buf.write("\5\u00dco\2\u080a\u080d\5\u008cG\2\u080b\u080d\5\u008e")
        buf.write("H\2\u080c\u07fb\3\2\2\2\u080c\u07fc\3\2\2\2\u080c\u07fd")
        buf.write("\3\2\2\2\u080c\u07fe\3\2\2\2\u080c\u07ff\3\2\2\2\u080c")
        buf.write("\u0800\3\2\2\2\u080c\u0801\3\2\2\2\u080c\u0802\3\2\2\2")
        buf.write("\u080c\u0803\3\2\2\2\u080c\u0804\3\2\2\2\u080c\u0805\3")
        buf.write("\2\2\2\u080c\u0806\3\2\2\2\u080c\u0807\3\2\2\2\u080c\u0808")
        buf.write("\3\2\2\2\u080c\u0809\3\2\2\2\u080c\u080a\3\2\2\2\u080c")
        buf.write("\u080b\3\2\2\2\u080d\u0119\3\2\2\2\u080e\u0813\5\u0118")
        buf.write("\u008d\2\u080f\u0810\7\17\2\2\u0810\u0812\5\u0118\u008d")
        buf.write("\2\u0811\u080f\3\2\2\2\u0812\u0815\3\2\2\2\u0813\u0811")
        buf.write("\3\2\2\2\u0813\u0814\3\2\2\2\u0814\u011b\3\2\2\2\u0815")
        buf.write("\u0813\3\2\2\2\u0816\u0817\t\7\2\2\u0817\u011d\3\2\2\2")
        buf.write("\u0818\u0819\5\u00be`\2\u0819\u081a\7\21\2\2\u081a\u081c")
        buf.write("\3\2\2\2\u081b\u0818\3\2\2\2\u081b\u081c\3\2\2\2\u081c")
        buf.write("\u081d\3\2\2\2\u081d\u081e\7\u0094\2\2\u081e\u011f\3\2")
        buf.write("\2\2\u081f\u0820\7\22\2\2\u0820\u0821\5`\61\2\u0821\u0822")
        buf.write("\7\23\2\2\u0822\u0121\3\2\2\2\u0823\u0826\5\u0118\u008d")
        buf.write("\2\u0824\u0826\5\u0124\u0093\2\u0825\u0823\3\2\2\2\u0825")
        buf.write("\u0824\3\2\2\2\u0826\u0123\3\2\2\2\u0827\u082e\5\u00b6")
        buf.write("\\\2\u0828\u082e\5\u00b0Y\2\u0829\u082e\5\u00b2Z\2\u082a")
        buf.write("\u082e\5\u0128\u0095\2\u082b\u082e\5\u012a\u0096\2\u082c")
        buf.write("\u082e\5\u0126\u0094\2\u082d\u0827\3\2\2\2\u082d\u0828")
        buf.write("\3\2\2\2\u082d\u0829\3\2\2\2\u082d\u082a\3\2\2\2\u082d")
        buf.write("\u082b\3\2\2\2\u082d\u082c\3\2\2\2\u082e\u0125\3\2\2\2")
        buf.write("\u082f\u0831\7z\2\2\u0830\u082f\3\2\2\2\u0830\u0831\3")
        buf.write("\2\2\2\u0831\u0832\3\2\2\2\u0832\u0834\7\22\2\2\u0833")
        buf.write("\u0835\5\u012c\u0097\2\u0834\u0833\3\2\2\2\u0834\u0835")
        buf.write("\3\2\2\2\u0835\u0836\3\2\2\2\u0836\u0837\7\23\2\2\u0837")
        buf.write("\u0127\3\2\2\2\u0838\u083a\7z\2\2\u0839\u0838\3\2\2\2")
        buf.write("\u0839\u083a\3\2\2\2\u083a\u0843\3\2\2\2\u083b\u083c\7")
        buf.write("&\2\2\u083c\u083d\5\u012e\u0098\2\u083d\u083e\7$\2\2\u083e")
        buf.write("\u0844\3\2\2\2\u083f\u0844\7)\2\2\u0840\u0841\7&\2\2\u0841")
        buf.write("\u0842\7\r\2\2\u0842\u0844\7$\2\2\u0843\u083b\3\2\2\2")
        buf.write("\u0843\u083f\3\2\2\2\u0843\u0840\3\2\2\2\u0844\u0129\3")
        buf.write("\2\2\2\u0845\u0847\7\26\2\2\u0846\u0848\5\u012e\u0098")
        buf.write("\2\u0847\u0846\3\2\2\2\u0847\u0848\3\2\2\2\u0848\u0849")
        buf.write("\3\2\2\2\u0849\u084a\7\27\2\2\u084a\u012b\3\2\2\2\u084b")
        buf.write("\u084c\5`\61\2\u084c\u0855\7\17\2\2\u084d\u0852\5`\61")
        buf.write("\2\u084e\u084f\7\17\2\2\u084f\u0851\5`\61\2\u0850\u084e")
        buf.write("\3\2\2\2\u0851\u0854\3\2\2\2\u0852\u0850\3\2\2\2\u0852")
        buf.write("\u0853\3\2\2\2\u0853\u0856\3\2\2\2\u0854\u0852\3\2\2\2")
        buf.write("\u0855\u084d\3\2\2\2\u0855\u0856\3\2\2\2\u0856\u012d\3")
        buf.write("\2\2\2\u0857\u085c\5\u0130\u0099\2\u0858\u0859\7\17\2")
        buf.write("\2\u0859\u085b\5\u0130\u0099\2\u085a\u0858\3\2\2\2\u085b")
        buf.write("\u085e\3\2\2\2\u085c\u085a\3\2\2\2\u085c\u085d\3\2\2\2")
        buf.write("\u085d\u012f\3\2\2\2\u085e\u085c\3\2\2\2\u085f\u0860\5")
        buf.write("\u0132\u009a\2\u0860\u0861\7\r\2\2\u0861\u0862\5`\61\2")
        buf.write("\u0862\u0131\3\2\2\2\u0863\u0866\5\u00ccg\2\u0864\u0866")
        buf.write("\7\u00ad\2\2\u0865\u0863\3\2\2\2\u0865\u0864\3\2\2\2\u0866")
        buf.write("\u0133\3\2\2\2\u0867\u0868\5`\61\2\u0868\u0869\7\r\2\2")
        buf.write("\u0869\u086a\5`\61\2\u086a\u0871\3\2\2\2\u086b\u086c\5")
        buf.write("`\61\2\u086c\u086d\7\r\2\2\u086d\u0871\3\2\2\2\u086e\u086f")
        buf.write("\7\r\2\2\u086f\u0871\5`\61\2\u0870\u0867\3\2\2\2\u0870")
        buf.write("\u086b\3\2\2\2\u0870\u086e\3\2\2\2\u0871\u0135\3\2\2\2")
        buf.write("\u0872\u0873\5\u00d6l\2\u0873\u0874\5\u015a\u00ae\2\u0874")
        buf.write("\u0875\5`\61\2\u0875\u0137\3\2\2\2\u0876\u0877\b\u009d")
        buf.write("\1\2\u0877\u0878\5\u00d6l\2\u0878\u087d\3\2\2\2\u0879")
        buf.write("\u087a\f\3\2\2\u087a\u087c\5\u0088E\2\u087b\u0879\3\2")
        buf.write("\2\2\u087c\u087f\3\2\2\2\u087d\u087b\3\2\2\2\u087d\u087e")
        buf.write("\3\2\2\2\u087e\u0139\3\2\2\2\u087f\u087d\3\2\2\2\u0880")
        buf.write("\u0881\6\u009e\61\3\u0881\u0882\7\u00a9\2\2\u0882\u0885")
        buf.write("\5\u00e8u\2\u0883\u0885\5`\61\2\u0884\u0880\3\2\2\2\u0884")
        buf.write("\u0883\3\2\2\2\u0885\u013b\3\2\2\2\u0886\u0887\5\u013e")
        buf.write("\u00a0\2\u0887\u0888\5`\61\2\u0888\u088f\3\2\2\2\u0889")
        buf.write("\u088a\5\u013e\u00a0\2\u088a\u088b\7\26\2\2\u088b\u088c")
        buf.write("\5\u010e\u0088\2\u088c\u088d\7\27\2\2\u088d\u088f\3\2")
        buf.write("\2\2\u088e\u0886\3\2\2\2\u088e\u0889\3\2\2\2\u088f\u013d")
        buf.write("\3\2\2\2\u0890\u0891\5\u0140\u00a1\2\u0891\u0892\5\u0090")
        buf.write("I\2\u0892\u0893\7\61\2\2\u0893\u0894\5\u0090I\2\u0894")
        buf.write("\u013f\3\2\2\2\u0895\u089c\5\u00d6l\2\u0896\u0898\7\22")
        buf.write("\2\2\u0897\u0899\5\u00fe\u0080\2\u0898\u0897\3\2\2\2\u0898")
        buf.write("\u0899\3\2\2\2\u0899\u089a\3\2\2\2\u089a\u089c\7\23\2")
        buf.write("\2\u089b\u0895\3\2\2\2\u089b\u0896\3\2\2\2\u089c\u0141")
        buf.write("\3\2\2\2\u089d\u08a0\5h\65\2\u089e\u08a0\5\u013c\u009f")
        buf.write("\2\u089f\u089d\3\2\2\2\u089f\u089e\3\2\2\2\u08a0\u0143")
        buf.write("\3\2\2\2\u08a1\u08a2\7\u0088\2\2\u08a2\u08a3\7H\2\2\u08a3")
        buf.write("\u08a4\7n\2\2\u08a4\u08a5\5`\61\2\u08a5\u0145\3\2\2\2")
        buf.write("\u08a6\u08a7\7\u0088\2\2\u08a7\u08a8\7\u0081\2\2\u08a8")
        buf.write("\u08a9\7n\2\2\u08a9\u08aa\5`\61\2\u08aa\u0147\3\2\2\2")
        buf.write("\u08ab\u08b0\5\u014a\u00a6\2\u08ac\u08ad\7\17\2\2\u08ad")
        buf.write("\u08af\5\u014a\u00a6\2\u08ae\u08ac\3\2\2\2\u08af\u08b2")
        buf.write("\3\2\2\2\u08b0\u08ae\3\2\2\2\u08b0\u08b1\3\2\2\2\u08b1")
        buf.write("\u0149\3\2\2\2\u08b2\u08b0\3\2\2\2\u08b3\u08b8\5\u00d6")
        buf.write("l\2\u08b4\u08b5\7\21\2\2\u08b5\u08b7\5\u00d6l\2\u08b6")
        buf.write("\u08b4\3\2\2\2\u08b7\u08ba\3\2\2\2\u08b8\u08b6\3\2\2\2")
        buf.write("\u08b8\u08b9\3\2\2\2\u08b9\u08bc\3\2\2\2\u08ba\u08b8\3")
        buf.write("\2\2\2\u08bb\u08bd\t\b\2\2\u08bc\u08bb\3\2\2\2\u08bc\u08bd")
        buf.write("\3\2\2\2\u08bd\u014b\3\2\2\2\u08be\u08c5\7\36\2\2\u08bf")
        buf.write("\u08c5\7\37\2\2\u08c0\u08c5\5\u015c\u00af\2\u08c1\u08c5")
        buf.write("\5\u015e\u00b0\2\u08c2\u08c5\5\u0160\u00b1\2\u08c3\u08c5")
        buf.write("\5\u0162\u00b2\2\u08c4\u08be\3\2\2\2\u08c4\u08bf\3\2\2")
        buf.write("\2\u08c4\u08c0\3\2\2\2\u08c4\u08c1\3\2\2\2\u08c4\u08c2")
        buf.write("\3\2\2\2\u08c4\u08c3\3\2\2\2\u08c5\u014d\3\2\2\2\u08c6")
        buf.write("\u08c7\t\t\2\2\u08c7\u014f\3\2\2\2\u08c8\u08c9\7\u00a9")
        buf.write("\2\2\u08c9\u08ca\6\u00a9\62\3\u08ca\u0151\3\2\2\2\u08cb")
        buf.write("\u08cc\7\u00a9\2\2\u08cc\u08cd\6\u00aa\63\3\u08cd\u0153")
        buf.write("\3\2\2\2\u08ce\u08cf\7\u00a9\2\2\u08cf\u08d0\6\u00ab\64")
        buf.write("\3\u08d0\u0155\3\2\2\2\u08d1\u08d2\7\u00a9\2\2\u08d2\u08d3")
        buf.write("\6\u00ac\65\3\u08d3\u0157\3\2\2\2\u08d4\u08d5\7\u00a9")
        buf.write("\2\2\u08d5\u08d6\6\u00ad\66\3\u08d6\u0159\3\2\2\2\u08d7")
        buf.write("\u08d8\7*\2\2\u08d8\u015b\3\2\2\2\u08d9\u08da\7 \2\2\u08da")
        buf.write("\u015d\3\2\2\2\u08db\u08dc\7!\2\2\u08dc\u015f\3\2\2\2")
        buf.write("\u08dd\u08de\7\"\2\2\u08de\u0161\3\2\2\2\u08df\u08e0\t")
        buf.write("\n\2\2\u08e0\u0163\3\2\2\2\u08e1\u08e2\3\2\2\2\u08e2\u0165")
        buf.write("\3\2\2\2\u08e3\u08e4\3\2\2\2\u08e4\u0167\3\2\2\2\u08e5")
        buf.write("\u08e6\7\u008b\2\2\u08e6\u08e7\5\u016a\u00b6\2\u08e7\u08e8")
        buf.write("\7\16\2\2\u08e8\u08ed\3\2\2\2\u08e9\u08ea\5\u016a\u00b6")
        buf.write("\2\u08ea\u08eb\7\16\2\2\u08eb\u08ed\3\2\2\2\u08ec\u08e5")
        buf.write("\3\2\2\2\u08ec\u08e9\3\2\2\2\u08ed\u0169\3\2\2\2\u08ee")
        buf.write("\u08ef\b\u00b6\1\2\u08ef\u08f0\5\u016c\u00b7\2\u08f0\u08f5")
        buf.write("\3\2\2\2\u08f1\u08f2\f\3\2\2\u08f2\u08f4\5\u0172\u00ba")
        buf.write("\2\u08f3\u08f1\3\2\2\2\u08f4\u08f7\3\2\2\2\u08f5\u08f3")
        buf.write("\3\2\2\2\u08f5\u08f6\3\2\2\2\u08f6\u016b\3\2\2\2\u08f7")
        buf.write("\u08f5\3\2\2\2\u08f8\u0900\5\u016e\u00b8\2\u08f9\u0900")
        buf.write("\5\u0170\u00b9\2\u08fa\u0900\5\u017a\u00be\2\u08fb\u0900")
        buf.write("\5\u017c\u00bf\2\u08fc\u0900\5\u017e\u00c0\2\u08fd\u0900")
        buf.write("\5\u0174\u00bb\2\u08fe\u0900\5\u0178\u00bd\2\u08ff\u08f8")
        buf.write("\3\2\2\2\u08ff\u08f9\3\2\2\2\u08ff\u08fa\3\2\2\2\u08ff")
        buf.write("\u08fb\3\2\2\2\u08ff\u08fc\3\2\2\2\u08ff\u08fd\3\2\2\2")
        buf.write("\u08ff\u08fe\3\2\2\2\u0900\u016d\3\2\2\2\u0901\u0902\5")
        buf.write("\u011c\u008f\2\u0902\u016f\3\2\2\2\u0903\u0904\5\u0150")
        buf.write("\u00a9\2\u0904\u0905\5\u0174\u00bb\2\u0905\u0171\3\2\2")
        buf.write("\2\u0906\u0907\7\21\2\2\u0907\u090c\5\u0174\u00bb\2\u0908")
        buf.write("\u0909\7\21\2\2\u0909\u090c\5\u0180\u00c1\2\u090a\u090c")
        buf.write("\5\u0178\u00bd\2\u090b\u0906\3\2\2\2\u090b\u0908\3\2\2")
        buf.write("\2\u090b\u090a\3\2\2\2\u090c\u0173\3\2\2\2\u090d\u090e")
        buf.write("\5\u0180\u00c1\2\u090e\u0910\7\22\2\2\u090f\u0911\5\u0176")
        buf.write("\u00bc\2\u0910\u090f\3\2\2\2\u0910\u0911\3\2\2\2\u0911")
        buf.write("\u0912\3\2\2\2\u0912\u0913\7\23\2\2\u0913\u0175\3\2\2")
        buf.write("\2\u0914\u0915\b\u00bc\1\2\u0915\u0916\5\u016a\u00b6\2")
        buf.write("\u0916\u091c\3\2\2\2\u0917\u0918\f\3\2\2\u0918\u0919\7")
        buf.write("\17\2\2\u0919\u091b\5\u016a\u00b6\2\u091a\u0917\3\2\2")
        buf.write("\2\u091b\u091e\3\2\2\2\u091c\u091a\3\2\2\2\u091c\u091d")
        buf.write("\3\2\2\2\u091d\u0177\3\2\2\2\u091e\u091c\3\2\2\2\u091f")
        buf.write("\u0920\7\24\2\2\u0920\u0921\5\u016a\u00b6\2\u0921\u0922")
        buf.write("\7\25\2\2\u0922\u0179\3\2\2\2\u0923\u0924\7\22\2\2\u0924")
        buf.write("\u0925\5\u016a\u00b6\2\u0925\u0926\7\23\2\2\u0926\u017b")
        buf.write("\3\2\2\2\u0927\u0928\5\u0180\u00c1\2\u0928\u017d\3\2\2")
        buf.write("\2\u0929\u092f\7\u00af\2\2\u092a\u092f\7\u00b1\2\2\u092b")
        buf.write("\u092f\7\u00ad\2\2\u092c\u092f\7\u00a3\2\2\u092d\u092f")
        buf.write("\7\u00a4\2\2\u092e\u0929\3\2\2\2\u092e\u092a\3\2\2\2\u092e")
        buf.write("\u092b\3\2\2\2\u092e\u092c\3\2\2\2\u092e\u092d\3\2\2\2")
        buf.write("\u092f\u017f\3\2\2\2\u0930\u0936\7\u00a9\2\2\u0931\u0936")
        buf.write("\7\u00a7\2\2\u0932\u0936\7\u00ab\2\2\u0933\u0936\7\u00a8")
        buf.write("\2\2\u0934\u0936\5\u014e\u00a8\2\u0935\u0930\3\2\2\2\u0935")
        buf.write("\u0931\3\2\2\2\u0935\u0932\3\2\2\2\u0935\u0933\3\2\2\2")
        buf.write("\u0935\u0934\3\2\2\2\u0936\u0181\3\2\2\2\u0937\u0938\7")
        buf.write("\u008b\2\2\u0938\u093b\5\u0184\u00c3\2\u0939\u093b\5\u0184")
        buf.write("\u00c3\2\u093a\u0937\3\2\2\2\u093a\u0939\3\2\2\2\u093b")
        buf.write("\u0183\3\2\2\2\u093c\u093d\b\u00c3\1\2\u093d\u093e\5\u0186")
        buf.write("\u00c4\2\u093e\u0943\3\2\2\2\u093f\u0940\f\3\2\2\u0940")
        buf.write("\u0942\5\u018a\u00c6\2\u0941\u093f\3\2\2\2\u0942\u0945")
        buf.write("\3\2\2\2\u0943\u0941\3\2\2\2\u0943\u0944\3\2\2\2\u0944")
        buf.write("\u0185\3\2\2\2\u0945\u0943\3\2\2\2\u0946\u094c\5\u0188")
        buf.write("\u00c5\2\u0947\u094c\5\u0194\u00cb\2\u0948\u094c\5\u0196")
        buf.write("\u00cc\2\u0949\u094c\5\u0198\u00cd\2\u094a\u094c\5\u018c")
        buf.write("\u00c7\2\u094b\u0946\3\2\2\2\u094b\u0947\3\2\2\2\u094b")
        buf.write("\u0948\3\2\2\2\u094b\u0949\3\2\2\2\u094b\u094a\3\2\2\2")
        buf.write("\u094c\u0187\3\2\2\2\u094d\u094e\5\u011c\u008f\2\u094e")
        buf.write("\u0189\3\2\2\2\u094f\u0950\7\21\2\2\u0950\u0956\5\u018c")
        buf.write("\u00c7\2\u0951\u0952\7\24\2\2\u0952\u0953\5\u0184\u00c3")
        buf.write("\2\u0953\u0954\7\25\2\2\u0954\u0956\3\2\2\2\u0955\u094f")
        buf.write("\3\2\2\2\u0955\u0951\3\2\2\2\u0956\u018b\3\2\2\2\u0957")
        buf.write("\u0958\5\u019a\u00ce\2\u0958\u095a\7\22\2\2\u0959\u095b")
        buf.write("\5\u018e\u00c8\2\u095a\u0959\3\2\2\2\u095a\u095b\3\2\2")
        buf.write("\2\u095b\u095c\3\2\2\2\u095c\u095d\7\23\2\2\u095d\u018d")
        buf.write("\3\2\2\2\u095e\u0965\5\u0190\u00c9\2\u095f\u0965\5\u0192")
        buf.write("\u00ca\2\u0960\u0961\5\u0190\u00c9\2\u0961\u0962\7\17")
        buf.write("\2\2\u0962\u0963\5\u0192\u00ca\2\u0963\u0965\3\2\2\2\u0964")
        buf.write("\u095e\3\2\2\2\u0964\u095f\3\2\2\2\u0964\u0960\3\2\2\2")
        buf.write("\u0965\u018f\3\2\2\2\u0966\u0967\b\u00c9\1\2\u0967\u0968")
        buf.write("\5\u0184\u00c3\2\u0968\u096e\3\2\2\2\u0969\u096a\f\3\2")
        buf.write("\2\u096a\u096b\7\17\2\2\u096b\u096d\5\u0184\u00c3\2\u096c")
        buf.write("\u0969\3\2\2\2\u096d\u0970\3\2\2\2\u096e\u096c\3\2\2\2")
        buf.write("\u096e\u096f\3\2\2\2\u096f\u0191\3\2\2\2\u0970\u096e\3")
        buf.write("\2\2\2\u0971\u0972\b\u00ca\1\2\u0972\u0973\5\u019a\u00ce")
        buf.write("\2\u0973\u0974\7*\2\2\u0974\u0975\5\u0184\u00c3\2\u0975")
        buf.write("\u097e\3\2\2\2\u0976\u0977\f\3\2\2\u0977\u0978\7\17\2")
        buf.write("\2\u0978\u0979\5\u019a\u00ce\2\u0979\u097a\7*\2\2\u097a")
        buf.write("\u097b\5\u0184\u00c3\2\u097b\u097d\3\2\2\2\u097c\u0976")
        buf.write("\3\2\2\2\u097d\u0980\3\2\2\2\u097e\u097c\3\2\2\2\u097e")
        buf.write("\u097f\3\2\2\2\u097f\u0193\3\2\2\2\u0980\u097e\3\2\2\2")
        buf.write("\u0981\u0982\7\22\2\2\u0982\u0983\5\u0184\u00c3\2\u0983")
        buf.write("\u0984\7\23\2\2\u0984\u0195\3\2\2\2\u0985\u0986\b\u00cc")
        buf.write("\1\2\u0986\u0989\7\u00ab\2\2\u0987\u0989\5\u019a\u00ce")
        buf.write("\2\u0988\u0985\3\2\2\2\u0988\u0987\3\2\2\2\u0989\u098f")
        buf.write("\3\2\2\2\u098a\u098b\f\3\2\2\u098b\u098c\7\21\2\2\u098c")
        buf.write("\u098e\5\u019a\u00ce\2\u098d\u098a\3\2\2\2\u098e\u0991")
        buf.write("\3\2\2\2\u098f\u098d\3\2\2\2\u098f\u0990\3\2\2\2\u0990")
        buf.write("\u0197\3\2\2\2\u0991\u098f\3\2\2\2\u0992\u0998\7\u00af")
        buf.write("\2\2\u0993\u0998\7\u00b1\2\2\u0994\u0998\7\u00ad\2\2\u0995")
        buf.write("\u0998\7\u00a3\2\2\u0996\u0998\7\u00a4\2\2\u0997\u0992")
        buf.write("\3\2\2\2\u0997\u0993\3\2\2\2\u0997\u0994\3\2\2\2\u0997")
        buf.write("\u0995\3\2\2\2\u0997\u0996\3\2\2\2\u0998\u0199\3\2\2\2")
        buf.write("\u0999\u099f\7\u00a9\2\2\u099a\u099f\7\u00a7\2\2\u099b")
        buf.write("\u099f\7\u00ab\2\2\u099c\u099f\7\u00a8\2\2\u099d\u099f")
        buf.write("\5\u014e\u00a8\2\u099e\u0999\3\2\2\2\u099e\u099a\3\2\2")
        buf.write("\2\u099e\u099b\3\2\2\2\u099e\u099c\3\2\2\2\u099e\u099d")
        buf.write("\3\2\2\2\u099f\u019b\3\2\2\2\u09a0\u09a1\7\u008b\2\2\u09a1")
        buf.write("\u09a2\5\u019e\u00d0\2\u09a2\u09a3\7\16\2\2\u09a3\u09a8")
        buf.write("\3\2\2\2\u09a4\u09a5\5\u019e\u00d0\2\u09a5\u09a6\7\16")
        buf.write("\2\2\u09a6\u09a8\3\2\2\2\u09a7\u09a0\3\2\2\2\u09a7\u09a4")
        buf.write("\3\2\2\2\u09a8\u019d\3\2\2\2\u09a9\u09aa\b\u00d0\1\2\u09aa")
        buf.write("\u09ab\5\u01a0\u00d1\2\u09ab\u09b0\3\2\2\2\u09ac\u09ad")
        buf.write("\f\3\2\2\u09ad\u09af\5\u01a6\u00d4\2\u09ae\u09ac\3\2\2")
        buf.write("\2\u09af\u09b2\3\2\2\2\u09b0\u09ae\3\2\2\2\u09b0\u09b1")
        buf.write("\3\2\2\2\u09b1\u019f\3\2\2\2\u09b2\u09b0\3\2\2\2\u09b3")
        buf.write("\u09b9\5\u01a2\u00d2\2\u09b4\u09b9\5\u01a4\u00d3\2\u09b5")
        buf.write("\u09b9\5\u01ae\u00d8\2\u09b6\u09b9\5\u01b0\u00d9\2\u09b7")
        buf.write("\u09b9\5\u01b4\u00db\2\u09b8\u09b3\3\2\2\2\u09b8\u09b4")
        buf.write("\3\2\2\2\u09b8\u09b5\3\2\2\2\u09b8\u09b6\3\2\2\2\u09b8")
        buf.write("\u09b7\3\2\2\2\u09b9\u01a1\3\2\2\2\u09ba\u09bb\5\u011c")
        buf.write("\u008f\2\u09bb\u01a3\3\2\2\2\u09bc\u09bd\5\u0150\u00a9")
        buf.write("\2\u09bd\u09be\5\u01a8\u00d5\2\u09be\u01a5\3\2\2\2\u09bf")
        buf.write("\u09c0\7\21\2\2\u09c0\u09c3\5\u01a8\u00d5\2\u09c1\u09c3")
        buf.write("\5\u01ac\u00d7\2\u09c2\u09bf\3\2\2\2\u09c2\u09c1\3\2\2")
        buf.write("\2\u09c3\u01a7\3\2\2\2\u09c4\u09c5\5\u01b6\u00dc\2\u09c5")
        buf.write("\u09c7\7\22\2\2\u09c6\u09c8\5\u01aa\u00d6\2\u09c7\u09c6")
        buf.write("\3\2\2\2\u09c7\u09c8\3\2\2\2\u09c8\u09c9\3\2\2\2\u09c9")
        buf.write("\u09ca\7\23\2\2\u09ca\u01a9\3\2\2\2\u09cb\u09cc\b\u00d6")
        buf.write("\1\2\u09cc\u09cd\5\u019e\u00d0\2\u09cd\u09d3\3\2\2\2\u09ce")
        buf.write("\u09cf\f\3\2\2\u09cf\u09d0\7\17\2\2\u09d0\u09d2\5\u019e")
        buf.write("\u00d0\2\u09d1\u09ce\3\2\2\2\u09d2\u09d5\3\2\2\2\u09d3")
        buf.write("\u09d1\3\2\2\2\u09d3\u09d4\3\2\2\2\u09d4\u01ab\3\2\2\2")
        buf.write("\u09d5\u09d3\3\2\2\2\u09d6\u09d7\7\24\2\2\u09d7\u09d8")
        buf.write("\5\u019e\u00d0\2\u09d8\u09d9\7\25\2\2\u09d9\u01ad\3\2")
        buf.write("\2\2\u09da\u09db\7\22\2\2\u09db\u09dc\5\u019e\u00d0\2")
        buf.write("\u09dc\u09dd\7\23\2\2\u09dd\u01af\3\2\2\2\u09de\u09df")
        buf.write("\b\u00d9\1\2\u09df\u09e0\5\u01b6\u00dc\2\u09e0\u09e6\3")
        buf.write("\2\2\2\u09e1\u09e2\f\3\2\2\u09e2\u09e3\7\21\2\2\u09e3")
        buf.write("\u09e5\5\u01b6\u00dc\2\u09e4\u09e1\3\2\2\2\u09e5\u09e8")
        buf.write("\3\2\2\2\u09e6\u09e4\3\2\2\2\u09e6\u09e7\3\2\2\2\u09e7")
        buf.write("\u01b1\3\2\2\2\u09e8\u09e6\3\2\2\2\u09e9\u09ea\b\u00da")
        buf.write("\1\2\u09ea\u09eb\5\u01b0\u00d9\2\u09eb\u09f0\3\2\2\2\u09ec")
        buf.write("\u09ed\f\3\2\2\u09ed\u09ef\7\u00ab\2\2\u09ee\u09ec\3\2")
        buf.write("\2\2\u09ef\u09f2\3\2\2\2\u09f0\u09ee\3\2\2\2\u09f0\u09f1")
        buf.write("\3\2\2\2\u09f1\u01b3\3\2\2\2\u09f2\u09f0\3\2\2\2\u09f3")
        buf.write("\u09f9\7\u00af\2\2\u09f4\u09f9\7\u00b1\2\2\u09f5\u09f9")
        buf.write("\7\u00ad\2\2\u09f6\u09f9\7\u00a3\2\2\u09f7\u09f9\7\u00a4")
        buf.write("\2\2\u09f8\u09f3\3\2\2\2\u09f8\u09f4\3\2\2\2\u09f8\u09f5")
        buf.write("\3\2\2\2\u09f8\u09f6\3\2\2\2\u09f8\u09f7\3\2\2\2\u09f9")
        buf.write("\u01b5\3\2\2\2\u09fa\u0a00\7\u00a9\2\2\u09fb\u0a00\7\u00a7")
        buf.write("\2\2\u09fc\u0a00\7\u00ab\2\2\u09fd\u0a00\7\u00a8\2\2\u09fe")
        buf.write("\u0a00\5\u014e\u00a8\2\u09ff\u09fa\3\2\2\2\u09ff\u09fb")
        buf.write("\3\2\2\2\u09ff\u09fc\3\2\2\2\u09ff\u09fd\3\2\2\2\u09ff")
        buf.write("\u09fe\3\2\2\2\u0a00\u01b7\3\2\2\2\u0a01\u0a02\7\u008b")
        buf.write("\2\2\u0a02\u0a03\5\u01ba\u00de\2\u0a03\u0a04\7\16\2\2")
        buf.write("\u0a04\u0a09\3\2\2\2\u0a05\u0a06\5\u01ba\u00de\2\u0a06")
        buf.write("\u0a07\7\16\2\2\u0a07\u0a09\3\2\2\2\u0a08\u0a01\3\2\2")
        buf.write("\2\u0a08\u0a05\3\2\2\2\u0a09\u01b9\3\2\2\2\u0a0a\u0a0b")
        buf.write("\b\u00de\1\2\u0a0b\u0a0c\5\u01bc\u00df\2\u0a0c\u0a11\3")
        buf.write("\2\2\2\u0a0d\u0a0e\f\3\2\2\u0a0e\u0a10\5\u01c2\u00e2\2")
        buf.write("\u0a0f\u0a0d\3\2\2\2\u0a10\u0a13\3\2\2\2\u0a11\u0a0f\3")
        buf.write("\2\2\2\u0a11\u0a12\3\2\2\2\u0a12\u01bb\3\2\2\2\u0a13\u0a11")
        buf.write("\3\2\2\2\u0a14\u0a1a\5\u01be\u00e0\2\u0a15\u0a1a\5\u01c0")
        buf.write("\u00e1\2\u0a16\u0a1a\5\u01ca\u00e6\2\u0a17\u0a1a\5\u01cc")
        buf.write("\u00e7\2\u0a18\u0a1a\5\u01ce\u00e8\2\u0a19\u0a14\3\2\2")
        buf.write("\2\u0a19\u0a15\3\2\2\2\u0a19\u0a16\3\2\2\2\u0a19\u0a17")
        buf.write("\3\2\2\2\u0a19\u0a18\3\2\2\2\u0a1a\u01bd\3\2\2\2\u0a1b")
        buf.write("\u0a1c\5\u011c\u008f\2\u0a1c\u01bf\3\2\2\2\u0a1d\u0a1e")
        buf.write("\5\u0150\u00a9\2\u0a1e\u0a1f\5\u01c4\u00e3\2\u0a1f\u01c1")
        buf.write("\3\2\2\2\u0a20\u0a21\7\21\2\2\u0a21\u0a24\5\u01c4\u00e3")
        buf.write("\2\u0a22\u0a24\5\u01c8\u00e5\2\u0a23\u0a20\3\2\2\2\u0a23")
        buf.write("\u0a22\3\2\2\2\u0a24\u01c3\3\2\2\2\u0a25\u0a26\5\u01d0")
        buf.write("\u00e9\2\u0a26\u0a28\7\22\2\2\u0a27\u0a29\5\u01c6\u00e4")
        buf.write("\2\u0a28\u0a27\3\2\2\2\u0a28\u0a29\3\2\2\2\u0a29\u0a2a")
        buf.write("\3\2\2\2\u0a2a\u0a2b\7\23\2\2\u0a2b\u01c5\3\2\2\2\u0a2c")
        buf.write("\u0a2d\b\u00e4\1\2\u0a2d\u0a2e\5\u01ba\u00de\2\u0a2e\u0a34")
        buf.write("\3\2\2\2\u0a2f\u0a30\f\3\2\2\u0a30\u0a31\7\17\2\2\u0a31")
        buf.write("\u0a33\5\u01ba\u00de\2\u0a32\u0a2f\3\2\2\2\u0a33\u0a36")
        buf.write("\3\2\2\2\u0a34\u0a32\3\2\2\2\u0a34\u0a35\3\2\2\2\u0a35")
        buf.write("\u01c7\3\2\2\2\u0a36\u0a34\3\2\2\2\u0a37\u0a38\7\24\2")
        buf.write("\2\u0a38\u0a39\5\u01ba\u00de\2\u0a39\u0a3a\7\25\2\2\u0a3a")
        buf.write("\u01c9\3\2\2\2\u0a3b\u0a3c\7\22\2\2\u0a3c\u0a3d\5\u01ba")
        buf.write("\u00de\2\u0a3d\u0a3e\7\23\2\2\u0a3e\u01cb\3\2\2\2\u0a3f")
        buf.write("\u0a40\b\u00e7\1\2\u0a40\u0a43\7\u00ab\2\2\u0a41\u0a43")
        buf.write("\5\u01d0\u00e9\2\u0a42\u0a3f\3\2\2\2\u0a42\u0a41\3\2\2")
        buf.write("\2\u0a43\u0a49\3\2\2\2\u0a44\u0a45\f\3\2\2\u0a45\u0a46")
        buf.write("\7\21\2\2\u0a46\u0a48\5\u01d0\u00e9\2\u0a47\u0a44\3\2")
        buf.write("\2\2\u0a48\u0a4b\3\2\2\2\u0a49\u0a47\3\2\2\2\u0a49\u0a4a")
        buf.write("\3\2\2\2\u0a4a\u01cd\3\2\2\2\u0a4b\u0a49\3\2\2\2\u0a4c")
        buf.write("\u0a52\7\u00af\2\2\u0a4d\u0a52\7\u00b1\2\2\u0a4e\u0a52")
        buf.write("\7\u00ad\2\2\u0a4f\u0a52\7\u00a3\2\2\u0a50\u0a52\7\u00a4")
        buf.write("\2\2\u0a51\u0a4c\3\2\2\2\u0a51\u0a4d\3\2\2\2\u0a51\u0a4e")
        buf.write("\3\2\2\2\u0a51\u0a4f\3\2\2\2\u0a51\u0a50\3\2\2\2\u0a52")
        buf.write("\u01cf\3\2\2\2\u0a53\u0a59\7\u00a9\2\2\u0a54\u0a59\7\u00a7")
        buf.write("\2\2\u0a55\u0a59\7\u00ab\2\2\u0a56\u0a59\7\u00a8\2\2\u0a57")
        buf.write("\u0a59\5\u014e\u00a8\2\u0a58\u0a53\3\2\2\2\u0a58\u0a54")
        buf.write("\3\2\2\2\u0a58\u0a55\3\2\2\2\u0a58\u0a56\3\2\2\2\u0a58")
        buf.write("\u0a57\3\2\2\2\u0a59\u01d1\3\2\2\2\u0a5a\u0a5d\5\u01d4")
        buf.write("\u00eb\2\u0a5b\u0a5d\5\u01d6\u00ec\2\u0a5c\u0a5a\3\2\2")
        buf.write("\2\u0a5c\u0a5b\3\2\2\2\u0a5d\u01d3\3\2\2\2\u0a5e\u0a66")
        buf.write("\5\u01dc\u00ef\2\u0a5f\u0a61\5\u01de\u00f0\2\u0a60\u0a62")
        buf.write("\5\u01ea\u00f6\2\u0a61\u0a60\3\2\2\2\u0a61\u0a62\3\2\2")
        buf.write("\2\u0a62\u0a63\3\2\2\2\u0a63\u0a64\5\u01e0\u00f1\2\u0a64")
        buf.write("\u0a66\3\2\2\2\u0a65\u0a5e\3\2\2\2\u0a65\u0a5f\3\2\2\2")
        buf.write("\u0a66\u01d5\3\2\2\2\u0a67\u0a68\5\u01d8\u00ed\2\u0a68")
        buf.write("\u0a6a\5\u0090I\2\u0a69\u0a6b\5\u01ea\u00f6\2\u0a6a\u0a69")
        buf.write("\3\2\2\2\u0a6a\u0a6b\3\2\2\2\u0a6b\u0a6c\3\2\2\2\u0a6c")
        buf.write("\u0a6d\5\u0090I\2\u0a6d\u0a6e\5\u01da\u00ee\2\u0a6e\u01d7")
        buf.write("\3\2\2\2\u0a6f\u0a70\7&\2\2\u0a70\u0a73\7$\2\2\u0a71\u0a73")
        buf.write("\7(\2\2\u0a72\u0a6f\3\2\2\2\u0a72\u0a71\3\2\2\2\u0a73")
        buf.write("\u01d9\3\2\2\2\u0a74\u0a75\7&\2\2\u0a75\u0a76\7!\2\2\u0a76")
        buf.write("\u0a77\7$\2\2\u0a77\u01db\3\2\2\2\u0a78\u0a79\7&\2\2\u0a79")
        buf.write("\u0a7a\5\u01e2\u00f2\2\u0a7a\u0a7e\5\u0090I\2\u0a7b\u0a7d")
        buf.write("\5\u01e6\u00f4\2\u0a7c\u0a7b\3\2\2\2\u0a7d\u0a80\3\2\2")
        buf.write("\2\u0a7e\u0a7c\3\2\2\2\u0a7e\u0a7f\3\2\2\2\u0a7f\u0a81")
        buf.write("\3\2\2\2\u0a80\u0a7e\3\2\2\2\u0a81\u0a82\7!\2\2\u0a82")
        buf.write("\u0a83\7$\2\2\u0a83\u01dd\3\2\2\2\u0a84\u0a85\7&\2\2\u0a85")
        buf.write("\u0a86\5\u01e2\u00f2\2\u0a86\u0a8a\5\u0090I\2\u0a87\u0a89")
        buf.write("\5\u01e6\u00f4\2\u0a88\u0a87\3\2\2\2\u0a89\u0a8c\3\2\2")
        buf.write("\2\u0a8a\u0a88\3\2\2\2\u0a8a\u0a8b\3\2\2\2\u0a8b\u0a8d")
        buf.write("\3\2\2\2\u0a8c\u0a8a\3\2\2\2\u0a8d\u0a8e\7$\2\2\u0a8e")
        buf.write("\u01df\3\2\2\2\u0a8f\u0a90\7&\2\2\u0a90\u0a91\7!\2\2\u0a91")
        buf.write("\u0a92\5\u01e2\u00f2\2\u0a92\u0a93\7$\2\2\u0a93\u01e1")
        buf.write("\3\2\2\2\u0a94\u0a99\5\u01e4\u00f3\2\u0a95\u0a96\7\21")
        buf.write("\2\2\u0a96\u0a98\5\u01e4\u00f3\2\u0a97\u0a95\3\2\2\2\u0a98")
        buf.write("\u0a9b\3\2\2\2\u0a99\u0a97\3\2\2\2\u0a99\u0a9a\3\2\2\2")
        buf.write("\u0a9a\u01e3\3\2\2\2\u0a9b\u0a99\3\2\2\2\u0a9c\u0aa0\5")
        buf.write("\u00ccg\2\u0a9d\u0a9f\5\u00ceh\2\u0a9e\u0a9d\3\2\2\2\u0a9f")
        buf.write("\u0aa2\3\2\2\2\u0aa0\u0a9e\3\2\2\2\u0aa0\u0aa1\3\2\2\2")
        buf.write("\u0aa1\u01e5\3\2\2\2\u0aa2\u0aa0\3\2\2\2\u0aa3\u0aa6\5")
        buf.write("\u01e4\u00f3\2\u0aa4\u0aa5\7*\2\2\u0aa5\u0aa7\5\u01e8")
        buf.write("\u00f5\2\u0aa6\u0aa4\3\2\2\2\u0aa6\u0aa7\3\2\2\2\u0aa7")
        buf.write("\u0aa8\3\2\2\2\u0aa8\u0aa9\5\u0090I\2\u0aa9\u01e7\3\2")
        buf.write("\2\2\u0aaa\u0ab0\7\u00ad\2\2\u0aab\u0aac\7\26\2\2\u0aac")
        buf.write("\u0aad\5`\61\2\u0aad\u0aae\7\27\2\2\u0aae\u0ab0\3\2\2")
        buf.write("\2\u0aaf\u0aaa\3\2\2\2\u0aaf\u0aab\3\2\2\2\u0ab0\u01e9")
        buf.write("\3\2\2\2\u0ab1\u0ab3\5\u01ec\u00f7\2\u0ab2\u0ab1\3\2\2")
        buf.write("\2\u0ab3\u0ab4\3\2\2\2\u0ab4\u0ab2\3\2\2\2\u0ab4\u0ab5")
        buf.write("\3\2\2\2\u0ab5\u01eb\3\2\2\2\u0ab6\u0abe\5\u01ee\u00f8")
        buf.write("\2\u0ab7\u0abe\5\u01d4\u00eb\2\u0ab8\u0aba\7\26\2\2\u0ab9")
        buf.write("\u0abb\5`\61\2\u0aba\u0ab9\3\2\2\2\u0aba\u0abb\3\2\2\2")
        buf.write("\u0abb\u0abc\3\2\2\2\u0abc\u0abe\7\27\2\2\u0abd\u0ab6")
        buf.write("\3\2\2\2\u0abd\u0ab7\3\2\2\2\u0abd\u0ab8\3\2\2\2\u0abe")
        buf.write("\u01ed\3\2\2\2\u0abf\u0ac1\n\13\2\2\u0ac0\u0abf\3\2\2")
        buf.write("\2\u0ac1\u0ac2\3\2\2\2\u0ac2\u0ac0\3\2\2\2\u0ac2\u0ac3")
        buf.write("\3\2\2\2\u0ac3\u01ef\3\2\2\2\u0ac4\u0ac6\7\26\2\2\u0ac5")
        buf.write("\u0ac7\5\u01f2\u00fa\2\u0ac6\u0ac5\3\2\2\2\u0ac7\u0ac8")
        buf.write("\3\2\2\2\u0ac8\u0ac6\3\2\2\2\u0ac8\u0ac9\3\2\2\2\u0ac9")
        buf.write("\u0aca\3\2\2\2\u0aca\u0acb\7\27\2\2\u0acb\u01f1\3\2\2")
        buf.write("\2\u0acc\u0acd\5\u01f4\u00fb\2\u0acd\u0ace\7\r\2\2\u0ace")
        buf.write("\u0acf\5\u01f6\u00fc\2\u0acf\u0ad0\7\16\2\2\u0ad0\u01f3")
        buf.write("\3\2\2\2\u0ad1\u0ad2\b\u00fb\1\2\u0ad2\u0ad6\5\u00ccg")
        buf.write("\2\u0ad3\u0ad4\7\37\2\2\u0ad4\u0ad6\5\u00d0i\2\u0ad5\u0ad1")
        buf.write("\3\2\2\2\u0ad5\u0ad3\3\2\2\2\u0ad6\u0adf\3\2\2\2\u0ad7")
        buf.write("\u0ad9\f\3\2\2\u0ad8\u0ada\5\u00ceh\2\u0ad9\u0ad8\3\2")
        buf.write("\2\2\u0ada\u0adb\3\2\2\2\u0adb\u0ad9\3\2\2\2\u0adb\u0adc")
        buf.write("\3\2\2\2\u0adc\u0ade\3\2\2\2\u0add\u0ad7\3\2\2\2\u0ade")
        buf.write("\u0ae1\3\2\2\2\u0adf\u0add\3\2\2\2\u0adf\u0ae0\3\2\2\2")
        buf.write("\u0ae0\u01f5\3\2\2\2\u0ae1\u0adf\3\2\2\2\u0ae2\u0ae3\7")
        buf.write("\26\2\2\u0ae3\u0ae4\5`\61\2\u0ae4\u0ae5\7\27\2\2\u0ae5")
        buf.write("\u0ae8\3\2\2\2\u0ae6\u0ae8\5\u01f8\u00fd\2\u0ae7\u0ae2")
        buf.write("\3\2\2\2\u0ae7\u0ae6\3\2\2\2\u0ae8\u01f7\3\2\2\2\u0ae9")
        buf.write("\u0aeb\n\f\2\2\u0aea\u0ae9\3\2\2\2\u0aeb\u0aec\3\2\2\2")
        buf.write("\u0aec\u0aea\3\2\2\2\u0aec\u0aed\3\2\2\2\u0aed\u01f9\3")
        buf.write("\2\2\2\u0104\u0201\u0205\u0220\u0227\u022f\u0231\u0239")
        buf.write("\u0246\u024e\u0252\u025c\u0268\u026e\u0271\u0274\u027d")
        buf.write("\u0285\u028a\u0290\u0298\u029d\u02a3\u02a8\u02b1\u02b6")
        buf.write("\u02bb\u02c4\u02c9\u02dd\u02e2\u02e5\u02eb\u02f1\u02f4")
        buf.write("\u02fa\u02ff\u0304\u0307\u030d\u0324\u032e\u0333\u033a")
        buf.write("\u033c\u0352\u0363\u036a\u0372\u0389\u038b\u039a\u03a2")
        buf.write("\u03ac\u03c1\u03c5\u03d9\u03e6\u03ea\u03f2\u03f5\u03fa")
        buf.write("\u03fd\u0405\u0410\u0414\u041b\u0422\u0429\u042f\u0436")
        buf.write("\u0454\u04c8\u04ca\u04d9\u04e2\u04ed\u04f9\u0503\u0518")
        buf.write("\u0525\u0532\u0538\u0541\u0548\u0550\u0552\u055a\u056d")
        buf.write("\u0573\u057c\u0583\u058b\u0594\u0598\u05a1\u05b1\u05b8")
        buf.write("\u05bf\u05c3\u05cf\u05d6\u05dd\u05ea\u05f8\u05fe\u0601")
        buf.write("\u060c\u0614\u061c\u0625\u062f\u0632\u0636\u0642\u0648")
        buf.write("\u0650\u0659\u0661\u066e\u0671\u0675\u067a\u067e\u0687")
        buf.write("\u069c\u06a5\u06a7\u06ac\u06bf\u06c4\u06cd\u06d1\u06d8")
        buf.write("\u06dd\u06e1\u06ed\u06fe\u0703\u0706\u070a\u070f\u0716")
        buf.write("\u0721\u0723\u072c\u0734\u073c\u0744\u074c\u0752\u075e")
        buf.write("\u0762\u076c\u0774\u0778\u077e\u0785\u078a\u0791\u0799")
        buf.write("\u07a0\u07aa\u07b7\u07bb\u07be\u07c2\u07c5\u07cd\u07d6")
        buf.write("\u07df\u07e8\u07f9\u080c\u0813\u081b\u0825\u082d\u0830")
        buf.write("\u0834\u0839\u0843\u0847\u0852\u0855\u085c\u0865\u0870")
        buf.write("\u087d\u0884\u088e\u0898\u089b\u089f\u08b0\u08b8\u08bc")
        buf.write("\u08c4\u08ec\u08f5\u08ff\u090b\u0910\u091c\u092e\u0935")
        buf.write("\u093a\u0943\u094b\u0955\u095a\u0964\u096e\u097e\u0988")
        buf.write("\u098f\u0997\u099e\u09a7\u09b0\u09b8\u09c2\u09c7\u09d3")
        buf.write("\u09e6\u09f0\u09f8\u09ff\u0a08\u0a11\u0a19\u0a23\u0a28")
        buf.write("\u0a34\u0a42\u0a49\u0a51\u0a58\u0a5c\u0a61\u0a65\u0a6a")
        buf.write("\u0a72\u0a7e\u0a8a\u0a99\u0aa0\u0aa6\u0aaf\u0ab4\u0aba")
        buf.write("\u0abd\u0ac2\u0ac8\u0ad5\u0adb\u0adf\u0ae7\u0aec")
        return buf.getvalue()


class OParser ( AbstractParser ):

    grammarFileName = "OParser.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "' '", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "'Java:'", "'C#:'", "'Python2:'", "'Python3:'", "'JavaScript:'", 
                     "'Swift:'", "':'", "';'", "<INVALID>", "'..'", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "'!'", "'&'", 
                     "'&&'", "'|'", "'||'", "<INVALID>", "'-'", "'*'", "'/'", 
                     "'\\'", "'%'", "'>'", "'>='", "'<'", "'<='", "'<>'", 
                     "'<:>'", "'='", "'!='", "'=='", "'~='", "'~'", "'<-'", 
                     "'->'", "'=>'", "'Boolean'", "'Css'", "'Character'", 
                     "'Text'", "'Integer'", "'Decimal'", "'Date'", "'Time'", 
                     "'DateTime'", "'Period'", "'Version'", "'Method:'", 
                     "'Code'", "'Document'", "'Blob'", "'Image'", "'Uuid'", 
                     "'Iterator'", "'Cursor'", "'Html'", "'Type'", "'abstract'", 
                     "'all'", "'always'", "'and'", "'any'", "'as'", "<INVALID>", 
                     "'attr'", "'attribute'", "'attributes'", "'bindings'", 
                     "'break'", "'by'", "'case'", "'catch'", "'category'", 
                     "'class'", "'close'", "'contains'", "'def'", "'default'", 
                     "'define'", "'delete'", "<INVALID>", "'do'", "'doing'", 
                     "'each'", "'else'", "'enum'", "'enumerated'", "'except'", 
                     "'execute'", "'expecting'", "'extends'", "'fetch'", 
                     "'filtered'", "'finally'", "'flush'", "'for'", "'from'", 
                     "'getter'", "'has'", "'if'", "'in'", "'index'", "'invoke:'", 
                     "'is'", "'matching'", "'method'", "'methods'", "'modulo'", 
                     "'mutable'", "'native'", "'None'", "'not'", "<INVALID>", 
                     "'null'", "'on'", "'one'", "'operator'", "'or'", "'order'", 
                     "'otherwise'", "'pass'", "'raise'", "'read'", "'receiving'", 
                     "'resource'", "'return'", "'returning'", "'rows'", 
                     "'self'", "'setter'", "'singleton'", "'sorted'", "'storable'", 
                     "'store'", "'super'", "'switch'", "'test'", "'then'", 
                     "'this'", "'throw'", "'to'", "'try'", "'verifying'", 
                     "'widget'", "'with'", "'when'", "'where'", "'while'", 
                     "'write'", "<INVALID>", "<INVALID>", "'MIN_INTEGER'", 
                     "'MAX_INTEGER'" ]

    symbolicNames = [ "<INVALID>", "SPACE", "WS", "LF", "COMMENT", "JAVA", 
                      "CSHARP", "PYTHON2", "PYTHON3", "JAVASCRIPT", "SWIFT", 
                      "COLON", "SEMI", "COMMA", "RANGE", "DOT", "LPAR", 
                      "RPAR", "LBRAK", "RBRAK", "LCURL", "RCURL", "QMARK", 
                      "XMARK", "AMP", "AMP2", "PIPE", "PIPE2", "PLUS", "MINUS", 
                      "STAR", "SLASH", "BSLASH", "PERCENT", "GT", "GTE", 
                      "LT", "LTE", "LTGT", "LTCOLONGT", "EQ", "XEQ", "EQ2", 
                      "TEQ", "TILDE", "LARROW", "RARROW", "EGT", "BOOLEAN", 
                      "CSS", "CHARACTER", "TEXT", "INTEGER", "DECIMAL", 
                      "DATE", "TIME", "DATETIME", "PERIOD", "VERSION", "METHOD_COLON", 
                      "CODE", "DOCUMENT", "BLOB", "IMAGE", "UUID", "ITERATOR", 
                      "CURSOR", "HTML", "TYPE", "ABSTRACT", "ALL", "ALWAYS", 
                      "AND", "ANY", "AS", "ASC", "ATTR", "ATTRIBUTE", "ATTRIBUTES", 
                      "BINDINGS", "BREAK", "BY", "CASE", "CATCH", "CATEGORY", 
                      "CLASS", "CLOSE", "CONTAINS", "DEF", "DEFAULT", "DEFINE", 
                      "DELETE", "DESC", "DO", "DOING", "EACH", "ELSE", "ENUM", 
                      "ENUMERATED", "EXCEPT", "EXECUTE", "EXPECTING", "EXTENDS", 
                      "FETCH", "FILTERED", "FINALLY", "FLUSH", "FOR", "FROM", 
                      "GETTER", "HAS", "IF", "IN", "INDEX", "INVOKE_COLON", 
                      "IS", "MATCHING", "METHOD", "METHODS", "MODULO", "MUTABLE", 
                      "NATIVE", "NONE", "NOT", "NOTHING", "NULL", "ON", 
                      "ONE", "OPERATOR", "OR", "ORDER", "OTHERWISE", "PASS", 
                      "RAISE", "READ", "RECEIVING", "RESOURCE", "RETURN", 
                      "RETURNING", "ROWS", "SELF", "SETTER", "SINGLETON", 
                      "SORTED", "STORABLE", "STORE", "SUPER", "SWITCH", 
                      "TEST", "THEN", "THIS", "THROW", "TO", "TRY", "VERIFYING", 
                      "WIDGET", "WITH", "WHEN", "WHERE", "WHILE", "WRITE", 
                      "BOOLEAN_LITERAL", "CHAR_LITERAL", "MIN_INTEGER", 
                      "MAX_INTEGER", "SYMBOL_IDENTIFIER", "TYPE_IDENTIFIER", 
                      "VARIABLE_IDENTIFIER", "NATIVE_IDENTIFIER", "DOLLAR_IDENTIFIER", 
                      "ARONDBASE_IDENTIFIER", "TEXT_LITERAL", "UUID_LITERAL", 
                      "INTEGER_LITERAL", "HEXA_LITERAL", "DECIMAL_LITERAL", 
                      "DATETIME_LITERAL", "TIME_LITERAL", "DATE_LITERAL", 
                      "PERIOD_LITERAL", "VERSION_LITERAL" ]

    RULE_enum_category_declaration = 0
    RULE_enum_native_declaration = 1
    RULE_category_symbol = 2
    RULE_native_symbol = 3
    RULE_attribute_declaration = 4
    RULE_concrete_widget_declaration = 5
    RULE_native_widget_declaration = 6
    RULE_concrete_category_declaration = 7
    RULE_singleton_category_declaration = 8
    RULE_derived_list = 9
    RULE_category_method_list = 10
    RULE_operator_method_declaration = 11
    RULE_setter_method_declaration = 12
    RULE_native_setter_declaration = 13
    RULE_getter_method_declaration = 14
    RULE_native_getter_declaration = 15
    RULE_native_resource_declaration = 16
    RULE_native_category_declaration = 17
    RULE_native_category_bindings = 18
    RULE_native_category_binding_list = 19
    RULE_abstract_method_declaration = 20
    RULE_concrete_method_declaration = 21
    RULE_native_method_declaration = 22
    RULE_test_method_declaration = 23
    RULE_assertion = 24
    RULE_typed_argument = 25
    RULE_statement_or_list = 26
    RULE_statement = 27
    RULE_flush_statement = 28
    RULE_store_statement = 29
    RULE_with_resource_statement = 30
    RULE_with_singleton_statement = 31
    RULE_switch_statement = 32
    RULE_switch_case_statement = 33
    RULE_for_each_statement = 34
    RULE_do_while_statement = 35
    RULE_while_statement = 36
    RULE_if_statement = 37
    RULE_else_if_statement_list = 38
    RULE_raise_statement = 39
    RULE_try_statement = 40
    RULE_catch_statement = 41
    RULE_break_statement = 42
    RULE_return_statement = 43
    RULE_method_call_expression = 44
    RULE_method_call_statement = 45
    RULE_x_expression = 46
    RULE_expression = 47
    RULE_an_expression = 48
    RULE_closure_expression = 49
    RULE_selectable_expression = 50
    RULE_instance_expression = 51
    RULE_mutable_instance_expression = 52
    RULE_method_expression = 53
    RULE_blob_expression = 54
    RULE_document_expression = 55
    RULE_write_statement = 56
    RULE_filtered_list_expression = 57
    RULE_fetch_expression = 58
    RULE_fetch_statement = 59
    RULE_sorted_expression = 60
    RULE_instance_selector = 61
    RULE_constructor_expression = 62
    RULE_copy_from = 63
    RULE_argument_assignment_list = 64
    RULE_argument_assignment = 65
    RULE_assign_instance_statement = 66
    RULE_child_instance = 67
    RULE_assign_tuple_statement = 68
    RULE_type_literal = 69
    RULE_null_literal = 70
    RULE_ws_plus = 71
    RULE_repl = 72
    RULE_declaration_list = 73
    RULE_declarations = 74
    RULE_declaration = 75
    RULE_annotation_constructor = 76
    RULE_annotation_identifier = 77
    RULE_annotation_argument = 78
    RULE_annotation_argument_name = 79
    RULE_annotation_argument_value = 80
    RULE_resource_declaration = 81
    RULE_enum_declaration = 82
    RULE_native_symbol_list = 83
    RULE_category_symbol_list = 84
    RULE_symbol_list = 85
    RULE_attribute_constraint = 86
    RULE_list_literal = 87
    RULE_set_literal = 88
    RULE_expression_list = 89
    RULE_range_literal = 90
    RULE_typedef = 91
    RULE_primary_type = 92
    RULE_native_type = 93
    RULE_category_type = 94
    RULE_mutable_category_type = 95
    RULE_code_type = 96
    RULE_category_declaration = 97
    RULE_widget_declaration = 98
    RULE_type_identifier_list = 99
    RULE_method_identifier = 100
    RULE_identifier_or_keyword = 101
    RULE_nospace_hyphen_identifier_or_keyword = 102
    RULE_nospace_identifier_or_keyword = 103
    RULE_identifier = 104
    RULE_member_identifier = 105
    RULE_variable_identifier = 106
    RULE_attribute_identifier = 107
    RULE_type_identifier = 108
    RULE_symbol_identifier = 109
    RULE_argument_list = 110
    RULE_argument = 111
    RULE_operator_argument = 112
    RULE_named_argument = 113
    RULE_code_argument = 114
    RULE_category_or_any_type = 115
    RULE_any_type = 116
    RULE_member_method_declaration_list = 117
    RULE_member_method_declaration = 118
    RULE_native_member_method_declaration_list = 119
    RULE_native_member_method_declaration = 120
    RULE_native_category_binding = 121
    RULE_python_category_binding = 122
    RULE_python_module = 123
    RULE_javascript_category_binding = 124
    RULE_javascript_module = 125
    RULE_variable_identifier_list = 126
    RULE_attribute_identifier_list = 127
    RULE_method_declaration = 128
    RULE_comment_statement = 129
    RULE_native_statement_list = 130
    RULE_native_statement = 131
    RULE_python_native_statement = 132
    RULE_javascript_native_statement = 133
    RULE_statement_list = 134
    RULE_assertion_list = 135
    RULE_switch_case_statement_list = 136
    RULE_catch_statement_list = 137
    RULE_literal_collection = 138
    RULE_atomic_literal = 139
    RULE_literal_list_literal = 140
    RULE_this_expression = 141
    RULE_super_expression = 142
    RULE_parenthesis_expression = 143
    RULE_literal_expression = 144
    RULE_collection_literal = 145
    RULE_tuple_literal = 146
    RULE_dict_literal = 147
    RULE_document_literal = 148
    RULE_expression_tuple = 149
    RULE_dict_entry_list = 150
    RULE_dict_entry = 151
    RULE_dict_key = 152
    RULE_slice_arguments = 153
    RULE_assign_variable_statement = 154
    RULE_assignable_instance = 155
    RULE_is_expression = 156
    RULE_arrow_expression = 157
    RULE_arrow_prefix = 158
    RULE_arrow_args = 159
    RULE_sorted_key = 160
    RULE_read_all_expression = 161
    RULE_read_one_expression = 162
    RULE_order_by_list = 163
    RULE_order_by = 164
    RULE_operator = 165
    RULE_keyword = 166
    RULE_new_token = 167
    RULE_key_token = 168
    RULE_module_token = 169
    RULE_value_token = 170
    RULE_symbols_token = 171
    RULE_assign = 172
    RULE_multiply = 173
    RULE_divide = 174
    RULE_idivide = 175
    RULE_modulo = 176
    RULE_lfs = 177
    RULE_lfp = 178
    RULE_javascript_statement = 179
    RULE_javascript_expression = 180
    RULE_javascript_primary_expression = 181
    RULE_javascript_this_expression = 182
    RULE_javascript_new_expression = 183
    RULE_javascript_selector_expression = 184
    RULE_javascript_method_expression = 185
    RULE_javascript_arguments = 186
    RULE_javascript_item_expression = 187
    RULE_javascript_parenthesis_expression = 188
    RULE_javascript_identifier_expression = 189
    RULE_javascript_literal_expression = 190
    RULE_javascript_identifier = 191
    RULE_python_statement = 192
    RULE_python_expression = 193
    RULE_python_primary_expression = 194
    RULE_python_self_expression = 195
    RULE_python_selector_expression = 196
    RULE_python_method_expression = 197
    RULE_python_argument_list = 198
    RULE_python_ordinal_argument_list = 199
    RULE_python_named_argument_list = 200
    RULE_python_parenthesis_expression = 201
    RULE_python_identifier_expression = 202
    RULE_python_literal_expression = 203
    RULE_python_identifier = 204
    RULE_java_statement = 205
    RULE_java_expression = 206
    RULE_java_primary_expression = 207
    RULE_java_this_expression = 208
    RULE_java_new_expression = 209
    RULE_java_selector_expression = 210
    RULE_java_method_expression = 211
    RULE_java_arguments = 212
    RULE_java_item_expression = 213
    RULE_java_parenthesis_expression = 214
    RULE_java_identifier_expression = 215
    RULE_java_class_identifier_expression = 216
    RULE_java_literal_expression = 217
    RULE_java_identifier = 218
    RULE_csharp_statement = 219
    RULE_csharp_expression = 220
    RULE_csharp_primary_expression = 221
    RULE_csharp_this_expression = 222
    RULE_csharp_new_expression = 223
    RULE_csharp_selector_expression = 224
    RULE_csharp_method_expression = 225
    RULE_csharp_arguments = 226
    RULE_csharp_item_expression = 227
    RULE_csharp_parenthesis_expression = 228
    RULE_csharp_identifier_expression = 229
    RULE_csharp_literal_expression = 230
    RULE_csharp_identifier = 231
    RULE_jsx_expression = 232
    RULE_jsx_element = 233
    RULE_jsx_fragment = 234
    RULE_jsx_fragment_start = 235
    RULE_jsx_fragment_end = 236
    RULE_jsx_self_closing = 237
    RULE_jsx_opening = 238
    RULE_jsx_closing = 239
    RULE_jsx_element_name = 240
    RULE_jsx_identifier = 241
    RULE_jsx_attribute = 242
    RULE_jsx_attribute_value = 243
    RULE_jsx_children = 244
    RULE_jsx_child = 245
    RULE_jsx_text = 246
    RULE_css_expression = 247
    RULE_css_field = 248
    RULE_css_identifier = 249
    RULE_css_value = 250
    RULE_css_text = 251

    ruleNames =  [ "enum_category_declaration", "enum_native_declaration", 
                   "category_symbol", "native_symbol", "attribute_declaration", 
                   "concrete_widget_declaration", "native_widget_declaration", 
                   "concrete_category_declaration", "singleton_category_declaration", 
                   "derived_list", "category_method_list", "operator_method_declaration", 
                   "setter_method_declaration", "native_setter_declaration", 
                   "getter_method_declaration", "native_getter_declaration", 
                   "native_resource_declaration", "native_category_declaration", 
                   "native_category_bindings", "native_category_binding_list", 
                   "abstract_method_declaration", "concrete_method_declaration", 
                   "native_method_declaration", "test_method_declaration", 
                   "assertion", "typed_argument", "statement_or_list", "statement", 
                   "flush_statement", "store_statement", "with_resource_statement", 
                   "with_singleton_statement", "switch_statement", "switch_case_statement", 
                   "for_each_statement", "do_while_statement", "while_statement", 
                   "if_statement", "else_if_statement_list", "raise_statement", 
                   "try_statement", "catch_statement", "break_statement", 
                   "return_statement", "method_call_expression", "method_call_statement", 
                   "x_expression", "expression", "an_expression", "closure_expression", 
                   "selectable_expression", "instance_expression", "mutable_instance_expression", 
                   "method_expression", "blob_expression", "document_expression", 
                   "write_statement", "filtered_list_expression", "fetch_expression", 
                   "fetch_statement", "sorted_expression", "instance_selector", 
                   "constructor_expression", "copy_from", "argument_assignment_list", 
                   "argument_assignment", "assign_instance_statement", "child_instance", 
                   "assign_tuple_statement", "type_literal", "null_literal", 
                   "ws_plus", "repl", "declaration_list", "declarations", 
                   "declaration", "annotation_constructor", "annotation_identifier", 
                   "annotation_argument", "annotation_argument_name", "annotation_argument_value", 
                   "resource_declaration", "enum_declaration", "native_symbol_list", 
                   "category_symbol_list", "symbol_list", "attribute_constraint", 
                   "list_literal", "set_literal", "expression_list", "range_literal", 
                   "typedef", "primary_type", "native_type", "category_type", 
                   "mutable_category_type", "code_type", "category_declaration", 
                   "widget_declaration", "type_identifier_list", "method_identifier", 
                   "identifier_or_keyword", "nospace_hyphen_identifier_or_keyword", 
                   "nospace_identifier_or_keyword", "identifier", "member_identifier", 
                   "variable_identifier", "attribute_identifier", "type_identifier", 
                   "symbol_identifier", "argument_list", "argument", "operator_argument", 
                   "named_argument", "code_argument", "category_or_any_type", 
                   "any_type", "member_method_declaration_list", "member_method_declaration", 
                   "native_member_method_declaration_list", "native_member_method_declaration", 
                   "native_category_binding", "python_category_binding", 
                   "python_module", "javascript_category_binding", "javascript_module", 
                   "variable_identifier_list", "attribute_identifier_list", 
                   "method_declaration", "comment_statement", "native_statement_list", 
                   "native_statement", "python_native_statement", "javascript_native_statement", 
                   "statement_list", "assertion_list", "switch_case_statement_list", 
                   "catch_statement_list", "literal_collection", "atomic_literal", 
                   "literal_list_literal", "this_expression", "super_expression", 
                   "parenthesis_expression", "literal_expression", "collection_literal", 
                   "tuple_literal", "dict_literal", "document_literal", 
                   "expression_tuple", "dict_entry_list", "dict_entry", 
                   "dict_key", "slice_arguments", "assign_variable_statement", 
                   "assignable_instance", "is_expression", "arrow_expression", 
                   "arrow_prefix", "arrow_args", "sorted_key", "read_all_expression", 
                   "read_one_expression", "order_by_list", "order_by", "operator", 
                   "keyword", "new_token", "key_token", "module_token", 
                   "value_token", "symbols_token", "assign", "multiply", 
                   "divide", "idivide", "modulo", "lfs", "lfp", "javascript_statement", 
                   "javascript_expression", "javascript_primary_expression", 
                   "javascript_this_expression", "javascript_new_expression", 
                   "javascript_selector_expression", "javascript_method_expression", 
                   "javascript_arguments", "javascript_item_expression", 
                   "javascript_parenthesis_expression", "javascript_identifier_expression", 
                   "javascript_literal_expression", "javascript_identifier", 
                   "python_statement", "python_expression", "python_primary_expression", 
                   "python_self_expression", "python_selector_expression", 
                   "python_method_expression", "python_argument_list", "python_ordinal_argument_list", 
                   "python_named_argument_list", "python_parenthesis_expression", 
                   "python_identifier_expression", "python_literal_expression", 
                   "python_identifier", "java_statement", "java_expression", 
                   "java_primary_expression", "java_this_expression", "java_new_expression", 
                   "java_selector_expression", "java_method_expression", 
                   "java_arguments", "java_item_expression", "java_parenthesis_expression", 
                   "java_identifier_expression", "java_class_identifier_expression", 
                   "java_literal_expression", "java_identifier", "csharp_statement", 
                   "csharp_expression", "csharp_primary_expression", "csharp_this_expression", 
                   "csharp_new_expression", "csharp_selector_expression", 
                   "csharp_method_expression", "csharp_arguments", "csharp_item_expression", 
                   "csharp_parenthesis_expression", "csharp_identifier_expression", 
                   "csharp_literal_expression", "csharp_identifier", "jsx_expression", 
                   "jsx_element", "jsx_fragment", "jsx_fragment_start", 
                   "jsx_fragment_end", "jsx_self_closing", "jsx_opening", 
                   "jsx_closing", "jsx_element_name", "jsx_identifier", 
                   "jsx_attribute", "jsx_attribute_value", "jsx_children", 
                   "jsx_child", "jsx_text", "css_expression", "css_field", 
                   "css_identifier", "css_value", "css_text" ]

    EOF = Token.EOF
    SPACE=1
    WS=2
    LF=3
    COMMENT=4
    JAVA=5
    CSHARP=6
    PYTHON2=7
    PYTHON3=8
    JAVASCRIPT=9
    SWIFT=10
    COLON=11
    SEMI=12
    COMMA=13
    RANGE=14
    DOT=15
    LPAR=16
    RPAR=17
    LBRAK=18
    RBRAK=19
    LCURL=20
    RCURL=21
    QMARK=22
    XMARK=23
    AMP=24
    AMP2=25
    PIPE=26
    PIPE2=27
    PLUS=28
    MINUS=29
    STAR=30
    SLASH=31
    BSLASH=32
    PERCENT=33
    GT=34
    GTE=35
    LT=36
    LTE=37
    LTGT=38
    LTCOLONGT=39
    EQ=40
    XEQ=41
    EQ2=42
    TEQ=43
    TILDE=44
    LARROW=45
    RARROW=46
    EGT=47
    BOOLEAN=48
    CSS=49
    CHARACTER=50
    TEXT=51
    INTEGER=52
    DECIMAL=53
    DATE=54
    TIME=55
    DATETIME=56
    PERIOD=57
    VERSION=58
    METHOD_COLON=59
    CODE=60
    DOCUMENT=61
    BLOB=62
    IMAGE=63
    UUID=64
    ITERATOR=65
    CURSOR=66
    HTML=67
    TYPE=68
    ABSTRACT=69
    ALL=70
    ALWAYS=71
    AND=72
    ANY=73
    AS=74
    ASC=75
    ATTR=76
    ATTRIBUTE=77
    ATTRIBUTES=78
    BINDINGS=79
    BREAK=80
    BY=81
    CASE=82
    CATCH=83
    CATEGORY=84
    CLASS=85
    CLOSE=86
    CONTAINS=87
    DEF=88
    DEFAULT=89
    DEFINE=90
    DELETE=91
    DESC=92
    DO=93
    DOING=94
    EACH=95
    ELSE=96
    ENUM=97
    ENUMERATED=98
    EXCEPT=99
    EXECUTE=100
    EXPECTING=101
    EXTENDS=102
    FETCH=103
    FILTERED=104
    FINALLY=105
    FLUSH=106
    FOR=107
    FROM=108
    GETTER=109
    HAS=110
    IF=111
    IN=112
    INDEX=113
    INVOKE_COLON=114
    IS=115
    MATCHING=116
    METHOD=117
    METHODS=118
    MODULO=119
    MUTABLE=120
    NATIVE=121
    NONE=122
    NOT=123
    NOTHING=124
    NULL=125
    ON=126
    ONE=127
    OPERATOR=128
    OR=129
    ORDER=130
    OTHERWISE=131
    PASS=132
    RAISE=133
    READ=134
    RECEIVING=135
    RESOURCE=136
    RETURN=137
    RETURNING=138
    ROWS=139
    SELF=140
    SETTER=141
    SINGLETON=142
    SORTED=143
    STORABLE=144
    STORE=145
    SUPER=146
    SWITCH=147
    TEST=148
    THEN=149
    THIS=150
    THROW=151
    TO=152
    TRY=153
    VERIFYING=154
    WIDGET=155
    WITH=156
    WHEN=157
    WHERE=158
    WHILE=159
    WRITE=160
    BOOLEAN_LITERAL=161
    CHAR_LITERAL=162
    MIN_INTEGER=163
    MAX_INTEGER=164
    SYMBOL_IDENTIFIER=165
    TYPE_IDENTIFIER=166
    VARIABLE_IDENTIFIER=167
    NATIVE_IDENTIFIER=168
    DOLLAR_IDENTIFIER=169
    ARONDBASE_IDENTIFIER=170
    TEXT_LITERAL=171
    UUID_LITERAL=172
    INTEGER_LITERAL=173
    HEXA_LITERAL=174
    DECIMAL_LITERAL=175
    DATETIME_LITERAL=176
    TIME_LITERAL=177
    DATE_LITERAL=178
    PERIOD_LITERAL=179
    VERSION_LITERAL=180

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.7.1")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None



    class Enum_category_declarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # Type_identifierContext
            self.attrs = None # Attribute_identifier_listContext
            self.derived = None # Type_identifierContext
            self.symbols = None # Category_symbol_listContext

        def ENUMERATED(self):
            return self.getToken(OParser.ENUMERATED, 0)

        def CATEGORY(self):
            return self.getToken(OParser.CATEGORY, 0)

        def LCURL(self):
            return self.getToken(OParser.LCURL, 0)

        def RCURL(self):
            return self.getToken(OParser.RCURL, 0)

        def type_identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(OParser.Type_identifierContext)
            else:
                return self.getTypedRuleContext(OParser.Type_identifierContext,i)


        def category_symbol_list(self):
            return self.getTypedRuleContext(OParser.Category_symbol_listContext,0)


        def LPAR(self):
            return self.getToken(OParser.LPAR, 0)

        def RPAR(self):
            return self.getToken(OParser.RPAR, 0)

        def EXTENDS(self):
            return self.getToken(OParser.EXTENDS, 0)

        def attribute_identifier_list(self):
            return self.getTypedRuleContext(OParser.Attribute_identifier_listContext,0)


        def getRuleIndex(self):
            return OParser.RULE_enum_category_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnum_category_declaration" ):
                listener.enterEnum_category_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnum_category_declaration" ):
                listener.exitEnum_category_declaration(self)




    def enum_category_declaration(self):

        localctx = OParser.Enum_category_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_enum_category_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 504
            self.match(OParser.ENUMERATED)
            self.state = 505
            self.match(OParser.CATEGORY)
            self.state = 506
            localctx.name = self.type_identifier()
            self.state = 511
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==OParser.LPAR:
                self.state = 507
                self.match(OParser.LPAR)
                self.state = 508
                localctx.attrs = self.attribute_identifier_list()
                self.state = 509
                self.match(OParser.RPAR)


            self.state = 515
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==OParser.EXTENDS:
                self.state = 513
                self.match(OParser.EXTENDS)
                self.state = 514
                localctx.derived = self.type_identifier()


            self.state = 517
            self.match(OParser.LCURL)
            self.state = 518
            localctx.symbols = self.category_symbol_list()
            self.state = 519
            self.match(OParser.RCURL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Enum_native_declarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # Type_identifierContext
            self.typ = None # Native_typeContext
            self.symbols = None # Native_symbol_listContext

        def ENUMERATED(self):
            return self.getToken(OParser.ENUMERATED, 0)

        def LPAR(self):
            return self.getToken(OParser.LPAR, 0)

        def RPAR(self):
            return self.getToken(OParser.RPAR, 0)

        def LCURL(self):
            return self.getToken(OParser.LCURL, 0)

        def RCURL(self):
            return self.getToken(OParser.RCURL, 0)

        def type_identifier(self):
            return self.getTypedRuleContext(OParser.Type_identifierContext,0)


        def native_type(self):
            return self.getTypedRuleContext(OParser.Native_typeContext,0)


        def native_symbol_list(self):
            return self.getTypedRuleContext(OParser.Native_symbol_listContext,0)


        def getRuleIndex(self):
            return OParser.RULE_enum_native_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnum_native_declaration" ):
                listener.enterEnum_native_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnum_native_declaration" ):
                listener.exitEnum_native_declaration(self)




    def enum_native_declaration(self):

        localctx = OParser.Enum_native_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_enum_native_declaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 521
            self.match(OParser.ENUMERATED)
            self.state = 522
            localctx.name = self.type_identifier()
            self.state = 523
            self.match(OParser.LPAR)
            self.state = 524
            localctx.typ = self.native_type()
            self.state = 525
            self.match(OParser.RPAR)
            self.state = 526
            self.match(OParser.LCURL)
            self.state = 527
            localctx.symbols = self.native_symbol_list()
            self.state = 528
            self.match(OParser.RCURL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Category_symbolContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # Symbol_identifierContext
            self.args = None # Argument_assignment_listContext

        def LPAR(self):
            return self.getToken(OParser.LPAR, 0)

        def RPAR(self):
            return self.getToken(OParser.RPAR, 0)

        def SEMI(self):
            return self.getToken(OParser.SEMI, 0)

        def symbol_identifier(self):
            return self.getTypedRuleContext(OParser.Symbol_identifierContext,0)


        def argument_assignment_list(self):
            return self.getTypedRuleContext(OParser.Argument_assignment_listContext,0)


        def getRuleIndex(self):
            return OParser.RULE_category_symbol

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCategory_symbol" ):
                listener.enterCategory_symbol(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCategory_symbol" ):
                listener.exitCategory_symbol(self)




    def category_symbol(self):

        localctx = OParser.Category_symbolContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_category_symbol)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 530
            localctx.name = self.symbol_identifier()
            self.state = 531
            self.match(OParser.LPAR)
            self.state = 532
            localctx.args = self.argument_assignment_list(0)
            self.state = 533
            self.match(OParser.RPAR)
            self.state = 534
            self.match(OParser.SEMI)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Native_symbolContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # Symbol_identifierContext
            self.exp = None # ExpressionContext

        def EQ(self):
            return self.getToken(OParser.EQ, 0)

        def SEMI(self):
            return self.getToken(OParser.SEMI, 0)

        def symbol_identifier(self):
            return self.getTypedRuleContext(OParser.Symbol_identifierContext,0)


        def expression(self):
            return self.getTypedRuleContext(OParser.ExpressionContext,0)


        def getRuleIndex(self):
            return OParser.RULE_native_symbol

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNative_symbol" ):
                listener.enterNative_symbol(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNative_symbol" ):
                listener.exitNative_symbol(self)




    def native_symbol(self):

        localctx = OParser.Native_symbolContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_native_symbol)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 536
            localctx.name = self.symbol_identifier()
            self.state = 537
            self.match(OParser.EQ)
            self.state = 538
            localctx.exp = self.expression(0)
            self.state = 539
            self.match(OParser.SEMI)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Attribute_declarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # Attribute_identifierContext
            self.typ = None # TypedefContext
            self.match = None # Attribute_constraintContext
            self.indices = None # Variable_identifier_listContext

        def ATTRIBUTE(self):
            return self.getToken(OParser.ATTRIBUTE, 0)

        def COLON(self):
            return self.getToken(OParser.COLON, 0)

        def SEMI(self):
            return self.getToken(OParser.SEMI, 0)

        def attribute_identifier(self):
            return self.getTypedRuleContext(OParser.Attribute_identifierContext,0)


        def typedef(self):
            return self.getTypedRuleContext(OParser.TypedefContext,0)


        def STORABLE(self):
            return self.getToken(OParser.STORABLE, 0)

        def WITH(self):
            return self.getToken(OParser.WITH, 0)

        def INDEX(self):
            return self.getToken(OParser.INDEX, 0)

        def attribute_constraint(self):
            return self.getTypedRuleContext(OParser.Attribute_constraintContext,0)


        def LPAR(self):
            return self.getToken(OParser.LPAR, 0)

        def RPAR(self):
            return self.getToken(OParser.RPAR, 0)

        def variable_identifier_list(self):
            return self.getTypedRuleContext(OParser.Variable_identifier_listContext,0)


        def getRuleIndex(self):
            return OParser.RULE_attribute_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttribute_declaration" ):
                listener.enterAttribute_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttribute_declaration" ):
                listener.exitAttribute_declaration(self)




    def attribute_declaration(self):

        localctx = OParser.Attribute_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_attribute_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 542
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==OParser.STORABLE:
                self.state = 541
                self.match(OParser.STORABLE)


            self.state = 544
            self.match(OParser.ATTRIBUTE)
            self.state = 545
            localctx.name = self.attribute_identifier()
            self.state = 546
            self.match(OParser.COLON)
            self.state = 547
            localctx.typ = self.typedef(0)
            self.state = 549
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==OParser.IN or _la==OParser.MATCHING:
                self.state = 548
                localctx.match = self.attribute_constraint()


            self.state = 559
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==OParser.WITH:
                self.state = 551
                self.match(OParser.WITH)
                self.state = 552
                self.match(OParser.INDEX)
                self.state = 557
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==OParser.LPAR:
                    self.state = 553
                    self.match(OParser.LPAR)
                    self.state = 554
                    localctx.indices = self.variable_identifier_list()
                    self.state = 555
                    self.match(OParser.RPAR)




            self.state = 561
            self.match(OParser.SEMI)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Concrete_widget_declarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # Type_identifierContext
            self.derived = None # Type_identifierContext
            self.methods = None # Category_method_listContext

        def WIDGET(self):
            return self.getToken(OParser.WIDGET, 0)

        def type_identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(OParser.Type_identifierContext)
            else:
                return self.getTypedRuleContext(OParser.Type_identifierContext,i)


        def category_method_list(self):
            return self.getTypedRuleContext(OParser.Category_method_listContext,0)


        def EXTENDS(self):
            return self.getToken(OParser.EXTENDS, 0)

        def getRuleIndex(self):
            return OParser.RULE_concrete_widget_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConcrete_widget_declaration" ):
                listener.enterConcrete_widget_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConcrete_widget_declaration" ):
                listener.exitConcrete_widget_declaration(self)




    def concrete_widget_declaration(self):

        localctx = OParser.Concrete_widget_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_concrete_widget_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 563
            self.match(OParser.WIDGET)
            self.state = 564
            localctx.name = self.type_identifier()
            self.state = 567
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==OParser.EXTENDS:
                self.state = 565
                self.match(OParser.EXTENDS)
                self.state = 566
                localctx.derived = self.type_identifier()


            self.state = 569
            localctx.methods = self.category_method_list()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Native_widget_declarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # Type_identifierContext
            self.bindings = None # Native_category_bindingsContext
            self.methods = None # Native_member_method_declaration_listContext

        def NATIVE(self):
            return self.getToken(OParser.NATIVE, 0)

        def WIDGET(self):
            return self.getToken(OParser.WIDGET, 0)

        def LCURL(self):
            return self.getToken(OParser.LCURL, 0)

        def RCURL(self):
            return self.getToken(OParser.RCURL, 0)

        def type_identifier(self):
            return self.getTypedRuleContext(OParser.Type_identifierContext,0)


        def native_category_bindings(self):
            return self.getTypedRuleContext(OParser.Native_category_bindingsContext,0)


        def native_member_method_declaration_list(self):
            return self.getTypedRuleContext(OParser.Native_member_method_declaration_listContext,0)


        def getRuleIndex(self):
            return OParser.RULE_native_widget_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNative_widget_declaration" ):
                listener.enterNative_widget_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNative_widget_declaration" ):
                listener.exitNative_widget_declaration(self)




    def native_widget_declaration(self):

        localctx = OParser.Native_widget_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_native_widget_declaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 571
            self.match(OParser.NATIVE)
            self.state = 572
            self.match(OParser.WIDGET)
            self.state = 573
            localctx.name = self.type_identifier()
            self.state = 574
            self.match(OParser.LCURL)
            self.state = 575
            localctx.bindings = self.native_category_bindings()
            self.state = 576
            localctx.methods = self.native_member_method_declaration_list()
            self.state = 577
            self.match(OParser.RCURL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Concrete_category_declarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # Type_identifierContext
            self.attrs = None # Attribute_identifier_listContext
            self.derived = None # Derived_listContext
            self.methods = None # Category_method_listContext

        def CATEGORY(self):
            return self.getToken(OParser.CATEGORY, 0)

        def type_identifier(self):
            return self.getTypedRuleContext(OParser.Type_identifierContext,0)


        def category_method_list(self):
            return self.getTypedRuleContext(OParser.Category_method_listContext,0)


        def STORABLE(self):
            return self.getToken(OParser.STORABLE, 0)

        def LPAR(self):
            return self.getToken(OParser.LPAR, 0)

        def RPAR(self):
            return self.getToken(OParser.RPAR, 0)

        def EXTENDS(self):
            return self.getToken(OParser.EXTENDS, 0)

        def attribute_identifier_list(self):
            return self.getTypedRuleContext(OParser.Attribute_identifier_listContext,0)


        def derived_list(self):
            return self.getTypedRuleContext(OParser.Derived_listContext,0)


        def getRuleIndex(self):
            return OParser.RULE_concrete_category_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConcrete_category_declaration" ):
                listener.enterConcrete_category_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConcrete_category_declaration" ):
                listener.exitConcrete_category_declaration(self)




    def concrete_category_declaration(self):

        localctx = OParser.Concrete_category_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_concrete_category_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 580
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==OParser.STORABLE:
                self.state = 579
                self.match(OParser.STORABLE)


            self.state = 582
            self.match(OParser.CATEGORY)
            self.state = 583
            localctx.name = self.type_identifier()
            self.state = 588
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==OParser.LPAR:
                self.state = 584
                self.match(OParser.LPAR)
                self.state = 585
                localctx.attrs = self.attribute_identifier_list()
                self.state = 586
                self.match(OParser.RPAR)


            self.state = 592
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==OParser.EXTENDS:
                self.state = 590
                self.match(OParser.EXTENDS)
                self.state = 591
                localctx.derived = self.derived_list(0)


            self.state = 594
            localctx.methods = self.category_method_list()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Singleton_category_declarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # Type_identifierContext
            self.attrs = None # Attribute_identifier_listContext
            self.methods = None # Category_method_listContext

        def SINGLETON(self):
            return self.getToken(OParser.SINGLETON, 0)

        def type_identifier(self):
            return self.getTypedRuleContext(OParser.Type_identifierContext,0)


        def category_method_list(self):
            return self.getTypedRuleContext(OParser.Category_method_listContext,0)


        def LPAR(self):
            return self.getToken(OParser.LPAR, 0)

        def RPAR(self):
            return self.getToken(OParser.RPAR, 0)

        def attribute_identifier_list(self):
            return self.getTypedRuleContext(OParser.Attribute_identifier_listContext,0)


        def getRuleIndex(self):
            return OParser.RULE_singleton_category_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSingleton_category_declaration" ):
                listener.enterSingleton_category_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSingleton_category_declaration" ):
                listener.exitSingleton_category_declaration(self)




    def singleton_category_declaration(self):

        localctx = OParser.Singleton_category_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_singleton_category_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 596
            self.match(OParser.SINGLETON)
            self.state = 597
            localctx.name = self.type_identifier()
            self.state = 602
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==OParser.LPAR:
                self.state = 598
                self.match(OParser.LPAR)
                self.state = 599
                localctx.attrs = self.attribute_identifier_list()
                self.state = 600
                self.match(OParser.RPAR)


            self.state = 604
            localctx.methods = self.category_method_list()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Derived_listContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return OParser.RULE_derived_list

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class DerivedListItemContext(Derived_listContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Derived_listContext
            super().__init__(parser)
            self.items = None # Derived_listContext
            self.item = None # Type_identifierContext
            self.copyFrom(ctx)

        def COMMA(self):
            return self.getToken(OParser.COMMA, 0)
        def derived_list(self):
            return self.getTypedRuleContext(OParser.Derived_listContext,0)

        def type_identifier(self):
            return self.getTypedRuleContext(OParser.Type_identifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDerivedListItem" ):
                listener.enterDerivedListItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDerivedListItem" ):
                listener.exitDerivedListItem(self)


    class DerivedListContext(Derived_listContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Derived_listContext
            super().__init__(parser)
            self.item = None # Type_identifierContext
            self.copyFrom(ctx)

        def type_identifier(self):
            return self.getTypedRuleContext(OParser.Type_identifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDerivedList" ):
                listener.enterDerivedList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDerivedList" ):
                listener.exitDerivedList(self)



    def derived_list(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = OParser.Derived_listContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 18
        self.enterRecursionRule(localctx, 18, self.RULE_derived_list, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            localctx = OParser.DerivedListContext(self, localctx)
            self._ctx = localctx
            _prevctx = localctx

            self.state = 607
            localctx.item = self.type_identifier()
            self._ctx.stop = self._input.LT(-1)
            self.state = 614
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,11,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = OParser.DerivedListItemContext(self, OParser.Derived_listContext(self, _parentctx, _parentState))
                    localctx.items = _prevctx
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_derived_list)
                    self.state = 609
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 610
                    self.match(OParser.COMMA)
                    self.state = 611
                    localctx.item = self.type_identifier() 
                self.state = 616
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,11,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class Category_method_listContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return OParser.RULE_category_method_list

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class EmptyCategoryMethodListContext(Category_method_listContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Category_method_listContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SEMI(self):
            return self.getToken(OParser.SEMI, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEmptyCategoryMethodList" ):
                listener.enterEmptyCategoryMethodList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEmptyCategoryMethodList" ):
                listener.exitEmptyCategoryMethodList(self)


    class CurlyCategoryMethodListContext(Category_method_listContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Category_method_listContext
            super().__init__(parser)
            self.items = None # Member_method_declaration_listContext
            self.copyFrom(ctx)

        def LCURL(self):
            return self.getToken(OParser.LCURL, 0)
        def RCURL(self):
            return self.getToken(OParser.RCURL, 0)
        def member_method_declaration_list(self):
            return self.getTypedRuleContext(OParser.Member_method_declaration_listContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCurlyCategoryMethodList" ):
                listener.enterCurlyCategoryMethodList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCurlyCategoryMethodList" ):
                listener.exitCurlyCategoryMethodList(self)



    def category_method_list(self):

        localctx = OParser.Category_method_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_category_method_list)
        self._la = 0 # Token type
        try:
            self.state = 623
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [OParser.SEMI]:
                localctx = OParser.EmptyCategoryMethodListContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 617
                self.match(OParser.SEMI)
                pass
            elif token in [OParser.LCURL]:
                localctx = OParser.CurlyCategoryMethodListContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 618
                self.match(OParser.LCURL)
                self.state = 620
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << OParser.COMMENT) | (1 << OParser.BOOLEAN) | (1 << OParser.CSS) | (1 << OParser.CHARACTER) | (1 << OParser.TEXT) | (1 << OParser.INTEGER) | (1 << OParser.DECIMAL) | (1 << OParser.DATE) | (1 << OParser.TIME) | (1 << OParser.DATETIME) | (1 << OParser.PERIOD) | (1 << OParser.VERSION) | (1 << OParser.CODE) | (1 << OParser.DOCUMENT) | (1 << OParser.BLOB) | (1 << OParser.IMAGE))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (OParser.UUID - 64)) | (1 << (OParser.ITERATOR - 64)) | (1 << (OParser.CURSOR - 64)) | (1 << (OParser.HTML - 64)) | (1 << (OParser.ABSTRACT - 64)) | (1 << (OParser.GETTER - 64)) | (1 << (OParser.METHOD - 64)) | (1 << (OParser.MUTABLE - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (OParser.OPERATOR - 128)) | (1 << (OParser.SETTER - 128)) | (1 << (OParser.TYPE_IDENTIFIER - 128)) | (1 << (OParser.ARONDBASE_IDENTIFIER - 128)))) != 0):
                    self.state = 619
                    localctx.items = self.member_method_declaration_list()


                self.state = 622
                self.match(OParser.RCURL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Operator_method_declarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.typ = None # TypedefContext
            self.op = None # OperatorContext
            self.arg = None # Operator_argumentContext
            self.stmts = None # Statement_listContext

        def OPERATOR(self):
            return self.getToken(OParser.OPERATOR, 0)

        def LPAR(self):
            return self.getToken(OParser.LPAR, 0)

        def RPAR(self):
            return self.getToken(OParser.RPAR, 0)

        def LCURL(self):
            return self.getToken(OParser.LCURL, 0)

        def RCURL(self):
            return self.getToken(OParser.RCURL, 0)

        def operator(self):
            return self.getTypedRuleContext(OParser.OperatorContext,0)


        def operator_argument(self):
            return self.getTypedRuleContext(OParser.Operator_argumentContext,0)


        def typedef(self):
            return self.getTypedRuleContext(OParser.TypedefContext,0)


        def statement_list(self):
            return self.getTypedRuleContext(OParser.Statement_listContext,0)


        def getRuleIndex(self):
            return OParser.RULE_operator_method_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOperator_method_declaration" ):
                listener.enterOperator_method_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOperator_method_declaration" ):
                listener.exitOperator_method_declaration(self)




    def operator_method_declaration(self):

        localctx = OParser.Operator_method_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_operator_method_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 626
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 48)) & ~0x3f) == 0 and ((1 << (_la - 48)) & ((1 << (OParser.BOOLEAN - 48)) | (1 << (OParser.CSS - 48)) | (1 << (OParser.CHARACTER - 48)) | (1 << (OParser.TEXT - 48)) | (1 << (OParser.INTEGER - 48)) | (1 << (OParser.DECIMAL - 48)) | (1 << (OParser.DATE - 48)) | (1 << (OParser.TIME - 48)) | (1 << (OParser.DATETIME - 48)) | (1 << (OParser.PERIOD - 48)) | (1 << (OParser.VERSION - 48)) | (1 << (OParser.CODE - 48)) | (1 << (OParser.DOCUMENT - 48)) | (1 << (OParser.BLOB - 48)) | (1 << (OParser.IMAGE - 48)) | (1 << (OParser.UUID - 48)) | (1 << (OParser.ITERATOR - 48)) | (1 << (OParser.CURSOR - 48)) | (1 << (OParser.HTML - 48)))) != 0) or _la==OParser.TYPE_IDENTIFIER:
                self.state = 625
                localctx.typ = self.typedef(0)


            self.state = 628
            self.match(OParser.OPERATOR)
            self.state = 629
            localctx.op = self.operator()
            self.state = 630
            self.match(OParser.LPAR)
            self.state = 631
            localctx.arg = self.operator_argument()
            self.state = 632
            self.match(OParser.RPAR)
            self.state = 633
            self.match(OParser.LCURL)
            self.state = 635
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << OParser.COMMENT) | (1 << OParser.LPAR) | (1 << OParser.LBRAK) | (1 << OParser.LCURL) | (1 << OParser.LT) | (1 << OParser.LTCOLONGT) | (1 << OParser.BOOLEAN) | (1 << OParser.CSS) | (1 << OParser.CHARACTER) | (1 << OParser.TEXT) | (1 << OParser.INTEGER) | (1 << OParser.DECIMAL) | (1 << OParser.DATE) | (1 << OParser.TIME) | (1 << OParser.DATETIME) | (1 << OParser.PERIOD) | (1 << OParser.VERSION) | (1 << OParser.CODE) | (1 << OParser.DOCUMENT) | (1 << OParser.BLOB) | (1 << OParser.IMAGE))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (OParser.UUID - 64)) | (1 << (OParser.ITERATOR - 64)) | (1 << (OParser.CURSOR - 64)) | (1 << (OParser.HTML - 64)) | (1 << (OParser.ANY - 64)) | (1 << (OParser.BREAK - 64)) | (1 << (OParser.DELETE - 64)) | (1 << (OParser.DO - 64)) | (1 << (OParser.FETCH - 64)) | (1 << (OParser.FILTERED - 64)) | (1 << (OParser.FLUSH - 64)) | (1 << (OParser.FOR - 64)) | (1 << (OParser.IF - 64)) | (1 << (OParser.METHOD - 64)) | (1 << (OParser.MUTABLE - 64)) | (1 << (OParser.NULL - 64)))) != 0) or ((((_la - 134)) & ~0x3f) == 0 and ((1 << (_la - 134)) & ((1 << (OParser.READ - 134)) | (1 << (OParser.RETURN - 134)) | (1 << (OParser.SELF - 134)) | (1 << (OParser.SORTED - 134)) | (1 << (OParser.STORE - 134)) | (1 << (OParser.SUPER - 134)) | (1 << (OParser.SWITCH - 134)) | (1 << (OParser.THIS - 134)) | (1 << (OParser.THROW - 134)) | (1 << (OParser.TRY - 134)) | (1 << (OParser.WITH - 134)) | (1 << (OParser.WHILE - 134)) | (1 << (OParser.WRITE - 134)) | (1 << (OParser.BOOLEAN_LITERAL - 134)) | (1 << (OParser.CHAR_LITERAL - 134)) | (1 << (OParser.MIN_INTEGER - 134)) | (1 << (OParser.MAX_INTEGER - 134)) | (1 << (OParser.SYMBOL_IDENTIFIER - 134)) | (1 << (OParser.TYPE_IDENTIFIER - 134)) | (1 << (OParser.VARIABLE_IDENTIFIER - 134)) | (1 << (OParser.TEXT_LITERAL - 134)) | (1 << (OParser.UUID_LITERAL - 134)) | (1 << (OParser.INTEGER_LITERAL - 134)) | (1 << (OParser.HEXA_LITERAL - 134)) | (1 << (OParser.DECIMAL_LITERAL - 134)) | (1 << (OParser.DATETIME_LITERAL - 134)) | (1 << (OParser.TIME_LITERAL - 134)) | (1 << (OParser.DATE_LITERAL - 134)) | (1 << (OParser.PERIOD_LITERAL - 134)) | (1 << (OParser.VERSION_LITERAL - 134)))) != 0):
                self.state = 634
                localctx.stmts = self.statement_list()


            self.state = 637
            self.match(OParser.RCURL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Setter_method_declarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # Variable_identifierContext
            self.stmts = None # Statement_listContext

        def SETTER(self):
            return self.getToken(OParser.SETTER, 0)

        def LCURL(self):
            return self.getToken(OParser.LCURL, 0)

        def RCURL(self):
            return self.getToken(OParser.RCURL, 0)

        def variable_identifier(self):
            return self.getTypedRuleContext(OParser.Variable_identifierContext,0)


        def statement_list(self):
            return self.getTypedRuleContext(OParser.Statement_listContext,0)


        def getRuleIndex(self):
            return OParser.RULE_setter_method_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetter_method_declaration" ):
                listener.enterSetter_method_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetter_method_declaration" ):
                listener.exitSetter_method_declaration(self)




    def setter_method_declaration(self):

        localctx = OParser.Setter_method_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_setter_method_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 639
            self.match(OParser.SETTER)
            self.state = 640
            localctx.name = self.variable_identifier()
            self.state = 641
            self.match(OParser.LCURL)
            self.state = 643
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << OParser.COMMENT) | (1 << OParser.LPAR) | (1 << OParser.LBRAK) | (1 << OParser.LCURL) | (1 << OParser.LT) | (1 << OParser.LTCOLONGT) | (1 << OParser.BOOLEAN) | (1 << OParser.CSS) | (1 << OParser.CHARACTER) | (1 << OParser.TEXT) | (1 << OParser.INTEGER) | (1 << OParser.DECIMAL) | (1 << OParser.DATE) | (1 << OParser.TIME) | (1 << OParser.DATETIME) | (1 << OParser.PERIOD) | (1 << OParser.VERSION) | (1 << OParser.CODE) | (1 << OParser.DOCUMENT) | (1 << OParser.BLOB) | (1 << OParser.IMAGE))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (OParser.UUID - 64)) | (1 << (OParser.ITERATOR - 64)) | (1 << (OParser.CURSOR - 64)) | (1 << (OParser.HTML - 64)) | (1 << (OParser.ANY - 64)) | (1 << (OParser.BREAK - 64)) | (1 << (OParser.DELETE - 64)) | (1 << (OParser.DO - 64)) | (1 << (OParser.FETCH - 64)) | (1 << (OParser.FILTERED - 64)) | (1 << (OParser.FLUSH - 64)) | (1 << (OParser.FOR - 64)) | (1 << (OParser.IF - 64)) | (1 << (OParser.METHOD - 64)) | (1 << (OParser.MUTABLE - 64)) | (1 << (OParser.NULL - 64)))) != 0) or ((((_la - 134)) & ~0x3f) == 0 and ((1 << (_la - 134)) & ((1 << (OParser.READ - 134)) | (1 << (OParser.RETURN - 134)) | (1 << (OParser.SELF - 134)) | (1 << (OParser.SORTED - 134)) | (1 << (OParser.STORE - 134)) | (1 << (OParser.SUPER - 134)) | (1 << (OParser.SWITCH - 134)) | (1 << (OParser.THIS - 134)) | (1 << (OParser.THROW - 134)) | (1 << (OParser.TRY - 134)) | (1 << (OParser.WITH - 134)) | (1 << (OParser.WHILE - 134)) | (1 << (OParser.WRITE - 134)) | (1 << (OParser.BOOLEAN_LITERAL - 134)) | (1 << (OParser.CHAR_LITERAL - 134)) | (1 << (OParser.MIN_INTEGER - 134)) | (1 << (OParser.MAX_INTEGER - 134)) | (1 << (OParser.SYMBOL_IDENTIFIER - 134)) | (1 << (OParser.TYPE_IDENTIFIER - 134)) | (1 << (OParser.VARIABLE_IDENTIFIER - 134)) | (1 << (OParser.TEXT_LITERAL - 134)) | (1 << (OParser.UUID_LITERAL - 134)) | (1 << (OParser.INTEGER_LITERAL - 134)) | (1 << (OParser.HEXA_LITERAL - 134)) | (1 << (OParser.DECIMAL_LITERAL - 134)) | (1 << (OParser.DATETIME_LITERAL - 134)) | (1 << (OParser.TIME_LITERAL - 134)) | (1 << (OParser.DATE_LITERAL - 134)) | (1 << (OParser.PERIOD_LITERAL - 134)) | (1 << (OParser.VERSION_LITERAL - 134)))) != 0):
                self.state = 642
                localctx.stmts = self.statement_list()


            self.state = 645
            self.match(OParser.RCURL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Native_setter_declarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # Variable_identifierContext
            self.stmts = None # Native_statement_listContext

        def SETTER(self):
            return self.getToken(OParser.SETTER, 0)

        def LCURL(self):
            return self.getToken(OParser.LCURL, 0)

        def RCURL(self):
            return self.getToken(OParser.RCURL, 0)

        def variable_identifier(self):
            return self.getTypedRuleContext(OParser.Variable_identifierContext,0)


        def NATIVE(self):
            return self.getToken(OParser.NATIVE, 0)

        def native_statement_list(self):
            return self.getTypedRuleContext(OParser.Native_statement_listContext,0)


        def getRuleIndex(self):
            return OParser.RULE_native_setter_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNative_setter_declaration" ):
                listener.enterNative_setter_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNative_setter_declaration" ):
                listener.exitNative_setter_declaration(self)




    def native_setter_declaration(self):

        localctx = OParser.Native_setter_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_native_setter_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 648
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==OParser.NATIVE:
                self.state = 647
                self.match(OParser.NATIVE)


            self.state = 650
            self.match(OParser.SETTER)
            self.state = 651
            localctx.name = self.variable_identifier()
            self.state = 652
            self.match(OParser.LCURL)
            self.state = 654
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << OParser.JAVA) | (1 << OParser.CSHARP) | (1 << OParser.PYTHON2) | (1 << OParser.PYTHON3) | (1 << OParser.JAVASCRIPT))) != 0):
                self.state = 653
                localctx.stmts = self.native_statement_list()


            self.state = 656
            self.match(OParser.RCURL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Getter_method_declarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # Variable_identifierContext
            self.stmts = None # Statement_listContext

        def GETTER(self):
            return self.getToken(OParser.GETTER, 0)

        def LCURL(self):
            return self.getToken(OParser.LCURL, 0)

        def RCURL(self):
            return self.getToken(OParser.RCURL, 0)

        def variable_identifier(self):
            return self.getTypedRuleContext(OParser.Variable_identifierContext,0)


        def statement_list(self):
            return self.getTypedRuleContext(OParser.Statement_listContext,0)


        def getRuleIndex(self):
            return OParser.RULE_getter_method_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGetter_method_declaration" ):
                listener.enterGetter_method_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGetter_method_declaration" ):
                listener.exitGetter_method_declaration(self)




    def getter_method_declaration(self):

        localctx = OParser.Getter_method_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_getter_method_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 658
            self.match(OParser.GETTER)
            self.state = 659
            localctx.name = self.variable_identifier()
            self.state = 660
            self.match(OParser.LCURL)
            self.state = 662
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << OParser.COMMENT) | (1 << OParser.LPAR) | (1 << OParser.LBRAK) | (1 << OParser.LCURL) | (1 << OParser.LT) | (1 << OParser.LTCOLONGT) | (1 << OParser.BOOLEAN) | (1 << OParser.CSS) | (1 << OParser.CHARACTER) | (1 << OParser.TEXT) | (1 << OParser.INTEGER) | (1 << OParser.DECIMAL) | (1 << OParser.DATE) | (1 << OParser.TIME) | (1 << OParser.DATETIME) | (1 << OParser.PERIOD) | (1 << OParser.VERSION) | (1 << OParser.CODE) | (1 << OParser.DOCUMENT) | (1 << OParser.BLOB) | (1 << OParser.IMAGE))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (OParser.UUID - 64)) | (1 << (OParser.ITERATOR - 64)) | (1 << (OParser.CURSOR - 64)) | (1 << (OParser.HTML - 64)) | (1 << (OParser.ANY - 64)) | (1 << (OParser.BREAK - 64)) | (1 << (OParser.DELETE - 64)) | (1 << (OParser.DO - 64)) | (1 << (OParser.FETCH - 64)) | (1 << (OParser.FILTERED - 64)) | (1 << (OParser.FLUSH - 64)) | (1 << (OParser.FOR - 64)) | (1 << (OParser.IF - 64)) | (1 << (OParser.METHOD - 64)) | (1 << (OParser.MUTABLE - 64)) | (1 << (OParser.NULL - 64)))) != 0) or ((((_la - 134)) & ~0x3f) == 0 and ((1 << (_la - 134)) & ((1 << (OParser.READ - 134)) | (1 << (OParser.RETURN - 134)) | (1 << (OParser.SELF - 134)) | (1 << (OParser.SORTED - 134)) | (1 << (OParser.STORE - 134)) | (1 << (OParser.SUPER - 134)) | (1 << (OParser.SWITCH - 134)) | (1 << (OParser.THIS - 134)) | (1 << (OParser.THROW - 134)) | (1 << (OParser.TRY - 134)) | (1 << (OParser.WITH - 134)) | (1 << (OParser.WHILE - 134)) | (1 << (OParser.WRITE - 134)) | (1 << (OParser.BOOLEAN_LITERAL - 134)) | (1 << (OParser.CHAR_LITERAL - 134)) | (1 << (OParser.MIN_INTEGER - 134)) | (1 << (OParser.MAX_INTEGER - 134)) | (1 << (OParser.SYMBOL_IDENTIFIER - 134)) | (1 << (OParser.TYPE_IDENTIFIER - 134)) | (1 << (OParser.VARIABLE_IDENTIFIER - 134)) | (1 << (OParser.TEXT_LITERAL - 134)) | (1 << (OParser.UUID_LITERAL - 134)) | (1 << (OParser.INTEGER_LITERAL - 134)) | (1 << (OParser.HEXA_LITERAL - 134)) | (1 << (OParser.DECIMAL_LITERAL - 134)) | (1 << (OParser.DATETIME_LITERAL - 134)) | (1 << (OParser.TIME_LITERAL - 134)) | (1 << (OParser.DATE_LITERAL - 134)) | (1 << (OParser.PERIOD_LITERAL - 134)) | (1 << (OParser.VERSION_LITERAL - 134)))) != 0):
                self.state = 661
                localctx.stmts = self.statement_list()


            self.state = 664
            self.match(OParser.RCURL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Native_getter_declarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # Variable_identifierContext
            self.stmts = None # Native_statement_listContext

        def GETTER(self):
            return self.getToken(OParser.GETTER, 0)

        def LCURL(self):
            return self.getToken(OParser.LCURL, 0)

        def RCURL(self):
            return self.getToken(OParser.RCURL, 0)

        def variable_identifier(self):
            return self.getTypedRuleContext(OParser.Variable_identifierContext,0)


        def NATIVE(self):
            return self.getToken(OParser.NATIVE, 0)

        def native_statement_list(self):
            return self.getTypedRuleContext(OParser.Native_statement_listContext,0)


        def getRuleIndex(self):
            return OParser.RULE_native_getter_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNative_getter_declaration" ):
                listener.enterNative_getter_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNative_getter_declaration" ):
                listener.exitNative_getter_declaration(self)




    def native_getter_declaration(self):

        localctx = OParser.Native_getter_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_native_getter_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 667
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==OParser.NATIVE:
                self.state = 666
                self.match(OParser.NATIVE)


            self.state = 669
            self.match(OParser.GETTER)
            self.state = 670
            localctx.name = self.variable_identifier()
            self.state = 671
            self.match(OParser.LCURL)
            self.state = 673
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << OParser.JAVA) | (1 << OParser.CSHARP) | (1 << OParser.PYTHON2) | (1 << OParser.PYTHON3) | (1 << OParser.JAVASCRIPT))) != 0):
                self.state = 672
                localctx.stmts = self.native_statement_list()


            self.state = 675
            self.match(OParser.RCURL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Native_resource_declarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # Type_identifierContext
            self.attrs = None # Attribute_identifier_listContext
            self.bindings = None # Native_category_bindingsContext
            self.methods = None # Native_member_method_declaration_listContext

        def NATIVE(self):
            return self.getToken(OParser.NATIVE, 0)

        def RESOURCE(self):
            return self.getToken(OParser.RESOURCE, 0)

        def LCURL(self):
            return self.getToken(OParser.LCURL, 0)

        def RCURL(self):
            return self.getToken(OParser.RCURL, 0)

        def type_identifier(self):
            return self.getTypedRuleContext(OParser.Type_identifierContext,0)


        def native_category_bindings(self):
            return self.getTypedRuleContext(OParser.Native_category_bindingsContext,0)


        def STORABLE(self):
            return self.getToken(OParser.STORABLE, 0)

        def LPAR(self):
            return self.getToken(OParser.LPAR, 0)

        def RPAR(self):
            return self.getToken(OParser.RPAR, 0)

        def attribute_identifier_list(self):
            return self.getTypedRuleContext(OParser.Attribute_identifier_listContext,0)


        def native_member_method_declaration_list(self):
            return self.getTypedRuleContext(OParser.Native_member_method_declaration_listContext,0)


        def getRuleIndex(self):
            return OParser.RULE_native_resource_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNative_resource_declaration" ):
                listener.enterNative_resource_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNative_resource_declaration" ):
                listener.exitNative_resource_declaration(self)




    def native_resource_declaration(self):

        localctx = OParser.Native_resource_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_native_resource_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 678
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==OParser.STORABLE:
                self.state = 677
                self.match(OParser.STORABLE)


            self.state = 680
            self.match(OParser.NATIVE)
            self.state = 681
            self.match(OParser.RESOURCE)
            self.state = 682
            localctx.name = self.type_identifier()
            self.state = 687
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==OParser.LPAR:
                self.state = 683
                self.match(OParser.LPAR)
                self.state = 684
                localctx.attrs = self.attribute_identifier_list()
                self.state = 685
                self.match(OParser.RPAR)


            self.state = 689
            self.match(OParser.LCURL)
            self.state = 690
            localctx.bindings = self.native_category_bindings()
            self.state = 692
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 48)) & ~0x3f) == 0 and ((1 << (_la - 48)) & ((1 << (OParser.BOOLEAN - 48)) | (1 << (OParser.CSS - 48)) | (1 << (OParser.CHARACTER - 48)) | (1 << (OParser.TEXT - 48)) | (1 << (OParser.INTEGER - 48)) | (1 << (OParser.DECIMAL - 48)) | (1 << (OParser.DATE - 48)) | (1 << (OParser.TIME - 48)) | (1 << (OParser.DATETIME - 48)) | (1 << (OParser.PERIOD - 48)) | (1 << (OParser.VERSION - 48)) | (1 << (OParser.CODE - 48)) | (1 << (OParser.DOCUMENT - 48)) | (1 << (OParser.BLOB - 48)) | (1 << (OParser.IMAGE - 48)) | (1 << (OParser.UUID - 48)) | (1 << (OParser.ITERATOR - 48)) | (1 << (OParser.CURSOR - 48)) | (1 << (OParser.HTML - 48)) | (1 << (OParser.ANY - 48)) | (1 << (OParser.GETTER - 48)))) != 0) or ((((_la - 117)) & ~0x3f) == 0 and ((1 << (_la - 117)) & ((1 << (OParser.METHOD - 117)) | (1 << (OParser.NATIVE - 117)) | (1 << (OParser.SETTER - 117)) | (1 << (OParser.TYPE_IDENTIFIER - 117)))) != 0):
                self.state = 691
                localctx.methods = self.native_member_method_declaration_list()


            self.state = 694
            self.match(OParser.RCURL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Native_category_declarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # Type_identifierContext
            self.attrs = None # Attribute_identifier_listContext
            self.bindings = None # Native_category_bindingsContext
            self.methods = None # Native_member_method_declaration_listContext

        def NATIVE(self):
            return self.getToken(OParser.NATIVE, 0)

        def CATEGORY(self):
            return self.getToken(OParser.CATEGORY, 0)

        def LCURL(self):
            return self.getToken(OParser.LCURL, 0)

        def RCURL(self):
            return self.getToken(OParser.RCURL, 0)

        def type_identifier(self):
            return self.getTypedRuleContext(OParser.Type_identifierContext,0)


        def native_category_bindings(self):
            return self.getTypedRuleContext(OParser.Native_category_bindingsContext,0)


        def STORABLE(self):
            return self.getToken(OParser.STORABLE, 0)

        def LPAR(self):
            return self.getToken(OParser.LPAR, 0)

        def RPAR(self):
            return self.getToken(OParser.RPAR, 0)

        def attribute_identifier_list(self):
            return self.getTypedRuleContext(OParser.Attribute_identifier_listContext,0)


        def native_member_method_declaration_list(self):
            return self.getTypedRuleContext(OParser.Native_member_method_declaration_listContext,0)


        def getRuleIndex(self):
            return OParser.RULE_native_category_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNative_category_declaration" ):
                listener.enterNative_category_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNative_category_declaration" ):
                listener.exitNative_category_declaration(self)




    def native_category_declaration(self):

        localctx = OParser.Native_category_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_native_category_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 697
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==OParser.STORABLE:
                self.state = 696
                self.match(OParser.STORABLE)


            self.state = 699
            self.match(OParser.NATIVE)
            self.state = 700
            self.match(OParser.CATEGORY)
            self.state = 701
            localctx.name = self.type_identifier()
            self.state = 706
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==OParser.LPAR:
                self.state = 702
                self.match(OParser.LPAR)
                self.state = 703
                localctx.attrs = self.attribute_identifier_list()
                self.state = 704
                self.match(OParser.RPAR)


            self.state = 708
            self.match(OParser.LCURL)
            self.state = 709
            localctx.bindings = self.native_category_bindings()
            self.state = 711
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 48)) & ~0x3f) == 0 and ((1 << (_la - 48)) & ((1 << (OParser.BOOLEAN - 48)) | (1 << (OParser.CSS - 48)) | (1 << (OParser.CHARACTER - 48)) | (1 << (OParser.TEXT - 48)) | (1 << (OParser.INTEGER - 48)) | (1 << (OParser.DECIMAL - 48)) | (1 << (OParser.DATE - 48)) | (1 << (OParser.TIME - 48)) | (1 << (OParser.DATETIME - 48)) | (1 << (OParser.PERIOD - 48)) | (1 << (OParser.VERSION - 48)) | (1 << (OParser.CODE - 48)) | (1 << (OParser.DOCUMENT - 48)) | (1 << (OParser.BLOB - 48)) | (1 << (OParser.IMAGE - 48)) | (1 << (OParser.UUID - 48)) | (1 << (OParser.ITERATOR - 48)) | (1 << (OParser.CURSOR - 48)) | (1 << (OParser.HTML - 48)) | (1 << (OParser.ANY - 48)) | (1 << (OParser.GETTER - 48)))) != 0) or ((((_la - 117)) & ~0x3f) == 0 and ((1 << (_la - 117)) & ((1 << (OParser.METHOD - 117)) | (1 << (OParser.NATIVE - 117)) | (1 << (OParser.SETTER - 117)) | (1 << (OParser.TYPE_IDENTIFIER - 117)))) != 0):
                self.state = 710
                localctx.methods = self.native_member_method_declaration_list()


            self.state = 713
            self.match(OParser.RCURL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Native_category_bindingsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.items = None # Native_category_binding_listContext

        def CATEGORY(self):
            return self.getToken(OParser.CATEGORY, 0)

        def BINDINGS(self):
            return self.getToken(OParser.BINDINGS, 0)

        def LCURL(self):
            return self.getToken(OParser.LCURL, 0)

        def RCURL(self):
            return self.getToken(OParser.RCURL, 0)

        def native_category_binding_list(self):
            return self.getTypedRuleContext(OParser.Native_category_binding_listContext,0)


        def getRuleIndex(self):
            return OParser.RULE_native_category_bindings

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNative_category_bindings" ):
                listener.enterNative_category_bindings(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNative_category_bindings" ):
                listener.exitNative_category_bindings(self)




    def native_category_bindings(self):

        localctx = OParser.Native_category_bindingsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_native_category_bindings)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 715
            self.match(OParser.CATEGORY)
            self.state = 716
            self.match(OParser.BINDINGS)
            self.state = 717
            self.match(OParser.LCURL)
            self.state = 718
            localctx.items = self.native_category_binding_list(0)
            self.state = 719
            self.match(OParser.RCURL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Native_category_binding_listContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return OParser.RULE_native_category_binding_list

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class NativeCategoryBindingListItemContext(Native_category_binding_listContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Native_category_binding_listContext
            super().__init__(parser)
            self.items = None # Native_category_binding_listContext
            self.item = None # Native_category_bindingContext
            self.copyFrom(ctx)

        def SEMI(self):
            return self.getToken(OParser.SEMI, 0)
        def native_category_binding_list(self):
            return self.getTypedRuleContext(OParser.Native_category_binding_listContext,0)

        def native_category_binding(self):
            return self.getTypedRuleContext(OParser.Native_category_bindingContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNativeCategoryBindingListItem" ):
                listener.enterNativeCategoryBindingListItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNativeCategoryBindingListItem" ):
                listener.exitNativeCategoryBindingListItem(self)


    class NativeCategoryBindingListContext(Native_category_binding_listContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Native_category_binding_listContext
            super().__init__(parser)
            self.item = None # Native_category_bindingContext
            self.copyFrom(ctx)

        def SEMI(self):
            return self.getToken(OParser.SEMI, 0)
        def native_category_binding(self):
            return self.getTypedRuleContext(OParser.Native_category_bindingContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNativeCategoryBindingList" ):
                listener.enterNativeCategoryBindingList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNativeCategoryBindingList" ):
                listener.exitNativeCategoryBindingList(self)



    def native_category_binding_list(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = OParser.Native_category_binding_listContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 38
        self.enterRecursionRule(localctx, 38, self.RULE_native_category_binding_list, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            localctx = OParser.NativeCategoryBindingListContext(self, localctx)
            self._ctx = localctx
            _prevctx = localctx

            self.state = 722
            localctx.item = self.native_category_binding()
            self.state = 723
            self.match(OParser.SEMI)
            self._ctx.stop = self._input.LT(-1)
            self.state = 731
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,28,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = OParser.NativeCategoryBindingListItemContext(self, OParser.Native_category_binding_listContext(self, _parentctx, _parentState))
                    localctx.items = _prevctx
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_native_category_binding_list)
                    self.state = 725
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 726
                    localctx.item = self.native_category_binding()
                    self.state = 727
                    self.match(OParser.SEMI) 
                self.state = 733
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,28,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class Abstract_method_declarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.typ = None # TypedefContext
            self.name = None # Method_identifierContext
            self.args = None # Argument_listContext

        def ABSTRACT(self):
            return self.getToken(OParser.ABSTRACT, 0)

        def METHOD(self):
            return self.getToken(OParser.METHOD, 0)

        def LPAR(self):
            return self.getToken(OParser.LPAR, 0)

        def RPAR(self):
            return self.getToken(OParser.RPAR, 0)

        def SEMI(self):
            return self.getToken(OParser.SEMI, 0)

        def method_identifier(self):
            return self.getTypedRuleContext(OParser.Method_identifierContext,0)


        def typedef(self):
            return self.getTypedRuleContext(OParser.TypedefContext,0)


        def argument_list(self):
            return self.getTypedRuleContext(OParser.Argument_listContext,0)


        def MUTABLE(self):
            return self.getToken(OParser.MUTABLE, 0)

        def getRuleIndex(self):
            return OParser.RULE_abstract_method_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAbstract_method_declaration" ):
                listener.enterAbstract_method_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAbstract_method_declaration" ):
                listener.exitAbstract_method_declaration(self)




    def abstract_method_declaration(self):

        localctx = OParser.Abstract_method_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_abstract_method_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 734
            self.match(OParser.ABSTRACT)
            self.state = 739
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 48)) & ~0x3f) == 0 and ((1 << (_la - 48)) & ((1 << (OParser.BOOLEAN - 48)) | (1 << (OParser.CSS - 48)) | (1 << (OParser.CHARACTER - 48)) | (1 << (OParser.TEXT - 48)) | (1 << (OParser.INTEGER - 48)) | (1 << (OParser.DECIMAL - 48)) | (1 << (OParser.DATE - 48)) | (1 << (OParser.TIME - 48)) | (1 << (OParser.DATETIME - 48)) | (1 << (OParser.PERIOD - 48)) | (1 << (OParser.VERSION - 48)) | (1 << (OParser.CODE - 48)) | (1 << (OParser.DOCUMENT - 48)) | (1 << (OParser.BLOB - 48)) | (1 << (OParser.IMAGE - 48)) | (1 << (OParser.UUID - 48)) | (1 << (OParser.ITERATOR - 48)) | (1 << (OParser.CURSOR - 48)) | (1 << (OParser.HTML - 48)))) != 0) or _la==OParser.MUTABLE or _la==OParser.TYPE_IDENTIFIER:
                self.state = 736
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==OParser.MUTABLE:
                    self.state = 735
                    self.match(OParser.MUTABLE)


                self.state = 738
                localctx.typ = self.typedef(0)


            self.state = 741
            self.match(OParser.METHOD)
            self.state = 742
            localctx.name = self.method_identifier()
            self.state = 743
            self.match(OParser.LPAR)
            self.state = 745
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 48)) & ~0x3f) == 0 and ((1 << (_la - 48)) & ((1 << (OParser.BOOLEAN - 48)) | (1 << (OParser.CSS - 48)) | (1 << (OParser.CHARACTER - 48)) | (1 << (OParser.TEXT - 48)) | (1 << (OParser.INTEGER - 48)) | (1 << (OParser.DECIMAL - 48)) | (1 << (OParser.DATE - 48)) | (1 << (OParser.TIME - 48)) | (1 << (OParser.DATETIME - 48)) | (1 << (OParser.PERIOD - 48)) | (1 << (OParser.VERSION - 48)) | (1 << (OParser.CODE - 48)) | (1 << (OParser.DOCUMENT - 48)) | (1 << (OParser.BLOB - 48)) | (1 << (OParser.IMAGE - 48)) | (1 << (OParser.UUID - 48)) | (1 << (OParser.ITERATOR - 48)) | (1 << (OParser.CURSOR - 48)) | (1 << (OParser.HTML - 48)) | (1 << (OParser.ANY - 48)))) != 0) or ((((_la - 120)) & ~0x3f) == 0 and ((1 << (_la - 120)) & ((1 << (OParser.MUTABLE - 120)) | (1 << (OParser.TYPE_IDENTIFIER - 120)) | (1 << (OParser.VARIABLE_IDENTIFIER - 120)))) != 0):
                self.state = 744
                localctx.args = self.argument_list()


            self.state = 747
            self.match(OParser.RPAR)
            self.state = 748
            self.match(OParser.SEMI)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Concrete_method_declarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.typ = None # TypedefContext
            self.name = None # Method_identifierContext
            self.args = None # Argument_listContext
            self.stmts = None # Statement_listContext

        def METHOD(self):
            return self.getToken(OParser.METHOD, 0)

        def LPAR(self):
            return self.getToken(OParser.LPAR, 0)

        def RPAR(self):
            return self.getToken(OParser.RPAR, 0)

        def LCURL(self):
            return self.getToken(OParser.LCURL, 0)

        def RCURL(self):
            return self.getToken(OParser.RCURL, 0)

        def method_identifier(self):
            return self.getTypedRuleContext(OParser.Method_identifierContext,0)


        def typedef(self):
            return self.getTypedRuleContext(OParser.TypedefContext,0)


        def argument_list(self):
            return self.getTypedRuleContext(OParser.Argument_listContext,0)


        def statement_list(self):
            return self.getTypedRuleContext(OParser.Statement_listContext,0)


        def MUTABLE(self):
            return self.getToken(OParser.MUTABLE, 0)

        def getRuleIndex(self):
            return OParser.RULE_concrete_method_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConcrete_method_declaration" ):
                listener.enterConcrete_method_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConcrete_method_declaration" ):
                listener.exitConcrete_method_declaration(self)




    def concrete_method_declaration(self):

        localctx = OParser.Concrete_method_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_concrete_method_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 754
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 48)) & ~0x3f) == 0 and ((1 << (_la - 48)) & ((1 << (OParser.BOOLEAN - 48)) | (1 << (OParser.CSS - 48)) | (1 << (OParser.CHARACTER - 48)) | (1 << (OParser.TEXT - 48)) | (1 << (OParser.INTEGER - 48)) | (1 << (OParser.DECIMAL - 48)) | (1 << (OParser.DATE - 48)) | (1 << (OParser.TIME - 48)) | (1 << (OParser.DATETIME - 48)) | (1 << (OParser.PERIOD - 48)) | (1 << (OParser.VERSION - 48)) | (1 << (OParser.CODE - 48)) | (1 << (OParser.DOCUMENT - 48)) | (1 << (OParser.BLOB - 48)) | (1 << (OParser.IMAGE - 48)) | (1 << (OParser.UUID - 48)) | (1 << (OParser.ITERATOR - 48)) | (1 << (OParser.CURSOR - 48)) | (1 << (OParser.HTML - 48)))) != 0) or _la==OParser.MUTABLE or _la==OParser.TYPE_IDENTIFIER:
                self.state = 751
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==OParser.MUTABLE:
                    self.state = 750
                    self.match(OParser.MUTABLE)


                self.state = 753
                localctx.typ = self.typedef(0)


            self.state = 756
            self.match(OParser.METHOD)
            self.state = 757
            localctx.name = self.method_identifier()
            self.state = 758
            self.match(OParser.LPAR)
            self.state = 760
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 48)) & ~0x3f) == 0 and ((1 << (_la - 48)) & ((1 << (OParser.BOOLEAN - 48)) | (1 << (OParser.CSS - 48)) | (1 << (OParser.CHARACTER - 48)) | (1 << (OParser.TEXT - 48)) | (1 << (OParser.INTEGER - 48)) | (1 << (OParser.DECIMAL - 48)) | (1 << (OParser.DATE - 48)) | (1 << (OParser.TIME - 48)) | (1 << (OParser.DATETIME - 48)) | (1 << (OParser.PERIOD - 48)) | (1 << (OParser.VERSION - 48)) | (1 << (OParser.CODE - 48)) | (1 << (OParser.DOCUMENT - 48)) | (1 << (OParser.BLOB - 48)) | (1 << (OParser.IMAGE - 48)) | (1 << (OParser.UUID - 48)) | (1 << (OParser.ITERATOR - 48)) | (1 << (OParser.CURSOR - 48)) | (1 << (OParser.HTML - 48)) | (1 << (OParser.ANY - 48)))) != 0) or ((((_la - 120)) & ~0x3f) == 0 and ((1 << (_la - 120)) & ((1 << (OParser.MUTABLE - 120)) | (1 << (OParser.TYPE_IDENTIFIER - 120)) | (1 << (OParser.VARIABLE_IDENTIFIER - 120)))) != 0):
                self.state = 759
                localctx.args = self.argument_list()


            self.state = 762
            self.match(OParser.RPAR)
            self.state = 763
            self.match(OParser.LCURL)
            self.state = 765
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << OParser.COMMENT) | (1 << OParser.LPAR) | (1 << OParser.LBRAK) | (1 << OParser.LCURL) | (1 << OParser.LT) | (1 << OParser.LTCOLONGT) | (1 << OParser.BOOLEAN) | (1 << OParser.CSS) | (1 << OParser.CHARACTER) | (1 << OParser.TEXT) | (1 << OParser.INTEGER) | (1 << OParser.DECIMAL) | (1 << OParser.DATE) | (1 << OParser.TIME) | (1 << OParser.DATETIME) | (1 << OParser.PERIOD) | (1 << OParser.VERSION) | (1 << OParser.CODE) | (1 << OParser.DOCUMENT) | (1 << OParser.BLOB) | (1 << OParser.IMAGE))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (OParser.UUID - 64)) | (1 << (OParser.ITERATOR - 64)) | (1 << (OParser.CURSOR - 64)) | (1 << (OParser.HTML - 64)) | (1 << (OParser.ANY - 64)) | (1 << (OParser.BREAK - 64)) | (1 << (OParser.DELETE - 64)) | (1 << (OParser.DO - 64)) | (1 << (OParser.FETCH - 64)) | (1 << (OParser.FILTERED - 64)) | (1 << (OParser.FLUSH - 64)) | (1 << (OParser.FOR - 64)) | (1 << (OParser.IF - 64)) | (1 << (OParser.METHOD - 64)) | (1 << (OParser.MUTABLE - 64)) | (1 << (OParser.NULL - 64)))) != 0) or ((((_la - 134)) & ~0x3f) == 0 and ((1 << (_la - 134)) & ((1 << (OParser.READ - 134)) | (1 << (OParser.RETURN - 134)) | (1 << (OParser.SELF - 134)) | (1 << (OParser.SORTED - 134)) | (1 << (OParser.STORE - 134)) | (1 << (OParser.SUPER - 134)) | (1 << (OParser.SWITCH - 134)) | (1 << (OParser.THIS - 134)) | (1 << (OParser.THROW - 134)) | (1 << (OParser.TRY - 134)) | (1 << (OParser.WITH - 134)) | (1 << (OParser.WHILE - 134)) | (1 << (OParser.WRITE - 134)) | (1 << (OParser.BOOLEAN_LITERAL - 134)) | (1 << (OParser.CHAR_LITERAL - 134)) | (1 << (OParser.MIN_INTEGER - 134)) | (1 << (OParser.MAX_INTEGER - 134)) | (1 << (OParser.SYMBOL_IDENTIFIER - 134)) | (1 << (OParser.TYPE_IDENTIFIER - 134)) | (1 << (OParser.VARIABLE_IDENTIFIER - 134)) | (1 << (OParser.TEXT_LITERAL - 134)) | (1 << (OParser.UUID_LITERAL - 134)) | (1 << (OParser.INTEGER_LITERAL - 134)) | (1 << (OParser.HEXA_LITERAL - 134)) | (1 << (OParser.DECIMAL_LITERAL - 134)) | (1 << (OParser.DATETIME_LITERAL - 134)) | (1 << (OParser.TIME_LITERAL - 134)) | (1 << (OParser.DATE_LITERAL - 134)) | (1 << (OParser.PERIOD_LITERAL - 134)) | (1 << (OParser.VERSION_LITERAL - 134)))) != 0):
                self.state = 764
                localctx.stmts = self.statement_list()


            self.state = 767
            self.match(OParser.RCURL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Native_method_declarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.typ = None # Category_or_any_typeContext
            self.name = None # Method_identifierContext
            self.args = None # Argument_listContext
            self.stmts = None # Native_statement_listContext

        def METHOD(self):
            return self.getToken(OParser.METHOD, 0)

        def LPAR(self):
            return self.getToken(OParser.LPAR, 0)

        def RPAR(self):
            return self.getToken(OParser.RPAR, 0)

        def LCURL(self):
            return self.getToken(OParser.LCURL, 0)

        def RCURL(self):
            return self.getToken(OParser.RCURL, 0)

        def method_identifier(self):
            return self.getTypedRuleContext(OParser.Method_identifierContext,0)


        def native_statement_list(self):
            return self.getTypedRuleContext(OParser.Native_statement_listContext,0)


        def NATIVE(self):
            return self.getToken(OParser.NATIVE, 0)

        def category_or_any_type(self):
            return self.getTypedRuleContext(OParser.Category_or_any_typeContext,0)


        def argument_list(self):
            return self.getTypedRuleContext(OParser.Argument_listContext,0)


        def getRuleIndex(self):
            return OParser.RULE_native_method_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNative_method_declaration" ):
                listener.enterNative_method_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNative_method_declaration" ):
                listener.exitNative_method_declaration(self)




    def native_method_declaration(self):

        localctx = OParser.Native_method_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_native_method_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 770
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 48)) & ~0x3f) == 0 and ((1 << (_la - 48)) & ((1 << (OParser.BOOLEAN - 48)) | (1 << (OParser.CSS - 48)) | (1 << (OParser.CHARACTER - 48)) | (1 << (OParser.TEXT - 48)) | (1 << (OParser.INTEGER - 48)) | (1 << (OParser.DECIMAL - 48)) | (1 << (OParser.DATE - 48)) | (1 << (OParser.TIME - 48)) | (1 << (OParser.DATETIME - 48)) | (1 << (OParser.PERIOD - 48)) | (1 << (OParser.VERSION - 48)) | (1 << (OParser.CODE - 48)) | (1 << (OParser.DOCUMENT - 48)) | (1 << (OParser.BLOB - 48)) | (1 << (OParser.IMAGE - 48)) | (1 << (OParser.UUID - 48)) | (1 << (OParser.ITERATOR - 48)) | (1 << (OParser.CURSOR - 48)) | (1 << (OParser.HTML - 48)) | (1 << (OParser.ANY - 48)))) != 0) or _la==OParser.TYPE_IDENTIFIER:
                self.state = 769
                localctx.typ = self.category_or_any_type()


            self.state = 773
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==OParser.NATIVE:
                self.state = 772
                self.match(OParser.NATIVE)


            self.state = 775
            self.match(OParser.METHOD)
            self.state = 776
            localctx.name = self.method_identifier()
            self.state = 777
            self.match(OParser.LPAR)
            self.state = 779
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 48)) & ~0x3f) == 0 and ((1 << (_la - 48)) & ((1 << (OParser.BOOLEAN - 48)) | (1 << (OParser.CSS - 48)) | (1 << (OParser.CHARACTER - 48)) | (1 << (OParser.TEXT - 48)) | (1 << (OParser.INTEGER - 48)) | (1 << (OParser.DECIMAL - 48)) | (1 << (OParser.DATE - 48)) | (1 << (OParser.TIME - 48)) | (1 << (OParser.DATETIME - 48)) | (1 << (OParser.PERIOD - 48)) | (1 << (OParser.VERSION - 48)) | (1 << (OParser.CODE - 48)) | (1 << (OParser.DOCUMENT - 48)) | (1 << (OParser.BLOB - 48)) | (1 << (OParser.IMAGE - 48)) | (1 << (OParser.UUID - 48)) | (1 << (OParser.ITERATOR - 48)) | (1 << (OParser.CURSOR - 48)) | (1 << (OParser.HTML - 48)) | (1 << (OParser.ANY - 48)))) != 0) or ((((_la - 120)) & ~0x3f) == 0 and ((1 << (_la - 120)) & ((1 << (OParser.MUTABLE - 120)) | (1 << (OParser.TYPE_IDENTIFIER - 120)) | (1 << (OParser.VARIABLE_IDENTIFIER - 120)))) != 0):
                self.state = 778
                localctx.args = self.argument_list()


            self.state = 781
            self.match(OParser.RPAR)
            self.state = 782
            self.match(OParser.LCURL)
            self.state = 783
            localctx.stmts = self.native_statement_list()
            self.state = 784
            self.match(OParser.RCURL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Test_method_declarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # Token
            self.stmts = None # Statement_listContext
            self.exps = None # Assertion_listContext
            self.error = None # Symbol_identifierContext

        def TEST(self):
            return self.getToken(OParser.TEST, 0)

        def METHOD(self):
            return self.getToken(OParser.METHOD, 0)

        def LPAR(self):
            return self.getToken(OParser.LPAR, 0)

        def RPAR(self):
            return self.getToken(OParser.RPAR, 0)

        def LCURL(self, i:int=None):
            if i is None:
                return self.getTokens(OParser.LCURL)
            else:
                return self.getToken(OParser.LCURL, i)

        def RCURL(self, i:int=None):
            if i is None:
                return self.getTokens(OParser.RCURL)
            else:
                return self.getToken(OParser.RCURL, i)

        def VERIFYING(self):
            return self.getToken(OParser.VERIFYING, 0)

        def TEXT_LITERAL(self):
            return self.getToken(OParser.TEXT_LITERAL, 0)

        def statement_list(self):
            return self.getTypedRuleContext(OParser.Statement_listContext,0)


        def SEMI(self):
            return self.getToken(OParser.SEMI, 0)

        def assertion_list(self):
            return self.getTypedRuleContext(OParser.Assertion_listContext,0)


        def symbol_identifier(self):
            return self.getTypedRuleContext(OParser.Symbol_identifierContext,0)


        def getRuleIndex(self):
            return OParser.RULE_test_method_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTest_method_declaration" ):
                listener.enterTest_method_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTest_method_declaration" ):
                listener.exitTest_method_declaration(self)




    def test_method_declaration(self):

        localctx = OParser.Test_method_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_test_method_declaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 786
            self.match(OParser.TEST)
            self.state = 787
            self.match(OParser.METHOD)
            self.state = 788
            localctx.name = self.match(OParser.TEXT_LITERAL)
            self.state = 789
            self.match(OParser.LPAR)
            self.state = 790
            self.match(OParser.RPAR)
            self.state = 791
            self.match(OParser.LCURL)
            self.state = 792
            localctx.stmts = self.statement_list()
            self.state = 793
            self.match(OParser.RCURL)
            self.state = 794
            self.match(OParser.VERIFYING)
            self.state = 802
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [OParser.LCURL]:
                self.state = 795
                self.match(OParser.LCURL)
                self.state = 796
                localctx.exps = self.assertion_list()
                self.state = 797
                self.match(OParser.RCURL)
                pass
            elif token in [OParser.SYMBOL_IDENTIFIER]:
                self.state = 799
                localctx.error = self.symbol_identifier()
                self.state = 800
                self.match(OParser.SEMI)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AssertionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.exp = None # ExpressionContext

        def SEMI(self):
            return self.getToken(OParser.SEMI, 0)

        def expression(self):
            return self.getTypedRuleContext(OParser.ExpressionContext,0)


        def getRuleIndex(self):
            return OParser.RULE_assertion

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssertion" ):
                listener.enterAssertion(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssertion" ):
                listener.exitAssertion(self)




    def assertion(self):

        localctx = OParser.AssertionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_assertion)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 804
            localctx.exp = self.expression(0)
            self.state = 805
            self.match(OParser.SEMI)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Typed_argumentContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.typ = None # Category_or_any_typeContext
            self.attrs = None # Attribute_identifier_listContext
            self.name = None # Variable_identifierContext
            self.value = None # Literal_expressionContext

        def category_or_any_type(self):
            return self.getTypedRuleContext(OParser.Category_or_any_typeContext,0)


        def variable_identifier(self):
            return self.getTypedRuleContext(OParser.Variable_identifierContext,0)


        def LPAR(self):
            return self.getToken(OParser.LPAR, 0)

        def RPAR(self):
            return self.getToken(OParser.RPAR, 0)

        def EQ(self):
            return self.getToken(OParser.EQ, 0)

        def attribute_identifier_list(self):
            return self.getTypedRuleContext(OParser.Attribute_identifier_listContext,0)


        def literal_expression(self):
            return self.getTypedRuleContext(OParser.Literal_expressionContext,0)


        def getRuleIndex(self):
            return OParser.RULE_typed_argument

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTyped_argument" ):
                listener.enterTyped_argument(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTyped_argument" ):
                listener.exitTyped_argument(self)




    def typed_argument(self):

        localctx = OParser.Typed_argumentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_typed_argument)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 807
            localctx.typ = self.category_or_any_type()
            self.state = 812
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==OParser.LPAR:
                self.state = 808
                self.match(OParser.LPAR)
                self.state = 809
                localctx.attrs = self.attribute_identifier_list()
                self.state = 810
                self.match(OParser.RPAR)


            self.state = 814
            localctx.name = self.variable_identifier()
            self.state = 817
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==OParser.EQ:
                self.state = 815
                self.match(OParser.EQ)
                self.state = 816
                localctx.value = self.literal_expression()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Statement_or_listContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return OParser.RULE_statement_or_list

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class CurlyStatementListContext(Statement_or_listContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Statement_or_listContext
            super().__init__(parser)
            self.items = None # Statement_listContext
            self.copyFrom(ctx)

        def LCURL(self):
            return self.getToken(OParser.LCURL, 0)
        def RCURL(self):
            return self.getToken(OParser.RCURL, 0)
        def statement_list(self):
            return self.getTypedRuleContext(OParser.Statement_listContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCurlyStatementList" ):
                listener.enterCurlyStatementList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCurlyStatementList" ):
                listener.exitCurlyStatementList(self)


    class SingleStatementContext(Statement_or_listContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Statement_or_listContext
            super().__init__(parser)
            self.stmt = None # StatementContext
            self.copyFrom(ctx)

        def statement(self):
            return self.getTypedRuleContext(OParser.StatementContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSingleStatement" ):
                listener.enterSingleStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSingleStatement" ):
                listener.exitSingleStatement(self)



    def statement_or_list(self):

        localctx = OParser.Statement_or_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_statement_or_list)
        try:
            self.state = 826
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,43,self._ctx)
            if la_ == 1:
                localctx = OParser.SingleStatementContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 819
                localctx.stmt = self.statement()
                pass

            elif la_ == 2:
                localctx = OParser.CurlyStatementListContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 820
                self.match(OParser.LCURL)
                self.state = 824
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,42,self._ctx)
                if la_ == 1:
                    self.state = 821
                    localctx.items = self.statement_list()
                    self.state = 822
                    self.match(OParser.RCURL)


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class StatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return OParser.RULE_statement

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class CommentStatementContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.StatementContext
            super().__init__(parser)
            self.decl = None # Comment_statementContext
            self.copyFrom(ctx)

        def comment_statement(self):
            return self.getTypedRuleContext(OParser.Comment_statementContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCommentStatement" ):
                listener.enterCommentStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCommentStatement" ):
                listener.exitCommentStatement(self)


    class StoreStatementContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.StatementContext
            super().__init__(parser)
            self.stmt = None # Store_statementContext
            self.copyFrom(ctx)

        def store_statement(self):
            return self.getTypedRuleContext(OParser.Store_statementContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStoreStatement" ):
                listener.enterStoreStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStoreStatement" ):
                listener.exitStoreStatement(self)


    class WithSingletonStatementContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.StatementContext
            super().__init__(parser)
            self.stmt = None # With_singleton_statementContext
            self.copyFrom(ctx)

        def with_singleton_statement(self):
            return self.getTypedRuleContext(OParser.With_singleton_statementContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWithSingletonStatement" ):
                listener.enterWithSingletonStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWithSingletonStatement" ):
                listener.exitWithSingletonStatement(self)


    class WriteStatementContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.StatementContext
            super().__init__(parser)
            self.stmt = None # Write_statementContext
            self.copyFrom(ctx)

        def write_statement(self):
            return self.getTypedRuleContext(OParser.Write_statementContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWriteStatement" ):
                listener.enterWriteStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWriteStatement" ):
                listener.exitWriteStatement(self)


    class WhileStatementContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.StatementContext
            super().__init__(parser)
            self.stmt = None # While_statementContext
            self.copyFrom(ctx)

        def while_statement(self):
            return self.getTypedRuleContext(OParser.While_statementContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhileStatement" ):
                listener.enterWhileStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhileStatement" ):
                listener.exitWhileStatement(self)


    class WithResourceStatementContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.StatementContext
            super().__init__(parser)
            self.stmt = None # With_resource_statementContext
            self.copyFrom(ctx)

        def with_resource_statement(self):
            return self.getTypedRuleContext(OParser.With_resource_statementContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWithResourceStatement" ):
                listener.enterWithResourceStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWithResourceStatement" ):
                listener.exitWithResourceStatement(self)


    class RaiseStatementContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.StatementContext
            super().__init__(parser)
            self.stmt = None # Raise_statementContext
            self.copyFrom(ctx)

        def raise_statement(self):
            return self.getTypedRuleContext(OParser.Raise_statementContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRaiseStatement" ):
                listener.enterRaiseStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRaiseStatement" ):
                listener.exitRaiseStatement(self)


    class FetchStatementContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.StatementContext
            super().__init__(parser)
            self.stmt = None # Fetch_statementContext
            self.copyFrom(ctx)

        def fetch_statement(self):
            return self.getTypedRuleContext(OParser.Fetch_statementContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFetchStatement" ):
                listener.enterFetchStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFetchStatement" ):
                listener.exitFetchStatement(self)


    class BreakStatementContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.StatementContext
            super().__init__(parser)
            self.stmt = None # Break_statementContext
            self.copyFrom(ctx)

        def break_statement(self):
            return self.getTypedRuleContext(OParser.Break_statementContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBreakStatement" ):
                listener.enterBreakStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBreakStatement" ):
                listener.exitBreakStatement(self)


    class AssignInstanceStatementContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.StatementContext
            super().__init__(parser)
            self.stmt = None # Assign_instance_statementContext
            self.copyFrom(ctx)

        def assign_instance_statement(self):
            return self.getTypedRuleContext(OParser.Assign_instance_statementContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignInstanceStatement" ):
                listener.enterAssignInstanceStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignInstanceStatement" ):
                listener.exitAssignInstanceStatement(self)


    class IfStatementContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.StatementContext
            super().__init__(parser)
            self.stmt = None # If_statementContext
            self.copyFrom(ctx)

        def if_statement(self):
            return self.getTypedRuleContext(OParser.If_statementContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIfStatement" ):
                listener.enterIfStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIfStatement" ):
                listener.exitIfStatement(self)


    class SwitchStatementContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.StatementContext
            super().__init__(parser)
            self.stmt = None # Switch_statementContext
            self.copyFrom(ctx)

        def switch_statement(self):
            return self.getTypedRuleContext(OParser.Switch_statementContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSwitchStatement" ):
                listener.enterSwitchStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSwitchStatement" ):
                listener.exitSwitchStatement(self)


    class TryStatementContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.StatementContext
            super().__init__(parser)
            self.stmt = None # Try_statementContext
            self.copyFrom(ctx)

        def try_statement(self):
            return self.getTypedRuleContext(OParser.Try_statementContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTryStatement" ):
                listener.enterTryStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTryStatement" ):
                listener.exitTryStatement(self)


    class MethodCallStatementContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.StatementContext
            super().__init__(parser)
            self.stmt = None # Method_call_statementContext
            self.copyFrom(ctx)

        def method_call_statement(self):
            return self.getTypedRuleContext(OParser.Method_call_statementContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMethodCallStatement" ):
                listener.enterMethodCallStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMethodCallStatement" ):
                listener.exitMethodCallStatement(self)


    class ReturnStatementContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.StatementContext
            super().__init__(parser)
            self.stmt = None # Return_statementContext
            self.copyFrom(ctx)

        def return_statement(self):
            return self.getTypedRuleContext(OParser.Return_statementContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReturnStatement" ):
                listener.enterReturnStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReturnStatement" ):
                listener.exitReturnStatement(self)


    class AssignTupleStatementContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.StatementContext
            super().__init__(parser)
            self.stmt = None # Assign_tuple_statementContext
            self.copyFrom(ctx)

        def assign_tuple_statement(self):
            return self.getTypedRuleContext(OParser.Assign_tuple_statementContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignTupleStatement" ):
                listener.enterAssignTupleStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignTupleStatement" ):
                listener.exitAssignTupleStatement(self)


    class ClosureStatementContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.StatementContext
            super().__init__(parser)
            self.decl = None # Concrete_method_declarationContext
            self.copyFrom(ctx)

        def concrete_method_declaration(self):
            return self.getTypedRuleContext(OParser.Concrete_method_declarationContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClosureStatement" ):
                listener.enterClosureStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClosureStatement" ):
                listener.exitClosureStatement(self)


    class FlushStatementContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.StatementContext
            super().__init__(parser)
            self.stmt = None # Flush_statementContext
            self.copyFrom(ctx)

        def flush_statement(self):
            return self.getTypedRuleContext(OParser.Flush_statementContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFlushStatement" ):
                listener.enterFlushStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFlushStatement" ):
                listener.exitFlushStatement(self)


    class DoWhileStatementContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.StatementContext
            super().__init__(parser)
            self.stmt = None # Do_while_statementContext
            self.copyFrom(ctx)

        def do_while_statement(self):
            return self.getTypedRuleContext(OParser.Do_while_statementContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDoWhileStatement" ):
                listener.enterDoWhileStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDoWhileStatement" ):
                listener.exitDoWhileStatement(self)


    class ForEachStatementContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.StatementContext
            super().__init__(parser)
            self.stmt = None # For_each_statementContext
            self.copyFrom(ctx)

        def for_each_statement(self):
            return self.getTypedRuleContext(OParser.For_each_statementContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForEachStatement" ):
                listener.enterForEachStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForEachStatement" ):
                listener.exitForEachStatement(self)



    def statement(self):

        localctx = OParser.StatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_statement)
        try:
            self.state = 848
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,44,self._ctx)
            if la_ == 1:
                localctx = OParser.MethodCallStatementContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 828
                localctx.stmt = self.method_call_statement()
                pass

            elif la_ == 2:
                localctx = OParser.AssignInstanceStatementContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 829
                localctx.stmt = self.assign_instance_statement()
                pass

            elif la_ == 3:
                localctx = OParser.AssignTupleStatementContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 830
                localctx.stmt = self.assign_tuple_statement()
                pass

            elif la_ == 4:
                localctx = OParser.StoreStatementContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 831
                localctx.stmt = self.store_statement()
                pass

            elif la_ == 5:
                localctx = OParser.FetchStatementContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 832
                localctx.stmt = self.fetch_statement()
                pass

            elif la_ == 6:
                localctx = OParser.FlushStatementContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 833
                localctx.stmt = self.flush_statement()
                pass

            elif la_ == 7:
                localctx = OParser.BreakStatementContext(self, localctx)
                self.enterOuterAlt(localctx, 7)
                self.state = 834
                localctx.stmt = self.break_statement()
                pass

            elif la_ == 8:
                localctx = OParser.ReturnStatementContext(self, localctx)
                self.enterOuterAlt(localctx, 8)
                self.state = 835
                localctx.stmt = self.return_statement()
                pass

            elif la_ == 9:
                localctx = OParser.IfStatementContext(self, localctx)
                self.enterOuterAlt(localctx, 9)
                self.state = 836
                localctx.stmt = self.if_statement()
                pass

            elif la_ == 10:
                localctx = OParser.SwitchStatementContext(self, localctx)
                self.enterOuterAlt(localctx, 10)
                self.state = 837
                localctx.stmt = self.switch_statement()
                pass

            elif la_ == 11:
                localctx = OParser.ForEachStatementContext(self, localctx)
                self.enterOuterAlt(localctx, 11)
                self.state = 838
                localctx.stmt = self.for_each_statement()
                pass

            elif la_ == 12:
                localctx = OParser.WhileStatementContext(self, localctx)
                self.enterOuterAlt(localctx, 12)
                self.state = 839
                localctx.stmt = self.while_statement()
                pass

            elif la_ == 13:
                localctx = OParser.DoWhileStatementContext(self, localctx)
                self.enterOuterAlt(localctx, 13)
                self.state = 840
                localctx.stmt = self.do_while_statement()
                pass

            elif la_ == 14:
                localctx = OParser.TryStatementContext(self, localctx)
                self.enterOuterAlt(localctx, 14)
                self.state = 841
                localctx.stmt = self.try_statement()
                pass

            elif la_ == 15:
                localctx = OParser.RaiseStatementContext(self, localctx)
                self.enterOuterAlt(localctx, 15)
                self.state = 842
                localctx.stmt = self.raise_statement()
                pass

            elif la_ == 16:
                localctx = OParser.WriteStatementContext(self, localctx)
                self.enterOuterAlt(localctx, 16)
                self.state = 843
                localctx.stmt = self.write_statement()
                pass

            elif la_ == 17:
                localctx = OParser.WithResourceStatementContext(self, localctx)
                self.enterOuterAlt(localctx, 17)
                self.state = 844
                localctx.stmt = self.with_resource_statement()
                pass

            elif la_ == 18:
                localctx = OParser.WithSingletonStatementContext(self, localctx)
                self.enterOuterAlt(localctx, 18)
                self.state = 845
                localctx.stmt = self.with_singleton_statement()
                pass

            elif la_ == 19:
                localctx = OParser.ClosureStatementContext(self, localctx)
                self.enterOuterAlt(localctx, 19)
                self.state = 846
                localctx.decl = self.concrete_method_declaration()
                pass

            elif la_ == 20:
                localctx = OParser.CommentStatementContext(self, localctx)
                self.enterOuterAlt(localctx, 20)
                self.state = 847
                localctx.decl = self.comment_statement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Flush_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FLUSH(self):
            return self.getToken(OParser.FLUSH, 0)

        def LPAR(self):
            return self.getToken(OParser.LPAR, 0)

        def RPAR(self):
            return self.getToken(OParser.RPAR, 0)

        def SEMI(self):
            return self.getToken(OParser.SEMI, 0)

        def getRuleIndex(self):
            return OParser.RULE_flush_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFlush_statement" ):
                listener.enterFlush_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFlush_statement" ):
                listener.exitFlush_statement(self)




    def flush_statement(self):

        localctx = OParser.Flush_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_flush_statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 850
            self.match(OParser.FLUSH)
            self.state = 851
            self.match(OParser.LPAR)
            self.state = 852
            self.match(OParser.RPAR)
            self.state = 853
            self.match(OParser.SEMI)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Store_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.to_del = None # Expression_listContext
            self.to_add = None # Expression_listContext
            self.stmts = None # Statement_listContext

        def DELETE(self):
            return self.getToken(OParser.DELETE, 0)

        def LPAR(self, i:int=None):
            if i is None:
                return self.getTokens(OParser.LPAR)
            else:
                return self.getToken(OParser.LPAR, i)

        def RPAR(self, i:int=None):
            if i is None:
                return self.getTokens(OParser.RPAR)
            else:
                return self.getToken(OParser.RPAR, i)

        def STORE(self):
            return self.getToken(OParser.STORE, 0)

        def SEMI(self):
            return self.getToken(OParser.SEMI, 0)

        def expression_list(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(OParser.Expression_listContext)
            else:
                return self.getTypedRuleContext(OParser.Expression_listContext,i)


        def THEN(self):
            return self.getToken(OParser.THEN, 0)

        def LCURL(self):
            return self.getToken(OParser.LCURL, 0)

        def RCURL(self):
            return self.getToken(OParser.RCURL, 0)

        def AND(self):
            return self.getToken(OParser.AND, 0)

        def statement_list(self):
            return self.getTypedRuleContext(OParser.Statement_listContext,0)


        def getRuleIndex(self):
            return OParser.RULE_store_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStore_statement" ):
                listener.enterStore_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStore_statement" ):
                listener.exitStore_statement(self)




    def store_statement(self):

        localctx = OParser.Store_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_store_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 872
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [OParser.DELETE]:
                self.state = 855
                self.match(OParser.DELETE)
                self.state = 856
                self.match(OParser.LPAR)
                self.state = 857
                localctx.to_del = self.expression_list()
                self.state = 858
                self.match(OParser.RPAR)
                self.state = 865
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==OParser.AND:
                    self.state = 859
                    self.match(OParser.AND)
                    self.state = 860
                    self.match(OParser.STORE)
                    self.state = 861
                    self.match(OParser.LPAR)
                    self.state = 862
                    localctx.to_add = self.expression_list()
                    self.state = 863
                    self.match(OParser.RPAR)


                pass
            elif token in [OParser.STORE]:
                self.state = 867
                self.match(OParser.STORE)
                self.state = 868
                self.match(OParser.LPAR)
                self.state = 869
                localctx.to_add = self.expression_list()
                self.state = 870
                self.match(OParser.RPAR)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 880
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [OParser.THEN]:
                self.state = 874
                self.match(OParser.THEN)
                self.state = 875
                self.match(OParser.LCURL)
                self.state = 876
                localctx.stmts = self.statement_list()
                self.state = 877
                self.match(OParser.RCURL)
                pass
            elif token in [OParser.SEMI]:
                self.state = 879
                self.match(OParser.SEMI)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class With_resource_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.stmt = None # Assign_variable_statementContext
            self.stmts = None # Statement_or_listContext

        def WITH(self):
            return self.getToken(OParser.WITH, 0)

        def LPAR(self):
            return self.getToken(OParser.LPAR, 0)

        def RPAR(self):
            return self.getToken(OParser.RPAR, 0)

        def assign_variable_statement(self):
            return self.getTypedRuleContext(OParser.Assign_variable_statementContext,0)


        def statement_or_list(self):
            return self.getTypedRuleContext(OParser.Statement_or_listContext,0)


        def getRuleIndex(self):
            return OParser.RULE_with_resource_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWith_resource_statement" ):
                listener.enterWith_resource_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWith_resource_statement" ):
                listener.exitWith_resource_statement(self)




    def with_resource_statement(self):

        localctx = OParser.With_resource_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_with_resource_statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 882
            self.match(OParser.WITH)
            self.state = 883
            self.match(OParser.LPAR)
            self.state = 884
            localctx.stmt = self.assign_variable_statement()
            self.state = 885
            self.match(OParser.RPAR)
            self.state = 886
            localctx.stmts = self.statement_or_list()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class With_singleton_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.typ = None # Type_identifierContext
            self.stmts = None # Statement_or_listContext

        def WITH(self):
            return self.getToken(OParser.WITH, 0)

        def LPAR(self):
            return self.getToken(OParser.LPAR, 0)

        def RPAR(self):
            return self.getToken(OParser.RPAR, 0)

        def type_identifier(self):
            return self.getTypedRuleContext(OParser.Type_identifierContext,0)


        def statement_or_list(self):
            return self.getTypedRuleContext(OParser.Statement_or_listContext,0)


        def getRuleIndex(self):
            return OParser.RULE_with_singleton_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWith_singleton_statement" ):
                listener.enterWith_singleton_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWith_singleton_statement" ):
                listener.exitWith_singleton_statement(self)




    def with_singleton_statement(self):

        localctx = OParser.With_singleton_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_with_singleton_statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 888
            self.match(OParser.WITH)
            self.state = 889
            self.match(OParser.LPAR)
            self.state = 890
            localctx.typ = self.type_identifier()
            self.state = 891
            self.match(OParser.RPAR)
            self.state = 892
            localctx.stmts = self.statement_or_list()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Switch_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.exp = None # ExpressionContext
            self.cases = None # Switch_case_statement_listContext
            self.stmts = None # Statement_listContext

        def SWITCH(self):
            return self.getToken(OParser.SWITCH, 0)

        def LPAR(self):
            return self.getToken(OParser.LPAR, 0)

        def RPAR(self):
            return self.getToken(OParser.RPAR, 0)

        def LCURL(self):
            return self.getToken(OParser.LCURL, 0)

        def RCURL(self):
            return self.getToken(OParser.RCURL, 0)

        def expression(self):
            return self.getTypedRuleContext(OParser.ExpressionContext,0)


        def switch_case_statement_list(self):
            return self.getTypedRuleContext(OParser.Switch_case_statement_listContext,0)


        def DEFAULT(self):
            return self.getToken(OParser.DEFAULT, 0)

        def COLON(self):
            return self.getToken(OParser.COLON, 0)

        def statement_list(self):
            return self.getTypedRuleContext(OParser.Statement_listContext,0)


        def getRuleIndex(self):
            return OParser.RULE_switch_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSwitch_statement" ):
                listener.enterSwitch_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSwitch_statement" ):
                listener.exitSwitch_statement(self)




    def switch_statement(self):

        localctx = OParser.Switch_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_switch_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 894
            self.match(OParser.SWITCH)
            self.state = 895
            self.match(OParser.LPAR)
            self.state = 896
            localctx.exp = self.expression(0)
            self.state = 897
            self.match(OParser.RPAR)
            self.state = 898
            self.match(OParser.LCURL)
            self.state = 899
            localctx.cases = self.switch_case_statement_list()
            self.state = 905
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==OParser.DEFAULT:
                self.state = 900
                self.match(OParser.DEFAULT)
                self.state = 901
                self.match(OParser.COLON)
                self.state = 903
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << OParser.COMMENT) | (1 << OParser.LPAR) | (1 << OParser.LBRAK) | (1 << OParser.LCURL) | (1 << OParser.LT) | (1 << OParser.LTCOLONGT) | (1 << OParser.BOOLEAN) | (1 << OParser.CSS) | (1 << OParser.CHARACTER) | (1 << OParser.TEXT) | (1 << OParser.INTEGER) | (1 << OParser.DECIMAL) | (1 << OParser.DATE) | (1 << OParser.TIME) | (1 << OParser.DATETIME) | (1 << OParser.PERIOD) | (1 << OParser.VERSION) | (1 << OParser.CODE) | (1 << OParser.DOCUMENT) | (1 << OParser.BLOB) | (1 << OParser.IMAGE))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (OParser.UUID - 64)) | (1 << (OParser.ITERATOR - 64)) | (1 << (OParser.CURSOR - 64)) | (1 << (OParser.HTML - 64)) | (1 << (OParser.ANY - 64)) | (1 << (OParser.BREAK - 64)) | (1 << (OParser.DELETE - 64)) | (1 << (OParser.DO - 64)) | (1 << (OParser.FETCH - 64)) | (1 << (OParser.FILTERED - 64)) | (1 << (OParser.FLUSH - 64)) | (1 << (OParser.FOR - 64)) | (1 << (OParser.IF - 64)) | (1 << (OParser.METHOD - 64)) | (1 << (OParser.MUTABLE - 64)) | (1 << (OParser.NULL - 64)))) != 0) or ((((_la - 134)) & ~0x3f) == 0 and ((1 << (_la - 134)) & ((1 << (OParser.READ - 134)) | (1 << (OParser.RETURN - 134)) | (1 << (OParser.SELF - 134)) | (1 << (OParser.SORTED - 134)) | (1 << (OParser.STORE - 134)) | (1 << (OParser.SUPER - 134)) | (1 << (OParser.SWITCH - 134)) | (1 << (OParser.THIS - 134)) | (1 << (OParser.THROW - 134)) | (1 << (OParser.TRY - 134)) | (1 << (OParser.WITH - 134)) | (1 << (OParser.WHILE - 134)) | (1 << (OParser.WRITE - 134)) | (1 << (OParser.BOOLEAN_LITERAL - 134)) | (1 << (OParser.CHAR_LITERAL - 134)) | (1 << (OParser.MIN_INTEGER - 134)) | (1 << (OParser.MAX_INTEGER - 134)) | (1 << (OParser.SYMBOL_IDENTIFIER - 134)) | (1 << (OParser.TYPE_IDENTIFIER - 134)) | (1 << (OParser.VARIABLE_IDENTIFIER - 134)) | (1 << (OParser.TEXT_LITERAL - 134)) | (1 << (OParser.UUID_LITERAL - 134)) | (1 << (OParser.INTEGER_LITERAL - 134)) | (1 << (OParser.HEXA_LITERAL - 134)) | (1 << (OParser.DECIMAL_LITERAL - 134)) | (1 << (OParser.DATETIME_LITERAL - 134)) | (1 << (OParser.TIME_LITERAL - 134)) | (1 << (OParser.DATE_LITERAL - 134)) | (1 << (OParser.PERIOD_LITERAL - 134)) | (1 << (OParser.VERSION_LITERAL - 134)))) != 0):
                    self.state = 902
                    localctx.stmts = self.statement_list()




            self.state = 907
            self.match(OParser.RCURL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Switch_case_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return OParser.RULE_switch_case_statement

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class AtomicSwitchCaseContext(Switch_case_statementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Switch_case_statementContext
            super().__init__(parser)
            self.exp = None # Atomic_literalContext
            self.stmts = None # Statement_listContext
            self.copyFrom(ctx)

        def CASE(self):
            return self.getToken(OParser.CASE, 0)
        def COLON(self):
            return self.getToken(OParser.COLON, 0)
        def atomic_literal(self):
            return self.getTypedRuleContext(OParser.Atomic_literalContext,0)

        def statement_list(self):
            return self.getTypedRuleContext(OParser.Statement_listContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAtomicSwitchCase" ):
                listener.enterAtomicSwitchCase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAtomicSwitchCase" ):
                listener.exitAtomicSwitchCase(self)


    class CollectionSwitchCaseContext(Switch_case_statementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Switch_case_statementContext
            super().__init__(parser)
            self.exp = None # Literal_collectionContext
            self.stmts = None # Statement_listContext
            self.copyFrom(ctx)

        def CASE(self):
            return self.getToken(OParser.CASE, 0)
        def IN(self):
            return self.getToken(OParser.IN, 0)
        def COLON(self):
            return self.getToken(OParser.COLON, 0)
        def literal_collection(self):
            return self.getTypedRuleContext(OParser.Literal_collectionContext,0)

        def statement_list(self):
            return self.getTypedRuleContext(OParser.Statement_listContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCollectionSwitchCase" ):
                listener.enterCollectionSwitchCase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCollectionSwitchCase" ):
                listener.exitCollectionSwitchCase(self)



    def switch_case_statement(self):

        localctx = OParser.Switch_case_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_switch_case_statement)
        try:
            self.state = 920
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,50,self._ctx)
            if la_ == 1:
                localctx = OParser.AtomicSwitchCaseContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 909
                self.match(OParser.CASE)
                self.state = 910
                localctx.exp = self.atomic_literal()
                self.state = 911
                self.match(OParser.COLON)
                self.state = 912
                localctx.stmts = self.statement_list()
                pass

            elif la_ == 2:
                localctx = OParser.CollectionSwitchCaseContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 914
                self.match(OParser.CASE)
                self.state = 915
                self.match(OParser.IN)
                self.state = 916
                localctx.exp = self.literal_collection()
                self.state = 917
                self.match(OParser.COLON)
                self.state = 918
                localctx.stmts = self.statement_list()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class For_each_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name1 = None # Variable_identifierContext
            self.name2 = None # Variable_identifierContext
            self.source = None # ExpressionContext
            self.stmts = None # Statement_or_listContext

        def FOR(self):
            return self.getToken(OParser.FOR, 0)

        def EACH(self):
            return self.getToken(OParser.EACH, 0)

        def LPAR(self):
            return self.getToken(OParser.LPAR, 0)

        def IN(self):
            return self.getToken(OParser.IN, 0)

        def RPAR(self):
            return self.getToken(OParser.RPAR, 0)

        def variable_identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(OParser.Variable_identifierContext)
            else:
                return self.getTypedRuleContext(OParser.Variable_identifierContext,i)


        def expression(self):
            return self.getTypedRuleContext(OParser.ExpressionContext,0)


        def statement_or_list(self):
            return self.getTypedRuleContext(OParser.Statement_or_listContext,0)


        def COMMA(self):
            return self.getToken(OParser.COMMA, 0)

        def getRuleIndex(self):
            return OParser.RULE_for_each_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFor_each_statement" ):
                listener.enterFor_each_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFor_each_statement" ):
                listener.exitFor_each_statement(self)




    def for_each_statement(self):

        localctx = OParser.For_each_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_for_each_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 922
            self.match(OParser.FOR)
            self.state = 923
            self.match(OParser.EACH)
            self.state = 924
            self.match(OParser.LPAR)
            self.state = 925
            localctx.name1 = self.variable_identifier()
            self.state = 928
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==OParser.COMMA:
                self.state = 926
                self.match(OParser.COMMA)
                self.state = 927
                localctx.name2 = self.variable_identifier()


            self.state = 930
            self.match(OParser.IN)
            self.state = 931
            localctx.source = self.expression(0)
            self.state = 932
            self.match(OParser.RPAR)
            self.state = 933
            localctx.stmts = self.statement_or_list()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Do_while_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.stmts = None # Statement_listContext
            self.exp = None # ExpressionContext

        def DO(self):
            return self.getToken(OParser.DO, 0)

        def LCURL(self):
            return self.getToken(OParser.LCURL, 0)

        def RCURL(self):
            return self.getToken(OParser.RCURL, 0)

        def WHILE(self):
            return self.getToken(OParser.WHILE, 0)

        def LPAR(self):
            return self.getToken(OParser.LPAR, 0)

        def RPAR(self):
            return self.getToken(OParser.RPAR, 0)

        def SEMI(self):
            return self.getToken(OParser.SEMI, 0)

        def expression(self):
            return self.getTypedRuleContext(OParser.ExpressionContext,0)


        def statement_list(self):
            return self.getTypedRuleContext(OParser.Statement_listContext,0)


        def getRuleIndex(self):
            return OParser.RULE_do_while_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDo_while_statement" ):
                listener.enterDo_while_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDo_while_statement" ):
                listener.exitDo_while_statement(self)




    def do_while_statement(self):

        localctx = OParser.Do_while_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_do_while_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 935
            self.match(OParser.DO)
            self.state = 936
            self.match(OParser.LCURL)
            self.state = 938
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << OParser.COMMENT) | (1 << OParser.LPAR) | (1 << OParser.LBRAK) | (1 << OParser.LCURL) | (1 << OParser.LT) | (1 << OParser.LTCOLONGT) | (1 << OParser.BOOLEAN) | (1 << OParser.CSS) | (1 << OParser.CHARACTER) | (1 << OParser.TEXT) | (1 << OParser.INTEGER) | (1 << OParser.DECIMAL) | (1 << OParser.DATE) | (1 << OParser.TIME) | (1 << OParser.DATETIME) | (1 << OParser.PERIOD) | (1 << OParser.VERSION) | (1 << OParser.CODE) | (1 << OParser.DOCUMENT) | (1 << OParser.BLOB) | (1 << OParser.IMAGE))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (OParser.UUID - 64)) | (1 << (OParser.ITERATOR - 64)) | (1 << (OParser.CURSOR - 64)) | (1 << (OParser.HTML - 64)) | (1 << (OParser.ANY - 64)) | (1 << (OParser.BREAK - 64)) | (1 << (OParser.DELETE - 64)) | (1 << (OParser.DO - 64)) | (1 << (OParser.FETCH - 64)) | (1 << (OParser.FILTERED - 64)) | (1 << (OParser.FLUSH - 64)) | (1 << (OParser.FOR - 64)) | (1 << (OParser.IF - 64)) | (1 << (OParser.METHOD - 64)) | (1 << (OParser.MUTABLE - 64)) | (1 << (OParser.NULL - 64)))) != 0) or ((((_la - 134)) & ~0x3f) == 0 and ((1 << (_la - 134)) & ((1 << (OParser.READ - 134)) | (1 << (OParser.RETURN - 134)) | (1 << (OParser.SELF - 134)) | (1 << (OParser.SORTED - 134)) | (1 << (OParser.STORE - 134)) | (1 << (OParser.SUPER - 134)) | (1 << (OParser.SWITCH - 134)) | (1 << (OParser.THIS - 134)) | (1 << (OParser.THROW - 134)) | (1 << (OParser.TRY - 134)) | (1 << (OParser.WITH - 134)) | (1 << (OParser.WHILE - 134)) | (1 << (OParser.WRITE - 134)) | (1 << (OParser.BOOLEAN_LITERAL - 134)) | (1 << (OParser.CHAR_LITERAL - 134)) | (1 << (OParser.MIN_INTEGER - 134)) | (1 << (OParser.MAX_INTEGER - 134)) | (1 << (OParser.SYMBOL_IDENTIFIER - 134)) | (1 << (OParser.TYPE_IDENTIFIER - 134)) | (1 << (OParser.VARIABLE_IDENTIFIER - 134)) | (1 << (OParser.TEXT_LITERAL - 134)) | (1 << (OParser.UUID_LITERAL - 134)) | (1 << (OParser.INTEGER_LITERAL - 134)) | (1 << (OParser.HEXA_LITERAL - 134)) | (1 << (OParser.DECIMAL_LITERAL - 134)) | (1 << (OParser.DATETIME_LITERAL - 134)) | (1 << (OParser.TIME_LITERAL - 134)) | (1 << (OParser.DATE_LITERAL - 134)) | (1 << (OParser.PERIOD_LITERAL - 134)) | (1 << (OParser.VERSION_LITERAL - 134)))) != 0):
                self.state = 937
                localctx.stmts = self.statement_list()


            self.state = 940
            self.match(OParser.RCURL)
            self.state = 941
            self.match(OParser.WHILE)
            self.state = 942
            self.match(OParser.LPAR)
            self.state = 943
            localctx.exp = self.expression(0)
            self.state = 944
            self.match(OParser.RPAR)
            self.state = 945
            self.match(OParser.SEMI)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class While_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.exp = None # ExpressionContext
            self.stmts = None # Statement_or_listContext

        def WHILE(self):
            return self.getToken(OParser.WHILE, 0)

        def LPAR(self):
            return self.getToken(OParser.LPAR, 0)

        def RPAR(self):
            return self.getToken(OParser.RPAR, 0)

        def expression(self):
            return self.getTypedRuleContext(OParser.ExpressionContext,0)


        def statement_or_list(self):
            return self.getTypedRuleContext(OParser.Statement_or_listContext,0)


        def getRuleIndex(self):
            return OParser.RULE_while_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhile_statement" ):
                listener.enterWhile_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhile_statement" ):
                listener.exitWhile_statement(self)




    def while_statement(self):

        localctx = OParser.While_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_while_statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 947
            self.match(OParser.WHILE)
            self.state = 948
            self.match(OParser.LPAR)
            self.state = 949
            localctx.exp = self.expression(0)
            self.state = 950
            self.match(OParser.RPAR)
            self.state = 951
            localctx.stmts = self.statement_or_list()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class If_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.exp = None # ExpressionContext
            self.stmts = None # Statement_or_listContext
            self.elseIfs = None # Else_if_statement_listContext
            self.elseStmts = None # Statement_or_listContext

        def IF(self):
            return self.getToken(OParser.IF, 0)

        def LPAR(self):
            return self.getToken(OParser.LPAR, 0)

        def RPAR(self):
            return self.getToken(OParser.RPAR, 0)

        def expression(self):
            return self.getTypedRuleContext(OParser.ExpressionContext,0)


        def statement_or_list(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(OParser.Statement_or_listContext)
            else:
                return self.getTypedRuleContext(OParser.Statement_or_listContext,i)


        def ELSE(self):
            return self.getToken(OParser.ELSE, 0)

        def else_if_statement_list(self):
            return self.getTypedRuleContext(OParser.Else_if_statement_listContext,0)


        def getRuleIndex(self):
            return OParser.RULE_if_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIf_statement" ):
                listener.enterIf_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIf_statement" ):
                listener.exitIf_statement(self)




    def if_statement(self):

        localctx = OParser.If_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_if_statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 953
            self.match(OParser.IF)
            self.state = 954
            self.match(OParser.LPAR)
            self.state = 955
            localctx.exp = self.expression(0)
            self.state = 956
            self.match(OParser.RPAR)
            self.state = 957
            localctx.stmts = self.statement_or_list()
            self.state = 959
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,53,self._ctx)
            if la_ == 1:
                self.state = 958
                localctx.elseIfs = self.else_if_statement_list(0)


            self.state = 963
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,54,self._ctx)
            if la_ == 1:
                self.state = 961
                self.match(OParser.ELSE)
                self.state = 962
                localctx.elseStmts = self.statement_or_list()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Else_if_statement_listContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return OParser.RULE_else_if_statement_list

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class ElseIfStatementListContext(Else_if_statement_listContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Else_if_statement_listContext
            super().__init__(parser)
            self.exp = None # ExpressionContext
            self.stmts = None # Statement_or_listContext
            self.copyFrom(ctx)

        def ELSE(self):
            return self.getToken(OParser.ELSE, 0)
        def IF(self):
            return self.getToken(OParser.IF, 0)
        def LPAR(self):
            return self.getToken(OParser.LPAR, 0)
        def RPAR(self):
            return self.getToken(OParser.RPAR, 0)
        def expression(self):
            return self.getTypedRuleContext(OParser.ExpressionContext,0)

        def statement_or_list(self):
            return self.getTypedRuleContext(OParser.Statement_or_listContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElseIfStatementList" ):
                listener.enterElseIfStatementList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElseIfStatementList" ):
                listener.exitElseIfStatementList(self)


    class ElseIfStatementListItemContext(Else_if_statement_listContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Else_if_statement_listContext
            super().__init__(parser)
            self.items = None # Else_if_statement_listContext
            self.exp = None # ExpressionContext
            self.stmts = None # Statement_or_listContext
            self.copyFrom(ctx)

        def ELSE(self):
            return self.getToken(OParser.ELSE, 0)
        def IF(self):
            return self.getToken(OParser.IF, 0)
        def LPAR(self):
            return self.getToken(OParser.LPAR, 0)
        def RPAR(self):
            return self.getToken(OParser.RPAR, 0)
        def else_if_statement_list(self):
            return self.getTypedRuleContext(OParser.Else_if_statement_listContext,0)

        def expression(self):
            return self.getTypedRuleContext(OParser.ExpressionContext,0)

        def statement_or_list(self):
            return self.getTypedRuleContext(OParser.Statement_or_listContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElseIfStatementListItem" ):
                listener.enterElseIfStatementListItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElseIfStatementListItem" ):
                listener.exitElseIfStatementListItem(self)



    def else_if_statement_list(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = OParser.Else_if_statement_listContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 76
        self.enterRecursionRule(localctx, 76, self.RULE_else_if_statement_list, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            localctx = OParser.ElseIfStatementListContext(self, localctx)
            self._ctx = localctx
            _prevctx = localctx

            self.state = 966
            self.match(OParser.ELSE)
            self.state = 967
            self.match(OParser.IF)
            self.state = 968
            self.match(OParser.LPAR)
            self.state = 969
            localctx.exp = self.expression(0)
            self.state = 970
            self.match(OParser.RPAR)
            self.state = 971
            localctx.stmts = self.statement_or_list()
            self._ctx.stop = self._input.LT(-1)
            self.state = 983
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,55,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = OParser.ElseIfStatementListItemContext(self, OParser.Else_if_statement_listContext(self, _parentctx, _parentState))
                    localctx.items = _prevctx
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_else_if_statement_list)
                    self.state = 973
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 974
                    self.match(OParser.ELSE)
                    self.state = 975
                    self.match(OParser.IF)
                    self.state = 976
                    self.match(OParser.LPAR)
                    self.state = 977
                    localctx.exp = self.expression(0)
                    self.state = 978
                    self.match(OParser.RPAR)
                    self.state = 979
                    localctx.stmts = self.statement_or_list() 
                self.state = 985
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,55,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class Raise_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.exp = None # ExpressionContext

        def THROW(self):
            return self.getToken(OParser.THROW, 0)

        def SEMI(self):
            return self.getToken(OParser.SEMI, 0)

        def expression(self):
            return self.getTypedRuleContext(OParser.ExpressionContext,0)


        def getRuleIndex(self):
            return OParser.RULE_raise_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRaise_statement" ):
                listener.enterRaise_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRaise_statement" ):
                listener.exitRaise_statement(self)




    def raise_statement(self):

        localctx = OParser.Raise_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_raise_statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 986
            self.match(OParser.THROW)
            self.state = 987
            localctx.exp = self.expression(0)
            self.state = 988
            self.match(OParser.SEMI)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Try_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # Variable_identifierContext
            self.stmts = None # Statement_listContext
            self.handlers = None # Catch_statement_listContext
            self.anyStmts = None # Statement_listContext
            self.finalStmts = None # Statement_listContext

        def TRY(self):
            return self.getToken(OParser.TRY, 0)

        def LPAR(self, i:int=None):
            if i is None:
                return self.getTokens(OParser.LPAR)
            else:
                return self.getToken(OParser.LPAR, i)

        def RPAR(self, i:int=None):
            if i is None:
                return self.getTokens(OParser.RPAR)
            else:
                return self.getToken(OParser.RPAR, i)

        def LCURL(self, i:int=None):
            if i is None:
                return self.getTokens(OParser.LCURL)
            else:
                return self.getToken(OParser.LCURL, i)

        def RCURL(self, i:int=None):
            if i is None:
                return self.getTokens(OParser.RCURL)
            else:
                return self.getToken(OParser.RCURL, i)

        def variable_identifier(self):
            return self.getTypedRuleContext(OParser.Variable_identifierContext,0)


        def CATCH(self):
            return self.getToken(OParser.CATCH, 0)

        def ANY(self):
            return self.getToken(OParser.ANY, 0)

        def FINALLY(self):
            return self.getToken(OParser.FINALLY, 0)

        def statement_list(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(OParser.Statement_listContext)
            else:
                return self.getTypedRuleContext(OParser.Statement_listContext,i)


        def catch_statement_list(self):
            return self.getTypedRuleContext(OParser.Catch_statement_listContext,0)


        def getRuleIndex(self):
            return OParser.RULE_try_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTry_statement" ):
                listener.enterTry_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTry_statement" ):
                listener.exitTry_statement(self)




    def try_statement(self):

        localctx = OParser.Try_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_try_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 990
            self.match(OParser.TRY)
            self.state = 991
            self.match(OParser.LPAR)
            self.state = 992
            localctx.name = self.variable_identifier()
            self.state = 993
            self.match(OParser.RPAR)
            self.state = 994
            self.match(OParser.LCURL)
            self.state = 996
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << OParser.COMMENT) | (1 << OParser.LPAR) | (1 << OParser.LBRAK) | (1 << OParser.LCURL) | (1 << OParser.LT) | (1 << OParser.LTCOLONGT) | (1 << OParser.BOOLEAN) | (1 << OParser.CSS) | (1 << OParser.CHARACTER) | (1 << OParser.TEXT) | (1 << OParser.INTEGER) | (1 << OParser.DECIMAL) | (1 << OParser.DATE) | (1 << OParser.TIME) | (1 << OParser.DATETIME) | (1 << OParser.PERIOD) | (1 << OParser.VERSION) | (1 << OParser.CODE) | (1 << OParser.DOCUMENT) | (1 << OParser.BLOB) | (1 << OParser.IMAGE))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (OParser.UUID - 64)) | (1 << (OParser.ITERATOR - 64)) | (1 << (OParser.CURSOR - 64)) | (1 << (OParser.HTML - 64)) | (1 << (OParser.ANY - 64)) | (1 << (OParser.BREAK - 64)) | (1 << (OParser.DELETE - 64)) | (1 << (OParser.DO - 64)) | (1 << (OParser.FETCH - 64)) | (1 << (OParser.FILTERED - 64)) | (1 << (OParser.FLUSH - 64)) | (1 << (OParser.FOR - 64)) | (1 << (OParser.IF - 64)) | (1 << (OParser.METHOD - 64)) | (1 << (OParser.MUTABLE - 64)) | (1 << (OParser.NULL - 64)))) != 0) or ((((_la - 134)) & ~0x3f) == 0 and ((1 << (_la - 134)) & ((1 << (OParser.READ - 134)) | (1 << (OParser.RETURN - 134)) | (1 << (OParser.SELF - 134)) | (1 << (OParser.SORTED - 134)) | (1 << (OParser.STORE - 134)) | (1 << (OParser.SUPER - 134)) | (1 << (OParser.SWITCH - 134)) | (1 << (OParser.THIS - 134)) | (1 << (OParser.THROW - 134)) | (1 << (OParser.TRY - 134)) | (1 << (OParser.WITH - 134)) | (1 << (OParser.WHILE - 134)) | (1 << (OParser.WRITE - 134)) | (1 << (OParser.BOOLEAN_LITERAL - 134)) | (1 << (OParser.CHAR_LITERAL - 134)) | (1 << (OParser.MIN_INTEGER - 134)) | (1 << (OParser.MAX_INTEGER - 134)) | (1 << (OParser.SYMBOL_IDENTIFIER - 134)) | (1 << (OParser.TYPE_IDENTIFIER - 134)) | (1 << (OParser.VARIABLE_IDENTIFIER - 134)) | (1 << (OParser.TEXT_LITERAL - 134)) | (1 << (OParser.UUID_LITERAL - 134)) | (1 << (OParser.INTEGER_LITERAL - 134)) | (1 << (OParser.HEXA_LITERAL - 134)) | (1 << (OParser.DECIMAL_LITERAL - 134)) | (1 << (OParser.DATETIME_LITERAL - 134)) | (1 << (OParser.TIME_LITERAL - 134)) | (1 << (OParser.DATE_LITERAL - 134)) | (1 << (OParser.PERIOD_LITERAL - 134)) | (1 << (OParser.VERSION_LITERAL - 134)))) != 0):
                self.state = 995
                localctx.stmts = self.statement_list()


            self.state = 998
            self.match(OParser.RCURL)
            self.state = 1000
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,57,self._ctx)
            if la_ == 1:
                self.state = 999
                localctx.handlers = self.catch_statement_list()


            self.state = 1011
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,59,self._ctx)
            if la_ == 1:
                self.state = 1002
                self.match(OParser.CATCH)
                self.state = 1003
                self.match(OParser.LPAR)
                self.state = 1004
                self.match(OParser.ANY)
                self.state = 1005
                self.match(OParser.RPAR)
                self.state = 1006
                self.match(OParser.LCURL)
                self.state = 1008
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << OParser.COMMENT) | (1 << OParser.LPAR) | (1 << OParser.LBRAK) | (1 << OParser.LCURL) | (1 << OParser.LT) | (1 << OParser.LTCOLONGT) | (1 << OParser.BOOLEAN) | (1 << OParser.CSS) | (1 << OParser.CHARACTER) | (1 << OParser.TEXT) | (1 << OParser.INTEGER) | (1 << OParser.DECIMAL) | (1 << OParser.DATE) | (1 << OParser.TIME) | (1 << OParser.DATETIME) | (1 << OParser.PERIOD) | (1 << OParser.VERSION) | (1 << OParser.CODE) | (1 << OParser.DOCUMENT) | (1 << OParser.BLOB) | (1 << OParser.IMAGE))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (OParser.UUID - 64)) | (1 << (OParser.ITERATOR - 64)) | (1 << (OParser.CURSOR - 64)) | (1 << (OParser.HTML - 64)) | (1 << (OParser.ANY - 64)) | (1 << (OParser.BREAK - 64)) | (1 << (OParser.DELETE - 64)) | (1 << (OParser.DO - 64)) | (1 << (OParser.FETCH - 64)) | (1 << (OParser.FILTERED - 64)) | (1 << (OParser.FLUSH - 64)) | (1 << (OParser.FOR - 64)) | (1 << (OParser.IF - 64)) | (1 << (OParser.METHOD - 64)) | (1 << (OParser.MUTABLE - 64)) | (1 << (OParser.NULL - 64)))) != 0) or ((((_la - 134)) & ~0x3f) == 0 and ((1 << (_la - 134)) & ((1 << (OParser.READ - 134)) | (1 << (OParser.RETURN - 134)) | (1 << (OParser.SELF - 134)) | (1 << (OParser.SORTED - 134)) | (1 << (OParser.STORE - 134)) | (1 << (OParser.SUPER - 134)) | (1 << (OParser.SWITCH - 134)) | (1 << (OParser.THIS - 134)) | (1 << (OParser.THROW - 134)) | (1 << (OParser.TRY - 134)) | (1 << (OParser.WITH - 134)) | (1 << (OParser.WHILE - 134)) | (1 << (OParser.WRITE - 134)) | (1 << (OParser.BOOLEAN_LITERAL - 134)) | (1 << (OParser.CHAR_LITERAL - 134)) | (1 << (OParser.MIN_INTEGER - 134)) | (1 << (OParser.MAX_INTEGER - 134)) | (1 << (OParser.SYMBOL_IDENTIFIER - 134)) | (1 << (OParser.TYPE_IDENTIFIER - 134)) | (1 << (OParser.VARIABLE_IDENTIFIER - 134)) | (1 << (OParser.TEXT_LITERAL - 134)) | (1 << (OParser.UUID_LITERAL - 134)) | (1 << (OParser.INTEGER_LITERAL - 134)) | (1 << (OParser.HEXA_LITERAL - 134)) | (1 << (OParser.DECIMAL_LITERAL - 134)) | (1 << (OParser.DATETIME_LITERAL - 134)) | (1 << (OParser.TIME_LITERAL - 134)) | (1 << (OParser.DATE_LITERAL - 134)) | (1 << (OParser.PERIOD_LITERAL - 134)) | (1 << (OParser.VERSION_LITERAL - 134)))) != 0):
                    self.state = 1007
                    localctx.anyStmts = self.statement_list()


                self.state = 1010
                self.match(OParser.RCURL)


            self.state = 1019
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,61,self._ctx)
            if la_ == 1:
                self.state = 1013
                self.match(OParser.FINALLY)
                self.state = 1014
                self.match(OParser.LCURL)
                self.state = 1016
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << OParser.COMMENT) | (1 << OParser.LPAR) | (1 << OParser.LBRAK) | (1 << OParser.LCURL) | (1 << OParser.LT) | (1 << OParser.LTCOLONGT) | (1 << OParser.BOOLEAN) | (1 << OParser.CSS) | (1 << OParser.CHARACTER) | (1 << OParser.TEXT) | (1 << OParser.INTEGER) | (1 << OParser.DECIMAL) | (1 << OParser.DATE) | (1 << OParser.TIME) | (1 << OParser.DATETIME) | (1 << OParser.PERIOD) | (1 << OParser.VERSION) | (1 << OParser.CODE) | (1 << OParser.DOCUMENT) | (1 << OParser.BLOB) | (1 << OParser.IMAGE))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (OParser.UUID - 64)) | (1 << (OParser.ITERATOR - 64)) | (1 << (OParser.CURSOR - 64)) | (1 << (OParser.HTML - 64)) | (1 << (OParser.ANY - 64)) | (1 << (OParser.BREAK - 64)) | (1 << (OParser.DELETE - 64)) | (1 << (OParser.DO - 64)) | (1 << (OParser.FETCH - 64)) | (1 << (OParser.FILTERED - 64)) | (1 << (OParser.FLUSH - 64)) | (1 << (OParser.FOR - 64)) | (1 << (OParser.IF - 64)) | (1 << (OParser.METHOD - 64)) | (1 << (OParser.MUTABLE - 64)) | (1 << (OParser.NULL - 64)))) != 0) or ((((_la - 134)) & ~0x3f) == 0 and ((1 << (_la - 134)) & ((1 << (OParser.READ - 134)) | (1 << (OParser.RETURN - 134)) | (1 << (OParser.SELF - 134)) | (1 << (OParser.SORTED - 134)) | (1 << (OParser.STORE - 134)) | (1 << (OParser.SUPER - 134)) | (1 << (OParser.SWITCH - 134)) | (1 << (OParser.THIS - 134)) | (1 << (OParser.THROW - 134)) | (1 << (OParser.TRY - 134)) | (1 << (OParser.WITH - 134)) | (1 << (OParser.WHILE - 134)) | (1 << (OParser.WRITE - 134)) | (1 << (OParser.BOOLEAN_LITERAL - 134)) | (1 << (OParser.CHAR_LITERAL - 134)) | (1 << (OParser.MIN_INTEGER - 134)) | (1 << (OParser.MAX_INTEGER - 134)) | (1 << (OParser.SYMBOL_IDENTIFIER - 134)) | (1 << (OParser.TYPE_IDENTIFIER - 134)) | (1 << (OParser.VARIABLE_IDENTIFIER - 134)) | (1 << (OParser.TEXT_LITERAL - 134)) | (1 << (OParser.UUID_LITERAL - 134)) | (1 << (OParser.INTEGER_LITERAL - 134)) | (1 << (OParser.HEXA_LITERAL - 134)) | (1 << (OParser.DECIMAL_LITERAL - 134)) | (1 << (OParser.DATETIME_LITERAL - 134)) | (1 << (OParser.TIME_LITERAL - 134)) | (1 << (OParser.DATE_LITERAL - 134)) | (1 << (OParser.PERIOD_LITERAL - 134)) | (1 << (OParser.VERSION_LITERAL - 134)))) != 0):
                    self.state = 1015
                    localctx.finalStmts = self.statement_list()


                self.state = 1018
                self.match(OParser.RCURL)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Catch_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return OParser.RULE_catch_statement

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class CatchAtomicStatementContext(Catch_statementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Catch_statementContext
            super().__init__(parser)
            self.name = None # Symbol_identifierContext
            self.stmts = None # Statement_listContext
            self.copyFrom(ctx)

        def CATCH(self):
            return self.getToken(OParser.CATCH, 0)
        def LPAR(self):
            return self.getToken(OParser.LPAR, 0)
        def RPAR(self):
            return self.getToken(OParser.RPAR, 0)
        def LCURL(self):
            return self.getToken(OParser.LCURL, 0)
        def RCURL(self):
            return self.getToken(OParser.RCURL, 0)
        def symbol_identifier(self):
            return self.getTypedRuleContext(OParser.Symbol_identifierContext,0)

        def statement_list(self):
            return self.getTypedRuleContext(OParser.Statement_listContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCatchAtomicStatement" ):
                listener.enterCatchAtomicStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCatchAtomicStatement" ):
                listener.exitCatchAtomicStatement(self)


    class CatchCollectionStatementContext(Catch_statementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Catch_statementContext
            super().__init__(parser)
            self.exp = None # Symbol_listContext
            self.stmts = None # Statement_listContext
            self.copyFrom(ctx)

        def CATCH(self):
            return self.getToken(OParser.CATCH, 0)
        def IN(self):
            return self.getToken(OParser.IN, 0)
        def LPAR(self):
            return self.getToken(OParser.LPAR, 0)
        def RPAR(self):
            return self.getToken(OParser.RPAR, 0)
        def LCURL(self):
            return self.getToken(OParser.LCURL, 0)
        def RCURL(self):
            return self.getToken(OParser.RCURL, 0)
        def symbol_list(self):
            return self.getTypedRuleContext(OParser.Symbol_listContext,0)

        def statement_list(self):
            return self.getTypedRuleContext(OParser.Statement_listContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCatchCollectionStatement" ):
                listener.enterCatchCollectionStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCatchCollectionStatement" ):
                listener.exitCatchCollectionStatement(self)



    def catch_statement(self):

        localctx = OParser.Catch_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_catch_statement)
        self._la = 0 # Token type
        try:
            self.state = 1042
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,64,self._ctx)
            if la_ == 1:
                localctx = OParser.CatchAtomicStatementContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1021
                self.match(OParser.CATCH)
                self.state = 1022
                self.match(OParser.LPAR)
                self.state = 1023
                localctx.name = self.symbol_identifier()
                self.state = 1024
                self.match(OParser.RPAR)
                self.state = 1025
                self.match(OParser.LCURL)
                self.state = 1027
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << OParser.COMMENT) | (1 << OParser.LPAR) | (1 << OParser.LBRAK) | (1 << OParser.LCURL) | (1 << OParser.LT) | (1 << OParser.LTCOLONGT) | (1 << OParser.BOOLEAN) | (1 << OParser.CSS) | (1 << OParser.CHARACTER) | (1 << OParser.TEXT) | (1 << OParser.INTEGER) | (1 << OParser.DECIMAL) | (1 << OParser.DATE) | (1 << OParser.TIME) | (1 << OParser.DATETIME) | (1 << OParser.PERIOD) | (1 << OParser.VERSION) | (1 << OParser.CODE) | (1 << OParser.DOCUMENT) | (1 << OParser.BLOB) | (1 << OParser.IMAGE))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (OParser.UUID - 64)) | (1 << (OParser.ITERATOR - 64)) | (1 << (OParser.CURSOR - 64)) | (1 << (OParser.HTML - 64)) | (1 << (OParser.ANY - 64)) | (1 << (OParser.BREAK - 64)) | (1 << (OParser.DELETE - 64)) | (1 << (OParser.DO - 64)) | (1 << (OParser.FETCH - 64)) | (1 << (OParser.FILTERED - 64)) | (1 << (OParser.FLUSH - 64)) | (1 << (OParser.FOR - 64)) | (1 << (OParser.IF - 64)) | (1 << (OParser.METHOD - 64)) | (1 << (OParser.MUTABLE - 64)) | (1 << (OParser.NULL - 64)))) != 0) or ((((_la - 134)) & ~0x3f) == 0 and ((1 << (_la - 134)) & ((1 << (OParser.READ - 134)) | (1 << (OParser.RETURN - 134)) | (1 << (OParser.SELF - 134)) | (1 << (OParser.SORTED - 134)) | (1 << (OParser.STORE - 134)) | (1 << (OParser.SUPER - 134)) | (1 << (OParser.SWITCH - 134)) | (1 << (OParser.THIS - 134)) | (1 << (OParser.THROW - 134)) | (1 << (OParser.TRY - 134)) | (1 << (OParser.WITH - 134)) | (1 << (OParser.WHILE - 134)) | (1 << (OParser.WRITE - 134)) | (1 << (OParser.BOOLEAN_LITERAL - 134)) | (1 << (OParser.CHAR_LITERAL - 134)) | (1 << (OParser.MIN_INTEGER - 134)) | (1 << (OParser.MAX_INTEGER - 134)) | (1 << (OParser.SYMBOL_IDENTIFIER - 134)) | (1 << (OParser.TYPE_IDENTIFIER - 134)) | (1 << (OParser.VARIABLE_IDENTIFIER - 134)) | (1 << (OParser.TEXT_LITERAL - 134)) | (1 << (OParser.UUID_LITERAL - 134)) | (1 << (OParser.INTEGER_LITERAL - 134)) | (1 << (OParser.HEXA_LITERAL - 134)) | (1 << (OParser.DECIMAL_LITERAL - 134)) | (1 << (OParser.DATETIME_LITERAL - 134)) | (1 << (OParser.TIME_LITERAL - 134)) | (1 << (OParser.DATE_LITERAL - 134)) | (1 << (OParser.PERIOD_LITERAL - 134)) | (1 << (OParser.VERSION_LITERAL - 134)))) != 0):
                    self.state = 1026
                    localctx.stmts = self.statement_list()


                self.state = 1029
                self.match(OParser.RCURL)
                pass

            elif la_ == 2:
                localctx = OParser.CatchCollectionStatementContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1031
                self.match(OParser.CATCH)
                self.state = 1032
                self.match(OParser.IN)
                self.state = 1033
                self.match(OParser.LPAR)
                self.state = 1034
                localctx.exp = self.symbol_list()
                self.state = 1035
                self.match(OParser.RPAR)
                self.state = 1036
                self.match(OParser.LCURL)
                self.state = 1038
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << OParser.COMMENT) | (1 << OParser.LPAR) | (1 << OParser.LBRAK) | (1 << OParser.LCURL) | (1 << OParser.LT) | (1 << OParser.LTCOLONGT) | (1 << OParser.BOOLEAN) | (1 << OParser.CSS) | (1 << OParser.CHARACTER) | (1 << OParser.TEXT) | (1 << OParser.INTEGER) | (1 << OParser.DECIMAL) | (1 << OParser.DATE) | (1 << OParser.TIME) | (1 << OParser.DATETIME) | (1 << OParser.PERIOD) | (1 << OParser.VERSION) | (1 << OParser.CODE) | (1 << OParser.DOCUMENT) | (1 << OParser.BLOB) | (1 << OParser.IMAGE))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (OParser.UUID - 64)) | (1 << (OParser.ITERATOR - 64)) | (1 << (OParser.CURSOR - 64)) | (1 << (OParser.HTML - 64)) | (1 << (OParser.ANY - 64)) | (1 << (OParser.BREAK - 64)) | (1 << (OParser.DELETE - 64)) | (1 << (OParser.DO - 64)) | (1 << (OParser.FETCH - 64)) | (1 << (OParser.FILTERED - 64)) | (1 << (OParser.FLUSH - 64)) | (1 << (OParser.FOR - 64)) | (1 << (OParser.IF - 64)) | (1 << (OParser.METHOD - 64)) | (1 << (OParser.MUTABLE - 64)) | (1 << (OParser.NULL - 64)))) != 0) or ((((_la - 134)) & ~0x3f) == 0 and ((1 << (_la - 134)) & ((1 << (OParser.READ - 134)) | (1 << (OParser.RETURN - 134)) | (1 << (OParser.SELF - 134)) | (1 << (OParser.SORTED - 134)) | (1 << (OParser.STORE - 134)) | (1 << (OParser.SUPER - 134)) | (1 << (OParser.SWITCH - 134)) | (1 << (OParser.THIS - 134)) | (1 << (OParser.THROW - 134)) | (1 << (OParser.TRY - 134)) | (1 << (OParser.WITH - 134)) | (1 << (OParser.WHILE - 134)) | (1 << (OParser.WRITE - 134)) | (1 << (OParser.BOOLEAN_LITERAL - 134)) | (1 << (OParser.CHAR_LITERAL - 134)) | (1 << (OParser.MIN_INTEGER - 134)) | (1 << (OParser.MAX_INTEGER - 134)) | (1 << (OParser.SYMBOL_IDENTIFIER - 134)) | (1 << (OParser.TYPE_IDENTIFIER - 134)) | (1 << (OParser.VARIABLE_IDENTIFIER - 134)) | (1 << (OParser.TEXT_LITERAL - 134)) | (1 << (OParser.UUID_LITERAL - 134)) | (1 << (OParser.INTEGER_LITERAL - 134)) | (1 << (OParser.HEXA_LITERAL - 134)) | (1 << (OParser.DECIMAL_LITERAL - 134)) | (1 << (OParser.DATETIME_LITERAL - 134)) | (1 << (OParser.TIME_LITERAL - 134)) | (1 << (OParser.DATE_LITERAL - 134)) | (1 << (OParser.PERIOD_LITERAL - 134)) | (1 << (OParser.VERSION_LITERAL - 134)))) != 0):
                    self.state = 1037
                    localctx.stmts = self.statement_list()


                self.state = 1040
                self.match(OParser.RCURL)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Break_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BREAK(self):
            return self.getToken(OParser.BREAK, 0)

        def SEMI(self):
            return self.getToken(OParser.SEMI, 0)

        def getRuleIndex(self):
            return OParser.RULE_break_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBreak_statement" ):
                listener.enterBreak_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBreak_statement" ):
                listener.exitBreak_statement(self)




    def break_statement(self):

        localctx = OParser.Break_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_break_statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1044
            self.match(OParser.BREAK)
            self.state = 1045
            self.match(OParser.SEMI)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Return_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.exp = None # ExpressionContext

        def RETURN(self):
            return self.getToken(OParser.RETURN, 0)

        def SEMI(self):
            return self.getToken(OParser.SEMI, 0)

        def expression(self):
            return self.getTypedRuleContext(OParser.ExpressionContext,0)


        def getRuleIndex(self):
            return OParser.RULE_return_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReturn_statement" ):
                listener.enterReturn_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReturn_statement" ):
                listener.exitReturn_statement(self)




    def return_statement(self):

        localctx = OParser.Return_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_return_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1047
            self.match(OParser.RETURN)
            self.state = 1049
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << OParser.LPAR) | (1 << OParser.LBRAK) | (1 << OParser.LCURL) | (1 << OParser.XMARK) | (1 << OParser.MINUS) | (1 << OParser.LT) | (1 << OParser.LTGT) | (1 << OParser.LTCOLONGT) | (1 << OParser.BOOLEAN) | (1 << OParser.CSS) | (1 << OParser.CHARACTER) | (1 << OParser.TEXT) | (1 << OParser.INTEGER) | (1 << OParser.DECIMAL) | (1 << OParser.DATE) | (1 << OParser.TIME) | (1 << OParser.DATETIME) | (1 << OParser.PERIOD) | (1 << OParser.VERSION) | (1 << OParser.CODE) | (1 << OParser.DOCUMENT) | (1 << OParser.BLOB) | (1 << OParser.IMAGE))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (OParser.UUID - 64)) | (1 << (OParser.ITERATOR - 64)) | (1 << (OParser.CURSOR - 64)) | (1 << (OParser.HTML - 64)) | (1 << (OParser.ANY - 64)) | (1 << (OParser.EXECUTE - 64)) | (1 << (OParser.FETCH - 64)) | (1 << (OParser.FILTERED - 64)) | (1 << (OParser.MUTABLE - 64)) | (1 << (OParser.NULL - 64)))) != 0) or ((((_la - 134)) & ~0x3f) == 0 and ((1 << (_la - 134)) & ((1 << (OParser.READ - 134)) | (1 << (OParser.SELF - 134)) | (1 << (OParser.SORTED - 134)) | (1 << (OParser.SUPER - 134)) | (1 << (OParser.THIS - 134)) | (1 << (OParser.BOOLEAN_LITERAL - 134)) | (1 << (OParser.CHAR_LITERAL - 134)) | (1 << (OParser.MIN_INTEGER - 134)) | (1 << (OParser.MAX_INTEGER - 134)) | (1 << (OParser.SYMBOL_IDENTIFIER - 134)) | (1 << (OParser.TYPE_IDENTIFIER - 134)) | (1 << (OParser.VARIABLE_IDENTIFIER - 134)) | (1 << (OParser.TEXT_LITERAL - 134)) | (1 << (OParser.UUID_LITERAL - 134)) | (1 << (OParser.INTEGER_LITERAL - 134)) | (1 << (OParser.HEXA_LITERAL - 134)) | (1 << (OParser.DECIMAL_LITERAL - 134)) | (1 << (OParser.DATETIME_LITERAL - 134)) | (1 << (OParser.TIME_LITERAL - 134)) | (1 << (OParser.DATE_LITERAL - 134)) | (1 << (OParser.PERIOD_LITERAL - 134)) | (1 << (OParser.VERSION_LITERAL - 134)))) != 0):
                self.state = 1048
                localctx.exp = self.expression(0)


            self.state = 1051
            self.match(OParser.SEMI)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Method_call_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # Method_identifierContext
            self.args = None # Argument_assignment_listContext

        def LPAR(self):
            return self.getToken(OParser.LPAR, 0)

        def RPAR(self):
            return self.getToken(OParser.RPAR, 0)

        def method_identifier(self):
            return self.getTypedRuleContext(OParser.Method_identifierContext,0)


        def argument_assignment_list(self):
            return self.getTypedRuleContext(OParser.Argument_assignment_listContext,0)


        def getRuleIndex(self):
            return OParser.RULE_method_call_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMethod_call_expression" ):
                listener.enterMethod_call_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMethod_call_expression" ):
                listener.exitMethod_call_expression(self)




    def method_call_expression(self):

        localctx = OParser.Method_call_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_method_call_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1053
            localctx.name = self.method_identifier()
            self.state = 1054
            self.match(OParser.LPAR)
            self.state = 1056
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << OParser.LPAR) | (1 << OParser.LBRAK) | (1 << OParser.LCURL) | (1 << OParser.XMARK) | (1 << OParser.MINUS) | (1 << OParser.LT) | (1 << OParser.LTGT) | (1 << OParser.LTCOLONGT) | (1 << OParser.BOOLEAN) | (1 << OParser.CSS) | (1 << OParser.CHARACTER) | (1 << OParser.TEXT) | (1 << OParser.INTEGER) | (1 << OParser.DECIMAL) | (1 << OParser.DATE) | (1 << OParser.TIME) | (1 << OParser.DATETIME) | (1 << OParser.PERIOD) | (1 << OParser.VERSION) | (1 << OParser.CODE) | (1 << OParser.DOCUMENT) | (1 << OParser.BLOB) | (1 << OParser.IMAGE))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (OParser.UUID - 64)) | (1 << (OParser.ITERATOR - 64)) | (1 << (OParser.CURSOR - 64)) | (1 << (OParser.HTML - 64)) | (1 << (OParser.ANY - 64)) | (1 << (OParser.EXECUTE - 64)) | (1 << (OParser.FETCH - 64)) | (1 << (OParser.FILTERED - 64)) | (1 << (OParser.MUTABLE - 64)) | (1 << (OParser.NULL - 64)))) != 0) or ((((_la - 134)) & ~0x3f) == 0 and ((1 << (_la - 134)) & ((1 << (OParser.READ - 134)) | (1 << (OParser.SELF - 134)) | (1 << (OParser.SORTED - 134)) | (1 << (OParser.SUPER - 134)) | (1 << (OParser.THIS - 134)) | (1 << (OParser.BOOLEAN_LITERAL - 134)) | (1 << (OParser.CHAR_LITERAL - 134)) | (1 << (OParser.MIN_INTEGER - 134)) | (1 << (OParser.MAX_INTEGER - 134)) | (1 << (OParser.SYMBOL_IDENTIFIER - 134)) | (1 << (OParser.TYPE_IDENTIFIER - 134)) | (1 << (OParser.VARIABLE_IDENTIFIER - 134)) | (1 << (OParser.TEXT_LITERAL - 134)) | (1 << (OParser.UUID_LITERAL - 134)) | (1 << (OParser.INTEGER_LITERAL - 134)) | (1 << (OParser.HEXA_LITERAL - 134)) | (1 << (OParser.DECIMAL_LITERAL - 134)) | (1 << (OParser.DATETIME_LITERAL - 134)) | (1 << (OParser.TIME_LITERAL - 134)) | (1 << (OParser.DATE_LITERAL - 134)) | (1 << (OParser.PERIOD_LITERAL - 134)) | (1 << (OParser.VERSION_LITERAL - 134)))) != 0):
                self.state = 1055
                localctx.args = self.argument_assignment_list(0)


            self.state = 1058
            self.match(OParser.RPAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Method_call_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.parent = None # Instance_expressionContext
            self.method = None # Method_call_expressionContext
            self.name = None # Variable_identifierContext
            self.stmts = None # Statement_listContext

        def method_call_expression(self):
            return self.getTypedRuleContext(OParser.Method_call_expressionContext,0)


        def SEMI(self):
            return self.getToken(OParser.SEMI, 0)

        def DOT(self):
            return self.getToken(OParser.DOT, 0)

        def instance_expression(self):
            return self.getTypedRuleContext(OParser.Instance_expressionContext,0)


        def THEN(self):
            return self.getToken(OParser.THEN, 0)

        def LCURL(self):
            return self.getToken(OParser.LCURL, 0)

        def RCURL(self):
            return self.getToken(OParser.RCURL, 0)

        def statement_list(self):
            return self.getTypedRuleContext(OParser.Statement_listContext,0)


        def WITH(self):
            return self.getToken(OParser.WITH, 0)

        def variable_identifier(self):
            return self.getTypedRuleContext(OParser.Variable_identifierContext,0)


        def getRuleIndex(self):
            return OParser.RULE_method_call_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMethod_call_statement" ):
                listener.enterMethod_call_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMethod_call_statement" ):
                listener.exitMethod_call_statement(self)




    def method_call_statement(self):

        localctx = OParser.Method_call_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_method_call_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1063
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,67,self._ctx)
            if la_ == 1:
                self.state = 1060
                localctx.parent = self.instance_expression(0)
                self.state = 1061
                self.match(OParser.DOT)


            self.state = 1065
            localctx.method = self.method_call_expression()
            self.state = 1076
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [OParser.THEN]:
                self.state = 1066
                self.match(OParser.THEN)
                self.state = 1069
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==OParser.WITH:
                    self.state = 1067
                    self.match(OParser.WITH)
                    self.state = 1068
                    localctx.name = self.variable_identifier()


                self.state = 1071
                self.match(OParser.LCURL)
                self.state = 1072
                localctx.stmts = self.statement_list()
                self.state = 1073
                self.match(OParser.RCURL)
                pass
            elif token in [OParser.SEMI]:
                self.state = 1075
                self.match(OParser.SEMI)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class X_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def css_expression(self):
            return self.getTypedRuleContext(OParser.Css_expressionContext,0)


        def getRuleIndex(self):
            return OParser.RULE_x_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterX_expression" ):
                listener.enterX_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitX_expression" ):
                listener.exitX_expression(self)




    def x_expression(self):

        localctx = OParser.X_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_x_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1078
            self.css_expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return OParser.RULE_expression

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class IntDivideExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.ExpressionContext
            super().__init__(parser)
            self.left = None # ExpressionContext
            self.right = None # ExpressionContext
            self.copyFrom(ctx)

        def idivide(self):
            return self.getTypedRuleContext(OParser.IdivideContext,0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(OParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(OParser.ExpressionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIntDivideExpression" ):
                listener.enterIntDivideExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIntDivideExpression" ):
                listener.exitIntDivideExpression(self)


    class HasAnyExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.ExpressionContext
            super().__init__(parser)
            self.left = None # ExpressionContext
            self.right = None # ExpressionContext
            self.copyFrom(ctx)

        def HAS(self):
            return self.getToken(OParser.HAS, 0)
        def ANY(self):
            return self.getToken(OParser.ANY, 0)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(OParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(OParser.ExpressionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHasAnyExpression" ):
                listener.enterHasAnyExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHasAnyExpression" ):
                listener.exitHasAnyExpression(self)


    class HasExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.ExpressionContext
            super().__init__(parser)
            self.left = None # ExpressionContext
            self.right = None # ExpressionContext
            self.copyFrom(ctx)

        def HAS(self):
            return self.getToken(OParser.HAS, 0)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(OParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(OParser.ExpressionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHasExpression" ):
                listener.enterHasExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHasExpression" ):
                listener.exitHasExpression(self)


    class TernaryExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.ExpressionContext
            super().__init__(parser)
            self.test = None # ExpressionContext
            self.ifTrue = None # ExpressionContext
            self.ifFalse = None # ExpressionContext
            self.copyFrom(ctx)

        def QMARK(self):
            return self.getToken(OParser.QMARK, 0)
        def COLON(self):
            return self.getToken(OParser.COLON, 0)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(OParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(OParser.ExpressionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTernaryExpression" ):
                listener.enterTernaryExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTernaryExpression" ):
                listener.exitTernaryExpression(self)


    class NotEqualsExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.ExpressionContext
            super().__init__(parser)
            self.left = None # ExpressionContext
            self.right = None # ExpressionContext
            self.copyFrom(ctx)

        def XEQ(self):
            return self.getToken(OParser.XEQ, 0)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(OParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(OParser.ExpressionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNotEqualsExpression" ):
                listener.enterNotEqualsExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNotEqualsExpression" ):
                listener.exitNotEqualsExpression(self)


    class InExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.ExpressionContext
            super().__init__(parser)
            self.left = None # ExpressionContext
            self.right = None # ExpressionContext
            self.copyFrom(ctx)

        def IN(self):
            return self.getToken(OParser.IN, 0)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(OParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(OParser.ExpressionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInExpression" ):
                listener.enterInExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInExpression" ):
                listener.exitInExpression(self)


    class IsAnExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.ExpressionContext
            super().__init__(parser)
            self.left = None # ExpressionContext
            self.right = None # An_expressionContext
            self.copyFrom(ctx)

        def IS(self):
            return self.getToken(OParser.IS, 0)
        def expression(self):
            return self.getTypedRuleContext(OParser.ExpressionContext,0)

        def an_expression(self):
            return self.getTypedRuleContext(OParser.An_expressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIsAnExpression" ):
                listener.enterIsAnExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIsAnExpression" ):
                listener.exitIsAnExpression(self)


    class JsxExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.ExpressionContext
            super().__init__(parser)
            self.exp = None # Jsx_expressionContext
            self.copyFrom(ctx)

        def jsx_expression(self):
            return self.getTypedRuleContext(OParser.Jsx_expressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJsxExpression" ):
                listener.enterJsxExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJsxExpression" ):
                listener.exitJsxExpression(self)


    class NotExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.ExpressionContext
            super().__init__(parser)
            self.exp = None # ExpressionContext
            self.copyFrom(ctx)

        def XMARK(self):
            return self.getToken(OParser.XMARK, 0)
        def expression(self):
            return self.getTypedRuleContext(OParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNotExpression" ):
                listener.enterNotExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNotExpression" ):
                listener.exitNotExpression(self)


    class GreaterThanExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.ExpressionContext
            super().__init__(parser)
            self.left = None # ExpressionContext
            self.right = None # ExpressionContext
            self.copyFrom(ctx)

        def GT(self):
            return self.getToken(OParser.GT, 0)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(OParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(OParser.ExpressionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGreaterThanExpression" ):
                listener.enterGreaterThanExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGreaterThanExpression" ):
                listener.exitGreaterThanExpression(self)


    class OrExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.ExpressionContext
            super().__init__(parser)
            self.left = None # ExpressionContext
            self.right = None # ExpressionContext
            self.copyFrom(ctx)

        def PIPE2(self):
            return self.getToken(OParser.PIPE2, 0)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(OParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(OParser.ExpressionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOrExpression" ):
                listener.enterOrExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOrExpression" ):
                listener.exitOrExpression(self)


    class CodeExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.ExpressionContext
            super().__init__(parser)
            self.exp = None # ExpressionContext
            self.copyFrom(ctx)

        def CODE(self):
            return self.getToken(OParser.CODE, 0)
        def LPAR(self):
            return self.getToken(OParser.LPAR, 0)
        def RPAR(self):
            return self.getToken(OParser.RPAR, 0)
        def expression(self):
            return self.getTypedRuleContext(OParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCodeExpression" ):
                listener.enterCodeExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCodeExpression" ):
                listener.exitCodeExpression(self)


    class LessThanOrEqualExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.ExpressionContext
            super().__init__(parser)
            self.left = None # ExpressionContext
            self.right = None # ExpressionContext
            self.copyFrom(ctx)

        def LTE(self):
            return self.getToken(OParser.LTE, 0)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(OParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(OParser.ExpressionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLessThanOrEqualExpression" ):
                listener.enterLessThanOrEqualExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLessThanOrEqualExpression" ):
                listener.exitLessThanOrEqualExpression(self)


    class NotHasAnyExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.ExpressionContext
            super().__init__(parser)
            self.left = None # ExpressionContext
            self.right = None # ExpressionContext
            self.copyFrom(ctx)

        def NOT(self):
            return self.getToken(OParser.NOT, 0)
        def HAS(self):
            return self.getToken(OParser.HAS, 0)
        def ANY(self):
            return self.getToken(OParser.ANY, 0)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(OParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(OParser.ExpressionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNotHasAnyExpression" ):
                listener.enterNotHasAnyExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNotHasAnyExpression" ):
                listener.exitNotHasAnyExpression(self)


    class AndExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.ExpressionContext
            super().__init__(parser)
            self.left = None # ExpressionContext
            self.right = None # ExpressionContext
            self.copyFrom(ctx)

        def AMP2(self):
            return self.getToken(OParser.AMP2, 0)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(OParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(OParser.ExpressionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAndExpression" ):
                listener.enterAndExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAndExpression" ):
                listener.exitAndExpression(self)


    class ArrowExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.ExpressionContext
            super().__init__(parser)
            self.exp = None # Arrow_expressionContext
            self.copyFrom(ctx)

        def arrow_expression(self):
            return self.getTypedRuleContext(OParser.Arrow_expressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArrowExpression" ):
                listener.enterArrowExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArrowExpression" ):
                listener.exitArrowExpression(self)


    class NotHasExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.ExpressionContext
            super().__init__(parser)
            self.left = None # ExpressionContext
            self.right = None # ExpressionContext
            self.copyFrom(ctx)

        def NOT(self):
            return self.getToken(OParser.NOT, 0)
        def HAS(self):
            return self.getToken(OParser.HAS, 0)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(OParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(OParser.ExpressionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNotHasExpression" ):
                listener.enterNotHasExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNotHasExpression" ):
                listener.exitNotHasExpression(self)


    class ClosureExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.ExpressionContext
            super().__init__(parser)
            self.exp = None # Closure_expressionContext
            self.copyFrom(ctx)

        def closure_expression(self):
            return self.getTypedRuleContext(OParser.Closure_expressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClosureExpression" ):
                listener.enterClosureExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClosureExpression" ):
                listener.exitClosureExpression(self)


    class NotHasAllExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.ExpressionContext
            super().__init__(parser)
            self.left = None # ExpressionContext
            self.right = None # ExpressionContext
            self.copyFrom(ctx)

        def NOT(self):
            return self.getToken(OParser.NOT, 0)
        def HAS(self):
            return self.getToken(OParser.HAS, 0)
        def ALL(self):
            return self.getToken(OParser.ALL, 0)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(OParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(OParser.ExpressionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNotHasAllExpression" ):
                listener.enterNotHasAllExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNotHasAllExpression" ):
                listener.exitNotHasAllExpression(self)


    class ContainsExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.ExpressionContext
            super().__init__(parser)
            self.left = None # ExpressionContext
            self.right = None # ExpressionContext
            self.copyFrom(ctx)

        def CONTAINS(self):
            return self.getToken(OParser.CONTAINS, 0)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(OParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(OParser.ExpressionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterContainsExpression" ):
                listener.enterContainsExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitContainsExpression" ):
                listener.exitContainsExpression(self)


    class NotContainsExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.ExpressionContext
            super().__init__(parser)
            self.left = None # ExpressionContext
            self.right = None # ExpressionContext
            self.copyFrom(ctx)

        def NOT(self):
            return self.getToken(OParser.NOT, 0)
        def CONTAINS(self):
            return self.getToken(OParser.CONTAINS, 0)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(OParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(OParser.ExpressionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNotContainsExpression" ):
                listener.enterNotContainsExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNotContainsExpression" ):
                listener.exitNotContainsExpression(self)


    class MultiplyExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.ExpressionContext
            super().__init__(parser)
            self.left = None # ExpressionContext
            self.right = None # ExpressionContext
            self.copyFrom(ctx)

        def multiply(self):
            return self.getTypedRuleContext(OParser.MultiplyContext,0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(OParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(OParser.ExpressionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMultiplyExpression" ):
                listener.enterMultiplyExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMultiplyExpression" ):
                listener.exitMultiplyExpression(self)


    class RoughlyEqualsExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.ExpressionContext
            super().__init__(parser)
            self.left = None # ExpressionContext
            self.right = None # ExpressionContext
            self.copyFrom(ctx)

        def TEQ(self):
            return self.getToken(OParser.TEQ, 0)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(OParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(OParser.ExpressionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRoughlyEqualsExpression" ):
                listener.enterRoughlyEqualsExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRoughlyEqualsExpression" ):
                listener.exitRoughlyEqualsExpression(self)


    class IsNotAnExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.ExpressionContext
            super().__init__(parser)
            self.left = None # ExpressionContext
            self.right = None # An_expressionContext
            self.copyFrom(ctx)

        def IS(self):
            return self.getToken(OParser.IS, 0)
        def NOT(self):
            return self.getToken(OParser.NOT, 0)
        def expression(self):
            return self.getTypedRuleContext(OParser.ExpressionContext,0)

        def an_expression(self):
            return self.getTypedRuleContext(OParser.An_expressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIsNotAnExpression" ):
                listener.enterIsNotAnExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIsNotAnExpression" ):
                listener.exitIsNotAnExpression(self)


    class ExecuteExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.ExpressionContext
            super().__init__(parser)
            self.name = None # Variable_identifierContext
            self.copyFrom(ctx)

        def EXECUTE(self):
            return self.getToken(OParser.EXECUTE, 0)
        def LPAR(self):
            return self.getToken(OParser.LPAR, 0)
        def RPAR(self):
            return self.getToken(OParser.RPAR, 0)
        def variable_identifier(self):
            return self.getTypedRuleContext(OParser.Variable_identifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExecuteExpression" ):
                listener.enterExecuteExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExecuteExpression" ):
                listener.exitExecuteExpression(self)


    class GreaterThanOrEqualExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.ExpressionContext
            super().__init__(parser)
            self.left = None # ExpressionContext
            self.right = None # ExpressionContext
            self.copyFrom(ctx)

        def GTE(self):
            return self.getToken(OParser.GTE, 0)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(OParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(OParser.ExpressionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGreaterThanOrEqualExpression" ):
                listener.enterGreaterThanOrEqualExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGreaterThanOrEqualExpression" ):
                listener.exitGreaterThanOrEqualExpression(self)


    class NotInExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.ExpressionContext
            super().__init__(parser)
            self.left = None # ExpressionContext
            self.right = None # ExpressionContext
            self.copyFrom(ctx)

        def NOT(self):
            return self.getToken(OParser.NOT, 0)
        def IN(self):
            return self.getToken(OParser.IN, 0)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(OParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(OParser.ExpressionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNotInExpression" ):
                listener.enterNotInExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNotInExpression" ):
                listener.exitNotInExpression(self)


    class IteratorExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.ExpressionContext
            super().__init__(parser)
            self.exp = None # ExpressionContext
            self.name = None # Variable_identifierContext
            self.source = None # ExpressionContext
            self.copyFrom(ctx)

        def FOR(self):
            return self.getToken(OParser.FOR, 0)
        def EACH(self):
            return self.getToken(OParser.EACH, 0)
        def LPAR(self):
            return self.getToken(OParser.LPAR, 0)
        def IN(self):
            return self.getToken(OParser.IN, 0)
        def RPAR(self):
            return self.getToken(OParser.RPAR, 0)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(OParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(OParser.ExpressionContext,i)

        def variable_identifier(self):
            return self.getTypedRuleContext(OParser.Variable_identifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIteratorExpression" ):
                listener.enterIteratorExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIteratorExpression" ):
                listener.exitIteratorExpression(self)


    class IsNotExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.ExpressionContext
            super().__init__(parser)
            self.left = None # ExpressionContext
            self.right = None # ExpressionContext
            self.copyFrom(ctx)

        def IS(self):
            return self.getToken(OParser.IS, 0)
        def NOT(self):
            return self.getToken(OParser.NOT, 0)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(OParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(OParser.ExpressionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIsNotExpression" ):
                listener.enterIsNotExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIsNotExpression" ):
                listener.exitIsNotExpression(self)


    class DivideExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.ExpressionContext
            super().__init__(parser)
            self.left = None # ExpressionContext
            self.right = None # ExpressionContext
            self.copyFrom(ctx)

        def divide(self):
            return self.getTypedRuleContext(OParser.DivideContext,0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(OParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(OParser.ExpressionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDivideExpression" ):
                listener.enterDivideExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDivideExpression" ):
                listener.exitDivideExpression(self)


    class IsExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.ExpressionContext
            super().__init__(parser)
            self.left = None # ExpressionContext
            self.right = None # ExpressionContext
            self.copyFrom(ctx)

        def IS(self):
            return self.getToken(OParser.IS, 0)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(OParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(OParser.ExpressionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIsExpression" ):
                listener.enterIsExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIsExpression" ):
                listener.exitIsExpression(self)


    class MinusExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.ExpressionContext
            super().__init__(parser)
            self.exp = None # ExpressionContext
            self.copyFrom(ctx)

        def MINUS(self):
            return self.getToken(OParser.MINUS, 0)
        def expression(self):
            return self.getTypedRuleContext(OParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMinusExpression" ):
                listener.enterMinusExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMinusExpression" ):
                listener.exitMinusExpression(self)


    class AddExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.ExpressionContext
            super().__init__(parser)
            self.left = None # ExpressionContext
            self.op = None # Token
            self.right = None # ExpressionContext
            self.copyFrom(ctx)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(OParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(OParser.ExpressionContext,i)

        def PLUS(self):
            return self.getToken(OParser.PLUS, 0)
        def MINUS(self):
            return self.getToken(OParser.MINUS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAddExpression" ):
                listener.enterAddExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAddExpression" ):
                listener.exitAddExpression(self)


    class HasAllExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.ExpressionContext
            super().__init__(parser)
            self.left = None # ExpressionContext
            self.right = None # ExpressionContext
            self.copyFrom(ctx)

        def HAS(self):
            return self.getToken(OParser.HAS, 0)
        def ALL(self):
            return self.getToken(OParser.ALL, 0)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(OParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(OParser.ExpressionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHasAllExpression" ):
                listener.enterHasAllExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHasAllExpression" ):
                listener.exitHasAllExpression(self)


    class InstanceExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.ExpressionContext
            super().__init__(parser)
            self.exp = None # Instance_expressionContext
            self.copyFrom(ctx)

        def instance_expression(self):
            return self.getTypedRuleContext(OParser.Instance_expressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInstanceExpression" ):
                listener.enterInstanceExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInstanceExpression" ):
                listener.exitInstanceExpression(self)


    class MutableInstanceExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.ExpressionContext
            super().__init__(parser)
            self.exp = None # Mutable_instance_expressionContext
            self.copyFrom(ctx)

        def mutable_instance_expression(self):
            return self.getTypedRuleContext(OParser.Mutable_instance_expressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMutableInstanceExpression" ):
                listener.enterMutableInstanceExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMutableInstanceExpression" ):
                listener.exitMutableInstanceExpression(self)


    class CssExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.ExpressionContext
            super().__init__(parser)
            self.exp = None # Css_expressionContext
            self.copyFrom(ctx)

        def css_expression(self):
            return self.getTypedRuleContext(OParser.Css_expressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCssExpression" ):
                listener.enterCssExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCssExpression" ):
                listener.exitCssExpression(self)


    class CastExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.ExpressionContext
            super().__init__(parser)
            self.right = None # Category_or_any_typeContext
            self.left = None # ExpressionContext
            self.copyFrom(ctx)

        def LPAR(self):
            return self.getToken(OParser.LPAR, 0)
        def RPAR(self):
            return self.getToken(OParser.RPAR, 0)
        def category_or_any_type(self):
            return self.getTypedRuleContext(OParser.Category_or_any_typeContext,0)

        def expression(self):
            return self.getTypedRuleContext(OParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCastExpression" ):
                listener.enterCastExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCastExpression" ):
                listener.exitCastExpression(self)


    class ModuloExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.ExpressionContext
            super().__init__(parser)
            self.left = None # ExpressionContext
            self.right = None # ExpressionContext
            self.copyFrom(ctx)

        def modulo(self):
            return self.getTypedRuleContext(OParser.ModuloContext,0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(OParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(OParser.ExpressionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModuloExpression" ):
                listener.enterModuloExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModuloExpression" ):
                listener.exitModuloExpression(self)


    class LessThanExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.ExpressionContext
            super().__init__(parser)
            self.left = None # ExpressionContext
            self.right = None # ExpressionContext
            self.copyFrom(ctx)

        def LT(self):
            return self.getToken(OParser.LT, 0)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(OParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(OParser.ExpressionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLessThanExpression" ):
                listener.enterLessThanExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLessThanExpression" ):
                listener.exitLessThanExpression(self)


    class EqualsExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.ExpressionContext
            super().__init__(parser)
            self.left = None # ExpressionContext
            self.right = None # ExpressionContext
            self.copyFrom(ctx)

        def EQ2(self):
            return self.getToken(OParser.EQ2, 0)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(OParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(OParser.ExpressionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEqualsExpression" ):
                listener.enterEqualsExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEqualsExpression" ):
                listener.exitEqualsExpression(self)



    def expression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = OParser.ExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 94
        self.enterRecursionRule(localctx, 94, self.RULE_expression, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1106
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,70,self._ctx)
            if la_ == 1:
                localctx = OParser.CssExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx

                self.state = 1081
                localctx.exp = self.css_expression()
                pass

            elif la_ == 2:
                localctx = OParser.JsxExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1082
                localctx.exp = self.jsx_expression()
                pass

            elif la_ == 3:
                localctx = OParser.InstanceExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1083
                localctx.exp = self.instance_expression(0)
                pass

            elif la_ == 4:
                localctx = OParser.MutableInstanceExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1084
                localctx.exp = self.mutable_instance_expression(0)
                pass

            elif la_ == 5:
                localctx = OParser.ArrowExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1085
                localctx.exp = self.arrow_expression()
                pass

            elif la_ == 6:
                localctx = OParser.MinusExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1086
                self.match(OParser.MINUS)
                self.state = 1087
                localctx.exp = self.expression(36)
                pass

            elif la_ == 7:
                localctx = OParser.NotExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1088
                self.match(OParser.XMARK)
                self.state = 1089
                localctx.exp = self.expression(35)
                pass

            elif la_ == 8:
                localctx = OParser.CastExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1090
                self.match(OParser.LPAR)
                self.state = 1091
                localctx.right = self.category_or_any_type()
                self.state = 1092
                self.match(OParser.RPAR)
                self.state = 1093
                localctx.left = self.expression(29)
                pass

            elif la_ == 9:
                localctx = OParser.CodeExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1095
                self.match(OParser.CODE)
                self.state = 1096
                self.match(OParser.LPAR)
                self.state = 1097
                localctx.exp = self.expression(0)
                self.state = 1098
                self.match(OParser.RPAR)
                pass

            elif la_ == 10:
                localctx = OParser.ExecuteExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1100
                self.match(OParser.EXECUTE)
                self.state = 1101
                self.match(OParser.LPAR)
                self.state = 1102
                localctx.name = self.variable_identifier()
                self.state = 1103
                self.match(OParser.RPAR)
                pass

            elif la_ == 11:
                localctx = OParser.ClosureExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1105
                localctx.exp = self.closure_expression()
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 1224
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,72,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 1222
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,71,self._ctx)
                    if la_ == 1:
                        localctx = OParser.MultiplyExpressionContext(self, OParser.ExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1108
                        if not self.precpred(self._ctx, 34):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 34)")
                        self.state = 1109
                        self.multiply()
                        self.state = 1110
                        localctx.right = self.expression(35)
                        pass

                    elif la_ == 2:
                        localctx = OParser.DivideExpressionContext(self, OParser.ExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1112
                        if not self.precpred(self._ctx, 33):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 33)")
                        self.state = 1113
                        self.divide()
                        self.state = 1114
                        localctx.right = self.expression(34)
                        pass

                    elif la_ == 3:
                        localctx = OParser.ModuloExpressionContext(self, OParser.ExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1116
                        if not self.precpred(self._ctx, 32):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 32)")
                        self.state = 1117
                        self.modulo()
                        self.state = 1118
                        localctx.right = self.expression(33)
                        pass

                    elif la_ == 4:
                        localctx = OParser.IntDivideExpressionContext(self, OParser.ExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1120
                        if not self.precpred(self._ctx, 31):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 31)")
                        self.state = 1121
                        self.idivide()
                        self.state = 1122
                        localctx.right = self.expression(32)
                        pass

                    elif la_ == 5:
                        localctx = OParser.AddExpressionContext(self, OParser.ExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1124
                        if not self.precpred(self._ctx, 30):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 30)")
                        self.state = 1125
                        localctx.op = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(_la==OParser.PLUS or _la==OParser.MINUS):
                            localctx.op = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1126
                        localctx.right = self.expression(31)
                        pass

                    elif la_ == 6:
                        localctx = OParser.LessThanExpressionContext(self, OParser.ExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1127
                        if not self.precpred(self._ctx, 28):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 28)")
                        self.state = 1128
                        self.match(OParser.LT)
                        self.state = 1129
                        localctx.right = self.expression(29)
                        pass

                    elif la_ == 7:
                        localctx = OParser.LessThanOrEqualExpressionContext(self, OParser.ExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1130
                        if not self.precpred(self._ctx, 27):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 27)")
                        self.state = 1131
                        self.match(OParser.LTE)
                        self.state = 1132
                        localctx.right = self.expression(28)
                        pass

                    elif la_ == 8:
                        localctx = OParser.GreaterThanExpressionContext(self, OParser.ExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1133
                        if not self.precpred(self._ctx, 26):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 26)")
                        self.state = 1134
                        self.match(OParser.GT)
                        self.state = 1135
                        localctx.right = self.expression(27)
                        pass

                    elif la_ == 9:
                        localctx = OParser.GreaterThanOrEqualExpressionContext(self, OParser.ExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1136
                        if not self.precpred(self._ctx, 25):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 25)")
                        self.state = 1137
                        self.match(OParser.GTE)
                        self.state = 1138
                        localctx.right = self.expression(26)
                        pass

                    elif la_ == 10:
                        localctx = OParser.IsNotExpressionContext(self, OParser.ExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1139
                        if not self.precpred(self._ctx, 22):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 22)")
                        self.state = 1140
                        self.match(OParser.IS)
                        self.state = 1141
                        self.match(OParser.NOT)
                        self.state = 1142
                        localctx.right = self.expression(23)
                        pass

                    elif la_ == 11:
                        localctx = OParser.IsExpressionContext(self, OParser.ExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1143
                        if not self.precpred(self._ctx, 21):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 21)")
                        self.state = 1144
                        self.match(OParser.IS)
                        self.state = 1145
                        localctx.right = self.expression(22)
                        pass

                    elif la_ == 12:
                        localctx = OParser.EqualsExpressionContext(self, OParser.ExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1146
                        if not self.precpred(self._ctx, 20):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 20)")
                        self.state = 1147
                        self.match(OParser.EQ2)
                        self.state = 1148
                        localctx.right = self.expression(21)
                        pass

                    elif la_ == 13:
                        localctx = OParser.NotEqualsExpressionContext(self, OParser.ExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1149
                        if not self.precpred(self._ctx, 19):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 19)")
                        self.state = 1150
                        self.match(OParser.XEQ)
                        self.state = 1151
                        localctx.right = self.expression(20)
                        pass

                    elif la_ == 14:
                        localctx = OParser.RoughlyEqualsExpressionContext(self, OParser.ExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1152
                        if not self.precpred(self._ctx, 18):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 18)")
                        self.state = 1153
                        self.match(OParser.TEQ)
                        self.state = 1154
                        localctx.right = self.expression(19)
                        pass

                    elif la_ == 15:
                        localctx = OParser.ContainsExpressionContext(self, OParser.ExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1155
                        if not self.precpred(self._ctx, 17):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 17)")
                        self.state = 1156
                        self.match(OParser.CONTAINS)
                        self.state = 1157
                        localctx.right = self.expression(18)
                        pass

                    elif la_ == 16:
                        localctx = OParser.InExpressionContext(self, OParser.ExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1158
                        if not self.precpred(self._ctx, 16):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 16)")
                        self.state = 1159
                        self.match(OParser.IN)
                        self.state = 1160
                        localctx.right = self.expression(17)
                        pass

                    elif la_ == 17:
                        localctx = OParser.HasExpressionContext(self, OParser.ExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1161
                        if not self.precpred(self._ctx, 15):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 15)")
                        self.state = 1162
                        self.match(OParser.HAS)
                        self.state = 1163
                        localctx.right = self.expression(16)
                        pass

                    elif la_ == 18:
                        localctx = OParser.HasAllExpressionContext(self, OParser.ExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1164
                        if not self.precpred(self._ctx, 14):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 14)")
                        self.state = 1165
                        self.match(OParser.HAS)
                        self.state = 1166
                        self.match(OParser.ALL)
                        self.state = 1167
                        localctx.right = self.expression(15)
                        pass

                    elif la_ == 19:
                        localctx = OParser.HasAnyExpressionContext(self, OParser.ExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1168
                        if not self.precpred(self._ctx, 13):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 13)")
                        self.state = 1169
                        self.match(OParser.HAS)
                        self.state = 1170
                        self.match(OParser.ANY)
                        self.state = 1171
                        localctx.right = self.expression(14)
                        pass

                    elif la_ == 20:
                        localctx = OParser.NotContainsExpressionContext(self, OParser.ExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1172
                        if not self.precpred(self._ctx, 12):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 12)")
                        self.state = 1173
                        self.match(OParser.NOT)
                        self.state = 1174
                        self.match(OParser.CONTAINS)
                        self.state = 1175
                        localctx.right = self.expression(13)
                        pass

                    elif la_ == 21:
                        localctx = OParser.NotInExpressionContext(self, OParser.ExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1176
                        if not self.precpred(self._ctx, 11):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 11)")
                        self.state = 1177
                        self.match(OParser.NOT)
                        self.state = 1178
                        self.match(OParser.IN)
                        self.state = 1179
                        localctx.right = self.expression(12)
                        pass

                    elif la_ == 22:
                        localctx = OParser.NotHasExpressionContext(self, OParser.ExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1180
                        if not self.precpred(self._ctx, 10):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 10)")
                        self.state = 1181
                        self.match(OParser.NOT)
                        self.state = 1182
                        self.match(OParser.HAS)
                        self.state = 1183
                        localctx.right = self.expression(11)
                        pass

                    elif la_ == 23:
                        localctx = OParser.NotHasAllExpressionContext(self, OParser.ExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1184
                        if not self.precpred(self._ctx, 9):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 9)")
                        self.state = 1185
                        self.match(OParser.NOT)
                        self.state = 1186
                        self.match(OParser.HAS)
                        self.state = 1187
                        self.match(OParser.ALL)
                        self.state = 1188
                        localctx.right = self.expression(10)
                        pass

                    elif la_ == 24:
                        localctx = OParser.NotHasAnyExpressionContext(self, OParser.ExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1189
                        if not self.precpred(self._ctx, 8):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 8)")
                        self.state = 1190
                        self.match(OParser.NOT)
                        self.state = 1191
                        self.match(OParser.HAS)
                        self.state = 1192
                        self.match(OParser.ANY)
                        self.state = 1193
                        localctx.right = self.expression(9)
                        pass

                    elif la_ == 25:
                        localctx = OParser.OrExpressionContext(self, OParser.ExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1194
                        if not self.precpred(self._ctx, 7):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 7)")
                        self.state = 1195
                        self.match(OParser.PIPE2)
                        self.state = 1196
                        localctx.right = self.expression(8)
                        pass

                    elif la_ == 26:
                        localctx = OParser.AndExpressionContext(self, OParser.ExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1197
                        if not self.precpred(self._ctx, 6):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 6)")
                        self.state = 1198
                        self.match(OParser.AMP2)
                        self.state = 1199
                        localctx.right = self.expression(7)
                        pass

                    elif la_ == 27:
                        localctx = OParser.TernaryExpressionContext(self, OParser.ExpressionContext(self, _parentctx, _parentState))
                        localctx.test = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1200
                        if not self.precpred(self._ctx, 5):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 5)")
                        self.state = 1201
                        self.match(OParser.QMARK)
                        self.state = 1202
                        localctx.ifTrue = self.expression(0)
                        self.state = 1203
                        self.match(OParser.COLON)
                        self.state = 1204
                        localctx.ifFalse = self.expression(6)
                        pass

                    elif la_ == 28:
                        localctx = OParser.IsNotAnExpressionContext(self, OParser.ExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1206
                        if not self.precpred(self._ctx, 24):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 24)")
                        self.state = 1207
                        self.match(OParser.IS)
                        self.state = 1208
                        self.match(OParser.NOT)
                        self.state = 1209
                        localctx.right = self.an_expression()
                        pass

                    elif la_ == 29:
                        localctx = OParser.IsAnExpressionContext(self, OParser.ExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1210
                        if not self.precpred(self._ctx, 23):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 23)")
                        self.state = 1211
                        self.match(OParser.IS)
                        self.state = 1212
                        localctx.right = self.an_expression()
                        pass

                    elif la_ == 30:
                        localctx = OParser.IteratorExpressionContext(self, OParser.ExpressionContext(self, _parentctx, _parentState))
                        localctx.exp = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1213
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 1214
                        self.match(OParser.FOR)
                        self.state = 1215
                        self.match(OParser.EACH)
                        self.state = 1216
                        self.match(OParser.LPAR)
                        self.state = 1217
                        localctx.name = self.variable_identifier()
                        self.state = 1218
                        self.match(OParser.IN)
                        self.state = 1219
                        localctx.source = self.expression(0)
                        self.state = 1220
                        self.match(OParser.RPAR)
                        pass

             
                self.state = 1226
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,72,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class An_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.typ = None # Category_or_any_typeContext

        def VARIABLE_IDENTIFIER(self):
            return self.getToken(OParser.VARIABLE_IDENTIFIER, 0)

        def category_or_any_type(self):
            return self.getTypedRuleContext(OParser.Category_or_any_typeContext,0)


        def getRuleIndex(self):
            return OParser.RULE_an_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAn_expression" ):
                listener.enterAn_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAn_expression" ):
                listener.exitAn_expression(self)




    def an_expression(self):

        localctx = OParser.An_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_an_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1227
            if not self.willBeAOrAn():
                from antlr4.error.Errors import FailedPredicateException
                raise FailedPredicateException(self, "$parser.willBeAOrAn()")
            self.state = 1228
            self.match(OParser.VARIABLE_IDENTIFIER)
            self.state = 1229
            localctx.typ = self.category_or_any_type()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Closure_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # Type_identifierContext

        def type_identifier(self):
            return self.getTypedRuleContext(OParser.Type_identifierContext,0)


        def getRuleIndex(self):
            return OParser.RULE_closure_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClosure_expression" ):
                listener.enterClosure_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClosure_expression" ):
                listener.exitClosure_expression(self)




    def closure_expression(self):

        localctx = OParser.Closure_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_closure_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1231
            localctx.name = self.type_identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Selectable_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return OParser.RULE_selectable_expression

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class ThisExpressionContext(Selectable_expressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Selectable_expressionContext
            super().__init__(parser)
            self.exp = None # This_expressionContext
            self.copyFrom(ctx)

        def this_expression(self):
            return self.getTypedRuleContext(OParser.This_expressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterThisExpression" ):
                listener.enterThisExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitThisExpression" ):
                listener.exitThisExpression(self)


    class ParenthesisExpressionContext(Selectable_expressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Selectable_expressionContext
            super().__init__(parser)
            self.exp = None # Parenthesis_expressionContext
            self.copyFrom(ctx)

        def parenthesis_expression(self):
            return self.getTypedRuleContext(OParser.Parenthesis_expressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParenthesisExpression" ):
                listener.enterParenthesisExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParenthesisExpression" ):
                listener.exitParenthesisExpression(self)


    class LiteralExpressionContext(Selectable_expressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Selectable_expressionContext
            super().__init__(parser)
            self.exp = None # Literal_expressionContext
            self.copyFrom(ctx)

        def literal_expression(self):
            return self.getTypedRuleContext(OParser.Literal_expressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLiteralExpression" ):
                listener.enterLiteralExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLiteralExpression" ):
                listener.exitLiteralExpression(self)


    class MethodExpressionContext(Selectable_expressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Selectable_expressionContext
            super().__init__(parser)
            self.exp = None # Method_expressionContext
            self.copyFrom(ctx)

        def method_expression(self):
            return self.getTypedRuleContext(OParser.Method_expressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMethodExpression" ):
                listener.enterMethodExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMethodExpression" ):
                listener.exitMethodExpression(self)


    class SuperExpressionContext(Selectable_expressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Selectable_expressionContext
            super().__init__(parser)
            self.exp = None # Super_expressionContext
            self.copyFrom(ctx)

        def super_expression(self):
            return self.getTypedRuleContext(OParser.Super_expressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSuperExpression" ):
                listener.enterSuperExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSuperExpression" ):
                listener.exitSuperExpression(self)


    class IdentifierExpressionContext(Selectable_expressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Selectable_expressionContext
            super().__init__(parser)
            self.exp = None # IdentifierContext
            self.copyFrom(ctx)

        def identifier(self):
            return self.getTypedRuleContext(OParser.IdentifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentifierExpression" ):
                listener.enterIdentifierExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentifierExpression" ):
                listener.exitIdentifierExpression(self)



    def selectable_expression(self):

        localctx = OParser.Selectable_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_selectable_expression)
        try:
            self.state = 1239
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,73,self._ctx)
            if la_ == 1:
                localctx = OParser.MethodExpressionContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1233
                localctx.exp = self.method_expression()
                pass

            elif la_ == 2:
                localctx = OParser.ParenthesisExpressionContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1234
                localctx.exp = self.parenthesis_expression()
                pass

            elif la_ == 3:
                localctx = OParser.LiteralExpressionContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 1235
                localctx.exp = self.literal_expression()
                pass

            elif la_ == 4:
                localctx = OParser.IdentifierExpressionContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 1236
                localctx.exp = self.identifier()
                pass

            elif la_ == 5:
                localctx = OParser.ThisExpressionContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 1237
                localctx.exp = self.this_expression()
                pass

            elif la_ == 6:
                localctx = OParser.SuperExpressionContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 1238
                localctx.exp = self.super_expression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Instance_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return OParser.RULE_instance_expression

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class SelectorExpressionContext(Instance_expressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Instance_expressionContext
            super().__init__(parser)
            self.parent = None # Instance_expressionContext
            self.selector = None # Instance_selectorContext
            self.copyFrom(ctx)

        def instance_expression(self):
            return self.getTypedRuleContext(OParser.Instance_expressionContext,0)

        def instance_selector(self):
            return self.getTypedRuleContext(OParser.Instance_selectorContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelectorExpression" ):
                listener.enterSelectorExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelectorExpression" ):
                listener.exitSelectorExpression(self)


    class SelectableExpressionContext(Instance_expressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Instance_expressionContext
            super().__init__(parser)
            self.parent = None # Selectable_expressionContext
            self.copyFrom(ctx)

        def selectable_expression(self):
            return self.getTypedRuleContext(OParser.Selectable_expressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelectableExpression" ):
                listener.enterSelectableExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelectableExpression" ):
                listener.exitSelectableExpression(self)



    def instance_expression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = OParser.Instance_expressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 102
        self.enterRecursionRule(localctx, 102, self.RULE_instance_expression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            localctx = OParser.SelectableExpressionContext(self, localctx)
            self._ctx = localctx
            _prevctx = localctx

            self.state = 1242
            localctx.parent = self.selectable_expression()
            self._ctx.stop = self._input.LT(-1)
            self.state = 1248
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,74,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = OParser.SelectorExpressionContext(self, OParser.Instance_expressionContext(self, _parentctx, _parentState))
                    localctx.parent = _prevctx
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_instance_expression)
                    self.state = 1244
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 1245
                    localctx.selector = self.instance_selector() 
                self.state = 1250
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,74,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class Mutable_instance_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return OParser.RULE_mutable_instance_expression

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class MutableSelectableExpressionContext(Mutable_instance_expressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Mutable_instance_expressionContext
            super().__init__(parser)
            self.exp = None # IdentifierContext
            self.copyFrom(ctx)

        def MUTABLE(self):
            return self.getToken(OParser.MUTABLE, 0)
        def identifier(self):
            return self.getTypedRuleContext(OParser.IdentifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMutableSelectableExpression" ):
                listener.enterMutableSelectableExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMutableSelectableExpression" ):
                listener.exitMutableSelectableExpression(self)


    class MutableSelectorExpressionContext(Mutable_instance_expressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Mutable_instance_expressionContext
            super().__init__(parser)
            self.parent = None # Mutable_instance_expressionContext
            self.selector = None # Instance_selectorContext
            self.copyFrom(ctx)

        def mutable_instance_expression(self):
            return self.getTypedRuleContext(OParser.Mutable_instance_expressionContext,0)

        def instance_selector(self):
            return self.getTypedRuleContext(OParser.Instance_selectorContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMutableSelectorExpression" ):
                listener.enterMutableSelectorExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMutableSelectorExpression" ):
                listener.exitMutableSelectorExpression(self)



    def mutable_instance_expression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = OParser.Mutable_instance_expressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 104
        self.enterRecursionRule(localctx, 104, self.RULE_mutable_instance_expression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            localctx = OParser.MutableSelectableExpressionContext(self, localctx)
            self._ctx = localctx
            _prevctx = localctx

            self.state = 1252
            self.match(OParser.MUTABLE)
            self.state = 1253
            localctx.exp = self.identifier()
            self._ctx.stop = self._input.LT(-1)
            self.state = 1259
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,75,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = OParser.MutableSelectorExpressionContext(self, OParser.Mutable_instance_expressionContext(self, _parentctx, _parentState))
                    localctx.parent = _prevctx
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_mutable_instance_expression)
                    self.state = 1255
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 1256
                    localctx.selector = self.instance_selector() 
                self.state = 1261
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,75,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class Method_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def blob_expression(self):
            return self.getTypedRuleContext(OParser.Blob_expressionContext,0)


        def document_expression(self):
            return self.getTypedRuleContext(OParser.Document_expressionContext,0)


        def filtered_list_expression(self):
            return self.getTypedRuleContext(OParser.Filtered_list_expressionContext,0)


        def fetch_expression(self):
            return self.getTypedRuleContext(OParser.Fetch_expressionContext,0)


        def read_all_expression(self):
            return self.getTypedRuleContext(OParser.Read_all_expressionContext,0)


        def read_one_expression(self):
            return self.getTypedRuleContext(OParser.Read_one_expressionContext,0)


        def sorted_expression(self):
            return self.getTypedRuleContext(OParser.Sorted_expressionContext,0)


        def method_call_expression(self):
            return self.getTypedRuleContext(OParser.Method_call_expressionContext,0)


        def constructor_expression(self):
            return self.getTypedRuleContext(OParser.Constructor_expressionContext,0)


        def getRuleIndex(self):
            return OParser.RULE_method_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMethod_expression" ):
                listener.enterMethod_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMethod_expression" ):
                listener.exitMethod_expression(self)




    def method_expression(self):

        localctx = OParser.Method_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_method_expression)
        try:
            self.state = 1271
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,76,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1262
                self.blob_expression()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1263
                self.document_expression()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1264
                self.filtered_list_expression()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1265
                self.fetch_expression()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1266
                self.read_all_expression()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1267
                self.read_one_expression()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1268
                self.sorted_expression()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 1269
                self.method_call_expression()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 1270
                self.constructor_expression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Blob_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BLOB(self):
            return self.getToken(OParser.BLOB, 0)

        def LPAR(self):
            return self.getToken(OParser.LPAR, 0)

        def expression(self):
            return self.getTypedRuleContext(OParser.ExpressionContext,0)


        def RPAR(self):
            return self.getToken(OParser.RPAR, 0)

        def getRuleIndex(self):
            return OParser.RULE_blob_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBlob_expression" ):
                listener.enterBlob_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBlob_expression" ):
                listener.exitBlob_expression(self)




    def blob_expression(self):

        localctx = OParser.Blob_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_blob_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1273
            self.match(OParser.BLOB)
            self.state = 1274
            self.match(OParser.LPAR)
            self.state = 1275
            self.expression(0)
            self.state = 1276
            self.match(OParser.RPAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Document_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DOCUMENT(self):
            return self.getToken(OParser.DOCUMENT, 0)

        def LPAR(self):
            return self.getToken(OParser.LPAR, 0)

        def RPAR(self):
            return self.getToken(OParser.RPAR, 0)

        def expression(self):
            return self.getTypedRuleContext(OParser.ExpressionContext,0)


        def getRuleIndex(self):
            return OParser.RULE_document_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDocument_expression" ):
                listener.enterDocument_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDocument_expression" ):
                listener.exitDocument_expression(self)




    def document_expression(self):

        localctx = OParser.Document_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_document_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1278
            self.match(OParser.DOCUMENT)
            self.state = 1279
            self.match(OParser.LPAR)
            self.state = 1281
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << OParser.LPAR) | (1 << OParser.LBRAK) | (1 << OParser.LCURL) | (1 << OParser.XMARK) | (1 << OParser.MINUS) | (1 << OParser.LT) | (1 << OParser.LTGT) | (1 << OParser.LTCOLONGT) | (1 << OParser.BOOLEAN) | (1 << OParser.CSS) | (1 << OParser.CHARACTER) | (1 << OParser.TEXT) | (1 << OParser.INTEGER) | (1 << OParser.DECIMAL) | (1 << OParser.DATE) | (1 << OParser.TIME) | (1 << OParser.DATETIME) | (1 << OParser.PERIOD) | (1 << OParser.VERSION) | (1 << OParser.CODE) | (1 << OParser.DOCUMENT) | (1 << OParser.BLOB) | (1 << OParser.IMAGE))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (OParser.UUID - 64)) | (1 << (OParser.ITERATOR - 64)) | (1 << (OParser.CURSOR - 64)) | (1 << (OParser.HTML - 64)) | (1 << (OParser.ANY - 64)) | (1 << (OParser.EXECUTE - 64)) | (1 << (OParser.FETCH - 64)) | (1 << (OParser.FILTERED - 64)) | (1 << (OParser.MUTABLE - 64)) | (1 << (OParser.NULL - 64)))) != 0) or ((((_la - 134)) & ~0x3f) == 0 and ((1 << (_la - 134)) & ((1 << (OParser.READ - 134)) | (1 << (OParser.SELF - 134)) | (1 << (OParser.SORTED - 134)) | (1 << (OParser.SUPER - 134)) | (1 << (OParser.THIS - 134)) | (1 << (OParser.BOOLEAN_LITERAL - 134)) | (1 << (OParser.CHAR_LITERAL - 134)) | (1 << (OParser.MIN_INTEGER - 134)) | (1 << (OParser.MAX_INTEGER - 134)) | (1 << (OParser.SYMBOL_IDENTIFIER - 134)) | (1 << (OParser.TYPE_IDENTIFIER - 134)) | (1 << (OParser.VARIABLE_IDENTIFIER - 134)) | (1 << (OParser.TEXT_LITERAL - 134)) | (1 << (OParser.UUID_LITERAL - 134)) | (1 << (OParser.INTEGER_LITERAL - 134)) | (1 << (OParser.HEXA_LITERAL - 134)) | (1 << (OParser.DECIMAL_LITERAL - 134)) | (1 << (OParser.DATETIME_LITERAL - 134)) | (1 << (OParser.TIME_LITERAL - 134)) | (1 << (OParser.DATE_LITERAL - 134)) | (1 << (OParser.PERIOD_LITERAL - 134)) | (1 << (OParser.VERSION_LITERAL - 134)))) != 0):
                self.state = 1280
                self.expression(0)


            self.state = 1283
            self.match(OParser.RPAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Write_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.what = None # ExpressionContext
            self.target = None # ExpressionContext

        def WRITE(self):
            return self.getToken(OParser.WRITE, 0)

        def LPAR(self):
            return self.getToken(OParser.LPAR, 0)

        def RPAR(self):
            return self.getToken(OParser.RPAR, 0)

        def TO(self):
            return self.getToken(OParser.TO, 0)

        def SEMI(self):
            return self.getToken(OParser.SEMI, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(OParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(OParser.ExpressionContext,i)


        def getRuleIndex(self):
            return OParser.RULE_write_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWrite_statement" ):
                listener.enterWrite_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWrite_statement" ):
                listener.exitWrite_statement(self)




    def write_statement(self):

        localctx = OParser.Write_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_write_statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1285
            self.match(OParser.WRITE)
            self.state = 1286
            self.match(OParser.LPAR)
            self.state = 1287
            localctx.what = self.expression(0)
            self.state = 1288
            self.match(OParser.RPAR)
            self.state = 1289
            self.match(OParser.TO)
            self.state = 1290
            localctx.target = self.expression(0)
            self.state = 1291
            self.match(OParser.SEMI)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Filtered_list_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.source = None # ExpressionContext
            self.name = None # Variable_identifierContext
            self.predicate = None # ExpressionContext

        def FILTERED(self):
            return self.getToken(OParser.FILTERED, 0)

        def LPAR(self, i:int=None):
            if i is None:
                return self.getTokens(OParser.LPAR)
            else:
                return self.getToken(OParser.LPAR, i)

        def RPAR(self, i:int=None):
            if i is None:
                return self.getTokens(OParser.RPAR)
            else:
                return self.getToken(OParser.RPAR, i)

        def WHERE(self):
            return self.getToken(OParser.WHERE, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(OParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(OParser.ExpressionContext,i)


        def WITH(self):
            return self.getToken(OParser.WITH, 0)

        def variable_identifier(self):
            return self.getTypedRuleContext(OParser.Variable_identifierContext,0)


        def getRuleIndex(self):
            return OParser.RULE_filtered_list_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFiltered_list_expression" ):
                listener.enterFiltered_list_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFiltered_list_expression" ):
                listener.exitFiltered_list_expression(self)




    def filtered_list_expression(self):

        localctx = OParser.Filtered_list_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_filtered_list_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1293
            self.match(OParser.FILTERED)
            self.state = 1294
            self.match(OParser.LPAR)
            self.state = 1295
            localctx.source = self.expression(0)
            self.state = 1296
            self.match(OParser.RPAR)
            self.state = 1302
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==OParser.WITH:
                self.state = 1297
                self.match(OParser.WITH)
                self.state = 1298
                self.match(OParser.LPAR)
                self.state = 1299
                localctx.name = self.variable_identifier()
                self.state = 1300
                self.match(OParser.RPAR)


            self.state = 1304
            self.match(OParser.WHERE)
            self.state = 1305
            self.match(OParser.LPAR)
            self.state = 1306
            localctx.predicate = self.expression(0)
            self.state = 1307
            self.match(OParser.RPAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Fetch_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return OParser.RULE_fetch_expression

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class FetchOneContext(Fetch_expressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Fetch_expressionContext
            super().__init__(parser)
            self.typ = None # Mutable_category_typeContext
            self.predicate = None # ExpressionContext
            self.copyFrom(ctx)

        def FETCH(self):
            return self.getToken(OParser.FETCH, 0)
        def ONE(self):
            return self.getToken(OParser.ONE, 0)
        def WHERE(self):
            return self.getToken(OParser.WHERE, 0)
        def LPAR(self, i:int=None):
            if i is None:
                return self.getTokens(OParser.LPAR)
            else:
                return self.getToken(OParser.LPAR, i)
        def RPAR(self, i:int=None):
            if i is None:
                return self.getTokens(OParser.RPAR)
            else:
                return self.getToken(OParser.RPAR, i)
        def expression(self):
            return self.getTypedRuleContext(OParser.ExpressionContext,0)

        def mutable_category_type(self):
            return self.getTypedRuleContext(OParser.Mutable_category_typeContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFetchOne" ):
                listener.enterFetchOne(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFetchOne" ):
                listener.exitFetchOne(self)


    class FetchManyContext(Fetch_expressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Fetch_expressionContext
            super().__init__(parser)
            self.typ = None # Mutable_category_typeContext
            self.xstart = None # ExpressionContext
            self.xstop = None # ExpressionContext
            self.predicate = None # ExpressionContext
            self.orderby = None # Order_by_listContext
            self.copyFrom(ctx)

        def FETCH(self):
            return self.getToken(OParser.FETCH, 0)
        def WHERE(self):
            return self.getToken(OParser.WHERE, 0)
        def LPAR(self, i:int=None):
            if i is None:
                return self.getTokens(OParser.LPAR)
            else:
                return self.getToken(OParser.LPAR, i)
        def RPAR(self, i:int=None):
            if i is None:
                return self.getTokens(OParser.RPAR)
            else:
                return self.getToken(OParser.RPAR, i)
        def ORDER(self):
            return self.getToken(OParser.ORDER, 0)
        def BY(self):
            return self.getToken(OParser.BY, 0)
        def ALL(self):
            return self.getToken(OParser.ALL, 0)
        def ROWS(self):
            return self.getToken(OParser.ROWS, 0)
        def TO(self):
            return self.getToken(OParser.TO, 0)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(OParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(OParser.ExpressionContext,i)

        def order_by_list(self):
            return self.getTypedRuleContext(OParser.Order_by_listContext,0)

        def mutable_category_type(self):
            return self.getTypedRuleContext(OParser.Mutable_category_typeContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFetchMany" ):
                listener.enterFetchMany(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFetchMany" ):
                listener.exitFetchMany(self)



    def fetch_expression(self):

        localctx = OParser.Fetch_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_fetch_expression)
        self._la = 0 # Token type
        try:
            self.state = 1360
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,85,self._ctx)
            if la_ == 1:
                localctx = OParser.FetchOneContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1309
                self.match(OParser.FETCH)
                self.state = 1310
                self.match(OParser.ONE)
                self.state = 1315
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==OParser.LPAR:
                    self.state = 1311
                    self.match(OParser.LPAR)
                    self.state = 1312
                    localctx.typ = self.mutable_category_type()
                    self.state = 1313
                    self.match(OParser.RPAR)


                self.state = 1317
                self.match(OParser.WHERE)
                self.state = 1318
                self.match(OParser.LPAR)
                self.state = 1319
                localctx.predicate = self.expression(0)
                self.state = 1320
                self.match(OParser.RPAR)
                pass

            elif la_ == 2:
                localctx = OParser.FetchManyContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1322
                self.match(OParser.FETCH)
                self.state = 1343
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [OParser.ALL]:
                    self.state = 1323
                    self.match(OParser.ALL)
                    self.state = 1328
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,80,self._ctx)
                    if la_ == 1:
                        self.state = 1324
                        self.match(OParser.LPAR)
                        self.state = 1325
                        localctx.typ = self.mutable_category_type()
                        self.state = 1326
                        self.match(OParser.RPAR)


                    pass
                elif token in [OParser.LPAR, OParser.ROWS]:
                    self.state = 1334
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==OParser.LPAR:
                        self.state = 1330
                        self.match(OParser.LPAR)
                        self.state = 1331
                        localctx.typ = self.mutable_category_type()
                        self.state = 1332
                        self.match(OParser.RPAR)


                    self.state = 1336
                    self.match(OParser.ROWS)
                    self.state = 1337
                    self.match(OParser.LPAR)
                    self.state = 1338
                    localctx.xstart = self.expression(0)
                    self.state = 1339
                    self.match(OParser.TO)
                    self.state = 1340
                    localctx.xstop = self.expression(0)
                    self.state = 1341
                    self.match(OParser.RPAR)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1350
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,83,self._ctx)
                if la_ == 1:
                    self.state = 1345
                    self.match(OParser.WHERE)
                    self.state = 1346
                    self.match(OParser.LPAR)
                    self.state = 1347
                    localctx.predicate = self.expression(0)
                    self.state = 1348
                    self.match(OParser.RPAR)


                self.state = 1358
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,84,self._ctx)
                if la_ == 1:
                    self.state = 1352
                    self.match(OParser.ORDER)
                    self.state = 1353
                    self.match(OParser.BY)
                    self.state = 1354
                    self.match(OParser.LPAR)
                    self.state = 1355
                    localctx.orderby = self.order_by_list()
                    self.state = 1356
                    self.match(OParser.RPAR)


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Fetch_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return OParser.RULE_fetch_statement

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class FetchManyAsyncContext(Fetch_statementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Fetch_statementContext
            super().__init__(parser)
            self.typ = None # Mutable_category_typeContext
            self.xstart = None # ExpressionContext
            self.xstop = None # ExpressionContext
            self.predicate = None # ExpressionContext
            self.orderby = None # Order_by_listContext
            self.name = None # Variable_identifierContext
            self.stmts = None # Statement_listContext
            self.copyFrom(ctx)

        def FETCH(self):
            return self.getToken(OParser.FETCH, 0)
        def THEN(self):
            return self.getToken(OParser.THEN, 0)
        def WITH(self):
            return self.getToken(OParser.WITH, 0)
        def LCURL(self):
            return self.getToken(OParser.LCURL, 0)
        def RCURL(self):
            return self.getToken(OParser.RCURL, 0)
        def variable_identifier(self):
            return self.getTypedRuleContext(OParser.Variable_identifierContext,0)

        def statement_list(self):
            return self.getTypedRuleContext(OParser.Statement_listContext,0)

        def WHERE(self):
            return self.getToken(OParser.WHERE, 0)
        def LPAR(self, i:int=None):
            if i is None:
                return self.getTokens(OParser.LPAR)
            else:
                return self.getToken(OParser.LPAR, i)
        def RPAR(self, i:int=None):
            if i is None:
                return self.getTokens(OParser.RPAR)
            else:
                return self.getToken(OParser.RPAR, i)
        def ORDER(self):
            return self.getToken(OParser.ORDER, 0)
        def BY(self):
            return self.getToken(OParser.BY, 0)
        def ALL(self):
            return self.getToken(OParser.ALL, 0)
        def ROWS(self):
            return self.getToken(OParser.ROWS, 0)
        def TO(self):
            return self.getToken(OParser.TO, 0)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(OParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(OParser.ExpressionContext,i)

        def order_by_list(self):
            return self.getTypedRuleContext(OParser.Order_by_listContext,0)

        def mutable_category_type(self):
            return self.getTypedRuleContext(OParser.Mutable_category_typeContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFetchManyAsync" ):
                listener.enterFetchManyAsync(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFetchManyAsync" ):
                listener.exitFetchManyAsync(self)


    class FetchOneAsyncContext(Fetch_statementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Fetch_statementContext
            super().__init__(parser)
            self.typ = None # Mutable_category_typeContext
            self.predicate = None # ExpressionContext
            self.name = None # Variable_identifierContext
            self.stmts = None # Statement_listContext
            self.copyFrom(ctx)

        def FETCH(self):
            return self.getToken(OParser.FETCH, 0)
        def ONE(self):
            return self.getToken(OParser.ONE, 0)
        def WHERE(self):
            return self.getToken(OParser.WHERE, 0)
        def LPAR(self, i:int=None):
            if i is None:
                return self.getTokens(OParser.LPAR)
            else:
                return self.getToken(OParser.LPAR, i)
        def RPAR(self, i:int=None):
            if i is None:
                return self.getTokens(OParser.RPAR)
            else:
                return self.getToken(OParser.RPAR, i)
        def THEN(self):
            return self.getToken(OParser.THEN, 0)
        def WITH(self):
            return self.getToken(OParser.WITH, 0)
        def LCURL(self):
            return self.getToken(OParser.LCURL, 0)
        def RCURL(self):
            return self.getToken(OParser.RCURL, 0)
        def expression(self):
            return self.getTypedRuleContext(OParser.ExpressionContext,0)

        def variable_identifier(self):
            return self.getTypedRuleContext(OParser.Variable_identifierContext,0)

        def statement_list(self):
            return self.getTypedRuleContext(OParser.Statement_listContext,0)

        def mutable_category_type(self):
            return self.getTypedRuleContext(OParser.Mutable_category_typeContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFetchOneAsync" ):
                listener.enterFetchOneAsync(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFetchOneAsync" ):
                listener.exitFetchOneAsync(self)



    def fetch_statement(self):

        localctx = OParser.Fetch_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_fetch_statement)
        self._la = 0 # Token type
        try:
            self.state = 1426
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,92,self._ctx)
            if la_ == 1:
                localctx = OParser.FetchOneAsyncContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1362
                self.match(OParser.FETCH)
                self.state = 1363
                self.match(OParser.ONE)
                self.state = 1368
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==OParser.LPAR:
                    self.state = 1364
                    self.match(OParser.LPAR)
                    self.state = 1365
                    localctx.typ = self.mutable_category_type()
                    self.state = 1366
                    self.match(OParser.RPAR)


                self.state = 1370
                self.match(OParser.WHERE)
                self.state = 1371
                self.match(OParser.LPAR)
                self.state = 1372
                localctx.predicate = self.expression(0)
                self.state = 1373
                self.match(OParser.RPAR)
                self.state = 1374
                self.match(OParser.THEN)
                self.state = 1375
                self.match(OParser.WITH)
                self.state = 1376
                localctx.name = self.variable_identifier()
                self.state = 1377
                self.match(OParser.LCURL)
                self.state = 1378
                localctx.stmts = self.statement_list()
                self.state = 1379
                self.match(OParser.RCURL)
                pass

            elif la_ == 2:
                localctx = OParser.FetchManyAsyncContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1381
                self.match(OParser.FETCH)
                self.state = 1402
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [OParser.ALL]:
                    self.state = 1382
                    self.match(OParser.ALL)
                    self.state = 1387
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==OParser.LPAR:
                        self.state = 1383
                        self.match(OParser.LPAR)
                        self.state = 1384
                        localctx.typ = self.mutable_category_type()
                        self.state = 1385
                        self.match(OParser.RPAR)


                    pass
                elif token in [OParser.LPAR, OParser.ROWS]:
                    self.state = 1393
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==OParser.LPAR:
                        self.state = 1389
                        self.match(OParser.LPAR)
                        self.state = 1390
                        localctx.typ = self.mutable_category_type()
                        self.state = 1391
                        self.match(OParser.RPAR)


                    self.state = 1395
                    self.match(OParser.ROWS)
                    self.state = 1396
                    self.match(OParser.LPAR)
                    self.state = 1397
                    localctx.xstart = self.expression(0)
                    self.state = 1398
                    self.match(OParser.TO)
                    self.state = 1399
                    localctx.xstop = self.expression(0)
                    self.state = 1400
                    self.match(OParser.RPAR)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1409
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==OParser.WHERE:
                    self.state = 1404
                    self.match(OParser.WHERE)
                    self.state = 1405
                    self.match(OParser.LPAR)
                    self.state = 1406
                    localctx.predicate = self.expression(0)
                    self.state = 1407
                    self.match(OParser.RPAR)


                self.state = 1417
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==OParser.ORDER:
                    self.state = 1411
                    self.match(OParser.ORDER)
                    self.state = 1412
                    self.match(OParser.BY)
                    self.state = 1413
                    self.match(OParser.LPAR)
                    self.state = 1414
                    localctx.orderby = self.order_by_list()
                    self.state = 1415
                    self.match(OParser.RPAR)


                self.state = 1419
                self.match(OParser.THEN)
                self.state = 1420
                self.match(OParser.WITH)
                self.state = 1421
                localctx.name = self.variable_identifier()
                self.state = 1422
                self.match(OParser.LCURL)
                self.state = 1423
                localctx.stmts = self.statement_list()
                self.state = 1424
                self.match(OParser.RCURL)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Sorted_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.source = None # Instance_expressionContext
            self.key = None # Sorted_keyContext

        def SORTED(self):
            return self.getToken(OParser.SORTED, 0)

        def LPAR(self):
            return self.getToken(OParser.LPAR, 0)

        def RPAR(self):
            return self.getToken(OParser.RPAR, 0)

        def instance_expression(self):
            return self.getTypedRuleContext(OParser.Instance_expressionContext,0)


        def DESC(self):
            return self.getToken(OParser.DESC, 0)

        def COMMA(self):
            return self.getToken(OParser.COMMA, 0)

        def key_token(self):
            return self.getTypedRuleContext(OParser.Key_tokenContext,0)


        def EQ(self):
            return self.getToken(OParser.EQ, 0)

        def sorted_key(self):
            return self.getTypedRuleContext(OParser.Sorted_keyContext,0)


        def getRuleIndex(self):
            return OParser.RULE_sorted_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSorted_expression" ):
                listener.enterSorted_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSorted_expression" ):
                listener.exitSorted_expression(self)




    def sorted_expression(self):

        localctx = OParser.Sorted_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_sorted_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1428
            self.match(OParser.SORTED)
            self.state = 1430
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==OParser.DESC:
                self.state = 1429
                self.match(OParser.DESC)


            self.state = 1432
            self.match(OParser.LPAR)
            self.state = 1433
            localctx.source = self.instance_expression(0)
            self.state = 1439
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==OParser.COMMA:
                self.state = 1434
                self.match(OParser.COMMA)
                self.state = 1435
                self.key_token()
                self.state = 1436
                self.match(OParser.EQ)
                self.state = 1437
                localctx.key = self.sorted_key()


            self.state = 1441
            self.match(OParser.RPAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Instance_selectorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return OParser.RULE_instance_selector

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class SliceSelectorContext(Instance_selectorContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Instance_selectorContext
            super().__init__(parser)
            self.xslice = None # Slice_argumentsContext
            self.copyFrom(ctx)

        def LBRAK(self):
            return self.getToken(OParser.LBRAK, 0)
        def RBRAK(self):
            return self.getToken(OParser.RBRAK, 0)
        def slice_arguments(self):
            return self.getTypedRuleContext(OParser.Slice_argumentsContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSliceSelector" ):
                listener.enterSliceSelector(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSliceSelector" ):
                listener.exitSliceSelector(self)


    class MethodSelectorContext(Instance_selectorContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Instance_selectorContext
            super().__init__(parser)
            self.method = None # Method_call_expressionContext
            self.copyFrom(ctx)

        def DOT(self):
            return self.getToken(OParser.DOT, 0)
        def method_call_expression(self):
            return self.getTypedRuleContext(OParser.Method_call_expressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMethodSelector" ):
                listener.enterMethodSelector(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMethodSelector" ):
                listener.exitMethodSelector(self)


    class MemberSelectorContext(Instance_selectorContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Instance_selectorContext
            super().__init__(parser)
            self.name = None # Member_identifierContext
            self.copyFrom(ctx)

        def DOT(self):
            return self.getToken(OParser.DOT, 0)
        def member_identifier(self):
            return self.getTypedRuleContext(OParser.Member_identifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMemberSelector" ):
                listener.enterMemberSelector(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMemberSelector" ):
                listener.exitMemberSelector(self)


    class ItemSelectorContext(Instance_selectorContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Instance_selectorContext
            super().__init__(parser)
            self.exp = None # ExpressionContext
            self.copyFrom(ctx)

        def LBRAK(self):
            return self.getToken(OParser.LBRAK, 0)
        def RBRAK(self):
            return self.getToken(OParser.RBRAK, 0)
        def expression(self):
            return self.getTypedRuleContext(OParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterItemSelector" ):
                listener.enterItemSelector(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitItemSelector" ):
                listener.exitItemSelector(self)



    def instance_selector(self):

        localctx = OParser.Instance_selectorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_instance_selector)
        try:
            self.state = 1455
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,95,self._ctx)
            if la_ == 1:
                localctx = OParser.MemberSelectorContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1443
                self.match(OParser.DOT)
                self.state = 1444
                localctx.name = self.member_identifier()
                pass

            elif la_ == 2:
                localctx = OParser.MethodSelectorContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1445
                self.match(OParser.DOT)
                self.state = 1446
                localctx.method = self.method_call_expression()
                pass

            elif la_ == 3:
                localctx = OParser.ItemSelectorContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 1447
                self.match(OParser.LBRAK)
                self.state = 1448
                localctx.exp = self.expression(0)
                self.state = 1449
                self.match(OParser.RBRAK)
                pass

            elif la_ == 4:
                localctx = OParser.SliceSelectorContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 1451
                self.match(OParser.LBRAK)
                self.state = 1452
                localctx.xslice = self.slice_arguments()
                self.state = 1453
                self.match(OParser.RBRAK)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Constructor_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return OParser.RULE_constructor_expression

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class ConstructorFromContext(Constructor_expressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Constructor_expressionContext
            super().__init__(parser)
            self.typ = None # Mutable_category_typeContext
            self.copyExp = None # Copy_fromContext
            self.args = None # Argument_assignment_listContext
            self.copyFrom(ctx)

        def LPAR(self):
            return self.getToken(OParser.LPAR, 0)
        def RPAR(self):
            return self.getToken(OParser.RPAR, 0)
        def mutable_category_type(self):
            return self.getTypedRuleContext(OParser.Mutable_category_typeContext,0)

        def copy_from(self):
            return self.getTypedRuleContext(OParser.Copy_fromContext,0)

        def COMMA(self):
            return self.getToken(OParser.COMMA, 0)
        def argument_assignment_list(self):
            return self.getTypedRuleContext(OParser.Argument_assignment_listContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstructorFrom" ):
                listener.enterConstructorFrom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstructorFrom" ):
                listener.exitConstructorFrom(self)


    class ConstructorNoFromContext(Constructor_expressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Constructor_expressionContext
            super().__init__(parser)
            self.typ = None # Mutable_category_typeContext
            self.args = None # Argument_assignment_listContext
            self.copyFrom(ctx)

        def LPAR(self):
            return self.getToken(OParser.LPAR, 0)
        def RPAR(self):
            return self.getToken(OParser.RPAR, 0)
        def mutable_category_type(self):
            return self.getTypedRuleContext(OParser.Mutable_category_typeContext,0)

        def argument_assignment_list(self):
            return self.getTypedRuleContext(OParser.Argument_assignment_listContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstructorNoFrom" ):
                listener.enterConstructorNoFrom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstructorNoFrom" ):
                listener.exitConstructorNoFrom(self)



    def constructor_expression(self):

        localctx = OParser.Constructor_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_constructor_expression)
        self._la = 0 # Token type
        try:
            self.state = 1473
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,98,self._ctx)
            if la_ == 1:
                localctx = OParser.ConstructorFromContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1457
                localctx.typ = self.mutable_category_type()
                self.state = 1458
                self.match(OParser.LPAR)
                self.state = 1459
                localctx.copyExp = self.copy_from()
                self.state = 1462
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==OParser.COMMA:
                    self.state = 1460
                    self.match(OParser.COMMA)
                    self.state = 1461
                    localctx.args = self.argument_assignment_list(0)


                self.state = 1464
                self.match(OParser.RPAR)
                pass

            elif la_ == 2:
                localctx = OParser.ConstructorNoFromContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1466
                localctx.typ = self.mutable_category_type()
                self.state = 1467
                self.match(OParser.LPAR)
                self.state = 1469
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << OParser.LPAR) | (1 << OParser.LBRAK) | (1 << OParser.LCURL) | (1 << OParser.XMARK) | (1 << OParser.MINUS) | (1 << OParser.LT) | (1 << OParser.LTGT) | (1 << OParser.LTCOLONGT) | (1 << OParser.BOOLEAN) | (1 << OParser.CSS) | (1 << OParser.CHARACTER) | (1 << OParser.TEXT) | (1 << OParser.INTEGER) | (1 << OParser.DECIMAL) | (1 << OParser.DATE) | (1 << OParser.TIME) | (1 << OParser.DATETIME) | (1 << OParser.PERIOD) | (1 << OParser.VERSION) | (1 << OParser.CODE) | (1 << OParser.DOCUMENT) | (1 << OParser.BLOB) | (1 << OParser.IMAGE))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (OParser.UUID - 64)) | (1 << (OParser.ITERATOR - 64)) | (1 << (OParser.CURSOR - 64)) | (1 << (OParser.HTML - 64)) | (1 << (OParser.ANY - 64)) | (1 << (OParser.EXECUTE - 64)) | (1 << (OParser.FETCH - 64)) | (1 << (OParser.FILTERED - 64)) | (1 << (OParser.MUTABLE - 64)) | (1 << (OParser.NULL - 64)))) != 0) or ((((_la - 134)) & ~0x3f) == 0 and ((1 << (_la - 134)) & ((1 << (OParser.READ - 134)) | (1 << (OParser.SELF - 134)) | (1 << (OParser.SORTED - 134)) | (1 << (OParser.SUPER - 134)) | (1 << (OParser.THIS - 134)) | (1 << (OParser.BOOLEAN_LITERAL - 134)) | (1 << (OParser.CHAR_LITERAL - 134)) | (1 << (OParser.MIN_INTEGER - 134)) | (1 << (OParser.MAX_INTEGER - 134)) | (1 << (OParser.SYMBOL_IDENTIFIER - 134)) | (1 << (OParser.TYPE_IDENTIFIER - 134)) | (1 << (OParser.VARIABLE_IDENTIFIER - 134)) | (1 << (OParser.TEXT_LITERAL - 134)) | (1 << (OParser.UUID_LITERAL - 134)) | (1 << (OParser.INTEGER_LITERAL - 134)) | (1 << (OParser.HEXA_LITERAL - 134)) | (1 << (OParser.DECIMAL_LITERAL - 134)) | (1 << (OParser.DATETIME_LITERAL - 134)) | (1 << (OParser.TIME_LITERAL - 134)) | (1 << (OParser.DATE_LITERAL - 134)) | (1 << (OParser.PERIOD_LITERAL - 134)) | (1 << (OParser.VERSION_LITERAL - 134)))) != 0):
                    self.state = 1468
                    localctx.args = self.argument_assignment_list(0)


                self.state = 1471
                self.match(OParser.RPAR)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Copy_fromContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.exp = None # ExpressionContext

        def FROM(self):
            return self.getToken(OParser.FROM, 0)

        def assign(self):
            return self.getTypedRuleContext(OParser.AssignContext,0)


        def expression(self):
            return self.getTypedRuleContext(OParser.ExpressionContext,0)


        def getRuleIndex(self):
            return OParser.RULE_copy_from

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCopy_from" ):
                listener.enterCopy_from(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCopy_from" ):
                listener.exitCopy_from(self)




    def copy_from(self):

        localctx = OParser.Copy_fromContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_copy_from)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1475
            self.match(OParser.FROM)
            self.state = 1476
            self.assign()
            self.state = 1477
            localctx.exp = self.expression(0)
            self.state = 1478
            if not self.willNotBe(self.equalToken()):
                from antlr4.error.Errors import FailedPredicateException
                raise FailedPredicateException(self, "$parser.willNotBe($parser.equalToken())")
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Argument_assignment_listContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return OParser.RULE_argument_assignment_list

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class ExpressionAssignmentListContext(Argument_assignment_listContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Argument_assignment_listContext
            super().__init__(parser)
            self.exp = None # ExpressionContext
            self.copyFrom(ctx)

        def expression(self):
            return self.getTypedRuleContext(OParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpressionAssignmentList" ):
                listener.enterExpressionAssignmentList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpressionAssignmentList" ):
                listener.exitExpressionAssignmentList(self)


    class ArgumentAssignmentListContext(Argument_assignment_listContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Argument_assignment_listContext
            super().__init__(parser)
            self.item = None # Argument_assignmentContext
            self.copyFrom(ctx)

        def argument_assignment(self):
            return self.getTypedRuleContext(OParser.Argument_assignmentContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArgumentAssignmentList" ):
                listener.enterArgumentAssignmentList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArgumentAssignmentList" ):
                listener.exitArgumentAssignmentList(self)


    class ArgumentAssignmentListItemContext(Argument_assignment_listContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Argument_assignment_listContext
            super().__init__(parser)
            self.items = None # Argument_assignment_listContext
            self.item = None # Argument_assignmentContext
            self.copyFrom(ctx)

        def COMMA(self):
            return self.getToken(OParser.COMMA, 0)
        def argument_assignment_list(self):
            return self.getTypedRuleContext(OParser.Argument_assignment_listContext,0)

        def argument_assignment(self):
            return self.getTypedRuleContext(OParser.Argument_assignmentContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArgumentAssignmentListItem" ):
                listener.enterArgumentAssignmentListItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArgumentAssignmentListItem" ):
                listener.exitArgumentAssignmentListItem(self)



    def argument_assignment_list(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = OParser.Argument_assignment_listContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 128
        self.enterRecursionRule(localctx, 128, self.RULE_argument_assignment_list, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1485
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,99,self._ctx)
            if la_ == 1:
                localctx = OParser.ExpressionAssignmentListContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx

                self.state = 1481
                localctx.exp = self.expression(0)
                self.state = 1482
                if not self.willNotBe(self.equalToken()):
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "$parser.willNotBe($parser.equalToken())")
                pass

            elif la_ == 2:
                localctx = OParser.ArgumentAssignmentListContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1484
                localctx.item = self.argument_assignment()
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 1492
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,100,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = OParser.ArgumentAssignmentListItemContext(self, OParser.Argument_assignment_listContext(self, _parentctx, _parentState))
                    localctx.items = _prevctx
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_argument_assignment_list)
                    self.state = 1487
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 1488
                    self.match(OParser.COMMA)
                    self.state = 1489
                    localctx.item = self.argument_assignment() 
                self.state = 1494
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,100,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class Argument_assignmentContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # Variable_identifierContext
            self.exp = None # ExpressionContext

        def variable_identifier(self):
            return self.getTypedRuleContext(OParser.Variable_identifierContext,0)


        def assign(self):
            return self.getTypedRuleContext(OParser.AssignContext,0)


        def expression(self):
            return self.getTypedRuleContext(OParser.ExpressionContext,0)


        def getRuleIndex(self):
            return OParser.RULE_argument_assignment

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArgument_assignment" ):
                listener.enterArgument_assignment(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArgument_assignment" ):
                listener.exitArgument_assignment(self)




    def argument_assignment(self):

        localctx = OParser.Argument_assignmentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_argument_assignment)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1495
            localctx.name = self.variable_identifier()
            self.state = 1499
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,101,self._ctx)
            if la_ == 1:
                self.state = 1496
                self.assign()
                self.state = 1497
                localctx.exp = self.expression(0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Assign_instance_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.inst = None # Assignable_instanceContext
            self.exp = None # ExpressionContext

        def assign(self):
            return self.getTypedRuleContext(OParser.AssignContext,0)


        def SEMI(self):
            return self.getToken(OParser.SEMI, 0)

        def assignable_instance(self):
            return self.getTypedRuleContext(OParser.Assignable_instanceContext,0)


        def expression(self):
            return self.getTypedRuleContext(OParser.ExpressionContext,0)


        def getRuleIndex(self):
            return OParser.RULE_assign_instance_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssign_instance_statement" ):
                listener.enterAssign_instance_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssign_instance_statement" ):
                listener.exitAssign_instance_statement(self)




    def assign_instance_statement(self):

        localctx = OParser.Assign_instance_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_assign_instance_statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1501
            localctx.inst = self.assignable_instance(0)
            self.state = 1502
            self.assign()
            self.state = 1503
            localctx.exp = self.expression(0)
            self.state = 1504
            self.match(OParser.SEMI)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Child_instanceContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return OParser.RULE_child_instance

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class MemberInstanceContext(Child_instanceContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Child_instanceContext
            super().__init__(parser)
            self.name = None # Variable_identifierContext
            self.copyFrom(ctx)

        def DOT(self):
            return self.getToken(OParser.DOT, 0)
        def variable_identifier(self):
            return self.getTypedRuleContext(OParser.Variable_identifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMemberInstance" ):
                listener.enterMemberInstance(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMemberInstance" ):
                listener.exitMemberInstance(self)


    class ItemInstanceContext(Child_instanceContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Child_instanceContext
            super().__init__(parser)
            self.exp = None # ExpressionContext
            self.copyFrom(ctx)

        def LBRAK(self):
            return self.getToken(OParser.LBRAK, 0)
        def RBRAK(self):
            return self.getToken(OParser.RBRAK, 0)
        def expression(self):
            return self.getTypedRuleContext(OParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterItemInstance" ):
                listener.enterItemInstance(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitItemInstance" ):
                listener.exitItemInstance(self)



    def child_instance(self):

        localctx = OParser.Child_instanceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_child_instance)
        try:
            self.state = 1512
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [OParser.DOT]:
                localctx = OParser.MemberInstanceContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1506
                self.match(OParser.DOT)
                self.state = 1507
                localctx.name = self.variable_identifier()
                pass
            elif token in [OParser.LBRAK]:
                localctx = OParser.ItemInstanceContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1508
                self.match(OParser.LBRAK)
                self.state = 1509
                localctx.exp = self.expression(0)
                self.state = 1510
                self.match(OParser.RBRAK)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Assign_tuple_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.items = None # Variable_identifier_listContext
            self.exp = None # ExpressionContext

        def assign(self):
            return self.getTypedRuleContext(OParser.AssignContext,0)


        def SEMI(self):
            return self.getToken(OParser.SEMI, 0)

        def variable_identifier_list(self):
            return self.getTypedRuleContext(OParser.Variable_identifier_listContext,0)


        def expression(self):
            return self.getTypedRuleContext(OParser.ExpressionContext,0)


        def getRuleIndex(self):
            return OParser.RULE_assign_tuple_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssign_tuple_statement" ):
                listener.enterAssign_tuple_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssign_tuple_statement" ):
                listener.exitAssign_tuple_statement(self)




    def assign_tuple_statement(self):

        localctx = OParser.Assign_tuple_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_assign_tuple_statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1514
            localctx.items = self.variable_identifier_list()
            self.state = 1515
            self.assign()
            self.state = 1516
            localctx.exp = self.expression(0)
            self.state = 1517
            self.match(OParser.SEMI)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Type_literalContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def category_or_any_type(self):
            return self.getTypedRuleContext(OParser.Category_or_any_typeContext,0)


        def getRuleIndex(self):
            return OParser.RULE_type_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterType_literal" ):
                listener.enterType_literal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitType_literal" ):
                listener.exitType_literal(self)




    def type_literal(self):

        localctx = OParser.Type_literalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_type_literal)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1519
            self.category_or_any_type()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Null_literalContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NULL(self):
            return self.getToken(OParser.NULL, 0)

        def getRuleIndex(self):
            return OParser.RULE_null_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNull_literal" ):
                listener.enterNull_literal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNull_literal" ):
                listener.exitNull_literal(self)




    def null_literal(self):

        localctx = OParser.Null_literalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_null_literal)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1521
            self.match(OParser.NULL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Ws_plusContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LF(self, i:int=None):
            if i is None:
                return self.getTokens(OParser.LF)
            else:
                return self.getToken(OParser.LF, i)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(OParser.WS)
            else:
                return self.getToken(OParser.WS, i)

        def getRuleIndex(self):
            return OParser.RULE_ws_plus

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWs_plus" ):
                listener.enterWs_plus(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWs_plus" ):
                listener.exitWs_plus(self)




    def ws_plus(self):

        localctx = OParser.Ws_plusContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_ws_plus)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1526
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,103,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1523
                    _la = self._input.LA(1)
                    if not(_la==OParser.WS or _la==OParser.LF):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume() 
                self.state = 1528
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,103,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ReplContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declaration(self):
            return self.getTypedRuleContext(OParser.DeclarationContext,0)


        def statement(self):
            return self.getTypedRuleContext(OParser.StatementContext,0)


        def expression(self):
            return self.getTypedRuleContext(OParser.ExpressionContext,0)


        def getRuleIndex(self):
            return OParser.RULE_repl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRepl" ):
                listener.enterRepl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRepl" ):
                listener.exitRepl(self)




    def repl(self):

        localctx = OParser.ReplContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_repl)
        try:
            self.state = 1532
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,104,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1529
                self.declaration()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1530
                self.statement()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1531
                self.expression(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Declaration_listContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return OParser.RULE_declaration_list

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class FullDeclarationListContext(Declaration_listContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Declaration_listContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def lfs(self):
            return self.getTypedRuleContext(OParser.LfsContext,0)

        def EOF(self):
            return self.getToken(OParser.EOF, 0)
        def declarations(self):
            return self.getTypedRuleContext(OParser.DeclarationsContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFullDeclarationList" ):
                listener.enterFullDeclarationList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFullDeclarationList" ):
                listener.exitFullDeclarationList(self)



    def declaration_list(self):

        localctx = OParser.Declaration_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_declaration_list)
        self._la = 0 # Token type
        try:
            localctx = OParser.FullDeclarationListContext(self, localctx)
            self.enterOuterAlt(localctx, 1)
            self.state = 1535
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << OParser.COMMENT) | (1 << OParser.BOOLEAN) | (1 << OParser.CSS) | (1 << OParser.CHARACTER) | (1 << OParser.TEXT) | (1 << OParser.INTEGER) | (1 << OParser.DECIMAL) | (1 << OParser.DATE) | (1 << OParser.TIME) | (1 << OParser.DATETIME) | (1 << OParser.PERIOD) | (1 << OParser.VERSION) | (1 << OParser.CODE) | (1 << OParser.DOCUMENT) | (1 << OParser.BLOB) | (1 << OParser.IMAGE))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (OParser.UUID - 64)) | (1 << (OParser.ITERATOR - 64)) | (1 << (OParser.CURSOR - 64)) | (1 << (OParser.HTML - 64)) | (1 << (OParser.ABSTRACT - 64)) | (1 << (OParser.ANY - 64)) | (1 << (OParser.ATTRIBUTE - 64)) | (1 << (OParser.CATEGORY - 64)) | (1 << (OParser.ENUMERATED - 64)) | (1 << (OParser.METHOD - 64)) | (1 << (OParser.MUTABLE - 64)) | (1 << (OParser.NATIVE - 64)))) != 0) or ((((_la - 142)) & ~0x3f) == 0 and ((1 << (_la - 142)) & ((1 << (OParser.SINGLETON - 142)) | (1 << (OParser.STORABLE - 142)) | (1 << (OParser.TEST - 142)) | (1 << (OParser.WIDGET - 142)) | (1 << (OParser.TYPE_IDENTIFIER - 142)) | (1 << (OParser.ARONDBASE_IDENTIFIER - 142)))) != 0):
                self.state = 1534
                self.declarations()


            self.state = 1537
            self.lfs()
            self.state = 1538
            self.match(OParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DeclarationsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(OParser.DeclarationContext)
            else:
                return self.getTypedRuleContext(OParser.DeclarationContext,i)


        def lfp(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(OParser.LfpContext)
            else:
                return self.getTypedRuleContext(OParser.LfpContext,i)


        def getRuleIndex(self):
            return OParser.RULE_declarations

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclarations" ):
                listener.enterDeclarations(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclarations" ):
                listener.exitDeclarations(self)




    def declarations(self):

        localctx = OParser.DeclarationsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_declarations)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1540
            self.declaration()
            self.state = 1546
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << OParser.COMMENT) | (1 << OParser.BOOLEAN) | (1 << OParser.CSS) | (1 << OParser.CHARACTER) | (1 << OParser.TEXT) | (1 << OParser.INTEGER) | (1 << OParser.DECIMAL) | (1 << OParser.DATE) | (1 << OParser.TIME) | (1 << OParser.DATETIME) | (1 << OParser.PERIOD) | (1 << OParser.VERSION) | (1 << OParser.CODE) | (1 << OParser.DOCUMENT) | (1 << OParser.BLOB) | (1 << OParser.IMAGE))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (OParser.UUID - 64)) | (1 << (OParser.ITERATOR - 64)) | (1 << (OParser.CURSOR - 64)) | (1 << (OParser.HTML - 64)) | (1 << (OParser.ABSTRACT - 64)) | (1 << (OParser.ANY - 64)) | (1 << (OParser.ATTRIBUTE - 64)) | (1 << (OParser.CATEGORY - 64)) | (1 << (OParser.ENUMERATED - 64)) | (1 << (OParser.METHOD - 64)) | (1 << (OParser.MUTABLE - 64)) | (1 << (OParser.NATIVE - 64)))) != 0) or ((((_la - 142)) & ~0x3f) == 0 and ((1 << (_la - 142)) & ((1 << (OParser.SINGLETON - 142)) | (1 << (OParser.STORABLE - 142)) | (1 << (OParser.TEST - 142)) | (1 << (OParser.WIDGET - 142)) | (1 << (OParser.TYPE_IDENTIFIER - 142)) | (1 << (OParser.ARONDBASE_IDENTIFIER - 142)))) != 0):
                self.state = 1541
                self.lfp()
                self.state = 1542
                self.declaration()
                self.state = 1548
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def attribute_declaration(self):
            return self.getTypedRuleContext(OParser.Attribute_declarationContext,0)


        def category_declaration(self):
            return self.getTypedRuleContext(OParser.Category_declarationContext,0)


        def resource_declaration(self):
            return self.getTypedRuleContext(OParser.Resource_declarationContext,0)


        def enum_declaration(self):
            return self.getTypedRuleContext(OParser.Enum_declarationContext,0)


        def widget_declaration(self):
            return self.getTypedRuleContext(OParser.Widget_declarationContext,0)


        def method_declaration(self):
            return self.getTypedRuleContext(OParser.Method_declarationContext,0)


        def comment_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(OParser.Comment_statementContext)
            else:
                return self.getTypedRuleContext(OParser.Comment_statementContext,i)


        def lfp(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(OParser.LfpContext)
            else:
                return self.getTypedRuleContext(OParser.LfpContext,i)


        def annotation_constructor(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(OParser.Annotation_constructorContext)
            else:
                return self.getTypedRuleContext(OParser.Annotation_constructorContext,i)


        def getRuleIndex(self):
            return OParser.RULE_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclaration" ):
                listener.enterDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclaration" ):
                listener.exitDeclaration(self)




    def declaration(self):

        localctx = OParser.DeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1554
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==OParser.COMMENT:
                self.state = 1549
                self.comment_statement()
                self.state = 1550
                self.lfp()
                self.state = 1556
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1562
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==OParser.ARONDBASE_IDENTIFIER:
                self.state = 1557
                self.annotation_constructor()
                self.state = 1558
                self.lfp()
                self.state = 1564
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1571
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,109,self._ctx)
            if la_ == 1:
                self.state = 1565
                self.attribute_declaration()
                pass

            elif la_ == 2:
                self.state = 1566
                self.category_declaration()
                pass

            elif la_ == 3:
                self.state = 1567
                self.resource_declaration()
                pass

            elif la_ == 4:
                self.state = 1568
                self.enum_declaration()
                pass

            elif la_ == 5:
                self.state = 1569
                self.widget_declaration()
                pass

            elif la_ == 6:
                self.state = 1570
                self.method_declaration()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Annotation_constructorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # Annotation_identifierContext
            self.exp = None # Annotation_argument_valueContext

        def annotation_identifier(self):
            return self.getTypedRuleContext(OParser.Annotation_identifierContext,0)


        def LPAR(self):
            return self.getToken(OParser.LPAR, 0)

        def RPAR(self):
            return self.getToken(OParser.RPAR, 0)

        def annotation_argument_value(self):
            return self.getTypedRuleContext(OParser.Annotation_argument_valueContext,0)


        def annotation_argument(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(OParser.Annotation_argumentContext)
            else:
                return self.getTypedRuleContext(OParser.Annotation_argumentContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(OParser.COMMA)
            else:
                return self.getToken(OParser.COMMA, i)

        def getRuleIndex(self):
            return OParser.RULE_annotation_constructor

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnnotation_constructor" ):
                listener.enterAnnotation_constructor(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnnotation_constructor" ):
                listener.exitAnnotation_constructor(self)




    def annotation_constructor(self):

        localctx = OParser.Annotation_constructorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_annotation_constructor)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1573
            localctx.name = self.annotation_identifier()
            self.state = 1588
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==OParser.LPAR:
                self.state = 1574
                self.match(OParser.LPAR)
                self.state = 1584
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [OParser.LPAR, OParser.LBRAK, OParser.LCURL, OParser.LT, OParser.LTCOLONGT, OParser.BOOLEAN, OParser.CSS, OParser.CHARACTER, OParser.TEXT, OParser.INTEGER, OParser.DECIMAL, OParser.DATE, OParser.TIME, OParser.DATETIME, OParser.PERIOD, OParser.VERSION, OParser.CODE, OParser.DOCUMENT, OParser.BLOB, OParser.IMAGE, OParser.UUID, OParser.ITERATOR, OParser.CURSOR, OParser.HTML, OParser.ANY, OParser.MUTABLE, OParser.NULL, OParser.BOOLEAN_LITERAL, OParser.CHAR_LITERAL, OParser.MIN_INTEGER, OParser.MAX_INTEGER, OParser.SYMBOL_IDENTIFIER, OParser.TYPE_IDENTIFIER, OParser.TEXT_LITERAL, OParser.UUID_LITERAL, OParser.INTEGER_LITERAL, OParser.HEXA_LITERAL, OParser.DECIMAL_LITERAL, OParser.DATETIME_LITERAL, OParser.TIME_LITERAL, OParser.DATE_LITERAL, OParser.PERIOD_LITERAL, OParser.VERSION_LITERAL]:
                    self.state = 1575
                    localctx.exp = self.annotation_argument_value()
                    pass
                elif token in [OParser.GETTER, OParser.SETTER, OParser.VARIABLE_IDENTIFIER]:
                    self.state = 1576
                    self.annotation_argument()
                    self.state = 1581
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==OParser.COMMA:
                        self.state = 1577
                        self.match(OParser.COMMA)
                        self.state = 1578
                        self.annotation_argument()
                        self.state = 1583
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1586
                self.match(OParser.RPAR)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Annotation_identifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ARONDBASE_IDENTIFIER(self):
            return self.getToken(OParser.ARONDBASE_IDENTIFIER, 0)

        def getRuleIndex(self):
            return OParser.RULE_annotation_identifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnnotation_identifier" ):
                listener.enterAnnotation_identifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnnotation_identifier" ):
                listener.exitAnnotation_identifier(self)




    def annotation_identifier(self):

        localctx = OParser.Annotation_identifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_annotation_identifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1590
            self.match(OParser.ARONDBASE_IDENTIFIER)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Annotation_argumentContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # Annotation_argument_nameContext
            self.exp = None # Annotation_argument_valueContext

        def EQ(self):
            return self.getToken(OParser.EQ, 0)

        def annotation_argument_name(self):
            return self.getTypedRuleContext(OParser.Annotation_argument_nameContext,0)


        def annotation_argument_value(self):
            return self.getTypedRuleContext(OParser.Annotation_argument_valueContext,0)


        def getRuleIndex(self):
            return OParser.RULE_annotation_argument

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnnotation_argument" ):
                listener.enterAnnotation_argument(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnnotation_argument" ):
                listener.exitAnnotation_argument(self)




    def annotation_argument(self):

        localctx = OParser.Annotation_argumentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_annotation_argument)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1592
            localctx.name = self.annotation_argument_name()
            self.state = 1593
            self.match(OParser.EQ)
            self.state = 1594
            localctx.exp = self.annotation_argument_value()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Annotation_argument_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VARIABLE_IDENTIFIER(self):
            return self.getToken(OParser.VARIABLE_IDENTIFIER, 0)

        def GETTER(self):
            return self.getToken(OParser.GETTER, 0)

        def SETTER(self):
            return self.getToken(OParser.SETTER, 0)

        def getRuleIndex(self):
            return OParser.RULE_annotation_argument_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnnotation_argument_name" ):
                listener.enterAnnotation_argument_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnnotation_argument_name" ):
                listener.exitAnnotation_argument_name(self)




    def annotation_argument_name(self):

        localctx = OParser.Annotation_argument_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_annotation_argument_name)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1596
            _la = self._input.LA(1)
            if not(((((_la - 109)) & ~0x3f) == 0 and ((1 << (_la - 109)) & ((1 << (OParser.GETTER - 109)) | (1 << (OParser.SETTER - 109)) | (1 << (OParser.VARIABLE_IDENTIFIER - 109)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Annotation_argument_valueContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return OParser.RULE_annotation_argument_value

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class AnnotationLiteralValueContext(Annotation_argument_valueContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Annotation_argument_valueContext
            super().__init__(parser)
            self.exp = None # Literal_expressionContext
            self.copyFrom(ctx)

        def literal_expression(self):
            return self.getTypedRuleContext(OParser.Literal_expressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnnotationLiteralValue" ):
                listener.enterAnnotationLiteralValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnnotationLiteralValue" ):
                listener.exitAnnotationLiteralValue(self)


    class AnnotationTypeValueContext(Annotation_argument_valueContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Annotation_argument_valueContext
            super().__init__(parser)
            self.typ = None # Primary_typeContext
            self.copyFrom(ctx)

        def primary_type(self):
            return self.getTypedRuleContext(OParser.Primary_typeContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnnotationTypeValue" ):
                listener.enterAnnotationTypeValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnnotationTypeValue" ):
                listener.exitAnnotationTypeValue(self)



    def annotation_argument_value(self):

        localctx = OParser.Annotation_argument_valueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_annotation_argument_value)
        try:
            self.state = 1600
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,113,self._ctx)
            if la_ == 1:
                localctx = OParser.AnnotationLiteralValueContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1598
                localctx.exp = self.literal_expression()
                pass

            elif la_ == 2:
                localctx = OParser.AnnotationTypeValueContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1599
                localctx.typ = self.primary_type()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Resource_declarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def native_resource_declaration(self):
            return self.getTypedRuleContext(OParser.Native_resource_declarationContext,0)


        def getRuleIndex(self):
            return OParser.RULE_resource_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterResource_declaration" ):
                listener.enterResource_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitResource_declaration" ):
                listener.exitResource_declaration(self)




    def resource_declaration(self):

        localctx = OParser.Resource_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_resource_declaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1602
            self.native_resource_declaration()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Enum_declarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def enum_category_declaration(self):
            return self.getTypedRuleContext(OParser.Enum_category_declarationContext,0)


        def enum_native_declaration(self):
            return self.getTypedRuleContext(OParser.Enum_native_declarationContext,0)


        def getRuleIndex(self):
            return OParser.RULE_enum_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnum_declaration" ):
                listener.enterEnum_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnum_declaration" ):
                listener.exitEnum_declaration(self)




    def enum_declaration(self):

        localctx = OParser.Enum_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_enum_declaration)
        try:
            self.state = 1606
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,114,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1604
                self.enum_category_declaration()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1605
                self.enum_native_declaration()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Native_symbol_listContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def native_symbol(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(OParser.Native_symbolContext)
            else:
                return self.getTypedRuleContext(OParser.Native_symbolContext,i)


        def lfp(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(OParser.LfpContext)
            else:
                return self.getTypedRuleContext(OParser.LfpContext,i)


        def getRuleIndex(self):
            return OParser.RULE_native_symbol_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNative_symbol_list" ):
                listener.enterNative_symbol_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNative_symbol_list" ):
                listener.exitNative_symbol_list(self)




    def native_symbol_list(self):

        localctx = OParser.Native_symbol_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_native_symbol_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1608
            self.native_symbol()
            self.state = 1614
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==OParser.SYMBOL_IDENTIFIER:
                self.state = 1609
                self.lfp()
                self.state = 1610
                self.native_symbol()
                self.state = 1616
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Category_symbol_listContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def category_symbol(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(OParser.Category_symbolContext)
            else:
                return self.getTypedRuleContext(OParser.Category_symbolContext,i)


        def lfp(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(OParser.LfpContext)
            else:
                return self.getTypedRuleContext(OParser.LfpContext,i)


        def getRuleIndex(self):
            return OParser.RULE_category_symbol_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCategory_symbol_list" ):
                listener.enterCategory_symbol_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCategory_symbol_list" ):
                listener.exitCategory_symbol_list(self)




    def category_symbol_list(self):

        localctx = OParser.Category_symbol_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_category_symbol_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1617
            self.category_symbol()
            self.state = 1623
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==OParser.SYMBOL_IDENTIFIER:
                self.state = 1618
                self.lfp()
                self.state = 1619
                self.category_symbol()
                self.state = 1625
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Symbol_listContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def symbol_identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(OParser.Symbol_identifierContext)
            else:
                return self.getTypedRuleContext(OParser.Symbol_identifierContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(OParser.COMMA)
            else:
                return self.getToken(OParser.COMMA, i)

        def getRuleIndex(self):
            return OParser.RULE_symbol_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSymbol_list" ):
                listener.enterSymbol_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSymbol_list" ):
                listener.exitSymbol_list(self)




    def symbol_list(self):

        localctx = OParser.Symbol_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_symbol_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1626
            self.symbol_identifier()
            self.state = 1631
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==OParser.COMMA:
                self.state = 1627
                self.match(OParser.COMMA)
                self.state = 1628
                self.symbol_identifier()
                self.state = 1633
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Attribute_constraintContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return OParser.RULE_attribute_constraint

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class MatchingSetContext(Attribute_constraintContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Attribute_constraintContext
            super().__init__(parser)
            self.source = None # Set_literalContext
            self.copyFrom(ctx)

        def IN(self):
            return self.getToken(OParser.IN, 0)
        def set_literal(self):
            return self.getTypedRuleContext(OParser.Set_literalContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMatchingSet" ):
                listener.enterMatchingSet(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMatchingSet" ):
                listener.exitMatchingSet(self)


    class MatchingPatternContext(Attribute_constraintContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Attribute_constraintContext
            super().__init__(parser)
            self.text = None # Token
            self.copyFrom(ctx)

        def MATCHING(self):
            return self.getToken(OParser.MATCHING, 0)
        def TEXT_LITERAL(self):
            return self.getToken(OParser.TEXT_LITERAL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMatchingPattern" ):
                listener.enterMatchingPattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMatchingPattern" ):
                listener.exitMatchingPattern(self)


    class MatchingListContext(Attribute_constraintContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Attribute_constraintContext
            super().__init__(parser)
            self.source = None # List_literalContext
            self.copyFrom(ctx)

        def IN(self):
            return self.getToken(OParser.IN, 0)
        def list_literal(self):
            return self.getTypedRuleContext(OParser.List_literalContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMatchingList" ):
                listener.enterMatchingList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMatchingList" ):
                listener.exitMatchingList(self)


    class MatchingRangeContext(Attribute_constraintContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Attribute_constraintContext
            super().__init__(parser)
            self.source = None # Range_literalContext
            self.copyFrom(ctx)

        def IN(self):
            return self.getToken(OParser.IN, 0)
        def range_literal(self):
            return self.getTypedRuleContext(OParser.Range_literalContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMatchingRange" ):
                listener.enterMatchingRange(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMatchingRange" ):
                listener.exitMatchingRange(self)


    class MatchingExpressionContext(Attribute_constraintContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Attribute_constraintContext
            super().__init__(parser)
            self.exp = None # ExpressionContext
            self.copyFrom(ctx)

        def MATCHING(self):
            return self.getToken(OParser.MATCHING, 0)
        def expression(self):
            return self.getTypedRuleContext(OParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMatchingExpression" ):
                listener.enterMatchingExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMatchingExpression" ):
                listener.exitMatchingExpression(self)



    def attribute_constraint(self):

        localctx = OParser.Attribute_constraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_attribute_constraint)
        try:
            self.state = 1644
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,118,self._ctx)
            if la_ == 1:
                localctx = OParser.MatchingListContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1634
                self.match(OParser.IN)
                self.state = 1635
                localctx.source = self.list_literal()
                pass

            elif la_ == 2:
                localctx = OParser.MatchingSetContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1636
                self.match(OParser.IN)
                self.state = 1637
                localctx.source = self.set_literal()
                pass

            elif la_ == 3:
                localctx = OParser.MatchingRangeContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 1638
                self.match(OParser.IN)
                self.state = 1639
                localctx.source = self.range_literal()
                pass

            elif la_ == 4:
                localctx = OParser.MatchingPatternContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 1640
                self.match(OParser.MATCHING)
                self.state = 1641
                localctx.text = self.match(OParser.TEXT_LITERAL)
                pass

            elif la_ == 5:
                localctx = OParser.MatchingExpressionContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 1642
                self.match(OParser.MATCHING)
                self.state = 1643
                localctx.exp = self.expression(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class List_literalContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRAK(self):
            return self.getToken(OParser.LBRAK, 0)

        def RBRAK(self):
            return self.getToken(OParser.RBRAK, 0)

        def MUTABLE(self):
            return self.getToken(OParser.MUTABLE, 0)

        def expression_list(self):
            return self.getTypedRuleContext(OParser.Expression_listContext,0)


        def getRuleIndex(self):
            return OParser.RULE_list_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterList_literal" ):
                listener.enterList_literal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitList_literal" ):
                listener.exitList_literal(self)




    def list_literal(self):

        localctx = OParser.List_literalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_list_literal)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1647
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==OParser.MUTABLE:
                self.state = 1646
                self.match(OParser.MUTABLE)


            self.state = 1649
            self.match(OParser.LBRAK)
            self.state = 1651
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << OParser.LPAR) | (1 << OParser.LBRAK) | (1 << OParser.LCURL) | (1 << OParser.XMARK) | (1 << OParser.MINUS) | (1 << OParser.LT) | (1 << OParser.LTGT) | (1 << OParser.LTCOLONGT) | (1 << OParser.BOOLEAN) | (1 << OParser.CSS) | (1 << OParser.CHARACTER) | (1 << OParser.TEXT) | (1 << OParser.INTEGER) | (1 << OParser.DECIMAL) | (1 << OParser.DATE) | (1 << OParser.TIME) | (1 << OParser.DATETIME) | (1 << OParser.PERIOD) | (1 << OParser.VERSION) | (1 << OParser.CODE) | (1 << OParser.DOCUMENT) | (1 << OParser.BLOB) | (1 << OParser.IMAGE))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (OParser.UUID - 64)) | (1 << (OParser.ITERATOR - 64)) | (1 << (OParser.CURSOR - 64)) | (1 << (OParser.HTML - 64)) | (1 << (OParser.ANY - 64)) | (1 << (OParser.EXECUTE - 64)) | (1 << (OParser.FETCH - 64)) | (1 << (OParser.FILTERED - 64)) | (1 << (OParser.MUTABLE - 64)) | (1 << (OParser.NULL - 64)))) != 0) or ((((_la - 134)) & ~0x3f) == 0 and ((1 << (_la - 134)) & ((1 << (OParser.READ - 134)) | (1 << (OParser.SELF - 134)) | (1 << (OParser.SORTED - 134)) | (1 << (OParser.SUPER - 134)) | (1 << (OParser.THIS - 134)) | (1 << (OParser.BOOLEAN_LITERAL - 134)) | (1 << (OParser.CHAR_LITERAL - 134)) | (1 << (OParser.MIN_INTEGER - 134)) | (1 << (OParser.MAX_INTEGER - 134)) | (1 << (OParser.SYMBOL_IDENTIFIER - 134)) | (1 << (OParser.TYPE_IDENTIFIER - 134)) | (1 << (OParser.VARIABLE_IDENTIFIER - 134)) | (1 << (OParser.TEXT_LITERAL - 134)) | (1 << (OParser.UUID_LITERAL - 134)) | (1 << (OParser.INTEGER_LITERAL - 134)) | (1 << (OParser.HEXA_LITERAL - 134)) | (1 << (OParser.DECIMAL_LITERAL - 134)) | (1 << (OParser.DATETIME_LITERAL - 134)) | (1 << (OParser.TIME_LITERAL - 134)) | (1 << (OParser.DATE_LITERAL - 134)) | (1 << (OParser.PERIOD_LITERAL - 134)) | (1 << (OParser.VERSION_LITERAL - 134)))) != 0):
                self.state = 1650
                self.expression_list()


            self.state = 1653
            self.match(OParser.RBRAK)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Set_literalContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LT(self):
            return self.getToken(OParser.LT, 0)

        def GT(self):
            return self.getToken(OParser.GT, 0)

        def MUTABLE(self):
            return self.getToken(OParser.MUTABLE, 0)

        def expression_list(self):
            return self.getTypedRuleContext(OParser.Expression_listContext,0)


        def getRuleIndex(self):
            return OParser.RULE_set_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSet_literal" ):
                listener.enterSet_literal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSet_literal" ):
                listener.exitSet_literal(self)




    def set_literal(self):

        localctx = OParser.Set_literalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_set_literal)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1656
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==OParser.MUTABLE:
                self.state = 1655
                self.match(OParser.MUTABLE)


            self.state = 1658
            self.match(OParser.LT)
            self.state = 1660
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << OParser.LPAR) | (1 << OParser.LBRAK) | (1 << OParser.LCURL) | (1 << OParser.XMARK) | (1 << OParser.MINUS) | (1 << OParser.LT) | (1 << OParser.LTGT) | (1 << OParser.LTCOLONGT) | (1 << OParser.BOOLEAN) | (1 << OParser.CSS) | (1 << OParser.CHARACTER) | (1 << OParser.TEXT) | (1 << OParser.INTEGER) | (1 << OParser.DECIMAL) | (1 << OParser.DATE) | (1 << OParser.TIME) | (1 << OParser.DATETIME) | (1 << OParser.PERIOD) | (1 << OParser.VERSION) | (1 << OParser.CODE) | (1 << OParser.DOCUMENT) | (1 << OParser.BLOB) | (1 << OParser.IMAGE))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (OParser.UUID - 64)) | (1 << (OParser.ITERATOR - 64)) | (1 << (OParser.CURSOR - 64)) | (1 << (OParser.HTML - 64)) | (1 << (OParser.ANY - 64)) | (1 << (OParser.EXECUTE - 64)) | (1 << (OParser.FETCH - 64)) | (1 << (OParser.FILTERED - 64)) | (1 << (OParser.MUTABLE - 64)) | (1 << (OParser.NULL - 64)))) != 0) or ((((_la - 134)) & ~0x3f) == 0 and ((1 << (_la - 134)) & ((1 << (OParser.READ - 134)) | (1 << (OParser.SELF - 134)) | (1 << (OParser.SORTED - 134)) | (1 << (OParser.SUPER - 134)) | (1 << (OParser.THIS - 134)) | (1 << (OParser.BOOLEAN_LITERAL - 134)) | (1 << (OParser.CHAR_LITERAL - 134)) | (1 << (OParser.MIN_INTEGER - 134)) | (1 << (OParser.MAX_INTEGER - 134)) | (1 << (OParser.SYMBOL_IDENTIFIER - 134)) | (1 << (OParser.TYPE_IDENTIFIER - 134)) | (1 << (OParser.VARIABLE_IDENTIFIER - 134)) | (1 << (OParser.TEXT_LITERAL - 134)) | (1 << (OParser.UUID_LITERAL - 134)) | (1 << (OParser.INTEGER_LITERAL - 134)) | (1 << (OParser.HEXA_LITERAL - 134)) | (1 << (OParser.DECIMAL_LITERAL - 134)) | (1 << (OParser.DATETIME_LITERAL - 134)) | (1 << (OParser.TIME_LITERAL - 134)) | (1 << (OParser.DATE_LITERAL - 134)) | (1 << (OParser.PERIOD_LITERAL - 134)) | (1 << (OParser.VERSION_LITERAL - 134)))) != 0):
                self.state = 1659
                self.expression_list()


            self.state = 1662
            self.match(OParser.GT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Expression_listContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(OParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(OParser.ExpressionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(OParser.COMMA)
            else:
                return self.getToken(OParser.COMMA, i)

        def getRuleIndex(self):
            return OParser.RULE_expression_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpression_list" ):
                listener.enterExpression_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpression_list" ):
                listener.exitExpression_list(self)




    def expression_list(self):

        localctx = OParser.Expression_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_expression_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1664
            self.expression(0)
            self.state = 1669
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==OParser.COMMA:
                self.state = 1665
                self.match(OParser.COMMA)
                self.state = 1666
                self.expression(0)
                self.state = 1671
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Range_literalContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.low = None # ExpressionContext
            self.high = None # ExpressionContext

        def LBRAK(self):
            return self.getToken(OParser.LBRAK, 0)

        def RANGE(self):
            return self.getToken(OParser.RANGE, 0)

        def RBRAK(self):
            return self.getToken(OParser.RBRAK, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(OParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(OParser.ExpressionContext,i)


        def getRuleIndex(self):
            return OParser.RULE_range_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRange_literal" ):
                listener.enterRange_literal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRange_literal" ):
                listener.exitRange_literal(self)




    def range_literal(self):

        localctx = OParser.Range_literalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_range_literal)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1672
            self.match(OParser.LBRAK)
            self.state = 1673
            localctx.low = self.expression(0)
            self.state = 1674
            self.match(OParser.RANGE)
            self.state = 1675
            localctx.high = self.expression(0)
            self.state = 1676
            self.match(OParser.RBRAK)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TypedefContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return OParser.RULE_typedef

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class IteratorTypeContext(TypedefContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.TypedefContext
            super().__init__(parser)
            self.i = None # TypedefContext
            self.copyFrom(ctx)

        def ITERATOR(self):
            return self.getToken(OParser.ITERATOR, 0)
        def LT(self):
            return self.getToken(OParser.LT, 0)
        def GT(self):
            return self.getToken(OParser.GT, 0)
        def typedef(self):
            return self.getTypedRuleContext(OParser.TypedefContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIteratorType" ):
                listener.enterIteratorType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIteratorType" ):
                listener.exitIteratorType(self)


    class SetTypeContext(TypedefContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.TypedefContext
            super().__init__(parser)
            self.s = None # TypedefContext
            self.copyFrom(ctx)

        def LTGT(self):
            return self.getToken(OParser.LTGT, 0)
        def typedef(self):
            return self.getTypedRuleContext(OParser.TypedefContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetType" ):
                listener.enterSetType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetType" ):
                listener.exitSetType(self)


    class ListTypeContext(TypedefContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.TypedefContext
            super().__init__(parser)
            self.l = None # TypedefContext
            self.copyFrom(ctx)

        def LBRAK(self):
            return self.getToken(OParser.LBRAK, 0)
        def RBRAK(self):
            return self.getToken(OParser.RBRAK, 0)
        def typedef(self):
            return self.getTypedRuleContext(OParser.TypedefContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterListType" ):
                listener.enterListType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitListType" ):
                listener.exitListType(self)


    class DictTypeContext(TypedefContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.TypedefContext
            super().__init__(parser)
            self.d = None # TypedefContext
            self.copyFrom(ctx)

        def LTCOLONGT(self):
            return self.getToken(OParser.LTCOLONGT, 0)
        def typedef(self):
            return self.getTypedRuleContext(OParser.TypedefContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDictType" ):
                listener.enterDictType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDictType" ):
                listener.exitDictType(self)


    class CursorTypeContext(TypedefContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.TypedefContext
            super().__init__(parser)
            self.c = None # TypedefContext
            self.copyFrom(ctx)

        def CURSOR(self):
            return self.getToken(OParser.CURSOR, 0)
        def LT(self):
            return self.getToken(OParser.LT, 0)
        def GT(self):
            return self.getToken(OParser.GT, 0)
        def typedef(self):
            return self.getTypedRuleContext(OParser.TypedefContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCursorType" ):
                listener.enterCursorType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCursorType" ):
                listener.exitCursorType(self)


    class PrimaryTypeContext(TypedefContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.TypedefContext
            super().__init__(parser)
            self.p = None # Primary_typeContext
            self.copyFrom(ctx)

        def primary_type(self):
            return self.getTypedRuleContext(OParser.Primary_typeContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrimaryType" ):
                listener.enterPrimaryType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrimaryType" ):
                listener.exitPrimaryType(self)



    def typedef(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = OParser.TypedefContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 182
        self.enterRecursionRule(localctx, 182, self.RULE_typedef, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1690
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [OParser.BOOLEAN, OParser.CSS, OParser.CHARACTER, OParser.TEXT, OParser.INTEGER, OParser.DECIMAL, OParser.DATE, OParser.TIME, OParser.DATETIME, OParser.PERIOD, OParser.VERSION, OParser.CODE, OParser.DOCUMENT, OParser.BLOB, OParser.IMAGE, OParser.UUID, OParser.HTML, OParser.TYPE_IDENTIFIER]:
                localctx = OParser.PrimaryTypeContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx

                self.state = 1679
                localctx.p = self.primary_type()
                pass
            elif token in [OParser.CURSOR]:
                localctx = OParser.CursorTypeContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1680
                self.match(OParser.CURSOR)
                self.state = 1681
                self.match(OParser.LT)
                self.state = 1682
                localctx.c = self.typedef(0)
                self.state = 1683
                self.match(OParser.GT)
                pass
            elif token in [OParser.ITERATOR]:
                localctx = OParser.IteratorTypeContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1685
                self.match(OParser.ITERATOR)
                self.state = 1686
                self.match(OParser.LT)
                self.state = 1687
                localctx.i = self.typedef(0)
                self.state = 1688
                self.match(OParser.GT)
                pass
            else:
                raise NoViableAltException(self)

            self._ctx.stop = self._input.LT(-1)
            self.state = 1701
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,126,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 1699
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,125,self._ctx)
                    if la_ == 1:
                        localctx = OParser.SetTypeContext(self, OParser.TypedefContext(self, _parentctx, _parentState))
                        localctx.s = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_typedef)
                        self.state = 1692
                        if not self.precpred(self._ctx, 5):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 5)")
                        self.state = 1693
                        self.match(OParser.LTGT)
                        pass

                    elif la_ == 2:
                        localctx = OParser.ListTypeContext(self, OParser.TypedefContext(self, _parentctx, _parentState))
                        localctx.l = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_typedef)
                        self.state = 1694
                        if not self.precpred(self._ctx, 4):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 4)")
                        self.state = 1695
                        self.match(OParser.LBRAK)
                        self.state = 1696
                        self.match(OParser.RBRAK)
                        pass

                    elif la_ == 3:
                        localctx = OParser.DictTypeContext(self, OParser.TypedefContext(self, _parentctx, _parentState))
                        localctx.d = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_typedef)
                        self.state = 1697
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 1698
                        self.match(OParser.LTCOLONGT)
                        pass

             
                self.state = 1703
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,126,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class Primary_typeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return OParser.RULE_primary_type

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class NativeTypeContext(Primary_typeContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Primary_typeContext
            super().__init__(parser)
            self.n = None # Native_typeContext
            self.copyFrom(ctx)

        def native_type(self):
            return self.getTypedRuleContext(OParser.Native_typeContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNativeType" ):
                listener.enterNativeType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNativeType" ):
                listener.exitNativeType(self)


    class CategoryTypeContext(Primary_typeContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Primary_typeContext
            super().__init__(parser)
            self.c = None # Category_typeContext
            self.copyFrom(ctx)

        def category_type(self):
            return self.getTypedRuleContext(OParser.Category_typeContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCategoryType" ):
                listener.enterCategoryType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCategoryType" ):
                listener.exitCategoryType(self)



    def primary_type(self):

        localctx = OParser.Primary_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_primary_type)
        try:
            self.state = 1706
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [OParser.BOOLEAN, OParser.CSS, OParser.CHARACTER, OParser.TEXT, OParser.INTEGER, OParser.DECIMAL, OParser.DATE, OParser.TIME, OParser.DATETIME, OParser.PERIOD, OParser.VERSION, OParser.CODE, OParser.DOCUMENT, OParser.BLOB, OParser.IMAGE, OParser.UUID, OParser.HTML]:
                localctx = OParser.NativeTypeContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1704
                localctx.n = self.native_type()
                pass
            elif token in [OParser.TYPE_IDENTIFIER]:
                localctx = OParser.CategoryTypeContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1705
                localctx.c = self.category_type()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Native_typeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return OParser.RULE_native_type

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class PeriodTypeContext(Native_typeContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Native_typeContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def PERIOD(self):
            return self.getToken(OParser.PERIOD, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPeriodType" ):
                listener.enterPeriodType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPeriodType" ):
                listener.exitPeriodType(self)


    class HtmlTypeContext(Native_typeContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Native_typeContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def HTML(self):
            return self.getToken(OParser.HTML, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHtmlType" ):
                listener.enterHtmlType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHtmlType" ):
                listener.exitHtmlType(self)


    class CssTypeContext(Native_typeContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Native_typeContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CSS(self):
            return self.getToken(OParser.CSS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCssType" ):
                listener.enterCssType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCssType" ):
                listener.exitCssType(self)


    class BooleanTypeContext(Native_typeContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Native_typeContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def BOOLEAN(self):
            return self.getToken(OParser.BOOLEAN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBooleanType" ):
                listener.enterBooleanType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBooleanType" ):
                listener.exitBooleanType(self)


    class DocumentTypeContext(Native_typeContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Native_typeContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DOCUMENT(self):
            return self.getToken(OParser.DOCUMENT, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDocumentType" ):
                listener.enterDocumentType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDocumentType" ):
                listener.exitDocumentType(self)


    class CharacterTypeContext(Native_typeContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Native_typeContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CHARACTER(self):
            return self.getToken(OParser.CHARACTER, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCharacterType" ):
                listener.enterCharacterType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCharacterType" ):
                listener.exitCharacterType(self)


    class VersionTypeContext(Native_typeContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Native_typeContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def VERSION(self):
            return self.getToken(OParser.VERSION, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVersionType" ):
                listener.enterVersionType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVersionType" ):
                listener.exitVersionType(self)


    class TextTypeContext(Native_typeContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Native_typeContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def TEXT(self):
            return self.getToken(OParser.TEXT, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTextType" ):
                listener.enterTextType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTextType" ):
                listener.exitTextType(self)


    class ImageTypeContext(Native_typeContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Native_typeContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def IMAGE(self):
            return self.getToken(OParser.IMAGE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImageType" ):
                listener.enterImageType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImageType" ):
                listener.exitImageType(self)


    class TimeTypeContext(Native_typeContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Native_typeContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def TIME(self):
            return self.getToken(OParser.TIME, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTimeType" ):
                listener.enterTimeType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTimeType" ):
                listener.exitTimeType(self)


    class IntegerTypeContext(Native_typeContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Native_typeContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def INTEGER(self):
            return self.getToken(OParser.INTEGER, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIntegerType" ):
                listener.enterIntegerType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIntegerType" ):
                listener.exitIntegerType(self)


    class DateTimeTypeContext(Native_typeContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Native_typeContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DATETIME(self):
            return self.getToken(OParser.DATETIME, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDateTimeType" ):
                listener.enterDateTimeType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDateTimeType" ):
                listener.exitDateTimeType(self)


    class BlobTypeContext(Native_typeContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Native_typeContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def BLOB(self):
            return self.getToken(OParser.BLOB, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBlobType" ):
                listener.enterBlobType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBlobType" ):
                listener.exitBlobType(self)


    class UUIDTypeContext(Native_typeContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Native_typeContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def UUID(self):
            return self.getToken(OParser.UUID, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUUIDType" ):
                listener.enterUUIDType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUUIDType" ):
                listener.exitUUIDType(self)


    class DecimalTypeContext(Native_typeContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Native_typeContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DECIMAL(self):
            return self.getToken(OParser.DECIMAL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDecimalType" ):
                listener.enterDecimalType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDecimalType" ):
                listener.exitDecimalType(self)


    class CodeTypeContext(Native_typeContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Native_typeContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CODE(self):
            return self.getToken(OParser.CODE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCodeType" ):
                listener.enterCodeType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCodeType" ):
                listener.exitCodeType(self)


    class DateTypeContext(Native_typeContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Native_typeContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DATE(self):
            return self.getToken(OParser.DATE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDateType" ):
                listener.enterDateType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDateType" ):
                listener.exitDateType(self)



    def native_type(self):

        localctx = OParser.Native_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 186, self.RULE_native_type)
        try:
            self.state = 1725
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [OParser.BOOLEAN]:
                localctx = OParser.BooleanTypeContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1708
                self.match(OParser.BOOLEAN)
                pass
            elif token in [OParser.CSS]:
                localctx = OParser.CssTypeContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1709
                self.match(OParser.CSS)
                pass
            elif token in [OParser.CHARACTER]:
                localctx = OParser.CharacterTypeContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 1710
                self.match(OParser.CHARACTER)
                pass
            elif token in [OParser.TEXT]:
                localctx = OParser.TextTypeContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 1711
                self.match(OParser.TEXT)
                pass
            elif token in [OParser.IMAGE]:
                localctx = OParser.ImageTypeContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 1712
                self.match(OParser.IMAGE)
                pass
            elif token in [OParser.INTEGER]:
                localctx = OParser.IntegerTypeContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 1713
                self.match(OParser.INTEGER)
                pass
            elif token in [OParser.DECIMAL]:
                localctx = OParser.DecimalTypeContext(self, localctx)
                self.enterOuterAlt(localctx, 7)
                self.state = 1714
                self.match(OParser.DECIMAL)
                pass
            elif token in [OParser.DOCUMENT]:
                localctx = OParser.DocumentTypeContext(self, localctx)
                self.enterOuterAlt(localctx, 8)
                self.state = 1715
                self.match(OParser.DOCUMENT)
                pass
            elif token in [OParser.DATE]:
                localctx = OParser.DateTypeContext(self, localctx)
                self.enterOuterAlt(localctx, 9)
                self.state = 1716
                self.match(OParser.DATE)
                pass
            elif token in [OParser.DATETIME]:
                localctx = OParser.DateTimeTypeContext(self, localctx)
                self.enterOuterAlt(localctx, 10)
                self.state = 1717
                self.match(OParser.DATETIME)
                pass
            elif token in [OParser.TIME]:
                localctx = OParser.TimeTypeContext(self, localctx)
                self.enterOuterAlt(localctx, 11)
                self.state = 1718
                self.match(OParser.TIME)
                pass
            elif token in [OParser.PERIOD]:
                localctx = OParser.PeriodTypeContext(self, localctx)
                self.enterOuterAlt(localctx, 12)
                self.state = 1719
                self.match(OParser.PERIOD)
                pass
            elif token in [OParser.VERSION]:
                localctx = OParser.VersionTypeContext(self, localctx)
                self.enterOuterAlt(localctx, 13)
                self.state = 1720
                self.match(OParser.VERSION)
                pass
            elif token in [OParser.CODE]:
                localctx = OParser.CodeTypeContext(self, localctx)
                self.enterOuterAlt(localctx, 14)
                self.state = 1721
                self.match(OParser.CODE)
                pass
            elif token in [OParser.BLOB]:
                localctx = OParser.BlobTypeContext(self, localctx)
                self.enterOuterAlt(localctx, 15)
                self.state = 1722
                self.match(OParser.BLOB)
                pass
            elif token in [OParser.UUID]:
                localctx = OParser.UUIDTypeContext(self, localctx)
                self.enterOuterAlt(localctx, 16)
                self.state = 1723
                self.match(OParser.UUID)
                pass
            elif token in [OParser.HTML]:
                localctx = OParser.HtmlTypeContext(self, localctx)
                self.enterOuterAlt(localctx, 17)
                self.state = 1724
                self.match(OParser.HTML)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Category_typeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.t1 = None # Token

        def TYPE_IDENTIFIER(self):
            return self.getToken(OParser.TYPE_IDENTIFIER, 0)

        def getRuleIndex(self):
            return OParser.RULE_category_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCategory_type" ):
                listener.enterCategory_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCategory_type" ):
                listener.exitCategory_type(self)




    def category_type(self):

        localctx = OParser.Category_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 188, self.RULE_category_type)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1727
            localctx.t1 = self.match(OParser.TYPE_IDENTIFIER)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Mutable_category_typeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def category_type(self):
            return self.getTypedRuleContext(OParser.Category_typeContext,0)


        def MUTABLE(self):
            return self.getToken(OParser.MUTABLE, 0)

        def getRuleIndex(self):
            return OParser.RULE_mutable_category_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMutable_category_type" ):
                listener.enterMutable_category_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMutable_category_type" ):
                listener.exitMutable_category_type(self)




    def mutable_category_type(self):

        localctx = OParser.Mutable_category_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 190, self.RULE_mutable_category_type)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1730
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==OParser.MUTABLE:
                self.state = 1729
                self.match(OParser.MUTABLE)


            self.state = 1732
            self.category_type()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Code_typeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.t1 = None # Token

        def CODE(self):
            return self.getToken(OParser.CODE, 0)

        def getRuleIndex(self):
            return OParser.RULE_code_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCode_type" ):
                listener.enterCode_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCode_type" ):
                listener.exitCode_type(self)




    def code_type(self):

        localctx = OParser.Code_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 192, self.RULE_code_type)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1734
            localctx.t1 = self.match(OParser.CODE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Category_declarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return OParser.RULE_category_declaration

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class ConcreteCategoryDeclarationContext(Category_declarationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Category_declarationContext
            super().__init__(parser)
            self.decl = None # Concrete_category_declarationContext
            self.copyFrom(ctx)

        def concrete_category_declaration(self):
            return self.getTypedRuleContext(OParser.Concrete_category_declarationContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConcreteCategoryDeclaration" ):
                listener.enterConcreteCategoryDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConcreteCategoryDeclaration" ):
                listener.exitConcreteCategoryDeclaration(self)


    class NativeCategoryDeclarationContext(Category_declarationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Category_declarationContext
            super().__init__(parser)
            self.decl = None # Native_category_declarationContext
            self.copyFrom(ctx)

        def native_category_declaration(self):
            return self.getTypedRuleContext(OParser.Native_category_declarationContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNativeCategoryDeclaration" ):
                listener.enterNativeCategoryDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNativeCategoryDeclaration" ):
                listener.exitNativeCategoryDeclaration(self)


    class SingletonCategoryDeclarationContext(Category_declarationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Category_declarationContext
            super().__init__(parser)
            self.decl = None # Singleton_category_declarationContext
            self.copyFrom(ctx)

        def singleton_category_declaration(self):
            return self.getTypedRuleContext(OParser.Singleton_category_declarationContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSingletonCategoryDeclaration" ):
                listener.enterSingletonCategoryDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSingletonCategoryDeclaration" ):
                listener.exitSingletonCategoryDeclaration(self)



    def category_declaration(self):

        localctx = OParser.Category_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 194, self.RULE_category_declaration)
        try:
            self.state = 1739
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,130,self._ctx)
            if la_ == 1:
                localctx = OParser.ConcreteCategoryDeclarationContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1736
                localctx.decl = self.concrete_category_declaration()
                pass

            elif la_ == 2:
                localctx = OParser.NativeCategoryDeclarationContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1737
                localctx.decl = self.native_category_declaration()
                pass

            elif la_ == 3:
                localctx = OParser.SingletonCategoryDeclarationContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 1738
                localctx.decl = self.singleton_category_declaration()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Widget_declarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return OParser.RULE_widget_declaration

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class ConcreteWidgetDeclarationContext(Widget_declarationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Widget_declarationContext
            super().__init__(parser)
            self.decl = None # Concrete_widget_declarationContext
            self.copyFrom(ctx)

        def concrete_widget_declaration(self):
            return self.getTypedRuleContext(OParser.Concrete_widget_declarationContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConcreteWidgetDeclaration" ):
                listener.enterConcreteWidgetDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConcreteWidgetDeclaration" ):
                listener.exitConcreteWidgetDeclaration(self)


    class NativeWidgetDeclarationContext(Widget_declarationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Widget_declarationContext
            super().__init__(parser)
            self.decl = None # Native_widget_declarationContext
            self.copyFrom(ctx)

        def native_widget_declaration(self):
            return self.getTypedRuleContext(OParser.Native_widget_declarationContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNativeWidgetDeclaration" ):
                listener.enterNativeWidgetDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNativeWidgetDeclaration" ):
                listener.exitNativeWidgetDeclaration(self)



    def widget_declaration(self):

        localctx = OParser.Widget_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 196, self.RULE_widget_declaration)
        try:
            self.state = 1743
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [OParser.WIDGET]:
                localctx = OParser.ConcreteWidgetDeclarationContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1741
                localctx.decl = self.concrete_widget_declaration()
                pass
            elif token in [OParser.NATIVE]:
                localctx = OParser.NativeWidgetDeclarationContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1742
                localctx.decl = self.native_widget_declaration()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Type_identifier_listContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def type_identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(OParser.Type_identifierContext)
            else:
                return self.getTypedRuleContext(OParser.Type_identifierContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(OParser.COMMA)
            else:
                return self.getToken(OParser.COMMA, i)

        def getRuleIndex(self):
            return OParser.RULE_type_identifier_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterType_identifier_list" ):
                listener.enterType_identifier_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitType_identifier_list" ):
                listener.exitType_identifier_list(self)




    def type_identifier_list(self):

        localctx = OParser.Type_identifier_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 198, self.RULE_type_identifier_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1745
            self.type_identifier()
            self.state = 1750
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==OParser.COMMA:
                self.state = 1746
                self.match(OParser.COMMA)
                self.state = 1747
                self.type_identifier()
                self.state = 1752
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Method_identifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variable_identifier(self):
            return self.getTypedRuleContext(OParser.Variable_identifierContext,0)


        def type_identifier(self):
            return self.getTypedRuleContext(OParser.Type_identifierContext,0)


        def getRuleIndex(self):
            return OParser.RULE_method_identifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMethod_identifier" ):
                listener.enterMethod_identifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMethod_identifier" ):
                listener.exitMethod_identifier(self)




    def method_identifier(self):

        localctx = OParser.Method_identifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 200, self.RULE_method_identifier)
        try:
            self.state = 1755
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [OParser.VARIABLE_IDENTIFIER]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1753
                self.variable_identifier()
                pass
            elif token in [OParser.TYPE_IDENTIFIER]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1754
                self.type_identifier()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Identifier_or_keywordContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(OParser.IdentifierContext,0)


        def keyword(self):
            return self.getTypedRuleContext(OParser.KeywordContext,0)


        def getRuleIndex(self):
            return OParser.RULE_identifier_or_keyword

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentifier_or_keyword" ):
                listener.enterIdentifier_or_keyword(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentifier_or_keyword" ):
                listener.exitIdentifier_or_keyword(self)




    def identifier_or_keyword(self):

        localctx = OParser.Identifier_or_keywordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 202, self.RULE_identifier_or_keyword)
        try:
            self.state = 1759
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [OParser.SYMBOL_IDENTIFIER, OParser.TYPE_IDENTIFIER, OParser.VARIABLE_IDENTIFIER]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1757
                self.identifier()
                pass
            elif token in [OParser.JAVA, OParser.CSHARP, OParser.PYTHON2, OParser.PYTHON3, OParser.JAVASCRIPT, OParser.SWIFT, OParser.BOOLEAN, OParser.CHARACTER, OParser.TEXT, OParser.INTEGER, OParser.DECIMAL, OParser.DATE, OParser.TIME, OParser.DATETIME, OParser.PERIOD, OParser.VERSION, OParser.CODE, OParser.DOCUMENT, OParser.BLOB, OParser.IMAGE, OParser.UUID, OParser.ITERATOR, OParser.CURSOR, OParser.HTML, OParser.ABSTRACT, OParser.ALL, OParser.ALWAYS, OParser.AND, OParser.ANY, OParser.AS, OParser.ASC, OParser.ATTR, OParser.ATTRIBUTE, OParser.ATTRIBUTES, OParser.BINDINGS, OParser.BREAK, OParser.BY, OParser.CASE, OParser.CATCH, OParser.CATEGORY, OParser.CLASS, OParser.CLOSE, OParser.CONTAINS, OParser.DEF, OParser.DEFAULT, OParser.DEFINE, OParser.DELETE, OParser.DESC, OParser.DO, OParser.DOING, OParser.EACH, OParser.ELSE, OParser.ENUM, OParser.ENUMERATED, OParser.EXCEPT, OParser.EXECUTE, OParser.EXPECTING, OParser.EXTENDS, OParser.FETCH, OParser.FILTERED, OParser.FINALLY, OParser.FLUSH, OParser.FOR, OParser.FROM, OParser.GETTER, OParser.HAS, OParser.IF, OParser.IN, OParser.INDEX, OParser.IS, OParser.MATCHING, OParser.METHOD, OParser.METHODS, OParser.MODULO, OParser.MUTABLE, OParser.NATIVE, OParser.NONE, OParser.NOT, OParser.NOTHING, OParser.NULL, OParser.ON, OParser.ONE, OParser.OPERATOR, OParser.OR, OParser.ORDER, OParser.OTHERWISE, OParser.PASS, OParser.RAISE, OParser.READ, OParser.RECEIVING, OParser.RESOURCE, OParser.RETURN, OParser.RETURNING, OParser.ROWS, OParser.SELF, OParser.SETTER, OParser.SINGLETON, OParser.SORTED, OParser.STORABLE, OParser.STORE, OParser.SUPER, OParser.SWITCH, OParser.TEST, OParser.THIS, OParser.THROW, OParser.TO, OParser.TRY, OParser.VERIFYING, OParser.WIDGET, OParser.WITH, OParser.WHEN, OParser.WHERE, OParser.WHILE, OParser.WRITE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1758
                self.keyword()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Nospace_hyphen_identifier_or_keywordContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MINUS(self):
            return self.getToken(OParser.MINUS, 0)

        def nospace_identifier_or_keyword(self):
            return self.getTypedRuleContext(OParser.Nospace_identifier_or_keywordContext,0)


        def getRuleIndex(self):
            return OParser.RULE_nospace_hyphen_identifier_or_keyword

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNospace_hyphen_identifier_or_keyword" ):
                listener.enterNospace_hyphen_identifier_or_keyword(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNospace_hyphen_identifier_or_keyword" ):
                listener.exitNospace_hyphen_identifier_or_keyword(self)




    def nospace_hyphen_identifier_or_keyword(self):

        localctx = OParser.Nospace_hyphen_identifier_or_keywordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 204, self.RULE_nospace_hyphen_identifier_or_keyword)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1761
            if not self.wasNotWhiteSpace():
                from antlr4.error.Errors import FailedPredicateException
                raise FailedPredicateException(self, "$parser.wasNotWhiteSpace()")
            self.state = 1762
            self.match(OParser.MINUS)
            self.state = 1763
            self.nospace_identifier_or_keyword()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Nospace_identifier_or_keywordContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier_or_keyword(self):
            return self.getTypedRuleContext(OParser.Identifier_or_keywordContext,0)


        def getRuleIndex(self):
            return OParser.RULE_nospace_identifier_or_keyword

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNospace_identifier_or_keyword" ):
                listener.enterNospace_identifier_or_keyword(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNospace_identifier_or_keyword" ):
                listener.exitNospace_identifier_or_keyword(self)




    def nospace_identifier_or_keyword(self):

        localctx = OParser.Nospace_identifier_or_keywordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 206, self.RULE_nospace_identifier_or_keyword)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1765
            if not self.wasNotWhiteSpace():
                from antlr4.error.Errors import FailedPredicateException
                raise FailedPredicateException(self, "$parser.wasNotWhiteSpace()")
            self.state = 1766
            self.identifier_or_keyword()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class IdentifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return OParser.RULE_identifier

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class TypeIdentifierContext(IdentifierContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.IdentifierContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def type_identifier(self):
            return self.getTypedRuleContext(OParser.Type_identifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeIdentifier" ):
                listener.enterTypeIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeIdentifier" ):
                listener.exitTypeIdentifier(self)


    class SymbolIdentifierContext(IdentifierContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.IdentifierContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def symbol_identifier(self):
            return self.getTypedRuleContext(OParser.Symbol_identifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSymbolIdentifier" ):
                listener.enterSymbolIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSymbolIdentifier" ):
                listener.exitSymbolIdentifier(self)


    class VariableIdentifierContext(IdentifierContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.IdentifierContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def variable_identifier(self):
            return self.getTypedRuleContext(OParser.Variable_identifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariableIdentifier" ):
                listener.enterVariableIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariableIdentifier" ):
                listener.exitVariableIdentifier(self)



    def identifier(self):

        localctx = OParser.IdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 208, self.RULE_identifier)
        try:
            self.state = 1771
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [OParser.VARIABLE_IDENTIFIER]:
                localctx = OParser.VariableIdentifierContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1768
                self.variable_identifier()
                pass
            elif token in [OParser.TYPE_IDENTIFIER]:
                localctx = OParser.TypeIdentifierContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1769
                self.type_identifier()
                pass
            elif token in [OParser.SYMBOL_IDENTIFIER]:
                localctx = OParser.SymbolIdentifierContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 1770
                self.symbol_identifier()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Member_identifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VARIABLE_IDENTIFIER(self):
            return self.getToken(OParser.VARIABLE_IDENTIFIER, 0)

        def CATEGORY(self):
            return self.getToken(OParser.CATEGORY, 0)

        def getRuleIndex(self):
            return OParser.RULE_member_identifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMember_identifier" ):
                listener.enterMember_identifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMember_identifier" ):
                listener.exitMember_identifier(self)




    def member_identifier(self):

        localctx = OParser.Member_identifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 210, self.RULE_member_identifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1773
            _la = self._input.LA(1)
            if not(_la==OParser.CATEGORY or _la==OParser.VARIABLE_IDENTIFIER):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Variable_identifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VARIABLE_IDENTIFIER(self):
            return self.getToken(OParser.VARIABLE_IDENTIFIER, 0)

        def getRuleIndex(self):
            return OParser.RULE_variable_identifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariable_identifier" ):
                listener.enterVariable_identifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariable_identifier" ):
                listener.exitVariable_identifier(self)




    def variable_identifier(self):

        localctx = OParser.Variable_identifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 212, self.RULE_variable_identifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1775
            self.match(OParser.VARIABLE_IDENTIFIER)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Attribute_identifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VARIABLE_IDENTIFIER(self):
            return self.getToken(OParser.VARIABLE_IDENTIFIER, 0)

        def STORABLE(self):
            return self.getToken(OParser.STORABLE, 0)

        def getRuleIndex(self):
            return OParser.RULE_attribute_identifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttribute_identifier" ):
                listener.enterAttribute_identifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttribute_identifier" ):
                listener.exitAttribute_identifier(self)




    def attribute_identifier(self):

        localctx = OParser.Attribute_identifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 214, self.RULE_attribute_identifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1777
            _la = self._input.LA(1)
            if not(_la==OParser.STORABLE or _la==OParser.VARIABLE_IDENTIFIER):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Type_identifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TYPE_IDENTIFIER(self):
            return self.getToken(OParser.TYPE_IDENTIFIER, 0)

        def getRuleIndex(self):
            return OParser.RULE_type_identifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterType_identifier" ):
                listener.enterType_identifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitType_identifier" ):
                listener.exitType_identifier(self)




    def type_identifier(self):

        localctx = OParser.Type_identifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 216, self.RULE_type_identifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1779
            self.match(OParser.TYPE_IDENTIFIER)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Symbol_identifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SYMBOL_IDENTIFIER(self):
            return self.getToken(OParser.SYMBOL_IDENTIFIER, 0)

        def getRuleIndex(self):
            return OParser.RULE_symbol_identifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSymbol_identifier" ):
                listener.enterSymbol_identifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSymbol_identifier" ):
                listener.exitSymbol_identifier(self)




    def symbol_identifier(self):

        localctx = OParser.Symbol_identifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 218, self.RULE_symbol_identifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1781
            self.match(OParser.SYMBOL_IDENTIFIER)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Argument_listContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def argument(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(OParser.ArgumentContext)
            else:
                return self.getTypedRuleContext(OParser.ArgumentContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(OParser.COMMA)
            else:
                return self.getToken(OParser.COMMA, i)

        def getRuleIndex(self):
            return OParser.RULE_argument_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArgument_list" ):
                listener.enterArgument_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArgument_list" ):
                listener.exitArgument_list(self)




    def argument_list(self):

        localctx = OParser.Argument_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 220, self.RULE_argument_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1783
            self.argument()
            self.state = 1788
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==OParser.COMMA:
                self.state = 1784
                self.match(OParser.COMMA)
                self.state = 1785
                self.argument()
                self.state = 1790
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ArgumentContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return OParser.RULE_argument

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class OperatorArgumentContext(ArgumentContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.ArgumentContext
            super().__init__(parser)
            self.arg = None # Operator_argumentContext
            self.copyFrom(ctx)

        def operator_argument(self):
            return self.getTypedRuleContext(OParser.Operator_argumentContext,0)

        def MUTABLE(self):
            return self.getToken(OParser.MUTABLE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOperatorArgument" ):
                listener.enterOperatorArgument(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOperatorArgument" ):
                listener.exitOperatorArgument(self)


    class CodeArgumentContext(ArgumentContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.ArgumentContext
            super().__init__(parser)
            self.arg = None # Code_argumentContext
            self.copyFrom(ctx)

        def code_argument(self):
            return self.getTypedRuleContext(OParser.Code_argumentContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCodeArgument" ):
                listener.enterCodeArgument(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCodeArgument" ):
                listener.exitCodeArgument(self)



    def argument(self):

        localctx = OParser.ArgumentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 222, self.RULE_argument)
        self._la = 0 # Token type
        try:
            self.state = 1796
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,138,self._ctx)
            if la_ == 1:
                localctx = OParser.CodeArgumentContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1791
                localctx.arg = self.code_argument()
                pass

            elif la_ == 2:
                localctx = OParser.OperatorArgumentContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1793
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==OParser.MUTABLE:
                    self.state = 1792
                    self.match(OParser.MUTABLE)


                self.state = 1795
                localctx.arg = self.operator_argument()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Operator_argumentContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def named_argument(self):
            return self.getTypedRuleContext(OParser.Named_argumentContext,0)


        def typed_argument(self):
            return self.getTypedRuleContext(OParser.Typed_argumentContext,0)


        def getRuleIndex(self):
            return OParser.RULE_operator_argument

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOperator_argument" ):
                listener.enterOperator_argument(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOperator_argument" ):
                listener.exitOperator_argument(self)




    def operator_argument(self):

        localctx = OParser.Operator_argumentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 224, self.RULE_operator_argument)
        try:
            self.state = 1800
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [OParser.VARIABLE_IDENTIFIER]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1798
                self.named_argument()
                pass
            elif token in [OParser.BOOLEAN, OParser.CSS, OParser.CHARACTER, OParser.TEXT, OParser.INTEGER, OParser.DECIMAL, OParser.DATE, OParser.TIME, OParser.DATETIME, OParser.PERIOD, OParser.VERSION, OParser.CODE, OParser.DOCUMENT, OParser.BLOB, OParser.IMAGE, OParser.UUID, OParser.ITERATOR, OParser.CURSOR, OParser.HTML, OParser.ANY, OParser.TYPE_IDENTIFIER]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1799
                self.typed_argument()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Named_argumentContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variable_identifier(self):
            return self.getTypedRuleContext(OParser.Variable_identifierContext,0)


        def EQ(self):
            return self.getToken(OParser.EQ, 0)

        def literal_expression(self):
            return self.getTypedRuleContext(OParser.Literal_expressionContext,0)


        def getRuleIndex(self):
            return OParser.RULE_named_argument

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNamed_argument" ):
                listener.enterNamed_argument(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNamed_argument" ):
                listener.exitNamed_argument(self)




    def named_argument(self):

        localctx = OParser.Named_argumentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 226, self.RULE_named_argument)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1802
            self.variable_identifier()
            self.state = 1805
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==OParser.EQ:
                self.state = 1803
                self.match(OParser.EQ)
                self.state = 1804
                self.literal_expression()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Code_argumentContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # Variable_identifierContext

        def code_type(self):
            return self.getTypedRuleContext(OParser.Code_typeContext,0)


        def variable_identifier(self):
            return self.getTypedRuleContext(OParser.Variable_identifierContext,0)


        def getRuleIndex(self):
            return OParser.RULE_code_argument

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCode_argument" ):
                listener.enterCode_argument(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCode_argument" ):
                listener.exitCode_argument(self)




    def code_argument(self):

        localctx = OParser.Code_argumentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 228, self.RULE_code_argument)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1807
            self.code_type()
            self.state = 1808
            localctx.name = self.variable_identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Category_or_any_typeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typedef(self):
            return self.getTypedRuleContext(OParser.TypedefContext,0)


        def any_type(self):
            return self.getTypedRuleContext(OParser.Any_typeContext,0)


        def getRuleIndex(self):
            return OParser.RULE_category_or_any_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCategory_or_any_type" ):
                listener.enterCategory_or_any_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCategory_or_any_type" ):
                listener.exitCategory_or_any_type(self)




    def category_or_any_type(self):

        localctx = OParser.Category_or_any_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 230, self.RULE_category_or_any_type)
        try:
            self.state = 1812
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [OParser.BOOLEAN, OParser.CSS, OParser.CHARACTER, OParser.TEXT, OParser.INTEGER, OParser.DECIMAL, OParser.DATE, OParser.TIME, OParser.DATETIME, OParser.PERIOD, OParser.VERSION, OParser.CODE, OParser.DOCUMENT, OParser.BLOB, OParser.IMAGE, OParser.UUID, OParser.ITERATOR, OParser.CURSOR, OParser.HTML, OParser.TYPE_IDENTIFIER]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1810
                self.typedef(0)
                pass
            elif token in [OParser.ANY]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1811
                self.any_type(0)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Any_typeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return OParser.RULE_any_type

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class AnyListTypeContext(Any_typeContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Any_typeContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def any_type(self):
            return self.getTypedRuleContext(OParser.Any_typeContext,0)

        def LBRAK(self):
            return self.getToken(OParser.LBRAK, 0)
        def RBRAK(self):
            return self.getToken(OParser.RBRAK, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnyListType" ):
                listener.enterAnyListType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnyListType" ):
                listener.exitAnyListType(self)


    class AnyTypeContext(Any_typeContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Any_typeContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ANY(self):
            return self.getToken(OParser.ANY, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnyType" ):
                listener.enterAnyType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnyType" ):
                listener.exitAnyType(self)


    class AnyDictTypeContext(Any_typeContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Any_typeContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def any_type(self):
            return self.getTypedRuleContext(OParser.Any_typeContext,0)

        def LCURL(self):
            return self.getToken(OParser.LCURL, 0)
        def RCURL(self):
            return self.getToken(OParser.RCURL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnyDictType" ):
                listener.enterAnyDictType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnyDictType" ):
                listener.exitAnyDictType(self)



    def any_type(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = OParser.Any_typeContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 232
        self.enterRecursionRule(localctx, 232, self.RULE_any_type, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            localctx = OParser.AnyTypeContext(self, localctx)
            self._ctx = localctx
            _prevctx = localctx

            self.state = 1815
            self.match(OParser.ANY)
            self._ctx.stop = self._input.LT(-1)
            self.state = 1825
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,143,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 1823
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,142,self._ctx)
                    if la_ == 1:
                        localctx = OParser.AnyListTypeContext(self, OParser.Any_typeContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_any_type)
                        self.state = 1817
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 1818
                        self.match(OParser.LBRAK)
                        self.state = 1819
                        self.match(OParser.RBRAK)
                        pass

                    elif la_ == 2:
                        localctx = OParser.AnyDictTypeContext(self, OParser.Any_typeContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_any_type)
                        self.state = 1820
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 1821
                        self.match(OParser.LCURL)
                        self.state = 1822
                        self.match(OParser.RCURL)
                        pass

             
                self.state = 1827
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,143,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class Member_method_declaration_listContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def member_method_declaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(OParser.Member_method_declarationContext)
            else:
                return self.getTypedRuleContext(OParser.Member_method_declarationContext,i)


        def lfp(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(OParser.LfpContext)
            else:
                return self.getTypedRuleContext(OParser.LfpContext,i)


        def getRuleIndex(self):
            return OParser.RULE_member_method_declaration_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMember_method_declaration_list" ):
                listener.enterMember_method_declaration_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMember_method_declaration_list" ):
                listener.exitMember_method_declaration_list(self)




    def member_method_declaration_list(self):

        localctx = OParser.Member_method_declaration_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 234, self.RULE_member_method_declaration_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1828
            self.member_method_declaration()
            self.state = 1834
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << OParser.COMMENT) | (1 << OParser.BOOLEAN) | (1 << OParser.CSS) | (1 << OParser.CHARACTER) | (1 << OParser.TEXT) | (1 << OParser.INTEGER) | (1 << OParser.DECIMAL) | (1 << OParser.DATE) | (1 << OParser.TIME) | (1 << OParser.DATETIME) | (1 << OParser.PERIOD) | (1 << OParser.VERSION) | (1 << OParser.CODE) | (1 << OParser.DOCUMENT) | (1 << OParser.BLOB) | (1 << OParser.IMAGE))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (OParser.UUID - 64)) | (1 << (OParser.ITERATOR - 64)) | (1 << (OParser.CURSOR - 64)) | (1 << (OParser.HTML - 64)) | (1 << (OParser.ABSTRACT - 64)) | (1 << (OParser.GETTER - 64)) | (1 << (OParser.METHOD - 64)) | (1 << (OParser.MUTABLE - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (OParser.OPERATOR - 128)) | (1 << (OParser.SETTER - 128)) | (1 << (OParser.TYPE_IDENTIFIER - 128)) | (1 << (OParser.ARONDBASE_IDENTIFIER - 128)))) != 0):
                self.state = 1829
                self.lfp()
                self.state = 1830
                self.member_method_declaration()
                self.state = 1836
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Member_method_declarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def setter_method_declaration(self):
            return self.getTypedRuleContext(OParser.Setter_method_declarationContext,0)


        def getter_method_declaration(self):
            return self.getTypedRuleContext(OParser.Getter_method_declarationContext,0)


        def concrete_method_declaration(self):
            return self.getTypedRuleContext(OParser.Concrete_method_declarationContext,0)


        def abstract_method_declaration(self):
            return self.getTypedRuleContext(OParser.Abstract_method_declarationContext,0)


        def operator_method_declaration(self):
            return self.getTypedRuleContext(OParser.Operator_method_declarationContext,0)


        def comment_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(OParser.Comment_statementContext)
            else:
                return self.getTypedRuleContext(OParser.Comment_statementContext,i)


        def lfp(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(OParser.LfpContext)
            else:
                return self.getTypedRuleContext(OParser.LfpContext,i)


        def annotation_constructor(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(OParser.Annotation_constructorContext)
            else:
                return self.getTypedRuleContext(OParser.Annotation_constructorContext,i)


        def getRuleIndex(self):
            return OParser.RULE_member_method_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMember_method_declaration" ):
                listener.enterMember_method_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMember_method_declaration" ):
                listener.exitMember_method_declaration(self)




    def member_method_declaration(self):

        localctx = OParser.Member_method_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 236, self.RULE_member_method_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1842
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==OParser.COMMENT:
                self.state = 1837
                self.comment_statement()
                self.state = 1838
                self.lfp()
                self.state = 1844
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1850
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==OParser.ARONDBASE_IDENTIFIER:
                self.state = 1845
                self.annotation_constructor()
                self.state = 1846
                self.lfp()
                self.state = 1852
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1858
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,147,self._ctx)
            if la_ == 1:
                self.state = 1853
                self.setter_method_declaration()
                pass

            elif la_ == 2:
                self.state = 1854
                self.getter_method_declaration()
                pass

            elif la_ == 3:
                self.state = 1855
                self.concrete_method_declaration()
                pass

            elif la_ == 4:
                self.state = 1856
                self.abstract_method_declaration()
                pass

            elif la_ == 5:
                self.state = 1857
                self.operator_method_declaration()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Native_member_method_declaration_listContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def native_member_method_declaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(OParser.Native_member_method_declarationContext)
            else:
                return self.getTypedRuleContext(OParser.Native_member_method_declarationContext,i)


        def lfp(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(OParser.LfpContext)
            else:
                return self.getTypedRuleContext(OParser.LfpContext,i)


        def getRuleIndex(self):
            return OParser.RULE_native_member_method_declaration_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNative_member_method_declaration_list" ):
                listener.enterNative_member_method_declaration_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNative_member_method_declaration_list" ):
                listener.exitNative_member_method_declaration_list(self)




    def native_member_method_declaration_list(self):

        localctx = OParser.Native_member_method_declaration_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 238, self.RULE_native_member_method_declaration_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1860
            self.native_member_method_declaration()
            self.state = 1866
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 48)) & ~0x3f) == 0 and ((1 << (_la - 48)) & ((1 << (OParser.BOOLEAN - 48)) | (1 << (OParser.CSS - 48)) | (1 << (OParser.CHARACTER - 48)) | (1 << (OParser.TEXT - 48)) | (1 << (OParser.INTEGER - 48)) | (1 << (OParser.DECIMAL - 48)) | (1 << (OParser.DATE - 48)) | (1 << (OParser.TIME - 48)) | (1 << (OParser.DATETIME - 48)) | (1 << (OParser.PERIOD - 48)) | (1 << (OParser.VERSION - 48)) | (1 << (OParser.CODE - 48)) | (1 << (OParser.DOCUMENT - 48)) | (1 << (OParser.BLOB - 48)) | (1 << (OParser.IMAGE - 48)) | (1 << (OParser.UUID - 48)) | (1 << (OParser.ITERATOR - 48)) | (1 << (OParser.CURSOR - 48)) | (1 << (OParser.HTML - 48)) | (1 << (OParser.ANY - 48)) | (1 << (OParser.GETTER - 48)))) != 0) or ((((_la - 117)) & ~0x3f) == 0 and ((1 << (_la - 117)) & ((1 << (OParser.METHOD - 117)) | (1 << (OParser.NATIVE - 117)) | (1 << (OParser.SETTER - 117)) | (1 << (OParser.TYPE_IDENTIFIER - 117)))) != 0):
                self.state = 1861
                self.lfp()
                self.state = 1862
                self.native_member_method_declaration()
                self.state = 1868
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Native_member_method_declarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def native_getter_declaration(self):
            return self.getTypedRuleContext(OParser.Native_getter_declarationContext,0)


        def native_setter_declaration(self):
            return self.getTypedRuleContext(OParser.Native_setter_declarationContext,0)


        def native_method_declaration(self):
            return self.getTypedRuleContext(OParser.Native_method_declarationContext,0)


        def getRuleIndex(self):
            return OParser.RULE_native_member_method_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNative_member_method_declaration" ):
                listener.enterNative_member_method_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNative_member_method_declaration" ):
                listener.exitNative_member_method_declaration(self)




    def native_member_method_declaration(self):

        localctx = OParser.Native_member_method_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 240, self.RULE_native_member_method_declaration)
        try:
            self.state = 1872
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,149,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1869
                self.native_getter_declaration()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1870
                self.native_setter_declaration()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1871
                self.native_method_declaration()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Native_category_bindingContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return OParser.RULE_native_category_binding

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Python2CategoryBindingContext(Native_category_bindingContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Native_category_bindingContext
            super().__init__(parser)
            self.binding = None # Python_category_bindingContext
            self.copyFrom(ctx)

        def PYTHON2(self):
            return self.getToken(OParser.PYTHON2, 0)
        def python_category_binding(self):
            return self.getTypedRuleContext(OParser.Python_category_bindingContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPython2CategoryBinding" ):
                listener.enterPython2CategoryBinding(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPython2CategoryBinding" ):
                listener.exitPython2CategoryBinding(self)


    class Python3CategoryBindingContext(Native_category_bindingContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Native_category_bindingContext
            super().__init__(parser)
            self.binding = None # Python_category_bindingContext
            self.copyFrom(ctx)

        def PYTHON3(self):
            return self.getToken(OParser.PYTHON3, 0)
        def python_category_binding(self):
            return self.getTypedRuleContext(OParser.Python_category_bindingContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPython3CategoryBinding" ):
                listener.enterPython3CategoryBinding(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPython3CategoryBinding" ):
                listener.exitPython3CategoryBinding(self)


    class JavaCategoryBindingContext(Native_category_bindingContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Native_category_bindingContext
            super().__init__(parser)
            self.binding = None # Java_class_identifier_expressionContext
            self.copyFrom(ctx)

        def JAVA(self):
            return self.getToken(OParser.JAVA, 0)
        def java_class_identifier_expression(self):
            return self.getTypedRuleContext(OParser.Java_class_identifier_expressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJavaCategoryBinding" ):
                listener.enterJavaCategoryBinding(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJavaCategoryBinding" ):
                listener.exitJavaCategoryBinding(self)


    class CSharpCategoryBindingContext(Native_category_bindingContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Native_category_bindingContext
            super().__init__(parser)
            self.binding = None # Csharp_identifier_expressionContext
            self.copyFrom(ctx)

        def CSHARP(self):
            return self.getToken(OParser.CSHARP, 0)
        def csharp_identifier_expression(self):
            return self.getTypedRuleContext(OParser.Csharp_identifier_expressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCSharpCategoryBinding" ):
                listener.enterCSharpCategoryBinding(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCSharpCategoryBinding" ):
                listener.exitCSharpCategoryBinding(self)


    class JavaScriptCategoryBindingContext(Native_category_bindingContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Native_category_bindingContext
            super().__init__(parser)
            self.binding = None # Javascript_category_bindingContext
            self.copyFrom(ctx)

        def JAVASCRIPT(self):
            return self.getToken(OParser.JAVASCRIPT, 0)
        def javascript_category_binding(self):
            return self.getTypedRuleContext(OParser.Javascript_category_bindingContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJavaScriptCategoryBinding" ):
                listener.enterJavaScriptCategoryBinding(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJavaScriptCategoryBinding" ):
                listener.exitJavaScriptCategoryBinding(self)



    def native_category_binding(self):

        localctx = OParser.Native_category_bindingContext(self, self._ctx, self.state)
        self.enterRule(localctx, 242, self.RULE_native_category_binding)
        try:
            self.state = 1884
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [OParser.JAVA]:
                localctx = OParser.JavaCategoryBindingContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1874
                self.match(OParser.JAVA)
                self.state = 1875
                localctx.binding = self.java_class_identifier_expression(0)
                pass
            elif token in [OParser.CSHARP]:
                localctx = OParser.CSharpCategoryBindingContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1876
                self.match(OParser.CSHARP)
                self.state = 1877
                localctx.binding = self.csharp_identifier_expression(0)
                pass
            elif token in [OParser.PYTHON2]:
                localctx = OParser.Python2CategoryBindingContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 1878
                self.match(OParser.PYTHON2)
                self.state = 1879
                localctx.binding = self.python_category_binding()
                pass
            elif token in [OParser.PYTHON3]:
                localctx = OParser.Python3CategoryBindingContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 1880
                self.match(OParser.PYTHON3)
                self.state = 1881
                localctx.binding = self.python_category_binding()
                pass
            elif token in [OParser.JAVASCRIPT]:
                localctx = OParser.JavaScriptCategoryBindingContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 1882
                self.match(OParser.JAVASCRIPT)
                self.state = 1883
                localctx.binding = self.javascript_category_binding()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Python_category_bindingContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(OParser.IdentifierContext,0)


        def python_module(self):
            return self.getTypedRuleContext(OParser.Python_moduleContext,0)


        def getRuleIndex(self):
            return OParser.RULE_python_category_binding

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPython_category_binding" ):
                listener.enterPython_category_binding(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPython_category_binding" ):
                listener.exitPython_category_binding(self)




    def python_category_binding(self):

        localctx = OParser.Python_category_bindingContext(self, self._ctx, self.state)
        self.enterRule(localctx, 244, self.RULE_python_category_binding)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1886
            self.identifier()
            self.state = 1888
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==OParser.FROM:
                self.state = 1887
                self.python_module()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Python_moduleContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FROM(self):
            return self.getToken(OParser.FROM, 0)

        def module_token(self):
            return self.getTypedRuleContext(OParser.Module_tokenContext,0)


        def COLON(self):
            return self.getToken(OParser.COLON, 0)

        def python_identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(OParser.Python_identifierContext)
            else:
                return self.getTypedRuleContext(OParser.Python_identifierContext,i)


        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(OParser.DOT)
            else:
                return self.getToken(OParser.DOT, i)

        def getRuleIndex(self):
            return OParser.RULE_python_module

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPython_module" ):
                listener.enterPython_module(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPython_module" ):
                listener.exitPython_module(self)




    def python_module(self):

        localctx = OParser.Python_moduleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 246, self.RULE_python_module)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1890
            self.match(OParser.FROM)
            self.state = 1891
            self.module_token()
            self.state = 1892
            self.match(OParser.COLON)
            self.state = 1893
            self.python_identifier()
            self.state = 1898
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==OParser.DOT:
                self.state = 1894
                self.match(OParser.DOT)
                self.state = 1895
                self.python_identifier()
                self.state = 1900
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Javascript_category_bindingContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def javascript_identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(OParser.Javascript_identifierContext)
            else:
                return self.getTypedRuleContext(OParser.Javascript_identifierContext,i)


        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(OParser.DOT)
            else:
                return self.getToken(OParser.DOT, i)

        def javascript_module(self):
            return self.getTypedRuleContext(OParser.Javascript_moduleContext,0)


        def getRuleIndex(self):
            return OParser.RULE_javascript_category_binding

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJavascript_category_binding" ):
                listener.enterJavascript_category_binding(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJavascript_category_binding" ):
                listener.exitJavascript_category_binding(self)




    def javascript_category_binding(self):

        localctx = OParser.Javascript_category_bindingContext(self, self._ctx, self.state)
        self.enterRule(localctx, 248, self.RULE_javascript_category_binding)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1901
            self.javascript_identifier()
            self.state = 1906
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==OParser.DOT:
                self.state = 1902
                self.match(OParser.DOT)
                self.state = 1903
                self.javascript_identifier()
                self.state = 1908
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1910
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==OParser.FROM:
                self.state = 1909
                self.javascript_module()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Javascript_moduleContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FROM(self):
            return self.getToken(OParser.FROM, 0)

        def module_token(self):
            return self.getTypedRuleContext(OParser.Module_tokenContext,0)


        def COLON(self):
            return self.getToken(OParser.COLON, 0)

        def javascript_identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(OParser.Javascript_identifierContext)
            else:
                return self.getTypedRuleContext(OParser.Javascript_identifierContext,i)


        def SLASH(self, i:int=None):
            if i is None:
                return self.getTokens(OParser.SLASH)
            else:
                return self.getToken(OParser.SLASH, i)

        def DOT(self):
            return self.getToken(OParser.DOT, 0)

        def getRuleIndex(self):
            return OParser.RULE_javascript_module

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJavascript_module" ):
                listener.enterJavascript_module(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJavascript_module" ):
                listener.exitJavascript_module(self)




    def javascript_module(self):

        localctx = OParser.Javascript_moduleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 250, self.RULE_javascript_module)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1912
            self.match(OParser.FROM)
            self.state = 1913
            self.module_token()
            self.state = 1914
            self.match(OParser.COLON)
            self.state = 1916
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==OParser.SLASH:
                self.state = 1915
                self.match(OParser.SLASH)


            self.state = 1918
            self.javascript_identifier()
            self.state = 1923
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==OParser.SLASH:
                self.state = 1919
                self.match(OParser.SLASH)
                self.state = 1920
                self.javascript_identifier()
                self.state = 1925
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1928
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==OParser.DOT:
                self.state = 1926
                self.match(OParser.DOT)
                self.state = 1927
                self.javascript_identifier()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Variable_identifier_listContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variable_identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(OParser.Variable_identifierContext)
            else:
                return self.getTypedRuleContext(OParser.Variable_identifierContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(OParser.COMMA)
            else:
                return self.getToken(OParser.COMMA, i)

        def getRuleIndex(self):
            return OParser.RULE_variable_identifier_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariable_identifier_list" ):
                listener.enterVariable_identifier_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariable_identifier_list" ):
                listener.exitVariable_identifier_list(self)




    def variable_identifier_list(self):

        localctx = OParser.Variable_identifier_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 252, self.RULE_variable_identifier_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1930
            self.variable_identifier()
            self.state = 1935
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==OParser.COMMA:
                self.state = 1931
                self.match(OParser.COMMA)
                self.state = 1932
                self.variable_identifier()
                self.state = 1937
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Attribute_identifier_listContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def attribute_identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(OParser.Attribute_identifierContext)
            else:
                return self.getTypedRuleContext(OParser.Attribute_identifierContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(OParser.COMMA)
            else:
                return self.getToken(OParser.COMMA, i)

        def getRuleIndex(self):
            return OParser.RULE_attribute_identifier_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttribute_identifier_list" ):
                listener.enterAttribute_identifier_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttribute_identifier_list" ):
                listener.exitAttribute_identifier_list(self)




    def attribute_identifier_list(self):

        localctx = OParser.Attribute_identifier_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 254, self.RULE_attribute_identifier_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1938
            self.attribute_identifier()
            self.state = 1943
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==OParser.COMMA:
                self.state = 1939
                self.match(OParser.COMMA)
                self.state = 1940
                self.attribute_identifier()
                self.state = 1945
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Method_declarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def abstract_method_declaration(self):
            return self.getTypedRuleContext(OParser.Abstract_method_declarationContext,0)


        def concrete_method_declaration(self):
            return self.getTypedRuleContext(OParser.Concrete_method_declarationContext,0)


        def native_method_declaration(self):
            return self.getTypedRuleContext(OParser.Native_method_declarationContext,0)


        def test_method_declaration(self):
            return self.getTypedRuleContext(OParser.Test_method_declarationContext,0)


        def getRuleIndex(self):
            return OParser.RULE_method_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMethod_declaration" ):
                listener.enterMethod_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMethod_declaration" ):
                listener.exitMethod_declaration(self)




    def method_declaration(self):

        localctx = OParser.Method_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 256, self.RULE_method_declaration)
        try:
            self.state = 1950
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,160,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1946
                self.abstract_method_declaration()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1947
                self.concrete_method_declaration()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1948
                self.native_method_declaration()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1949
                self.test_method_declaration()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Comment_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COMMENT(self):
            return self.getToken(OParser.COMMENT, 0)

        def getRuleIndex(self):
            return OParser.RULE_comment_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComment_statement" ):
                listener.enterComment_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComment_statement" ):
                listener.exitComment_statement(self)




    def comment_statement(self):

        localctx = OParser.Comment_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 258, self.RULE_comment_statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1952
            self.match(OParser.COMMENT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Native_statement_listContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def native_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(OParser.Native_statementContext)
            else:
                return self.getTypedRuleContext(OParser.Native_statementContext,i)


        def lfp(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(OParser.LfpContext)
            else:
                return self.getTypedRuleContext(OParser.LfpContext,i)


        def getRuleIndex(self):
            return OParser.RULE_native_statement_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNative_statement_list" ):
                listener.enterNative_statement_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNative_statement_list" ):
                listener.exitNative_statement_list(self)




    def native_statement_list(self):

        localctx = OParser.Native_statement_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 260, self.RULE_native_statement_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1954
            self.native_statement()
            self.state = 1960
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << OParser.JAVA) | (1 << OParser.CSHARP) | (1 << OParser.PYTHON2) | (1 << OParser.PYTHON3) | (1 << OParser.JAVASCRIPT))) != 0):
                self.state = 1955
                self.lfp()
                self.state = 1956
                self.native_statement()
                self.state = 1962
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Native_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return OParser.RULE_native_statement

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class CSharpNativeStatementContext(Native_statementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Native_statementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CSHARP(self):
            return self.getToken(OParser.CSHARP, 0)
        def csharp_statement(self):
            return self.getTypedRuleContext(OParser.Csharp_statementContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCSharpNativeStatement" ):
                listener.enterCSharpNativeStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCSharpNativeStatement" ):
                listener.exitCSharpNativeStatement(self)


    class JavaNativeStatementContext(Native_statementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Native_statementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def JAVA(self):
            return self.getToken(OParser.JAVA, 0)
        def java_statement(self):
            return self.getTypedRuleContext(OParser.Java_statementContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJavaNativeStatement" ):
                listener.enterJavaNativeStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJavaNativeStatement" ):
                listener.exitJavaNativeStatement(self)


    class JavaScriptNativeStatementContext(Native_statementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Native_statementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def JAVASCRIPT(self):
            return self.getToken(OParser.JAVASCRIPT, 0)
        def javascript_native_statement(self):
            return self.getTypedRuleContext(OParser.Javascript_native_statementContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJavaScriptNativeStatement" ):
                listener.enterJavaScriptNativeStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJavaScriptNativeStatement" ):
                listener.exitJavaScriptNativeStatement(self)


    class Python2NativeStatementContext(Native_statementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Native_statementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def PYTHON2(self):
            return self.getToken(OParser.PYTHON2, 0)
        def python_native_statement(self):
            return self.getTypedRuleContext(OParser.Python_native_statementContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPython2NativeStatement" ):
                listener.enterPython2NativeStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPython2NativeStatement" ):
                listener.exitPython2NativeStatement(self)


    class Python3NativeStatementContext(Native_statementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Native_statementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def PYTHON3(self):
            return self.getToken(OParser.PYTHON3, 0)
        def python_native_statement(self):
            return self.getTypedRuleContext(OParser.Python_native_statementContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPython3NativeStatement" ):
                listener.enterPython3NativeStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPython3NativeStatement" ):
                listener.exitPython3NativeStatement(self)



    def native_statement(self):

        localctx = OParser.Native_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 262, self.RULE_native_statement)
        try:
            self.state = 1973
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [OParser.JAVA]:
                localctx = OParser.JavaNativeStatementContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1963
                self.match(OParser.JAVA)
                self.state = 1964
                self.java_statement()
                pass
            elif token in [OParser.CSHARP]:
                localctx = OParser.CSharpNativeStatementContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1965
                self.match(OParser.CSHARP)
                self.state = 1966
                self.csharp_statement()
                pass
            elif token in [OParser.PYTHON2]:
                localctx = OParser.Python2NativeStatementContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 1967
                self.match(OParser.PYTHON2)
                self.state = 1968
                self.python_native_statement()
                pass
            elif token in [OParser.PYTHON3]:
                localctx = OParser.Python3NativeStatementContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 1969
                self.match(OParser.PYTHON3)
                self.state = 1970
                self.python_native_statement()
                pass
            elif token in [OParser.JAVASCRIPT]:
                localctx = OParser.JavaScriptNativeStatementContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 1971
                self.match(OParser.JAVASCRIPT)
                self.state = 1972
                self.javascript_native_statement()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Python_native_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def python_statement(self):
            return self.getTypedRuleContext(OParser.Python_statementContext,0)


        def SEMI(self):
            return self.getToken(OParser.SEMI, 0)

        def python_module(self):
            return self.getTypedRuleContext(OParser.Python_moduleContext,0)


        def getRuleIndex(self):
            return OParser.RULE_python_native_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPython_native_statement" ):
                listener.enterPython_native_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPython_native_statement" ):
                listener.exitPython_native_statement(self)




    def python_native_statement(self):

        localctx = OParser.Python_native_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 264, self.RULE_python_native_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1975
            self.python_statement()
            self.state = 1977
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==OParser.SEMI:
                self.state = 1976
                self.match(OParser.SEMI)


            self.state = 1980
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==OParser.FROM:
                self.state = 1979
                self.python_module()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Javascript_native_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def javascript_statement(self):
            return self.getTypedRuleContext(OParser.Javascript_statementContext,0)


        def SEMI(self):
            return self.getToken(OParser.SEMI, 0)

        def javascript_module(self):
            return self.getTypedRuleContext(OParser.Javascript_moduleContext,0)


        def getRuleIndex(self):
            return OParser.RULE_javascript_native_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJavascript_native_statement" ):
                listener.enterJavascript_native_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJavascript_native_statement" ):
                listener.exitJavascript_native_statement(self)




    def javascript_native_statement(self):

        localctx = OParser.Javascript_native_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 266, self.RULE_javascript_native_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1982
            self.javascript_statement()
            self.state = 1984
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==OParser.SEMI:
                self.state = 1983
                self.match(OParser.SEMI)


            self.state = 1987
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==OParser.FROM:
                self.state = 1986
                self.javascript_module()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Statement_listContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(OParser.StatementContext)
            else:
                return self.getTypedRuleContext(OParser.StatementContext,i)


        def lfp(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(OParser.LfpContext)
            else:
                return self.getTypedRuleContext(OParser.LfpContext,i)


        def getRuleIndex(self):
            return OParser.RULE_statement_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatement_list" ):
                listener.enterStatement_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatement_list" ):
                listener.exitStatement_list(self)




    def statement_list(self):

        localctx = OParser.Statement_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 268, self.RULE_statement_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1989
            self.statement()
            self.state = 1995
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << OParser.COMMENT) | (1 << OParser.LPAR) | (1 << OParser.LBRAK) | (1 << OParser.LCURL) | (1 << OParser.LT) | (1 << OParser.LTCOLONGT) | (1 << OParser.BOOLEAN) | (1 << OParser.CSS) | (1 << OParser.CHARACTER) | (1 << OParser.TEXT) | (1 << OParser.INTEGER) | (1 << OParser.DECIMAL) | (1 << OParser.DATE) | (1 << OParser.TIME) | (1 << OParser.DATETIME) | (1 << OParser.PERIOD) | (1 << OParser.VERSION) | (1 << OParser.CODE) | (1 << OParser.DOCUMENT) | (1 << OParser.BLOB) | (1 << OParser.IMAGE))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (OParser.UUID - 64)) | (1 << (OParser.ITERATOR - 64)) | (1 << (OParser.CURSOR - 64)) | (1 << (OParser.HTML - 64)) | (1 << (OParser.ANY - 64)) | (1 << (OParser.BREAK - 64)) | (1 << (OParser.DELETE - 64)) | (1 << (OParser.DO - 64)) | (1 << (OParser.FETCH - 64)) | (1 << (OParser.FILTERED - 64)) | (1 << (OParser.FLUSH - 64)) | (1 << (OParser.FOR - 64)) | (1 << (OParser.IF - 64)) | (1 << (OParser.METHOD - 64)) | (1 << (OParser.MUTABLE - 64)) | (1 << (OParser.NULL - 64)))) != 0) or ((((_la - 134)) & ~0x3f) == 0 and ((1 << (_la - 134)) & ((1 << (OParser.READ - 134)) | (1 << (OParser.RETURN - 134)) | (1 << (OParser.SELF - 134)) | (1 << (OParser.SORTED - 134)) | (1 << (OParser.STORE - 134)) | (1 << (OParser.SUPER - 134)) | (1 << (OParser.SWITCH - 134)) | (1 << (OParser.THIS - 134)) | (1 << (OParser.THROW - 134)) | (1 << (OParser.TRY - 134)) | (1 << (OParser.WITH - 134)) | (1 << (OParser.WHILE - 134)) | (1 << (OParser.WRITE - 134)) | (1 << (OParser.BOOLEAN_LITERAL - 134)) | (1 << (OParser.CHAR_LITERAL - 134)) | (1 << (OParser.MIN_INTEGER - 134)) | (1 << (OParser.MAX_INTEGER - 134)) | (1 << (OParser.SYMBOL_IDENTIFIER - 134)) | (1 << (OParser.TYPE_IDENTIFIER - 134)) | (1 << (OParser.VARIABLE_IDENTIFIER - 134)) | (1 << (OParser.TEXT_LITERAL - 134)) | (1 << (OParser.UUID_LITERAL - 134)) | (1 << (OParser.INTEGER_LITERAL - 134)) | (1 << (OParser.HEXA_LITERAL - 134)) | (1 << (OParser.DECIMAL_LITERAL - 134)) | (1 << (OParser.DATETIME_LITERAL - 134)) | (1 << (OParser.TIME_LITERAL - 134)) | (1 << (OParser.DATE_LITERAL - 134)) | (1 << (OParser.PERIOD_LITERAL - 134)) | (1 << (OParser.VERSION_LITERAL - 134)))) != 0):
                self.state = 1990
                self.lfp()
                self.state = 1991
                self.statement()
                self.state = 1997
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Assertion_listContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assertion(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(OParser.AssertionContext)
            else:
                return self.getTypedRuleContext(OParser.AssertionContext,i)


        def lfp(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(OParser.LfpContext)
            else:
                return self.getTypedRuleContext(OParser.LfpContext,i)


        def getRuleIndex(self):
            return OParser.RULE_assertion_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssertion_list" ):
                listener.enterAssertion_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssertion_list" ):
                listener.exitAssertion_list(self)




    def assertion_list(self):

        localctx = OParser.Assertion_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 270, self.RULE_assertion_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1998
            self.assertion()
            self.state = 2004
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << OParser.LPAR) | (1 << OParser.LBRAK) | (1 << OParser.LCURL) | (1 << OParser.XMARK) | (1 << OParser.MINUS) | (1 << OParser.LT) | (1 << OParser.LTGT) | (1 << OParser.LTCOLONGT) | (1 << OParser.BOOLEAN) | (1 << OParser.CSS) | (1 << OParser.CHARACTER) | (1 << OParser.TEXT) | (1 << OParser.INTEGER) | (1 << OParser.DECIMAL) | (1 << OParser.DATE) | (1 << OParser.TIME) | (1 << OParser.DATETIME) | (1 << OParser.PERIOD) | (1 << OParser.VERSION) | (1 << OParser.CODE) | (1 << OParser.DOCUMENT) | (1 << OParser.BLOB) | (1 << OParser.IMAGE))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (OParser.UUID - 64)) | (1 << (OParser.ITERATOR - 64)) | (1 << (OParser.CURSOR - 64)) | (1 << (OParser.HTML - 64)) | (1 << (OParser.ANY - 64)) | (1 << (OParser.EXECUTE - 64)) | (1 << (OParser.FETCH - 64)) | (1 << (OParser.FILTERED - 64)) | (1 << (OParser.MUTABLE - 64)) | (1 << (OParser.NULL - 64)))) != 0) or ((((_la - 134)) & ~0x3f) == 0 and ((1 << (_la - 134)) & ((1 << (OParser.READ - 134)) | (1 << (OParser.SELF - 134)) | (1 << (OParser.SORTED - 134)) | (1 << (OParser.SUPER - 134)) | (1 << (OParser.THIS - 134)) | (1 << (OParser.BOOLEAN_LITERAL - 134)) | (1 << (OParser.CHAR_LITERAL - 134)) | (1 << (OParser.MIN_INTEGER - 134)) | (1 << (OParser.MAX_INTEGER - 134)) | (1 << (OParser.SYMBOL_IDENTIFIER - 134)) | (1 << (OParser.TYPE_IDENTIFIER - 134)) | (1 << (OParser.VARIABLE_IDENTIFIER - 134)) | (1 << (OParser.TEXT_LITERAL - 134)) | (1 << (OParser.UUID_LITERAL - 134)) | (1 << (OParser.INTEGER_LITERAL - 134)) | (1 << (OParser.HEXA_LITERAL - 134)) | (1 << (OParser.DECIMAL_LITERAL - 134)) | (1 << (OParser.DATETIME_LITERAL - 134)) | (1 << (OParser.TIME_LITERAL - 134)) | (1 << (OParser.DATE_LITERAL - 134)) | (1 << (OParser.PERIOD_LITERAL - 134)) | (1 << (OParser.VERSION_LITERAL - 134)))) != 0):
                self.state = 1999
                self.lfp()
                self.state = 2000
                self.assertion()
                self.state = 2006
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Switch_case_statement_listContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def switch_case_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(OParser.Switch_case_statementContext)
            else:
                return self.getTypedRuleContext(OParser.Switch_case_statementContext,i)


        def lfp(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(OParser.LfpContext)
            else:
                return self.getTypedRuleContext(OParser.LfpContext,i)


        def getRuleIndex(self):
            return OParser.RULE_switch_case_statement_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSwitch_case_statement_list" ):
                listener.enterSwitch_case_statement_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSwitch_case_statement_list" ):
                listener.exitSwitch_case_statement_list(self)




    def switch_case_statement_list(self):

        localctx = OParser.Switch_case_statement_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 272, self.RULE_switch_case_statement_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2007
            self.switch_case_statement()
            self.state = 2013
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==OParser.CASE:
                self.state = 2008
                self.lfp()
                self.state = 2009
                self.switch_case_statement()
                self.state = 2015
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Catch_statement_listContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def catch_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(OParser.Catch_statementContext)
            else:
                return self.getTypedRuleContext(OParser.Catch_statementContext,i)


        def lfp(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(OParser.LfpContext)
            else:
                return self.getTypedRuleContext(OParser.LfpContext,i)


        def getRuleIndex(self):
            return OParser.RULE_catch_statement_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCatch_statement_list" ):
                listener.enterCatch_statement_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCatch_statement_list" ):
                listener.exitCatch_statement_list(self)




    def catch_statement_list(self):

        localctx = OParser.Catch_statement_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 274, self.RULE_catch_statement_list)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2016
            self.catch_statement()
            self.state = 2022
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,170,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2017
                    self.lfp()
                    self.state = 2018
                    self.catch_statement() 
                self.state = 2024
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,170,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Literal_collectionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return OParser.RULE_literal_collection

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class LiteralListLiteralContext(Literal_collectionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Literal_collectionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LBRAK(self):
            return self.getToken(OParser.LBRAK, 0)
        def literal_list_literal(self):
            return self.getTypedRuleContext(OParser.Literal_list_literalContext,0)

        def RBRAK(self):
            return self.getToken(OParser.RBRAK, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLiteralListLiteral" ):
                listener.enterLiteralListLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLiteralListLiteral" ):
                listener.exitLiteralListLiteral(self)


    class LiteralRangeLiteralContext(Literal_collectionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Literal_collectionContext
            super().__init__(parser)
            self.low = None # Atomic_literalContext
            self.high = None # Atomic_literalContext
            self.copyFrom(ctx)

        def LBRAK(self):
            return self.getToken(OParser.LBRAK, 0)
        def RANGE(self):
            return self.getToken(OParser.RANGE, 0)
        def RBRAK(self):
            return self.getToken(OParser.RBRAK, 0)
        def atomic_literal(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(OParser.Atomic_literalContext)
            else:
                return self.getTypedRuleContext(OParser.Atomic_literalContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLiteralRangeLiteral" ):
                listener.enterLiteralRangeLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLiteralRangeLiteral" ):
                listener.exitLiteralRangeLiteral(self)


    class LiteralSetLiteralContext(Literal_collectionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Literal_collectionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LT(self):
            return self.getToken(OParser.LT, 0)
        def literal_list_literal(self):
            return self.getTypedRuleContext(OParser.Literal_list_literalContext,0)

        def GT(self):
            return self.getToken(OParser.GT, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLiteralSetLiteral" ):
                listener.enterLiteralSetLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLiteralSetLiteral" ):
                listener.exitLiteralSetLiteral(self)



    def literal_collection(self):

        localctx = OParser.Literal_collectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 276, self.RULE_literal_collection)
        try:
            self.state = 2039
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,171,self._ctx)
            if la_ == 1:
                localctx = OParser.LiteralRangeLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2025
                self.match(OParser.LBRAK)
                self.state = 2026
                localctx.low = self.atomic_literal()
                self.state = 2027
                self.match(OParser.RANGE)
                self.state = 2028
                localctx.high = self.atomic_literal()
                self.state = 2029
                self.match(OParser.RBRAK)
                pass

            elif la_ == 2:
                localctx = OParser.LiteralListLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2031
                self.match(OParser.LBRAK)
                self.state = 2032
                self.literal_list_literal()
                self.state = 2033
                self.match(OParser.RBRAK)
                pass

            elif la_ == 3:
                localctx = OParser.LiteralSetLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 2035
                self.match(OParser.LT)
                self.state = 2036
                self.literal_list_literal()
                self.state = 2037
                self.match(OParser.GT)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Atomic_literalContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return OParser.RULE_atomic_literal

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class MinIntegerLiteralContext(Atomic_literalContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Atomic_literalContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def MIN_INTEGER(self):
            return self.getToken(OParser.MIN_INTEGER, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMinIntegerLiteral" ):
                listener.enterMinIntegerLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMinIntegerLiteral" ):
                listener.exitMinIntegerLiteral(self)


    class DateLiteralContext(Atomic_literalContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Atomic_literalContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DATE_LITERAL(self):
            return self.getToken(OParser.DATE_LITERAL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDateLiteral" ):
                listener.enterDateLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDateLiteral" ):
                listener.exitDateLiteral(self)


    class SymbolLiteralContext(Atomic_literalContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Atomic_literalContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def symbol_identifier(self):
            return self.getTypedRuleContext(OParser.Symbol_identifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSymbolLiteral" ):
                listener.enterSymbolLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSymbolLiteral" ):
                listener.exitSymbolLiteral(self)


    class BooleanLiteralContext(Atomic_literalContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Atomic_literalContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def BOOLEAN_LITERAL(self):
            return self.getToken(OParser.BOOLEAN_LITERAL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBooleanLiteral" ):
                listener.enterBooleanLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBooleanLiteral" ):
                listener.exitBooleanLiteral(self)


    class VersionLiteralContext(Atomic_literalContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Atomic_literalContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def VERSION_LITERAL(self):
            return self.getToken(OParser.VERSION_LITERAL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVersionLiteral" ):
                listener.enterVersionLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVersionLiteral" ):
                listener.exitVersionLiteral(self)


    class HexadecimalLiteralContext(Atomic_literalContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Atomic_literalContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def HEXA_LITERAL(self):
            return self.getToken(OParser.HEXA_LITERAL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHexadecimalLiteral" ):
                listener.enterHexadecimalLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHexadecimalLiteral" ):
                listener.exitHexadecimalLiteral(self)


    class UUIDLiteralContext(Atomic_literalContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Atomic_literalContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def UUID_LITERAL(self):
            return self.getToken(OParser.UUID_LITERAL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUUIDLiteral" ):
                listener.enterUUIDLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUUIDLiteral" ):
                listener.exitUUIDLiteral(self)


    class MaxIntegerLiteralContext(Atomic_literalContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Atomic_literalContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def MAX_INTEGER(self):
            return self.getToken(OParser.MAX_INTEGER, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMaxIntegerLiteral" ):
                listener.enterMaxIntegerLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMaxIntegerLiteral" ):
                listener.exitMaxIntegerLiteral(self)


    class TypeLiteralContext(Atomic_literalContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Atomic_literalContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def type_literal(self):
            return self.getTypedRuleContext(OParser.Type_literalContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeLiteral" ):
                listener.enterTypeLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeLiteral" ):
                listener.exitTypeLiteral(self)


    class DateTimeLiteralContext(Atomic_literalContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Atomic_literalContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DATETIME_LITERAL(self):
            return self.getToken(OParser.DATETIME_LITERAL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDateTimeLiteral" ):
                listener.enterDateTimeLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDateTimeLiteral" ):
                listener.exitDateTimeLiteral(self)


    class PeriodLiteralContext(Atomic_literalContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Atomic_literalContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def PERIOD_LITERAL(self):
            return self.getToken(OParser.PERIOD_LITERAL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPeriodLiteral" ):
                listener.enterPeriodLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPeriodLiteral" ):
                listener.exitPeriodLiteral(self)


    class DecimalLiteralContext(Atomic_literalContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Atomic_literalContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DECIMAL_LITERAL(self):
            return self.getToken(OParser.DECIMAL_LITERAL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDecimalLiteral" ):
                listener.enterDecimalLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDecimalLiteral" ):
                listener.exitDecimalLiteral(self)


    class TextLiteralContext(Atomic_literalContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Atomic_literalContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def TEXT_LITERAL(self):
            return self.getToken(OParser.TEXT_LITERAL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTextLiteral" ):
                listener.enterTextLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTextLiteral" ):
                listener.exitTextLiteral(self)


    class NullLiteralContext(Atomic_literalContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Atomic_literalContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def null_literal(self):
            return self.getTypedRuleContext(OParser.Null_literalContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNullLiteral" ):
                listener.enterNullLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNullLiteral" ):
                listener.exitNullLiteral(self)


    class IntegerLiteralContext(Atomic_literalContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Atomic_literalContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def INTEGER_LITERAL(self):
            return self.getToken(OParser.INTEGER_LITERAL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIntegerLiteral" ):
                listener.enterIntegerLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIntegerLiteral" ):
                listener.exitIntegerLiteral(self)


    class TimeLiteralContext(Atomic_literalContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Atomic_literalContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def TIME_LITERAL(self):
            return self.getToken(OParser.TIME_LITERAL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTimeLiteral" ):
                listener.enterTimeLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTimeLiteral" ):
                listener.exitTimeLiteral(self)


    class CharacterLiteralContext(Atomic_literalContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Atomic_literalContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CHAR_LITERAL(self):
            return self.getToken(OParser.CHAR_LITERAL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCharacterLiteral" ):
                listener.enterCharacterLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCharacterLiteral" ):
                listener.exitCharacterLiteral(self)



    def atomic_literal(self):

        localctx = OParser.Atomic_literalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 278, self.RULE_atomic_literal)
        try:
            self.state = 2058
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [OParser.MIN_INTEGER]:
                localctx = OParser.MinIntegerLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2041
                self.match(OParser.MIN_INTEGER)
                pass
            elif token in [OParser.MAX_INTEGER]:
                localctx = OParser.MaxIntegerLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2042
                self.match(OParser.MAX_INTEGER)
                pass
            elif token in [OParser.INTEGER_LITERAL]:
                localctx = OParser.IntegerLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 2043
                self.match(OParser.INTEGER_LITERAL)
                pass
            elif token in [OParser.HEXA_LITERAL]:
                localctx = OParser.HexadecimalLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 2044
                self.match(OParser.HEXA_LITERAL)
                pass
            elif token in [OParser.CHAR_LITERAL]:
                localctx = OParser.CharacterLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 2045
                self.match(OParser.CHAR_LITERAL)
                pass
            elif token in [OParser.DATE_LITERAL]:
                localctx = OParser.DateLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 2046
                self.match(OParser.DATE_LITERAL)
                pass
            elif token in [OParser.TIME_LITERAL]:
                localctx = OParser.TimeLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 7)
                self.state = 2047
                self.match(OParser.TIME_LITERAL)
                pass
            elif token in [OParser.TEXT_LITERAL]:
                localctx = OParser.TextLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 8)
                self.state = 2048
                self.match(OParser.TEXT_LITERAL)
                pass
            elif token in [OParser.DECIMAL_LITERAL]:
                localctx = OParser.DecimalLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 9)
                self.state = 2049
                self.match(OParser.DECIMAL_LITERAL)
                pass
            elif token in [OParser.DATETIME_LITERAL]:
                localctx = OParser.DateTimeLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 10)
                self.state = 2050
                self.match(OParser.DATETIME_LITERAL)
                pass
            elif token in [OParser.BOOLEAN_LITERAL]:
                localctx = OParser.BooleanLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 11)
                self.state = 2051
                self.match(OParser.BOOLEAN_LITERAL)
                pass
            elif token in [OParser.PERIOD_LITERAL]:
                localctx = OParser.PeriodLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 12)
                self.state = 2052
                self.match(OParser.PERIOD_LITERAL)
                pass
            elif token in [OParser.VERSION_LITERAL]:
                localctx = OParser.VersionLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 13)
                self.state = 2053
                self.match(OParser.VERSION_LITERAL)
                pass
            elif token in [OParser.UUID_LITERAL]:
                localctx = OParser.UUIDLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 14)
                self.state = 2054
                self.match(OParser.UUID_LITERAL)
                pass
            elif token in [OParser.SYMBOL_IDENTIFIER]:
                localctx = OParser.SymbolLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 15)
                self.state = 2055
                self.symbol_identifier()
                pass
            elif token in [OParser.BOOLEAN, OParser.CSS, OParser.CHARACTER, OParser.TEXT, OParser.INTEGER, OParser.DECIMAL, OParser.DATE, OParser.TIME, OParser.DATETIME, OParser.PERIOD, OParser.VERSION, OParser.CODE, OParser.DOCUMENT, OParser.BLOB, OParser.IMAGE, OParser.UUID, OParser.ITERATOR, OParser.CURSOR, OParser.HTML, OParser.ANY, OParser.TYPE_IDENTIFIER]:
                localctx = OParser.TypeLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 16)
                self.state = 2056
                self.type_literal()
                pass
            elif token in [OParser.NULL]:
                localctx = OParser.NullLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 17)
                self.state = 2057
                self.null_literal()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Literal_list_literalContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def atomic_literal(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(OParser.Atomic_literalContext)
            else:
                return self.getTypedRuleContext(OParser.Atomic_literalContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(OParser.COMMA)
            else:
                return self.getToken(OParser.COMMA, i)

        def getRuleIndex(self):
            return OParser.RULE_literal_list_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLiteral_list_literal" ):
                listener.enterLiteral_list_literal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLiteral_list_literal" ):
                listener.exitLiteral_list_literal(self)




    def literal_list_literal(self):

        localctx = OParser.Literal_list_literalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 280, self.RULE_literal_list_literal)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2060
            self.atomic_literal()
            self.state = 2065
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==OParser.COMMA:
                self.state = 2061
                self.match(OParser.COMMA)
                self.state = 2062
                self.atomic_literal()
                self.state = 2067
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class This_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SELF(self):
            return self.getToken(OParser.SELF, 0)

        def THIS(self):
            return self.getToken(OParser.THIS, 0)

        def getRuleIndex(self):
            return OParser.RULE_this_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterThis_expression" ):
                listener.enterThis_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitThis_expression" ):
                listener.exitThis_expression(self)




    def this_expression(self):

        localctx = OParser.This_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 282, self.RULE_this_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2068
            _la = self._input.LA(1)
            if not(_la==OParser.SELF or _la==OParser.THIS):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Super_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SUPER(self):
            return self.getToken(OParser.SUPER, 0)

        def category_type(self):
            return self.getTypedRuleContext(OParser.Category_typeContext,0)


        def DOT(self):
            return self.getToken(OParser.DOT, 0)

        def getRuleIndex(self):
            return OParser.RULE_super_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSuper_expression" ):
                listener.enterSuper_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSuper_expression" ):
                listener.exitSuper_expression(self)




    def super_expression(self):

        localctx = OParser.Super_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 284, self.RULE_super_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2073
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==OParser.TYPE_IDENTIFIER:
                self.state = 2070
                self.category_type()
                self.state = 2071
                self.match(OParser.DOT)


            self.state = 2075
            self.match(OParser.SUPER)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Parenthesis_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAR(self):
            return self.getToken(OParser.LPAR, 0)

        def expression(self):
            return self.getTypedRuleContext(OParser.ExpressionContext,0)


        def RPAR(self):
            return self.getToken(OParser.RPAR, 0)

        def getRuleIndex(self):
            return OParser.RULE_parenthesis_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParenthesis_expression" ):
                listener.enterParenthesis_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParenthesis_expression" ):
                listener.exitParenthesis_expression(self)




    def parenthesis_expression(self):

        localctx = OParser.Parenthesis_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 286, self.RULE_parenthesis_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2077
            self.match(OParser.LPAR)
            self.state = 2078
            self.expression(0)
            self.state = 2079
            self.match(OParser.RPAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Literal_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def atomic_literal(self):
            return self.getTypedRuleContext(OParser.Atomic_literalContext,0)


        def collection_literal(self):
            return self.getTypedRuleContext(OParser.Collection_literalContext,0)


        def getRuleIndex(self):
            return OParser.RULE_literal_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLiteral_expression" ):
                listener.enterLiteral_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLiteral_expression" ):
                listener.exitLiteral_expression(self)




    def literal_expression(self):

        localctx = OParser.Literal_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 288, self.RULE_literal_expression)
        try:
            self.state = 2083
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [OParser.BOOLEAN, OParser.CSS, OParser.CHARACTER, OParser.TEXT, OParser.INTEGER, OParser.DECIMAL, OParser.DATE, OParser.TIME, OParser.DATETIME, OParser.PERIOD, OParser.VERSION, OParser.CODE, OParser.DOCUMENT, OParser.BLOB, OParser.IMAGE, OParser.UUID, OParser.ITERATOR, OParser.CURSOR, OParser.HTML, OParser.ANY, OParser.NULL, OParser.BOOLEAN_LITERAL, OParser.CHAR_LITERAL, OParser.MIN_INTEGER, OParser.MAX_INTEGER, OParser.SYMBOL_IDENTIFIER, OParser.TYPE_IDENTIFIER, OParser.TEXT_LITERAL, OParser.UUID_LITERAL, OParser.INTEGER_LITERAL, OParser.HEXA_LITERAL, OParser.DECIMAL_LITERAL, OParser.DATETIME_LITERAL, OParser.TIME_LITERAL, OParser.DATE_LITERAL, OParser.PERIOD_LITERAL, OParser.VERSION_LITERAL]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2081
                self.atomic_literal()
                pass
            elif token in [OParser.LPAR, OParser.LBRAK, OParser.LCURL, OParser.LT, OParser.LTCOLONGT, OParser.MUTABLE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2082
                self.collection_literal()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Collection_literalContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def range_literal(self):
            return self.getTypedRuleContext(OParser.Range_literalContext,0)


        def list_literal(self):
            return self.getTypedRuleContext(OParser.List_literalContext,0)


        def set_literal(self):
            return self.getTypedRuleContext(OParser.Set_literalContext,0)


        def dict_literal(self):
            return self.getTypedRuleContext(OParser.Dict_literalContext,0)


        def document_literal(self):
            return self.getTypedRuleContext(OParser.Document_literalContext,0)


        def tuple_literal(self):
            return self.getTypedRuleContext(OParser.Tuple_literalContext,0)


        def getRuleIndex(self):
            return OParser.RULE_collection_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCollection_literal" ):
                listener.enterCollection_literal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCollection_literal" ):
                listener.exitCollection_literal(self)




    def collection_literal(self):

        localctx = OParser.Collection_literalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 290, self.RULE_collection_literal)
        try:
            self.state = 2091
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,176,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2085
                self.range_literal()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2086
                self.list_literal()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2087
                self.set_literal()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2088
                self.dict_literal()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 2089
                self.document_literal()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 2090
                self.tuple_literal()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Tuple_literalContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAR(self):
            return self.getToken(OParser.LPAR, 0)

        def RPAR(self):
            return self.getToken(OParser.RPAR, 0)

        def MUTABLE(self):
            return self.getToken(OParser.MUTABLE, 0)

        def expression_tuple(self):
            return self.getTypedRuleContext(OParser.Expression_tupleContext,0)


        def getRuleIndex(self):
            return OParser.RULE_tuple_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTuple_literal" ):
                listener.enterTuple_literal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTuple_literal" ):
                listener.exitTuple_literal(self)




    def tuple_literal(self):

        localctx = OParser.Tuple_literalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 292, self.RULE_tuple_literal)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2094
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==OParser.MUTABLE:
                self.state = 2093
                self.match(OParser.MUTABLE)


            self.state = 2096
            self.match(OParser.LPAR)
            self.state = 2098
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << OParser.LPAR) | (1 << OParser.LBRAK) | (1 << OParser.LCURL) | (1 << OParser.XMARK) | (1 << OParser.MINUS) | (1 << OParser.LT) | (1 << OParser.LTGT) | (1 << OParser.LTCOLONGT) | (1 << OParser.BOOLEAN) | (1 << OParser.CSS) | (1 << OParser.CHARACTER) | (1 << OParser.TEXT) | (1 << OParser.INTEGER) | (1 << OParser.DECIMAL) | (1 << OParser.DATE) | (1 << OParser.TIME) | (1 << OParser.DATETIME) | (1 << OParser.PERIOD) | (1 << OParser.VERSION) | (1 << OParser.CODE) | (1 << OParser.DOCUMENT) | (1 << OParser.BLOB) | (1 << OParser.IMAGE))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (OParser.UUID - 64)) | (1 << (OParser.ITERATOR - 64)) | (1 << (OParser.CURSOR - 64)) | (1 << (OParser.HTML - 64)) | (1 << (OParser.ANY - 64)) | (1 << (OParser.EXECUTE - 64)) | (1 << (OParser.FETCH - 64)) | (1 << (OParser.FILTERED - 64)) | (1 << (OParser.MUTABLE - 64)) | (1 << (OParser.NULL - 64)))) != 0) or ((((_la - 134)) & ~0x3f) == 0 and ((1 << (_la - 134)) & ((1 << (OParser.READ - 134)) | (1 << (OParser.SELF - 134)) | (1 << (OParser.SORTED - 134)) | (1 << (OParser.SUPER - 134)) | (1 << (OParser.THIS - 134)) | (1 << (OParser.BOOLEAN_LITERAL - 134)) | (1 << (OParser.CHAR_LITERAL - 134)) | (1 << (OParser.MIN_INTEGER - 134)) | (1 << (OParser.MAX_INTEGER - 134)) | (1 << (OParser.SYMBOL_IDENTIFIER - 134)) | (1 << (OParser.TYPE_IDENTIFIER - 134)) | (1 << (OParser.VARIABLE_IDENTIFIER - 134)) | (1 << (OParser.TEXT_LITERAL - 134)) | (1 << (OParser.UUID_LITERAL - 134)) | (1 << (OParser.INTEGER_LITERAL - 134)) | (1 << (OParser.HEXA_LITERAL - 134)) | (1 << (OParser.DECIMAL_LITERAL - 134)) | (1 << (OParser.DATETIME_LITERAL - 134)) | (1 << (OParser.TIME_LITERAL - 134)) | (1 << (OParser.DATE_LITERAL - 134)) | (1 << (OParser.PERIOD_LITERAL - 134)) | (1 << (OParser.VERSION_LITERAL - 134)))) != 0):
                self.state = 2097
                self.expression_tuple()


            self.state = 2100
            self.match(OParser.RPAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Dict_literalContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LTCOLONGT(self):
            return self.getToken(OParser.LTCOLONGT, 0)

        def MUTABLE(self):
            return self.getToken(OParser.MUTABLE, 0)

        def LT(self):
            return self.getToken(OParser.LT, 0)

        def dict_entry_list(self):
            return self.getTypedRuleContext(OParser.Dict_entry_listContext,0)


        def GT(self):
            return self.getToken(OParser.GT, 0)

        def COLON(self):
            return self.getToken(OParser.COLON, 0)

        def getRuleIndex(self):
            return OParser.RULE_dict_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDict_literal" ):
                listener.enterDict_literal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDict_literal" ):
                listener.exitDict_literal(self)




    def dict_literal(self):

        localctx = OParser.Dict_literalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 294, self.RULE_dict_literal)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2103
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==OParser.MUTABLE:
                self.state = 2102
                self.match(OParser.MUTABLE)


            self.state = 2113
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,180,self._ctx)
            if la_ == 1:
                self.state = 2105
                self.match(OParser.LT)
                self.state = 2106
                self.dict_entry_list()
                self.state = 2107
                self.match(OParser.GT)
                pass

            elif la_ == 2:
                self.state = 2109
                self.match(OParser.LTCOLONGT)
                pass

            elif la_ == 3:
                self.state = 2110
                self.match(OParser.LT)
                self.state = 2111
                self.match(OParser.COLON)
                self.state = 2112
                self.match(OParser.GT)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Document_literalContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LCURL(self):
            return self.getToken(OParser.LCURL, 0)

        def RCURL(self):
            return self.getToken(OParser.RCURL, 0)

        def dict_entry_list(self):
            return self.getTypedRuleContext(OParser.Dict_entry_listContext,0)


        def getRuleIndex(self):
            return OParser.RULE_document_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDocument_literal" ):
                listener.enterDocument_literal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDocument_literal" ):
                listener.exitDocument_literal(self)




    def document_literal(self):

        localctx = OParser.Document_literalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 296, self.RULE_document_literal)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2115
            self.match(OParser.LCURL)
            self.state = 2117
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << OParser.JAVA) | (1 << OParser.CSHARP) | (1 << OParser.PYTHON2) | (1 << OParser.PYTHON3) | (1 << OParser.JAVASCRIPT) | (1 << OParser.SWIFT) | (1 << OParser.BOOLEAN) | (1 << OParser.CHARACTER) | (1 << OParser.TEXT) | (1 << OParser.INTEGER) | (1 << OParser.DECIMAL) | (1 << OParser.DATE) | (1 << OParser.TIME) | (1 << OParser.DATETIME) | (1 << OParser.PERIOD) | (1 << OParser.VERSION) | (1 << OParser.CODE) | (1 << OParser.DOCUMENT) | (1 << OParser.BLOB) | (1 << OParser.IMAGE))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (OParser.UUID - 64)) | (1 << (OParser.ITERATOR - 64)) | (1 << (OParser.CURSOR - 64)) | (1 << (OParser.HTML - 64)) | (1 << (OParser.ABSTRACT - 64)) | (1 << (OParser.ALL - 64)) | (1 << (OParser.ALWAYS - 64)) | (1 << (OParser.AND - 64)) | (1 << (OParser.ANY - 64)) | (1 << (OParser.AS - 64)) | (1 << (OParser.ASC - 64)) | (1 << (OParser.ATTR - 64)) | (1 << (OParser.ATTRIBUTE - 64)) | (1 << (OParser.ATTRIBUTES - 64)) | (1 << (OParser.BINDINGS - 64)) | (1 << (OParser.BREAK - 64)) | (1 << (OParser.BY - 64)) | (1 << (OParser.CASE - 64)) | (1 << (OParser.CATCH - 64)) | (1 << (OParser.CATEGORY - 64)) | (1 << (OParser.CLASS - 64)) | (1 << (OParser.CLOSE - 64)) | (1 << (OParser.CONTAINS - 64)) | (1 << (OParser.DEF - 64)) | (1 << (OParser.DEFAULT - 64)) | (1 << (OParser.DEFINE - 64)) | (1 << (OParser.DELETE - 64)) | (1 << (OParser.DESC - 64)) | (1 << (OParser.DO - 64)) | (1 << (OParser.DOING - 64)) | (1 << (OParser.EACH - 64)) | (1 << (OParser.ELSE - 64)) | (1 << (OParser.ENUM - 64)) | (1 << (OParser.ENUMERATED - 64)) | (1 << (OParser.EXCEPT - 64)) | (1 << (OParser.EXECUTE - 64)) | (1 << (OParser.EXPECTING - 64)) | (1 << (OParser.EXTENDS - 64)) | (1 << (OParser.FETCH - 64)) | (1 << (OParser.FILTERED - 64)) | (1 << (OParser.FINALLY - 64)) | (1 << (OParser.FLUSH - 64)) | (1 << (OParser.FOR - 64)) | (1 << (OParser.FROM - 64)) | (1 << (OParser.GETTER - 64)) | (1 << (OParser.HAS - 64)) | (1 << (OParser.IF - 64)) | (1 << (OParser.IN - 64)) | (1 << (OParser.INDEX - 64)) | (1 << (OParser.IS - 64)) | (1 << (OParser.MATCHING - 64)) | (1 << (OParser.METHOD - 64)) | (1 << (OParser.METHODS - 64)) | (1 << (OParser.MODULO - 64)) | (1 << (OParser.MUTABLE - 64)) | (1 << (OParser.NATIVE - 64)) | (1 << (OParser.NONE - 64)) | (1 << (OParser.NOT - 64)) | (1 << (OParser.NOTHING - 64)) | (1 << (OParser.NULL - 64)) | (1 << (OParser.ON - 64)) | (1 << (OParser.ONE - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (OParser.OPERATOR - 128)) | (1 << (OParser.OR - 128)) | (1 << (OParser.ORDER - 128)) | (1 << (OParser.OTHERWISE - 128)) | (1 << (OParser.PASS - 128)) | (1 << (OParser.RAISE - 128)) | (1 << (OParser.READ - 128)) | (1 << (OParser.RECEIVING - 128)) | (1 << (OParser.RESOURCE - 128)) | (1 << (OParser.RETURN - 128)) | (1 << (OParser.RETURNING - 128)) | (1 << (OParser.ROWS - 128)) | (1 << (OParser.SELF - 128)) | (1 << (OParser.SETTER - 128)) | (1 << (OParser.SINGLETON - 128)) | (1 << (OParser.SORTED - 128)) | (1 << (OParser.STORABLE - 128)) | (1 << (OParser.STORE - 128)) | (1 << (OParser.SUPER - 128)) | (1 << (OParser.SWITCH - 128)) | (1 << (OParser.TEST - 128)) | (1 << (OParser.THIS - 128)) | (1 << (OParser.THROW - 128)) | (1 << (OParser.TO - 128)) | (1 << (OParser.TRY - 128)) | (1 << (OParser.VERIFYING - 128)) | (1 << (OParser.WIDGET - 128)) | (1 << (OParser.WITH - 128)) | (1 << (OParser.WHEN - 128)) | (1 << (OParser.WHERE - 128)) | (1 << (OParser.WHILE - 128)) | (1 << (OParser.WRITE - 128)) | (1 << (OParser.SYMBOL_IDENTIFIER - 128)) | (1 << (OParser.TYPE_IDENTIFIER - 128)) | (1 << (OParser.VARIABLE_IDENTIFIER - 128)) | (1 << (OParser.TEXT_LITERAL - 128)))) != 0):
                self.state = 2116
                self.dict_entry_list()


            self.state = 2119
            self.match(OParser.RCURL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Expression_tupleContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(OParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(OParser.ExpressionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(OParser.COMMA)
            else:
                return self.getToken(OParser.COMMA, i)

        def getRuleIndex(self):
            return OParser.RULE_expression_tuple

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpression_tuple" ):
                listener.enterExpression_tuple(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpression_tuple" ):
                listener.exitExpression_tuple(self)




    def expression_tuple(self):

        localctx = OParser.Expression_tupleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 298, self.RULE_expression_tuple)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2121
            self.expression(0)
            self.state = 2122
            self.match(OParser.COMMA)
            self.state = 2131
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << OParser.LPAR) | (1 << OParser.LBRAK) | (1 << OParser.LCURL) | (1 << OParser.XMARK) | (1 << OParser.MINUS) | (1 << OParser.LT) | (1 << OParser.LTGT) | (1 << OParser.LTCOLONGT) | (1 << OParser.BOOLEAN) | (1 << OParser.CSS) | (1 << OParser.CHARACTER) | (1 << OParser.TEXT) | (1 << OParser.INTEGER) | (1 << OParser.DECIMAL) | (1 << OParser.DATE) | (1 << OParser.TIME) | (1 << OParser.DATETIME) | (1 << OParser.PERIOD) | (1 << OParser.VERSION) | (1 << OParser.CODE) | (1 << OParser.DOCUMENT) | (1 << OParser.BLOB) | (1 << OParser.IMAGE))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (OParser.UUID - 64)) | (1 << (OParser.ITERATOR - 64)) | (1 << (OParser.CURSOR - 64)) | (1 << (OParser.HTML - 64)) | (1 << (OParser.ANY - 64)) | (1 << (OParser.EXECUTE - 64)) | (1 << (OParser.FETCH - 64)) | (1 << (OParser.FILTERED - 64)) | (1 << (OParser.MUTABLE - 64)) | (1 << (OParser.NULL - 64)))) != 0) or ((((_la - 134)) & ~0x3f) == 0 and ((1 << (_la - 134)) & ((1 << (OParser.READ - 134)) | (1 << (OParser.SELF - 134)) | (1 << (OParser.SORTED - 134)) | (1 << (OParser.SUPER - 134)) | (1 << (OParser.THIS - 134)) | (1 << (OParser.BOOLEAN_LITERAL - 134)) | (1 << (OParser.CHAR_LITERAL - 134)) | (1 << (OParser.MIN_INTEGER - 134)) | (1 << (OParser.MAX_INTEGER - 134)) | (1 << (OParser.SYMBOL_IDENTIFIER - 134)) | (1 << (OParser.TYPE_IDENTIFIER - 134)) | (1 << (OParser.VARIABLE_IDENTIFIER - 134)) | (1 << (OParser.TEXT_LITERAL - 134)) | (1 << (OParser.UUID_LITERAL - 134)) | (1 << (OParser.INTEGER_LITERAL - 134)) | (1 << (OParser.HEXA_LITERAL - 134)) | (1 << (OParser.DECIMAL_LITERAL - 134)) | (1 << (OParser.DATETIME_LITERAL - 134)) | (1 << (OParser.TIME_LITERAL - 134)) | (1 << (OParser.DATE_LITERAL - 134)) | (1 << (OParser.PERIOD_LITERAL - 134)) | (1 << (OParser.VERSION_LITERAL - 134)))) != 0):
                self.state = 2123
                self.expression(0)
                self.state = 2128
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==OParser.COMMA:
                    self.state = 2124
                    self.match(OParser.COMMA)
                    self.state = 2125
                    self.expression(0)
                    self.state = 2130
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Dict_entry_listContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dict_entry(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(OParser.Dict_entryContext)
            else:
                return self.getTypedRuleContext(OParser.Dict_entryContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(OParser.COMMA)
            else:
                return self.getToken(OParser.COMMA, i)

        def getRuleIndex(self):
            return OParser.RULE_dict_entry_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDict_entry_list" ):
                listener.enterDict_entry_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDict_entry_list" ):
                listener.exitDict_entry_list(self)




    def dict_entry_list(self):

        localctx = OParser.Dict_entry_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 300, self.RULE_dict_entry_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2133
            self.dict_entry()
            self.state = 2138
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==OParser.COMMA:
                self.state = 2134
                self.match(OParser.COMMA)
                self.state = 2135
                self.dict_entry()
                self.state = 2140
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Dict_entryContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.key = None # Dict_keyContext
            self.value = None # ExpressionContext

        def COLON(self):
            return self.getToken(OParser.COLON, 0)

        def dict_key(self):
            return self.getTypedRuleContext(OParser.Dict_keyContext,0)


        def expression(self):
            return self.getTypedRuleContext(OParser.ExpressionContext,0)


        def getRuleIndex(self):
            return OParser.RULE_dict_entry

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDict_entry" ):
                listener.enterDict_entry(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDict_entry" ):
                listener.exitDict_entry(self)




    def dict_entry(self):

        localctx = OParser.Dict_entryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 302, self.RULE_dict_entry)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2141
            localctx.key = self.dict_key()
            self.state = 2142
            self.match(OParser.COLON)
            self.state = 2143
            localctx.value = self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Dict_keyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return OParser.RULE_dict_key

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class DictKeyIdentifierContext(Dict_keyContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Dict_keyContext
            super().__init__(parser)
            self.name = None # Identifier_or_keywordContext
            self.copyFrom(ctx)

        def identifier_or_keyword(self):
            return self.getTypedRuleContext(OParser.Identifier_or_keywordContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDictKeyIdentifier" ):
                listener.enterDictKeyIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDictKeyIdentifier" ):
                listener.exitDictKeyIdentifier(self)


    class DictKeyTextContext(Dict_keyContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Dict_keyContext
            super().__init__(parser)
            self.name = None # Token
            self.copyFrom(ctx)

        def TEXT_LITERAL(self):
            return self.getToken(OParser.TEXT_LITERAL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDictKeyText" ):
                listener.enterDictKeyText(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDictKeyText" ):
                listener.exitDictKeyText(self)



    def dict_key(self):

        localctx = OParser.Dict_keyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 304, self.RULE_dict_key)
        try:
            self.state = 2147
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [OParser.JAVA, OParser.CSHARP, OParser.PYTHON2, OParser.PYTHON3, OParser.JAVASCRIPT, OParser.SWIFT, OParser.BOOLEAN, OParser.CHARACTER, OParser.TEXT, OParser.INTEGER, OParser.DECIMAL, OParser.DATE, OParser.TIME, OParser.DATETIME, OParser.PERIOD, OParser.VERSION, OParser.CODE, OParser.DOCUMENT, OParser.BLOB, OParser.IMAGE, OParser.UUID, OParser.ITERATOR, OParser.CURSOR, OParser.HTML, OParser.ABSTRACT, OParser.ALL, OParser.ALWAYS, OParser.AND, OParser.ANY, OParser.AS, OParser.ASC, OParser.ATTR, OParser.ATTRIBUTE, OParser.ATTRIBUTES, OParser.BINDINGS, OParser.BREAK, OParser.BY, OParser.CASE, OParser.CATCH, OParser.CATEGORY, OParser.CLASS, OParser.CLOSE, OParser.CONTAINS, OParser.DEF, OParser.DEFAULT, OParser.DEFINE, OParser.DELETE, OParser.DESC, OParser.DO, OParser.DOING, OParser.EACH, OParser.ELSE, OParser.ENUM, OParser.ENUMERATED, OParser.EXCEPT, OParser.EXECUTE, OParser.EXPECTING, OParser.EXTENDS, OParser.FETCH, OParser.FILTERED, OParser.FINALLY, OParser.FLUSH, OParser.FOR, OParser.FROM, OParser.GETTER, OParser.HAS, OParser.IF, OParser.IN, OParser.INDEX, OParser.IS, OParser.MATCHING, OParser.METHOD, OParser.METHODS, OParser.MODULO, OParser.MUTABLE, OParser.NATIVE, OParser.NONE, OParser.NOT, OParser.NOTHING, OParser.NULL, OParser.ON, OParser.ONE, OParser.OPERATOR, OParser.OR, OParser.ORDER, OParser.OTHERWISE, OParser.PASS, OParser.RAISE, OParser.READ, OParser.RECEIVING, OParser.RESOURCE, OParser.RETURN, OParser.RETURNING, OParser.ROWS, OParser.SELF, OParser.SETTER, OParser.SINGLETON, OParser.SORTED, OParser.STORABLE, OParser.STORE, OParser.SUPER, OParser.SWITCH, OParser.TEST, OParser.THIS, OParser.THROW, OParser.TO, OParser.TRY, OParser.VERIFYING, OParser.WIDGET, OParser.WITH, OParser.WHEN, OParser.WHERE, OParser.WHILE, OParser.WRITE, OParser.SYMBOL_IDENTIFIER, OParser.TYPE_IDENTIFIER, OParser.VARIABLE_IDENTIFIER]:
                localctx = OParser.DictKeyIdentifierContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2145
                localctx.name = self.identifier_or_keyword()
                pass
            elif token in [OParser.TEXT_LITERAL]:
                localctx = OParser.DictKeyTextContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2146
                localctx.name = self.match(OParser.TEXT_LITERAL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Slice_argumentsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return OParser.RULE_slice_arguments

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class SliceFirstAndLastContext(Slice_argumentsContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Slice_argumentsContext
            super().__init__(parser)
            self.first = None # ExpressionContext
            self.last = None # ExpressionContext
            self.copyFrom(ctx)

        def COLON(self):
            return self.getToken(OParser.COLON, 0)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(OParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(OParser.ExpressionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSliceFirstAndLast" ):
                listener.enterSliceFirstAndLast(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSliceFirstAndLast" ):
                listener.exitSliceFirstAndLast(self)


    class SliceLastOnlyContext(Slice_argumentsContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Slice_argumentsContext
            super().__init__(parser)
            self.last = None # ExpressionContext
            self.copyFrom(ctx)

        def COLON(self):
            return self.getToken(OParser.COLON, 0)
        def expression(self):
            return self.getTypedRuleContext(OParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSliceLastOnly" ):
                listener.enterSliceLastOnly(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSliceLastOnly" ):
                listener.exitSliceLastOnly(self)


    class SliceFirstOnlyContext(Slice_argumentsContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Slice_argumentsContext
            super().__init__(parser)
            self.first = None # ExpressionContext
            self.copyFrom(ctx)

        def COLON(self):
            return self.getToken(OParser.COLON, 0)
        def expression(self):
            return self.getTypedRuleContext(OParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSliceFirstOnly" ):
                listener.enterSliceFirstOnly(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSliceFirstOnly" ):
                listener.exitSliceFirstOnly(self)



    def slice_arguments(self):

        localctx = OParser.Slice_argumentsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 306, self.RULE_slice_arguments)
        try:
            self.state = 2158
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,186,self._ctx)
            if la_ == 1:
                localctx = OParser.SliceFirstAndLastContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2149
                localctx.first = self.expression(0)
                self.state = 2150
                self.match(OParser.COLON)
                self.state = 2151
                localctx.last = self.expression(0)
                pass

            elif la_ == 2:
                localctx = OParser.SliceFirstOnlyContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2153
                localctx.first = self.expression(0)
                self.state = 2154
                self.match(OParser.COLON)
                pass

            elif la_ == 3:
                localctx = OParser.SliceLastOnlyContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 2156
                self.match(OParser.COLON)
                self.state = 2157
                localctx.last = self.expression(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Assign_variable_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variable_identifier(self):
            return self.getTypedRuleContext(OParser.Variable_identifierContext,0)


        def assign(self):
            return self.getTypedRuleContext(OParser.AssignContext,0)


        def expression(self):
            return self.getTypedRuleContext(OParser.ExpressionContext,0)


        def getRuleIndex(self):
            return OParser.RULE_assign_variable_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssign_variable_statement" ):
                listener.enterAssign_variable_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssign_variable_statement" ):
                listener.exitAssign_variable_statement(self)




    def assign_variable_statement(self):

        localctx = OParser.Assign_variable_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 308, self.RULE_assign_variable_statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2160
            self.variable_identifier()
            self.state = 2161
            self.assign()
            self.state = 2162
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Assignable_instanceContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return OParser.RULE_assignable_instance

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class ChildInstanceContext(Assignable_instanceContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Assignable_instanceContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def assignable_instance(self):
            return self.getTypedRuleContext(OParser.Assignable_instanceContext,0)

        def child_instance(self):
            return self.getTypedRuleContext(OParser.Child_instanceContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterChildInstance" ):
                listener.enterChildInstance(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitChildInstance" ):
                listener.exitChildInstance(self)


    class RootInstanceContext(Assignable_instanceContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Assignable_instanceContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def variable_identifier(self):
            return self.getTypedRuleContext(OParser.Variable_identifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRootInstance" ):
                listener.enterRootInstance(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRootInstance" ):
                listener.exitRootInstance(self)



    def assignable_instance(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = OParser.Assignable_instanceContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 310
        self.enterRecursionRule(localctx, 310, self.RULE_assignable_instance, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            localctx = OParser.RootInstanceContext(self, localctx)
            self._ctx = localctx
            _prevctx = localctx

            self.state = 2165
            self.variable_identifier()
            self._ctx.stop = self._input.LT(-1)
            self.state = 2171
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,187,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = OParser.ChildInstanceContext(self, OParser.Assignable_instanceContext(self, _parentctx, _parentState))
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_assignable_instance)
                    self.state = 2167
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 2168
                    self.child_instance() 
                self.state = 2173
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,187,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class Is_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return OParser.RULE_is_expression

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class IsATypeExpressionContext(Is_expressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Is_expressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def VARIABLE_IDENTIFIER(self):
            return self.getToken(OParser.VARIABLE_IDENTIFIER, 0)
        def category_or_any_type(self):
            return self.getTypedRuleContext(OParser.Category_or_any_typeContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIsATypeExpression" ):
                listener.enterIsATypeExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIsATypeExpression" ):
                listener.exitIsATypeExpression(self)


    class IsOtherExpressionContext(Is_expressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Is_expressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self):
            return self.getTypedRuleContext(OParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIsOtherExpression" ):
                listener.enterIsOtherExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIsOtherExpression" ):
                listener.exitIsOtherExpression(self)



    def is_expression(self):

        localctx = OParser.Is_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 312, self.RULE_is_expression)
        try:
            self.state = 2178
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,188,self._ctx)
            if la_ == 1:
                localctx = OParser.IsATypeExpressionContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2174
                if not self.willBeAOrAn():
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "$parser.willBeAOrAn()")
                self.state = 2175
                self.match(OParser.VARIABLE_IDENTIFIER)
                self.state = 2176
                self.category_or_any_type()
                pass

            elif la_ == 2:
                localctx = OParser.IsOtherExpressionContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2177
                self.expression(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Arrow_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return OParser.RULE_arrow_expression

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class ArrowExpressionBodyContext(Arrow_expressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Arrow_expressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def arrow_prefix(self):
            return self.getTypedRuleContext(OParser.Arrow_prefixContext,0)

        def expression(self):
            return self.getTypedRuleContext(OParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArrowExpressionBody" ):
                listener.enterArrowExpressionBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArrowExpressionBody" ):
                listener.exitArrowExpressionBody(self)


    class ArrowStatementsBodyContext(Arrow_expressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Arrow_expressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def arrow_prefix(self):
            return self.getTypedRuleContext(OParser.Arrow_prefixContext,0)

        def LCURL(self):
            return self.getToken(OParser.LCURL, 0)
        def statement_list(self):
            return self.getTypedRuleContext(OParser.Statement_listContext,0)

        def RCURL(self):
            return self.getToken(OParser.RCURL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArrowStatementsBody" ):
                listener.enterArrowStatementsBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArrowStatementsBody" ):
                listener.exitArrowStatementsBody(self)



    def arrow_expression(self):

        localctx = OParser.Arrow_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 314, self.RULE_arrow_expression)
        try:
            self.state = 2188
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,189,self._ctx)
            if la_ == 1:
                localctx = OParser.ArrowExpressionBodyContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2180
                self.arrow_prefix()
                self.state = 2181
                self.expression(0)
                pass

            elif la_ == 2:
                localctx = OParser.ArrowStatementsBodyContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2183
                self.arrow_prefix()
                self.state = 2184
                self.match(OParser.LCURL)
                self.state = 2185
                self.statement_list()
                self.state = 2186
                self.match(OParser.RCURL)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Arrow_prefixContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.s1 = None # Ws_plusContext
            self.s2 = None # Ws_plusContext

        def arrow_args(self):
            return self.getTypedRuleContext(OParser.Arrow_argsContext,0)


        def EGT(self):
            return self.getToken(OParser.EGT, 0)

        def ws_plus(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(OParser.Ws_plusContext)
            else:
                return self.getTypedRuleContext(OParser.Ws_plusContext,i)


        def getRuleIndex(self):
            return OParser.RULE_arrow_prefix

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArrow_prefix" ):
                listener.enterArrow_prefix(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArrow_prefix" ):
                listener.exitArrow_prefix(self)




    def arrow_prefix(self):

        localctx = OParser.Arrow_prefixContext(self, self._ctx, self.state)
        self.enterRule(localctx, 316, self.RULE_arrow_prefix)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2190
            self.arrow_args()
            self.state = 2191
            localctx.s1 = self.ws_plus()
            self.state = 2192
            self.match(OParser.EGT)
            self.state = 2193
            localctx.s2 = self.ws_plus()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Arrow_argsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return OParser.RULE_arrow_args

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class ArrowListArgContext(Arrow_argsContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Arrow_argsContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LPAR(self):
            return self.getToken(OParser.LPAR, 0)
        def RPAR(self):
            return self.getToken(OParser.RPAR, 0)
        def variable_identifier_list(self):
            return self.getTypedRuleContext(OParser.Variable_identifier_listContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArrowListArg" ):
                listener.enterArrowListArg(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArrowListArg" ):
                listener.exitArrowListArg(self)


    class ArrowSingleArgContext(Arrow_argsContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Arrow_argsContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def variable_identifier(self):
            return self.getTypedRuleContext(OParser.Variable_identifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArrowSingleArg" ):
                listener.enterArrowSingleArg(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArrowSingleArg" ):
                listener.exitArrowSingleArg(self)



    def arrow_args(self):

        localctx = OParser.Arrow_argsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 318, self.RULE_arrow_args)
        self._la = 0 # Token type
        try:
            self.state = 2201
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [OParser.VARIABLE_IDENTIFIER]:
                localctx = OParser.ArrowSingleArgContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2195
                self.variable_identifier()
                pass
            elif token in [OParser.LPAR]:
                localctx = OParser.ArrowListArgContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2196
                self.match(OParser.LPAR)
                self.state = 2198
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==OParser.VARIABLE_IDENTIFIER:
                    self.state = 2197
                    self.variable_identifier_list()


                self.state = 2200
                self.match(OParser.RPAR)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Sorted_keyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def instance_expression(self):
            return self.getTypedRuleContext(OParser.Instance_expressionContext,0)


        def arrow_expression(self):
            return self.getTypedRuleContext(OParser.Arrow_expressionContext,0)


        def getRuleIndex(self):
            return OParser.RULE_sorted_key

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSorted_key" ):
                listener.enterSorted_key(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSorted_key" ):
                listener.exitSorted_key(self)




    def sorted_key(self):

        localctx = OParser.Sorted_keyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 320, self.RULE_sorted_key)
        try:
            self.state = 2205
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,192,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2203
                self.instance_expression(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2204
                self.arrow_expression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Read_all_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.source = None # ExpressionContext

        def READ(self):
            return self.getToken(OParser.READ, 0)

        def ALL(self):
            return self.getToken(OParser.ALL, 0)

        def FROM(self):
            return self.getToken(OParser.FROM, 0)

        def expression(self):
            return self.getTypedRuleContext(OParser.ExpressionContext,0)


        def getRuleIndex(self):
            return OParser.RULE_read_all_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRead_all_expression" ):
                listener.enterRead_all_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRead_all_expression" ):
                listener.exitRead_all_expression(self)




    def read_all_expression(self):

        localctx = OParser.Read_all_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 322, self.RULE_read_all_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2207
            self.match(OParser.READ)
            self.state = 2208
            self.match(OParser.ALL)
            self.state = 2209
            self.match(OParser.FROM)
            self.state = 2210
            localctx.source = self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Read_one_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.source = None # ExpressionContext

        def READ(self):
            return self.getToken(OParser.READ, 0)

        def ONE(self):
            return self.getToken(OParser.ONE, 0)

        def FROM(self):
            return self.getToken(OParser.FROM, 0)

        def expression(self):
            return self.getTypedRuleContext(OParser.ExpressionContext,0)


        def getRuleIndex(self):
            return OParser.RULE_read_one_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRead_one_expression" ):
                listener.enterRead_one_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRead_one_expression" ):
                listener.exitRead_one_expression(self)




    def read_one_expression(self):

        localctx = OParser.Read_one_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 324, self.RULE_read_one_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2212
            self.match(OParser.READ)
            self.state = 2213
            self.match(OParser.ONE)
            self.state = 2214
            self.match(OParser.FROM)
            self.state = 2215
            localctx.source = self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Order_by_listContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def order_by(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(OParser.Order_byContext)
            else:
                return self.getTypedRuleContext(OParser.Order_byContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(OParser.COMMA)
            else:
                return self.getToken(OParser.COMMA, i)

        def getRuleIndex(self):
            return OParser.RULE_order_by_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOrder_by_list" ):
                listener.enterOrder_by_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOrder_by_list" ):
                listener.exitOrder_by_list(self)




    def order_by_list(self):

        localctx = OParser.Order_by_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 326, self.RULE_order_by_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2217
            self.order_by()
            self.state = 2222
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==OParser.COMMA:
                self.state = 2218
                self.match(OParser.COMMA)
                self.state = 2219
                self.order_by()
                self.state = 2224
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Order_byContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variable_identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(OParser.Variable_identifierContext)
            else:
                return self.getTypedRuleContext(OParser.Variable_identifierContext,i)


        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(OParser.DOT)
            else:
                return self.getToken(OParser.DOT, i)

        def ASC(self):
            return self.getToken(OParser.ASC, 0)

        def DESC(self):
            return self.getToken(OParser.DESC, 0)

        def getRuleIndex(self):
            return OParser.RULE_order_by

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOrder_by" ):
                listener.enterOrder_by(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOrder_by" ):
                listener.exitOrder_by(self)




    def order_by(self):

        localctx = OParser.Order_byContext(self, self._ctx, self.state)
        self.enterRule(localctx, 328, self.RULE_order_by)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2225
            self.variable_identifier()
            self.state = 2230
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==OParser.DOT:
                self.state = 2226
                self.match(OParser.DOT)
                self.state = 2227
                self.variable_identifier()
                self.state = 2232
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2234
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==OParser.ASC or _la==OParser.DESC:
                self.state = 2233
                _la = self._input.LA(1)
                if not(_la==OParser.ASC or _la==OParser.DESC):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class OperatorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return OParser.RULE_operator

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class OperatorPlusContext(OperatorContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.OperatorContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def PLUS(self):
            return self.getToken(OParser.PLUS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOperatorPlus" ):
                listener.enterOperatorPlus(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOperatorPlus" ):
                listener.exitOperatorPlus(self)


    class OperatorDivideContext(OperatorContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.OperatorContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def divide(self):
            return self.getTypedRuleContext(OParser.DivideContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOperatorDivide" ):
                listener.enterOperatorDivide(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOperatorDivide" ):
                listener.exitOperatorDivide(self)


    class OperatorIDivideContext(OperatorContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.OperatorContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def idivide(self):
            return self.getTypedRuleContext(OParser.IdivideContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOperatorIDivide" ):
                listener.enterOperatorIDivide(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOperatorIDivide" ):
                listener.exitOperatorIDivide(self)


    class OperatorMultiplyContext(OperatorContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.OperatorContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def multiply(self):
            return self.getTypedRuleContext(OParser.MultiplyContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOperatorMultiply" ):
                listener.enterOperatorMultiply(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOperatorMultiply" ):
                listener.exitOperatorMultiply(self)


    class OperatorMinusContext(OperatorContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.OperatorContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def MINUS(self):
            return self.getToken(OParser.MINUS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOperatorMinus" ):
                listener.enterOperatorMinus(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOperatorMinus" ):
                listener.exitOperatorMinus(self)


    class OperatorModuloContext(OperatorContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.OperatorContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def modulo(self):
            return self.getTypedRuleContext(OParser.ModuloContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOperatorModulo" ):
                listener.enterOperatorModulo(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOperatorModulo" ):
                listener.exitOperatorModulo(self)



    def operator(self):

        localctx = OParser.OperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 330, self.RULE_operator)
        try:
            self.state = 2242
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [OParser.PLUS]:
                localctx = OParser.OperatorPlusContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2236
                self.match(OParser.PLUS)
                pass
            elif token in [OParser.MINUS]:
                localctx = OParser.OperatorMinusContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2237
                self.match(OParser.MINUS)
                pass
            elif token in [OParser.STAR]:
                localctx = OParser.OperatorMultiplyContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 2238
                self.multiply()
                pass
            elif token in [OParser.SLASH]:
                localctx = OParser.OperatorDivideContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 2239
                self.divide()
                pass
            elif token in [OParser.BSLASH]:
                localctx = OParser.OperatorIDivideContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 2240
                self.idivide()
                pass
            elif token in [OParser.PERCENT, OParser.MODULO]:
                localctx = OParser.OperatorModuloContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 2241
                self.modulo()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class KeywordContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def JAVA(self):
            return self.getToken(OParser.JAVA, 0)

        def CSHARP(self):
            return self.getToken(OParser.CSHARP, 0)

        def PYTHON2(self):
            return self.getToken(OParser.PYTHON2, 0)

        def PYTHON3(self):
            return self.getToken(OParser.PYTHON3, 0)

        def JAVASCRIPT(self):
            return self.getToken(OParser.JAVASCRIPT, 0)

        def SWIFT(self):
            return self.getToken(OParser.SWIFT, 0)

        def BOOLEAN(self):
            return self.getToken(OParser.BOOLEAN, 0)

        def CHARACTER(self):
            return self.getToken(OParser.CHARACTER, 0)

        def TEXT(self):
            return self.getToken(OParser.TEXT, 0)

        def INTEGER(self):
            return self.getToken(OParser.INTEGER, 0)

        def DECIMAL(self):
            return self.getToken(OParser.DECIMAL, 0)

        def DATE(self):
            return self.getToken(OParser.DATE, 0)

        def TIME(self):
            return self.getToken(OParser.TIME, 0)

        def DATETIME(self):
            return self.getToken(OParser.DATETIME, 0)

        def PERIOD(self):
            return self.getToken(OParser.PERIOD, 0)

        def VERSION(self):
            return self.getToken(OParser.VERSION, 0)

        def CODE(self):
            return self.getToken(OParser.CODE, 0)

        def DOCUMENT(self):
            return self.getToken(OParser.DOCUMENT, 0)

        def BLOB(self):
            return self.getToken(OParser.BLOB, 0)

        def IMAGE(self):
            return self.getToken(OParser.IMAGE, 0)

        def UUID(self):
            return self.getToken(OParser.UUID, 0)

        def ITERATOR(self):
            return self.getToken(OParser.ITERATOR, 0)

        def CURSOR(self):
            return self.getToken(OParser.CURSOR, 0)

        def HTML(self):
            return self.getToken(OParser.HTML, 0)

        def ABSTRACT(self):
            return self.getToken(OParser.ABSTRACT, 0)

        def ALL(self):
            return self.getToken(OParser.ALL, 0)

        def ALWAYS(self):
            return self.getToken(OParser.ALWAYS, 0)

        def AND(self):
            return self.getToken(OParser.AND, 0)

        def ANY(self):
            return self.getToken(OParser.ANY, 0)

        def AS(self):
            return self.getToken(OParser.AS, 0)

        def ASC(self):
            return self.getToken(OParser.ASC, 0)

        def ATTR(self):
            return self.getToken(OParser.ATTR, 0)

        def ATTRIBUTE(self):
            return self.getToken(OParser.ATTRIBUTE, 0)

        def ATTRIBUTES(self):
            return self.getToken(OParser.ATTRIBUTES, 0)

        def BINDINGS(self):
            return self.getToken(OParser.BINDINGS, 0)

        def BREAK(self):
            return self.getToken(OParser.BREAK, 0)

        def BY(self):
            return self.getToken(OParser.BY, 0)

        def CASE(self):
            return self.getToken(OParser.CASE, 0)

        def CATCH(self):
            return self.getToken(OParser.CATCH, 0)

        def CATEGORY(self):
            return self.getToken(OParser.CATEGORY, 0)

        def CLASS(self):
            return self.getToken(OParser.CLASS, 0)

        def CLOSE(self):
            return self.getToken(OParser.CLOSE, 0)

        def CONTAINS(self):
            return self.getToken(OParser.CONTAINS, 0)

        def DEF(self):
            return self.getToken(OParser.DEF, 0)

        def DEFAULT(self):
            return self.getToken(OParser.DEFAULT, 0)

        def DEFINE(self):
            return self.getToken(OParser.DEFINE, 0)

        def DELETE(self):
            return self.getToken(OParser.DELETE, 0)

        def DESC(self):
            return self.getToken(OParser.DESC, 0)

        def DO(self):
            return self.getToken(OParser.DO, 0)

        def DOING(self):
            return self.getToken(OParser.DOING, 0)

        def EACH(self):
            return self.getToken(OParser.EACH, 0)

        def ELSE(self):
            return self.getToken(OParser.ELSE, 0)

        def ENUM(self):
            return self.getToken(OParser.ENUM, 0)

        def ENUMERATED(self):
            return self.getToken(OParser.ENUMERATED, 0)

        def EXCEPT(self):
            return self.getToken(OParser.EXCEPT, 0)

        def EXECUTE(self):
            return self.getToken(OParser.EXECUTE, 0)

        def EXPECTING(self):
            return self.getToken(OParser.EXPECTING, 0)

        def EXTENDS(self):
            return self.getToken(OParser.EXTENDS, 0)

        def FETCH(self):
            return self.getToken(OParser.FETCH, 0)

        def FILTERED(self):
            return self.getToken(OParser.FILTERED, 0)

        def FINALLY(self):
            return self.getToken(OParser.FINALLY, 0)

        def FLUSH(self):
            return self.getToken(OParser.FLUSH, 0)

        def FOR(self):
            return self.getToken(OParser.FOR, 0)

        def FROM(self):
            return self.getToken(OParser.FROM, 0)

        def GETTER(self):
            return self.getToken(OParser.GETTER, 0)

        def HAS(self):
            return self.getToken(OParser.HAS, 0)

        def IF(self):
            return self.getToken(OParser.IF, 0)

        def IN(self):
            return self.getToken(OParser.IN, 0)

        def INDEX(self):
            return self.getToken(OParser.INDEX, 0)

        def IS(self):
            return self.getToken(OParser.IS, 0)

        def MATCHING(self):
            return self.getToken(OParser.MATCHING, 0)

        def METHOD(self):
            return self.getToken(OParser.METHOD, 0)

        def METHODS(self):
            return self.getToken(OParser.METHODS, 0)

        def MODULO(self):
            return self.getToken(OParser.MODULO, 0)

        def MUTABLE(self):
            return self.getToken(OParser.MUTABLE, 0)

        def NATIVE(self):
            return self.getToken(OParser.NATIVE, 0)

        def NONE(self):
            return self.getToken(OParser.NONE, 0)

        def NOT(self):
            return self.getToken(OParser.NOT, 0)

        def NOTHING(self):
            return self.getToken(OParser.NOTHING, 0)

        def NULL(self):
            return self.getToken(OParser.NULL, 0)

        def ON(self):
            return self.getToken(OParser.ON, 0)

        def ONE(self):
            return self.getToken(OParser.ONE, 0)

        def OPERATOR(self):
            return self.getToken(OParser.OPERATOR, 0)

        def OR(self):
            return self.getToken(OParser.OR, 0)

        def ORDER(self):
            return self.getToken(OParser.ORDER, 0)

        def OTHERWISE(self):
            return self.getToken(OParser.OTHERWISE, 0)

        def PASS(self):
            return self.getToken(OParser.PASS, 0)

        def RAISE(self):
            return self.getToken(OParser.RAISE, 0)

        def READ(self):
            return self.getToken(OParser.READ, 0)

        def RECEIVING(self):
            return self.getToken(OParser.RECEIVING, 0)

        def RESOURCE(self):
            return self.getToken(OParser.RESOURCE, 0)

        def RETURN(self):
            return self.getToken(OParser.RETURN, 0)

        def RETURNING(self):
            return self.getToken(OParser.RETURNING, 0)

        def ROWS(self):
            return self.getToken(OParser.ROWS, 0)

        def SELF(self):
            return self.getToken(OParser.SELF, 0)

        def SETTER(self):
            return self.getToken(OParser.SETTER, 0)

        def SINGLETON(self):
            return self.getToken(OParser.SINGLETON, 0)

        def SORTED(self):
            return self.getToken(OParser.SORTED, 0)

        def SUPER(self):
            return self.getToken(OParser.SUPER, 0)

        def STORABLE(self):
            return self.getToken(OParser.STORABLE, 0)

        def STORE(self):
            return self.getToken(OParser.STORE, 0)

        def SWITCH(self):
            return self.getToken(OParser.SWITCH, 0)

        def TEST(self):
            return self.getToken(OParser.TEST, 0)

        def THIS(self):
            return self.getToken(OParser.THIS, 0)

        def THROW(self):
            return self.getToken(OParser.THROW, 0)

        def TO(self):
            return self.getToken(OParser.TO, 0)

        def TRY(self):
            return self.getToken(OParser.TRY, 0)

        def VERIFYING(self):
            return self.getToken(OParser.VERIFYING, 0)

        def WIDGET(self):
            return self.getToken(OParser.WIDGET, 0)

        def WITH(self):
            return self.getToken(OParser.WITH, 0)

        def WHEN(self):
            return self.getToken(OParser.WHEN, 0)

        def WHERE(self):
            return self.getToken(OParser.WHERE, 0)

        def WHILE(self):
            return self.getToken(OParser.WHILE, 0)

        def WRITE(self):
            return self.getToken(OParser.WRITE, 0)

        def getRuleIndex(self):
            return OParser.RULE_keyword

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterKeyword" ):
                listener.enterKeyword(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitKeyword" ):
                listener.exitKeyword(self)




    def keyword(self):

        localctx = OParser.KeywordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 332, self.RULE_keyword)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2244
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << OParser.JAVA) | (1 << OParser.CSHARP) | (1 << OParser.PYTHON2) | (1 << OParser.PYTHON3) | (1 << OParser.JAVASCRIPT) | (1 << OParser.SWIFT) | (1 << OParser.BOOLEAN) | (1 << OParser.CHARACTER) | (1 << OParser.TEXT) | (1 << OParser.INTEGER) | (1 << OParser.DECIMAL) | (1 << OParser.DATE) | (1 << OParser.TIME) | (1 << OParser.DATETIME) | (1 << OParser.PERIOD) | (1 << OParser.VERSION) | (1 << OParser.CODE) | (1 << OParser.DOCUMENT) | (1 << OParser.BLOB) | (1 << OParser.IMAGE))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (OParser.UUID - 64)) | (1 << (OParser.ITERATOR - 64)) | (1 << (OParser.CURSOR - 64)) | (1 << (OParser.HTML - 64)) | (1 << (OParser.ABSTRACT - 64)) | (1 << (OParser.ALL - 64)) | (1 << (OParser.ALWAYS - 64)) | (1 << (OParser.AND - 64)) | (1 << (OParser.ANY - 64)) | (1 << (OParser.AS - 64)) | (1 << (OParser.ASC - 64)) | (1 << (OParser.ATTR - 64)) | (1 << (OParser.ATTRIBUTE - 64)) | (1 << (OParser.ATTRIBUTES - 64)) | (1 << (OParser.BINDINGS - 64)) | (1 << (OParser.BREAK - 64)) | (1 << (OParser.BY - 64)) | (1 << (OParser.CASE - 64)) | (1 << (OParser.CATCH - 64)) | (1 << (OParser.CATEGORY - 64)) | (1 << (OParser.CLASS - 64)) | (1 << (OParser.CLOSE - 64)) | (1 << (OParser.CONTAINS - 64)) | (1 << (OParser.DEF - 64)) | (1 << (OParser.DEFAULT - 64)) | (1 << (OParser.DEFINE - 64)) | (1 << (OParser.DELETE - 64)) | (1 << (OParser.DESC - 64)) | (1 << (OParser.DO - 64)) | (1 << (OParser.DOING - 64)) | (1 << (OParser.EACH - 64)) | (1 << (OParser.ELSE - 64)) | (1 << (OParser.ENUM - 64)) | (1 << (OParser.ENUMERATED - 64)) | (1 << (OParser.EXCEPT - 64)) | (1 << (OParser.EXECUTE - 64)) | (1 << (OParser.EXPECTING - 64)) | (1 << (OParser.EXTENDS - 64)) | (1 << (OParser.FETCH - 64)) | (1 << (OParser.FILTERED - 64)) | (1 << (OParser.FINALLY - 64)) | (1 << (OParser.FLUSH - 64)) | (1 << (OParser.FOR - 64)) | (1 << (OParser.FROM - 64)) | (1 << (OParser.GETTER - 64)) | (1 << (OParser.HAS - 64)) | (1 << (OParser.IF - 64)) | (1 << (OParser.IN - 64)) | (1 << (OParser.INDEX - 64)) | (1 << (OParser.IS - 64)) | (1 << (OParser.MATCHING - 64)) | (1 << (OParser.METHOD - 64)) | (1 << (OParser.METHODS - 64)) | (1 << (OParser.MODULO - 64)) | (1 << (OParser.MUTABLE - 64)) | (1 << (OParser.NATIVE - 64)) | (1 << (OParser.NONE - 64)) | (1 << (OParser.NOT - 64)) | (1 << (OParser.NOTHING - 64)) | (1 << (OParser.NULL - 64)) | (1 << (OParser.ON - 64)) | (1 << (OParser.ONE - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (OParser.OPERATOR - 128)) | (1 << (OParser.OR - 128)) | (1 << (OParser.ORDER - 128)) | (1 << (OParser.OTHERWISE - 128)) | (1 << (OParser.PASS - 128)) | (1 << (OParser.RAISE - 128)) | (1 << (OParser.READ - 128)) | (1 << (OParser.RECEIVING - 128)) | (1 << (OParser.RESOURCE - 128)) | (1 << (OParser.RETURN - 128)) | (1 << (OParser.RETURNING - 128)) | (1 << (OParser.ROWS - 128)) | (1 << (OParser.SELF - 128)) | (1 << (OParser.SETTER - 128)) | (1 << (OParser.SINGLETON - 128)) | (1 << (OParser.SORTED - 128)) | (1 << (OParser.STORABLE - 128)) | (1 << (OParser.STORE - 128)) | (1 << (OParser.SUPER - 128)) | (1 << (OParser.SWITCH - 128)) | (1 << (OParser.TEST - 128)) | (1 << (OParser.THIS - 128)) | (1 << (OParser.THROW - 128)) | (1 << (OParser.TO - 128)) | (1 << (OParser.TRY - 128)) | (1 << (OParser.VERIFYING - 128)) | (1 << (OParser.WIDGET - 128)) | (1 << (OParser.WITH - 128)) | (1 << (OParser.WHEN - 128)) | (1 << (OParser.WHERE - 128)) | (1 << (OParser.WHILE - 128)) | (1 << (OParser.WRITE - 128)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class New_tokenContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.i1 = None # Token

        def VARIABLE_IDENTIFIER(self):
            return self.getToken(OParser.VARIABLE_IDENTIFIER, 0)

        def getRuleIndex(self):
            return OParser.RULE_new_token

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNew_token" ):
                listener.enterNew_token(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNew_token" ):
                listener.exitNew_token(self)




    def new_token(self):

        localctx = OParser.New_tokenContext(self, self._ctx, self.state)
        self.enterRule(localctx, 334, self.RULE_new_token)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2246
            localctx.i1 = self.match(OParser.VARIABLE_IDENTIFIER)
            self.state = 2247
            if not self.isText(localctx.i1,"new"):
                from antlr4.error.Errors import FailedPredicateException
                raise FailedPredicateException(self, "$parser.isText($i1,\"new\")")
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Key_tokenContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.i1 = None # Token

        def VARIABLE_IDENTIFIER(self):
            return self.getToken(OParser.VARIABLE_IDENTIFIER, 0)

        def getRuleIndex(self):
            return OParser.RULE_key_token

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterKey_token" ):
                listener.enterKey_token(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitKey_token" ):
                listener.exitKey_token(self)




    def key_token(self):

        localctx = OParser.Key_tokenContext(self, self._ctx, self.state)
        self.enterRule(localctx, 336, self.RULE_key_token)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2249
            localctx.i1 = self.match(OParser.VARIABLE_IDENTIFIER)
            self.state = 2250
            if not self.isText(localctx.i1,"key"):
                from antlr4.error.Errors import FailedPredicateException
                raise FailedPredicateException(self, "$parser.isText($i1,\"key\")")
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Module_tokenContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.i1 = None # Token

        def VARIABLE_IDENTIFIER(self):
            return self.getToken(OParser.VARIABLE_IDENTIFIER, 0)

        def getRuleIndex(self):
            return OParser.RULE_module_token

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModule_token" ):
                listener.enterModule_token(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModule_token" ):
                listener.exitModule_token(self)




    def module_token(self):

        localctx = OParser.Module_tokenContext(self, self._ctx, self.state)
        self.enterRule(localctx, 338, self.RULE_module_token)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2252
            localctx.i1 = self.match(OParser.VARIABLE_IDENTIFIER)
            self.state = 2253
            if not self.isText(localctx.i1,"module"):
                from antlr4.error.Errors import FailedPredicateException
                raise FailedPredicateException(self, "$parser.isText($i1,\"module\")")
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Value_tokenContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.i1 = None # Token

        def VARIABLE_IDENTIFIER(self):
            return self.getToken(OParser.VARIABLE_IDENTIFIER, 0)

        def getRuleIndex(self):
            return OParser.RULE_value_token

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterValue_token" ):
                listener.enterValue_token(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitValue_token" ):
                listener.exitValue_token(self)




    def value_token(self):

        localctx = OParser.Value_tokenContext(self, self._ctx, self.state)
        self.enterRule(localctx, 340, self.RULE_value_token)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2255
            localctx.i1 = self.match(OParser.VARIABLE_IDENTIFIER)
            self.state = 2256
            if not self.isText(localctx.i1,"value"):
                from antlr4.error.Errors import FailedPredicateException
                raise FailedPredicateException(self, "$parser.isText($i1,\"value\")")
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Symbols_tokenContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.i1 = None # Token

        def VARIABLE_IDENTIFIER(self):
            return self.getToken(OParser.VARIABLE_IDENTIFIER, 0)

        def getRuleIndex(self):
            return OParser.RULE_symbols_token

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSymbols_token" ):
                listener.enterSymbols_token(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSymbols_token" ):
                listener.exitSymbols_token(self)




    def symbols_token(self):

        localctx = OParser.Symbols_tokenContext(self, self._ctx, self.state)
        self.enterRule(localctx, 342, self.RULE_symbols_token)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2258
            localctx.i1 = self.match(OParser.VARIABLE_IDENTIFIER)
            self.state = 2259
            if not self.isText(localctx.i1,"symbols"):
                from antlr4.error.Errors import FailedPredicateException
                raise FailedPredicateException(self, "$parser.isText($i1,\"symbols\")")
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AssignContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EQ(self):
            return self.getToken(OParser.EQ, 0)

        def getRuleIndex(self):
            return OParser.RULE_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssign" ):
                listener.enterAssign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssign" ):
                listener.exitAssign(self)




    def assign(self):

        localctx = OParser.AssignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 344, self.RULE_assign)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2261
            self.match(OParser.EQ)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class MultiplyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STAR(self):
            return self.getToken(OParser.STAR, 0)

        def getRuleIndex(self):
            return OParser.RULE_multiply

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMultiply" ):
                listener.enterMultiply(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMultiply" ):
                listener.exitMultiply(self)




    def multiply(self):

        localctx = OParser.MultiplyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 346, self.RULE_multiply)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2263
            self.match(OParser.STAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DivideContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SLASH(self):
            return self.getToken(OParser.SLASH, 0)

        def getRuleIndex(self):
            return OParser.RULE_divide

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDivide" ):
                listener.enterDivide(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDivide" ):
                listener.exitDivide(self)




    def divide(self):

        localctx = OParser.DivideContext(self, self._ctx, self.state)
        self.enterRule(localctx, 348, self.RULE_divide)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2265
            self.match(OParser.SLASH)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class IdivideContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BSLASH(self):
            return self.getToken(OParser.BSLASH, 0)

        def getRuleIndex(self):
            return OParser.RULE_idivide

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdivide" ):
                listener.enterIdivide(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdivide" ):
                listener.exitIdivide(self)




    def idivide(self):

        localctx = OParser.IdivideContext(self, self._ctx, self.state)
        self.enterRule(localctx, 350, self.RULE_idivide)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2267
            self.match(OParser.BSLASH)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ModuloContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PERCENT(self):
            return self.getToken(OParser.PERCENT, 0)

        def MODULO(self):
            return self.getToken(OParser.MODULO, 0)

        def getRuleIndex(self):
            return OParser.RULE_modulo

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModulo" ):
                listener.enterModulo(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModulo" ):
                listener.exitModulo(self)




    def modulo(self):

        localctx = OParser.ModuloContext(self, self._ctx, self.state)
        self.enterRule(localctx, 352, self.RULE_modulo)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2269
            _la = self._input.LA(1)
            if not(_la==OParser.PERCENT or _la==OParser.MODULO):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class LfsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return OParser.RULE_lfs

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLfs" ):
                listener.enterLfs(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLfs" ):
                listener.exitLfs(self)




    def lfs(self):

        localctx = OParser.LfsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 354, self.RULE_lfs)
        try:
            self.enterOuterAlt(localctx, 1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class LfpContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return OParser.RULE_lfp

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLfp" ):
                listener.enterLfp(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLfp" ):
                listener.exitLfp(self)




    def lfp(self):

        localctx = OParser.LfpContext(self, self._ctx, self.state)
        self.enterRule(localctx, 356, self.RULE_lfp)
        try:
            self.enterOuterAlt(localctx, 1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Javascript_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return OParser.RULE_javascript_statement

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class JavascriptStatementContext(Javascript_statementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Javascript_statementContext
            super().__init__(parser)
            self.exp = None # Javascript_expressionContext
            self.copyFrom(ctx)

        def SEMI(self):
            return self.getToken(OParser.SEMI, 0)
        def javascript_expression(self):
            return self.getTypedRuleContext(OParser.Javascript_expressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJavascriptStatement" ):
                listener.enterJavascriptStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJavascriptStatement" ):
                listener.exitJavascriptStatement(self)


    class JavascriptReturnStatementContext(Javascript_statementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Javascript_statementContext
            super().__init__(parser)
            self.exp = None # Javascript_expressionContext
            self.copyFrom(ctx)

        def RETURN(self):
            return self.getToken(OParser.RETURN, 0)
        def SEMI(self):
            return self.getToken(OParser.SEMI, 0)
        def javascript_expression(self):
            return self.getTypedRuleContext(OParser.Javascript_expressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJavascriptReturnStatement" ):
                listener.enterJavascriptReturnStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJavascriptReturnStatement" ):
                listener.exitJavascriptReturnStatement(self)



    def javascript_statement(self):

        localctx = OParser.Javascript_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 358, self.RULE_javascript_statement)
        try:
            self.state = 2282
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,197,self._ctx)
            if la_ == 1:
                localctx = OParser.JavascriptReturnStatementContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2275
                self.match(OParser.RETURN)
                self.state = 2276
                localctx.exp = self.javascript_expression(0)
                self.state = 2277
                self.match(OParser.SEMI)
                pass

            elif la_ == 2:
                localctx = OParser.JavascriptStatementContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2279
                localctx.exp = self.javascript_expression(0)
                self.state = 2280
                self.match(OParser.SEMI)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Javascript_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return OParser.RULE_javascript_expression

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class JavascriptSelectorExpressionContext(Javascript_expressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Javascript_expressionContext
            super().__init__(parser)
            self.parent = None # Javascript_expressionContext
            self.child = None # Javascript_selector_expressionContext
            self.copyFrom(ctx)

        def javascript_expression(self):
            return self.getTypedRuleContext(OParser.Javascript_expressionContext,0)

        def javascript_selector_expression(self):
            return self.getTypedRuleContext(OParser.Javascript_selector_expressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJavascriptSelectorExpression" ):
                listener.enterJavascriptSelectorExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJavascriptSelectorExpression" ):
                listener.exitJavascriptSelectorExpression(self)


    class JavascriptPrimaryExpressionContext(Javascript_expressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Javascript_expressionContext
            super().__init__(parser)
            self.exp = None # Javascript_primary_expressionContext
            self.copyFrom(ctx)

        def javascript_primary_expression(self):
            return self.getTypedRuleContext(OParser.Javascript_primary_expressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJavascriptPrimaryExpression" ):
                listener.enterJavascriptPrimaryExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJavascriptPrimaryExpression" ):
                listener.exitJavascriptPrimaryExpression(self)



    def javascript_expression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = OParser.Javascript_expressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 360
        self.enterRecursionRule(localctx, 360, self.RULE_javascript_expression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            localctx = OParser.JavascriptPrimaryExpressionContext(self, localctx)
            self._ctx = localctx
            _prevctx = localctx

            self.state = 2285
            localctx.exp = self.javascript_primary_expression()
            self._ctx.stop = self._input.LT(-1)
            self.state = 2291
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,198,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = OParser.JavascriptSelectorExpressionContext(self, OParser.Javascript_expressionContext(self, _parentctx, _parentState))
                    localctx.parent = _prevctx
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_javascript_expression)
                    self.state = 2287
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 2288
                    localctx.child = self.javascript_selector_expression() 
                self.state = 2293
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,198,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class Javascript_primary_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def javascript_this_expression(self):
            return self.getTypedRuleContext(OParser.Javascript_this_expressionContext,0)


        def javascript_new_expression(self):
            return self.getTypedRuleContext(OParser.Javascript_new_expressionContext,0)


        def javascript_parenthesis_expression(self):
            return self.getTypedRuleContext(OParser.Javascript_parenthesis_expressionContext,0)


        def javascript_identifier_expression(self):
            return self.getTypedRuleContext(OParser.Javascript_identifier_expressionContext,0)


        def javascript_literal_expression(self):
            return self.getTypedRuleContext(OParser.Javascript_literal_expressionContext,0)


        def javascript_method_expression(self):
            return self.getTypedRuleContext(OParser.Javascript_method_expressionContext,0)


        def javascript_item_expression(self):
            return self.getTypedRuleContext(OParser.Javascript_item_expressionContext,0)


        def getRuleIndex(self):
            return OParser.RULE_javascript_primary_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJavascript_primary_expression" ):
                listener.enterJavascript_primary_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJavascript_primary_expression" ):
                listener.exitJavascript_primary_expression(self)




    def javascript_primary_expression(self):

        localctx = OParser.Javascript_primary_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 362, self.RULE_javascript_primary_expression)
        try:
            self.state = 2301
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,199,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2294
                self.javascript_this_expression()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2295
                self.javascript_new_expression()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2296
                self.javascript_parenthesis_expression()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2297
                self.javascript_identifier_expression()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 2298
                self.javascript_literal_expression()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 2299
                self.javascript_method_expression()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 2300
                self.javascript_item_expression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Javascript_this_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def this_expression(self):
            return self.getTypedRuleContext(OParser.This_expressionContext,0)


        def getRuleIndex(self):
            return OParser.RULE_javascript_this_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJavascript_this_expression" ):
                listener.enterJavascript_this_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJavascript_this_expression" ):
                listener.exitJavascript_this_expression(self)




    def javascript_this_expression(self):

        localctx = OParser.Javascript_this_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 364, self.RULE_javascript_this_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2303
            self.this_expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Javascript_new_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def new_token(self):
            return self.getTypedRuleContext(OParser.New_tokenContext,0)


        def javascript_method_expression(self):
            return self.getTypedRuleContext(OParser.Javascript_method_expressionContext,0)


        def getRuleIndex(self):
            return OParser.RULE_javascript_new_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJavascript_new_expression" ):
                listener.enterJavascript_new_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJavascript_new_expression" ):
                listener.exitJavascript_new_expression(self)




    def javascript_new_expression(self):

        localctx = OParser.Javascript_new_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 366, self.RULE_javascript_new_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2305
            self.new_token()
            self.state = 2306
            self.javascript_method_expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Javascript_selector_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return OParser.RULE_javascript_selector_expression

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class JavaScriptMemberExpressionContext(Javascript_selector_expressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Javascript_selector_expressionContext
            super().__init__(parser)
            self.name = None # Javascript_identifierContext
            self.copyFrom(ctx)

        def DOT(self):
            return self.getToken(OParser.DOT, 0)
        def javascript_identifier(self):
            return self.getTypedRuleContext(OParser.Javascript_identifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJavaScriptMemberExpression" ):
                listener.enterJavaScriptMemberExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJavaScriptMemberExpression" ):
                listener.exitJavaScriptMemberExpression(self)


    class JavaScriptItemExpressionContext(Javascript_selector_expressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Javascript_selector_expressionContext
            super().__init__(parser)
            self.exp = None # Javascript_item_expressionContext
            self.copyFrom(ctx)

        def javascript_item_expression(self):
            return self.getTypedRuleContext(OParser.Javascript_item_expressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJavaScriptItemExpression" ):
                listener.enterJavaScriptItemExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJavaScriptItemExpression" ):
                listener.exitJavaScriptItemExpression(self)


    class JavaScriptMethodExpressionContext(Javascript_selector_expressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Javascript_selector_expressionContext
            super().__init__(parser)
            self.method = None # Javascript_method_expressionContext
            self.copyFrom(ctx)

        def DOT(self):
            return self.getToken(OParser.DOT, 0)
        def javascript_method_expression(self):
            return self.getTypedRuleContext(OParser.Javascript_method_expressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJavaScriptMethodExpression" ):
                listener.enterJavaScriptMethodExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJavaScriptMethodExpression" ):
                listener.exitJavaScriptMethodExpression(self)



    def javascript_selector_expression(self):

        localctx = OParser.Javascript_selector_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 368, self.RULE_javascript_selector_expression)
        try:
            self.state = 2313
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,200,self._ctx)
            if la_ == 1:
                localctx = OParser.JavaScriptMethodExpressionContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2308
                self.match(OParser.DOT)
                self.state = 2309
                localctx.method = self.javascript_method_expression()
                pass

            elif la_ == 2:
                localctx = OParser.JavaScriptMemberExpressionContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2310
                self.match(OParser.DOT)
                self.state = 2311
                localctx.name = self.javascript_identifier()
                pass

            elif la_ == 3:
                localctx = OParser.JavaScriptItemExpressionContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 2312
                localctx.exp = self.javascript_item_expression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Javascript_method_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # Javascript_identifierContext
            self.args = None # Javascript_argumentsContext

        def LPAR(self):
            return self.getToken(OParser.LPAR, 0)

        def RPAR(self):
            return self.getToken(OParser.RPAR, 0)

        def javascript_identifier(self):
            return self.getTypedRuleContext(OParser.Javascript_identifierContext,0)


        def javascript_arguments(self):
            return self.getTypedRuleContext(OParser.Javascript_argumentsContext,0)


        def getRuleIndex(self):
            return OParser.RULE_javascript_method_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJavascript_method_expression" ):
                listener.enterJavascript_method_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJavascript_method_expression" ):
                listener.exitJavascript_method_expression(self)




    def javascript_method_expression(self):

        localctx = OParser.Javascript_method_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 370, self.RULE_javascript_method_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2315
            localctx.name = self.javascript_identifier()
            self.state = 2316
            self.match(OParser.LPAR)
            self.state = 2318
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << OParser.JAVA) | (1 << OParser.CSHARP) | (1 << OParser.PYTHON2) | (1 << OParser.PYTHON3) | (1 << OParser.JAVASCRIPT) | (1 << OParser.SWIFT) | (1 << OParser.LPAR) | (1 << OParser.LBRAK) | (1 << OParser.BOOLEAN) | (1 << OParser.CHARACTER) | (1 << OParser.TEXT) | (1 << OParser.INTEGER) | (1 << OParser.DECIMAL) | (1 << OParser.DATE) | (1 << OParser.TIME) | (1 << OParser.DATETIME) | (1 << OParser.PERIOD) | (1 << OParser.VERSION) | (1 << OParser.CODE) | (1 << OParser.DOCUMENT) | (1 << OParser.BLOB) | (1 << OParser.IMAGE))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (OParser.UUID - 64)) | (1 << (OParser.ITERATOR - 64)) | (1 << (OParser.CURSOR - 64)) | (1 << (OParser.HTML - 64)) | (1 << (OParser.ABSTRACT - 64)) | (1 << (OParser.ALL - 64)) | (1 << (OParser.ALWAYS - 64)) | (1 << (OParser.AND - 64)) | (1 << (OParser.ANY - 64)) | (1 << (OParser.AS - 64)) | (1 << (OParser.ASC - 64)) | (1 << (OParser.ATTR - 64)) | (1 << (OParser.ATTRIBUTE - 64)) | (1 << (OParser.ATTRIBUTES - 64)) | (1 << (OParser.BINDINGS - 64)) | (1 << (OParser.BREAK - 64)) | (1 << (OParser.BY - 64)) | (1 << (OParser.CASE - 64)) | (1 << (OParser.CATCH - 64)) | (1 << (OParser.CATEGORY - 64)) | (1 << (OParser.CLASS - 64)) | (1 << (OParser.CLOSE - 64)) | (1 << (OParser.CONTAINS - 64)) | (1 << (OParser.DEF - 64)) | (1 << (OParser.DEFAULT - 64)) | (1 << (OParser.DEFINE - 64)) | (1 << (OParser.DELETE - 64)) | (1 << (OParser.DESC - 64)) | (1 << (OParser.DO - 64)) | (1 << (OParser.DOING - 64)) | (1 << (OParser.EACH - 64)) | (1 << (OParser.ELSE - 64)) | (1 << (OParser.ENUM - 64)) | (1 << (OParser.ENUMERATED - 64)) | (1 << (OParser.EXCEPT - 64)) | (1 << (OParser.EXECUTE - 64)) | (1 << (OParser.EXPECTING - 64)) | (1 << (OParser.EXTENDS - 64)) | (1 << (OParser.FETCH - 64)) | (1 << (OParser.FILTERED - 64)) | (1 << (OParser.FINALLY - 64)) | (1 << (OParser.FLUSH - 64)) | (1 << (OParser.FOR - 64)) | (1 << (OParser.FROM - 64)) | (1 << (OParser.GETTER - 64)) | (1 << (OParser.HAS - 64)) | (1 << (OParser.IF - 64)) | (1 << (OParser.IN - 64)) | (1 << (OParser.INDEX - 64)) | (1 << (OParser.IS - 64)) | (1 << (OParser.MATCHING - 64)) | (1 << (OParser.METHOD - 64)) | (1 << (OParser.METHODS - 64)) | (1 << (OParser.MODULO - 64)) | (1 << (OParser.MUTABLE - 64)) | (1 << (OParser.NATIVE - 64)) | (1 << (OParser.NONE - 64)) | (1 << (OParser.NOT - 64)) | (1 << (OParser.NOTHING - 64)) | (1 << (OParser.NULL - 64)) | (1 << (OParser.ON - 64)) | (1 << (OParser.ONE - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (OParser.OPERATOR - 128)) | (1 << (OParser.OR - 128)) | (1 << (OParser.ORDER - 128)) | (1 << (OParser.OTHERWISE - 128)) | (1 << (OParser.PASS - 128)) | (1 << (OParser.RAISE - 128)) | (1 << (OParser.READ - 128)) | (1 << (OParser.RECEIVING - 128)) | (1 << (OParser.RESOURCE - 128)) | (1 << (OParser.RETURN - 128)) | (1 << (OParser.RETURNING - 128)) | (1 << (OParser.ROWS - 128)) | (1 << (OParser.SELF - 128)) | (1 << (OParser.SETTER - 128)) | (1 << (OParser.SINGLETON - 128)) | (1 << (OParser.SORTED - 128)) | (1 << (OParser.STORABLE - 128)) | (1 << (OParser.STORE - 128)) | (1 << (OParser.SUPER - 128)) | (1 << (OParser.SWITCH - 128)) | (1 << (OParser.TEST - 128)) | (1 << (OParser.THIS - 128)) | (1 << (OParser.THROW - 128)) | (1 << (OParser.TO - 128)) | (1 << (OParser.TRY - 128)) | (1 << (OParser.VERIFYING - 128)) | (1 << (OParser.WIDGET - 128)) | (1 << (OParser.WITH - 128)) | (1 << (OParser.WHEN - 128)) | (1 << (OParser.WHERE - 128)) | (1 << (OParser.WHILE - 128)) | (1 << (OParser.WRITE - 128)) | (1 << (OParser.BOOLEAN_LITERAL - 128)) | (1 << (OParser.CHAR_LITERAL - 128)) | (1 << (OParser.SYMBOL_IDENTIFIER - 128)) | (1 << (OParser.TYPE_IDENTIFIER - 128)) | (1 << (OParser.VARIABLE_IDENTIFIER - 128)) | (1 << (OParser.DOLLAR_IDENTIFIER - 128)) | (1 << (OParser.TEXT_LITERAL - 128)) | (1 << (OParser.INTEGER_LITERAL - 128)) | (1 << (OParser.DECIMAL_LITERAL - 128)))) != 0):
                self.state = 2317
                localctx.args = self.javascript_arguments(0)


            self.state = 2320
            self.match(OParser.RPAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Javascript_argumentsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return OParser.RULE_javascript_arguments

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class JavascriptArgumentListContext(Javascript_argumentsContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Javascript_argumentsContext
            super().__init__(parser)
            self.item = None # Javascript_expressionContext
            self.copyFrom(ctx)

        def javascript_expression(self):
            return self.getTypedRuleContext(OParser.Javascript_expressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJavascriptArgumentList" ):
                listener.enterJavascriptArgumentList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJavascriptArgumentList" ):
                listener.exitJavascriptArgumentList(self)


    class JavascriptArgumentListItemContext(Javascript_argumentsContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Javascript_argumentsContext
            super().__init__(parser)
            self.items = None # Javascript_argumentsContext
            self.item = None # Javascript_expressionContext
            self.copyFrom(ctx)

        def COMMA(self):
            return self.getToken(OParser.COMMA, 0)
        def javascript_arguments(self):
            return self.getTypedRuleContext(OParser.Javascript_argumentsContext,0)

        def javascript_expression(self):
            return self.getTypedRuleContext(OParser.Javascript_expressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJavascriptArgumentListItem" ):
                listener.enterJavascriptArgumentListItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJavascriptArgumentListItem" ):
                listener.exitJavascriptArgumentListItem(self)



    def javascript_arguments(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = OParser.Javascript_argumentsContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 372
        self.enterRecursionRule(localctx, 372, self.RULE_javascript_arguments, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            localctx = OParser.JavascriptArgumentListContext(self, localctx)
            self._ctx = localctx
            _prevctx = localctx

            self.state = 2323
            localctx.item = self.javascript_expression(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 2330
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,202,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = OParser.JavascriptArgumentListItemContext(self, OParser.Javascript_argumentsContext(self, _parentctx, _parentState))
                    localctx.items = _prevctx
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_javascript_arguments)
                    self.state = 2325
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 2326
                    self.match(OParser.COMMA)
                    self.state = 2327
                    localctx.item = self.javascript_expression(0) 
                self.state = 2332
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,202,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class Javascript_item_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.exp = None # Javascript_expressionContext

        def LBRAK(self):
            return self.getToken(OParser.LBRAK, 0)

        def RBRAK(self):
            return self.getToken(OParser.RBRAK, 0)

        def javascript_expression(self):
            return self.getTypedRuleContext(OParser.Javascript_expressionContext,0)


        def getRuleIndex(self):
            return OParser.RULE_javascript_item_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJavascript_item_expression" ):
                listener.enterJavascript_item_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJavascript_item_expression" ):
                listener.exitJavascript_item_expression(self)




    def javascript_item_expression(self):

        localctx = OParser.Javascript_item_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 374, self.RULE_javascript_item_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2333
            self.match(OParser.LBRAK)
            self.state = 2334
            localctx.exp = self.javascript_expression(0)
            self.state = 2335
            self.match(OParser.RBRAK)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Javascript_parenthesis_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.exp = None # Javascript_expressionContext

        def LPAR(self):
            return self.getToken(OParser.LPAR, 0)

        def RPAR(self):
            return self.getToken(OParser.RPAR, 0)

        def javascript_expression(self):
            return self.getTypedRuleContext(OParser.Javascript_expressionContext,0)


        def getRuleIndex(self):
            return OParser.RULE_javascript_parenthesis_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJavascript_parenthesis_expression" ):
                listener.enterJavascript_parenthesis_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJavascript_parenthesis_expression" ):
                listener.exitJavascript_parenthesis_expression(self)




    def javascript_parenthesis_expression(self):

        localctx = OParser.Javascript_parenthesis_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 376, self.RULE_javascript_parenthesis_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2337
            self.match(OParser.LPAR)
            self.state = 2338
            localctx.exp = self.javascript_expression(0)
            self.state = 2339
            self.match(OParser.RPAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Javascript_identifier_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # Javascript_identifierContext

        def javascript_identifier(self):
            return self.getTypedRuleContext(OParser.Javascript_identifierContext,0)


        def getRuleIndex(self):
            return OParser.RULE_javascript_identifier_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJavascript_identifier_expression" ):
                listener.enterJavascript_identifier_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJavascript_identifier_expression" ):
                listener.exitJavascript_identifier_expression(self)




    def javascript_identifier_expression(self):

        localctx = OParser.Javascript_identifier_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 378, self.RULE_javascript_identifier_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2341
            localctx.name = self.javascript_identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Javascript_literal_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return OParser.RULE_javascript_literal_expression

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class JavascriptIntegerLiteralContext(Javascript_literal_expressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Javascript_literal_expressionContext
            super().__init__(parser)
            self.t = None # Token
            self.copyFrom(ctx)

        def INTEGER_LITERAL(self):
            return self.getToken(OParser.INTEGER_LITERAL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJavascriptIntegerLiteral" ):
                listener.enterJavascriptIntegerLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJavascriptIntegerLiteral" ):
                listener.exitJavascriptIntegerLiteral(self)


    class JavascriptBooleanLiteralContext(Javascript_literal_expressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Javascript_literal_expressionContext
            super().__init__(parser)
            self.t = None # Token
            self.copyFrom(ctx)

        def BOOLEAN_LITERAL(self):
            return self.getToken(OParser.BOOLEAN_LITERAL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJavascriptBooleanLiteral" ):
                listener.enterJavascriptBooleanLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJavascriptBooleanLiteral" ):
                listener.exitJavascriptBooleanLiteral(self)


    class JavascriptCharacterLiteralContext(Javascript_literal_expressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Javascript_literal_expressionContext
            super().__init__(parser)
            self.t = None # Token
            self.copyFrom(ctx)

        def CHAR_LITERAL(self):
            return self.getToken(OParser.CHAR_LITERAL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJavascriptCharacterLiteral" ):
                listener.enterJavascriptCharacterLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJavascriptCharacterLiteral" ):
                listener.exitJavascriptCharacterLiteral(self)


    class JavascriptTextLiteralContext(Javascript_literal_expressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Javascript_literal_expressionContext
            super().__init__(parser)
            self.t = None # Token
            self.copyFrom(ctx)

        def TEXT_LITERAL(self):
            return self.getToken(OParser.TEXT_LITERAL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJavascriptTextLiteral" ):
                listener.enterJavascriptTextLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJavascriptTextLiteral" ):
                listener.exitJavascriptTextLiteral(self)


    class JavascriptDecimalLiteralContext(Javascript_literal_expressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Javascript_literal_expressionContext
            super().__init__(parser)
            self.t = None # Token
            self.copyFrom(ctx)

        def DECIMAL_LITERAL(self):
            return self.getToken(OParser.DECIMAL_LITERAL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJavascriptDecimalLiteral" ):
                listener.enterJavascriptDecimalLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJavascriptDecimalLiteral" ):
                listener.exitJavascriptDecimalLiteral(self)



    def javascript_literal_expression(self):

        localctx = OParser.Javascript_literal_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 380, self.RULE_javascript_literal_expression)
        try:
            self.state = 2348
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [OParser.INTEGER_LITERAL]:
                localctx = OParser.JavascriptIntegerLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2343
                localctx.t = self.match(OParser.INTEGER_LITERAL)
                pass
            elif token in [OParser.DECIMAL_LITERAL]:
                localctx = OParser.JavascriptDecimalLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2344
                localctx.t = self.match(OParser.DECIMAL_LITERAL)
                pass
            elif token in [OParser.TEXT_LITERAL]:
                localctx = OParser.JavascriptTextLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 2345
                localctx.t = self.match(OParser.TEXT_LITERAL)
                pass
            elif token in [OParser.BOOLEAN_LITERAL]:
                localctx = OParser.JavascriptBooleanLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 2346
                localctx.t = self.match(OParser.BOOLEAN_LITERAL)
                pass
            elif token in [OParser.CHAR_LITERAL]:
                localctx = OParser.JavascriptCharacterLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 2347
                localctx.t = self.match(OParser.CHAR_LITERAL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Javascript_identifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VARIABLE_IDENTIFIER(self):
            return self.getToken(OParser.VARIABLE_IDENTIFIER, 0)

        def SYMBOL_IDENTIFIER(self):
            return self.getToken(OParser.SYMBOL_IDENTIFIER, 0)

        def DOLLAR_IDENTIFIER(self):
            return self.getToken(OParser.DOLLAR_IDENTIFIER, 0)

        def TYPE_IDENTIFIER(self):
            return self.getToken(OParser.TYPE_IDENTIFIER, 0)

        def keyword(self):
            return self.getTypedRuleContext(OParser.KeywordContext,0)


        def getRuleIndex(self):
            return OParser.RULE_javascript_identifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJavascript_identifier" ):
                listener.enterJavascript_identifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJavascript_identifier" ):
                listener.exitJavascript_identifier(self)




    def javascript_identifier(self):

        localctx = OParser.Javascript_identifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 382, self.RULE_javascript_identifier)
        try:
            self.state = 2355
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [OParser.VARIABLE_IDENTIFIER]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2350
                self.match(OParser.VARIABLE_IDENTIFIER)
                pass
            elif token in [OParser.SYMBOL_IDENTIFIER]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2351
                self.match(OParser.SYMBOL_IDENTIFIER)
                pass
            elif token in [OParser.DOLLAR_IDENTIFIER]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2352
                self.match(OParser.DOLLAR_IDENTIFIER)
                pass
            elif token in [OParser.TYPE_IDENTIFIER]:
                self.enterOuterAlt(localctx, 4)
                self.state = 2353
                self.match(OParser.TYPE_IDENTIFIER)
                pass
            elif token in [OParser.JAVA, OParser.CSHARP, OParser.PYTHON2, OParser.PYTHON3, OParser.JAVASCRIPT, OParser.SWIFT, OParser.BOOLEAN, OParser.CHARACTER, OParser.TEXT, OParser.INTEGER, OParser.DECIMAL, OParser.DATE, OParser.TIME, OParser.DATETIME, OParser.PERIOD, OParser.VERSION, OParser.CODE, OParser.DOCUMENT, OParser.BLOB, OParser.IMAGE, OParser.UUID, OParser.ITERATOR, OParser.CURSOR, OParser.HTML, OParser.ABSTRACT, OParser.ALL, OParser.ALWAYS, OParser.AND, OParser.ANY, OParser.AS, OParser.ASC, OParser.ATTR, OParser.ATTRIBUTE, OParser.ATTRIBUTES, OParser.BINDINGS, OParser.BREAK, OParser.BY, OParser.CASE, OParser.CATCH, OParser.CATEGORY, OParser.CLASS, OParser.CLOSE, OParser.CONTAINS, OParser.DEF, OParser.DEFAULT, OParser.DEFINE, OParser.DELETE, OParser.DESC, OParser.DO, OParser.DOING, OParser.EACH, OParser.ELSE, OParser.ENUM, OParser.ENUMERATED, OParser.EXCEPT, OParser.EXECUTE, OParser.EXPECTING, OParser.EXTENDS, OParser.FETCH, OParser.FILTERED, OParser.FINALLY, OParser.FLUSH, OParser.FOR, OParser.FROM, OParser.GETTER, OParser.HAS, OParser.IF, OParser.IN, OParser.INDEX, OParser.IS, OParser.MATCHING, OParser.METHOD, OParser.METHODS, OParser.MODULO, OParser.MUTABLE, OParser.NATIVE, OParser.NONE, OParser.NOT, OParser.NOTHING, OParser.NULL, OParser.ON, OParser.ONE, OParser.OPERATOR, OParser.OR, OParser.ORDER, OParser.OTHERWISE, OParser.PASS, OParser.RAISE, OParser.READ, OParser.RECEIVING, OParser.RESOURCE, OParser.RETURN, OParser.RETURNING, OParser.ROWS, OParser.SELF, OParser.SETTER, OParser.SINGLETON, OParser.SORTED, OParser.STORABLE, OParser.STORE, OParser.SUPER, OParser.SWITCH, OParser.TEST, OParser.THIS, OParser.THROW, OParser.TO, OParser.TRY, OParser.VERIFYING, OParser.WIDGET, OParser.WITH, OParser.WHEN, OParser.WHERE, OParser.WHILE, OParser.WRITE]:
                self.enterOuterAlt(localctx, 5)
                self.state = 2354
                self.keyword()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Python_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return OParser.RULE_python_statement

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class PythonStatementContext(Python_statementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Python_statementContext
            super().__init__(parser)
            self.exp = None # Python_expressionContext
            self.copyFrom(ctx)

        def python_expression(self):
            return self.getTypedRuleContext(OParser.Python_expressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPythonStatement" ):
                listener.enterPythonStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPythonStatement" ):
                listener.exitPythonStatement(self)


    class PythonReturnStatementContext(Python_statementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Python_statementContext
            super().__init__(parser)
            self.exp = None # Python_expressionContext
            self.copyFrom(ctx)

        def RETURN(self):
            return self.getToken(OParser.RETURN, 0)
        def python_expression(self):
            return self.getTypedRuleContext(OParser.Python_expressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPythonReturnStatement" ):
                listener.enterPythonReturnStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPythonReturnStatement" ):
                listener.exitPythonReturnStatement(self)



    def python_statement(self):

        localctx = OParser.Python_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 384, self.RULE_python_statement)
        try:
            self.state = 2360
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,205,self._ctx)
            if la_ == 1:
                localctx = OParser.PythonReturnStatementContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2357
                self.match(OParser.RETURN)
                self.state = 2358
                localctx.exp = self.python_expression(0)
                pass

            elif la_ == 2:
                localctx = OParser.PythonStatementContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2359
                localctx.exp = self.python_expression(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Python_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return OParser.RULE_python_expression

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class PythonSelectorExpressionContext(Python_expressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Python_expressionContext
            super().__init__(parser)
            self.parent = None # Python_expressionContext
            self.child = None # Python_selector_expressionContext
            self.copyFrom(ctx)

        def python_expression(self):
            return self.getTypedRuleContext(OParser.Python_expressionContext,0)

        def python_selector_expression(self):
            return self.getTypedRuleContext(OParser.Python_selector_expressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPythonSelectorExpression" ):
                listener.enterPythonSelectorExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPythonSelectorExpression" ):
                listener.exitPythonSelectorExpression(self)


    class PythonPrimaryExpressionContext(Python_expressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Python_expressionContext
            super().__init__(parser)
            self.exp = None # Python_primary_expressionContext
            self.copyFrom(ctx)

        def python_primary_expression(self):
            return self.getTypedRuleContext(OParser.Python_primary_expressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPythonPrimaryExpression" ):
                listener.enterPythonPrimaryExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPythonPrimaryExpression" ):
                listener.exitPythonPrimaryExpression(self)



    def python_expression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = OParser.Python_expressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 386
        self.enterRecursionRule(localctx, 386, self.RULE_python_expression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            localctx = OParser.PythonPrimaryExpressionContext(self, localctx)
            self._ctx = localctx
            _prevctx = localctx

            self.state = 2363
            localctx.exp = self.python_primary_expression()
            self._ctx.stop = self._input.LT(-1)
            self.state = 2369
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,206,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = OParser.PythonSelectorExpressionContext(self, OParser.Python_expressionContext(self, _parentctx, _parentState))
                    localctx.parent = _prevctx
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_python_expression)
                    self.state = 2365
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 2366
                    localctx.child = self.python_selector_expression() 
                self.state = 2371
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,206,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class Python_primary_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return OParser.RULE_python_primary_expression

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class PythonParenthesisExpressionContext(Python_primary_expressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Python_primary_expressionContext
            super().__init__(parser)
            self.exp = None # Python_parenthesis_expressionContext
            self.copyFrom(ctx)

        def python_parenthesis_expression(self):
            return self.getTypedRuleContext(OParser.Python_parenthesis_expressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPythonParenthesisExpression" ):
                listener.enterPythonParenthesisExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPythonParenthesisExpression" ):
                listener.exitPythonParenthesisExpression(self)


    class PythonIdentifierExpressionContext(Python_primary_expressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Python_primary_expressionContext
            super().__init__(parser)
            self.exp = None # Python_identifier_expressionContext
            self.copyFrom(ctx)

        def python_identifier_expression(self):
            return self.getTypedRuleContext(OParser.Python_identifier_expressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPythonIdentifierExpression" ):
                listener.enterPythonIdentifierExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPythonIdentifierExpression" ):
                listener.exitPythonIdentifierExpression(self)


    class PythonSelfExpressionContext(Python_primary_expressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Python_primary_expressionContext
            super().__init__(parser)
            self.exp = None # Python_self_expressionContext
            self.copyFrom(ctx)

        def python_self_expression(self):
            return self.getTypedRuleContext(OParser.Python_self_expressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPythonSelfExpression" ):
                listener.enterPythonSelfExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPythonSelfExpression" ):
                listener.exitPythonSelfExpression(self)


    class PythonLiteralExpressionContext(Python_primary_expressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Python_primary_expressionContext
            super().__init__(parser)
            self.exp = None # Python_literal_expressionContext
            self.copyFrom(ctx)

        def python_literal_expression(self):
            return self.getTypedRuleContext(OParser.Python_literal_expressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPythonLiteralExpression" ):
                listener.enterPythonLiteralExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPythonLiteralExpression" ):
                listener.exitPythonLiteralExpression(self)


    class PythonGlobalMethodExpressionContext(Python_primary_expressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Python_primary_expressionContext
            super().__init__(parser)
            self.exp = None # Python_method_expressionContext
            self.copyFrom(ctx)

        def python_method_expression(self):
            return self.getTypedRuleContext(OParser.Python_method_expressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPythonGlobalMethodExpression" ):
                listener.enterPythonGlobalMethodExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPythonGlobalMethodExpression" ):
                listener.exitPythonGlobalMethodExpression(self)



    def python_primary_expression(self):

        localctx = OParser.Python_primary_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 388, self.RULE_python_primary_expression)
        try:
            self.state = 2377
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,207,self._ctx)
            if la_ == 1:
                localctx = OParser.PythonSelfExpressionContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2372
                localctx.exp = self.python_self_expression()
                pass

            elif la_ == 2:
                localctx = OParser.PythonParenthesisExpressionContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2373
                localctx.exp = self.python_parenthesis_expression()
                pass

            elif la_ == 3:
                localctx = OParser.PythonIdentifierExpressionContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 2374
                localctx.exp = self.python_identifier_expression(0)
                pass

            elif la_ == 4:
                localctx = OParser.PythonLiteralExpressionContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 2375
                localctx.exp = self.python_literal_expression()
                pass

            elif la_ == 5:
                localctx = OParser.PythonGlobalMethodExpressionContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 2376
                localctx.exp = self.python_method_expression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Python_self_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def this_expression(self):
            return self.getTypedRuleContext(OParser.This_expressionContext,0)


        def getRuleIndex(self):
            return OParser.RULE_python_self_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPython_self_expression" ):
                listener.enterPython_self_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPython_self_expression" ):
                listener.exitPython_self_expression(self)




    def python_self_expression(self):

        localctx = OParser.Python_self_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 390, self.RULE_python_self_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2379
            self.this_expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Python_selector_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return OParser.RULE_python_selector_expression

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class PythonMethodExpressionContext(Python_selector_expressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Python_selector_expressionContext
            super().__init__(parser)
            self.exp = None # Python_method_expressionContext
            self.copyFrom(ctx)

        def DOT(self):
            return self.getToken(OParser.DOT, 0)
        def python_method_expression(self):
            return self.getTypedRuleContext(OParser.Python_method_expressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPythonMethodExpression" ):
                listener.enterPythonMethodExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPythonMethodExpression" ):
                listener.exitPythonMethodExpression(self)


    class PythonItemExpressionContext(Python_selector_expressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Python_selector_expressionContext
            super().__init__(parser)
            self.exp = None # Python_expressionContext
            self.copyFrom(ctx)

        def LBRAK(self):
            return self.getToken(OParser.LBRAK, 0)
        def RBRAK(self):
            return self.getToken(OParser.RBRAK, 0)
        def python_expression(self):
            return self.getTypedRuleContext(OParser.Python_expressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPythonItemExpression" ):
                listener.enterPythonItemExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPythonItemExpression" ):
                listener.exitPythonItemExpression(self)



    def python_selector_expression(self):

        localctx = OParser.Python_selector_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 392, self.RULE_python_selector_expression)
        try:
            self.state = 2387
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [OParser.DOT]:
                localctx = OParser.PythonMethodExpressionContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2381
                self.match(OParser.DOT)
                self.state = 2382
                localctx.exp = self.python_method_expression()
                pass
            elif token in [OParser.LBRAK]:
                localctx = OParser.PythonItemExpressionContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2383
                self.match(OParser.LBRAK)
                self.state = 2384
                localctx.exp = self.python_expression(0)
                self.state = 2385
                self.match(OParser.RBRAK)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Python_method_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # Python_identifierContext
            self.args = None # Python_argument_listContext

        def LPAR(self):
            return self.getToken(OParser.LPAR, 0)

        def RPAR(self):
            return self.getToken(OParser.RPAR, 0)

        def python_identifier(self):
            return self.getTypedRuleContext(OParser.Python_identifierContext,0)


        def python_argument_list(self):
            return self.getTypedRuleContext(OParser.Python_argument_listContext,0)


        def getRuleIndex(self):
            return OParser.RULE_python_method_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPython_method_expression" ):
                listener.enterPython_method_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPython_method_expression" ):
                listener.exitPython_method_expression(self)




    def python_method_expression(self):

        localctx = OParser.Python_method_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 394, self.RULE_python_method_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2389
            localctx.name = self.python_identifier()
            self.state = 2390
            self.match(OParser.LPAR)
            self.state = 2392
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << OParser.JAVA) | (1 << OParser.CSHARP) | (1 << OParser.PYTHON2) | (1 << OParser.PYTHON3) | (1 << OParser.JAVASCRIPT) | (1 << OParser.SWIFT) | (1 << OParser.LPAR) | (1 << OParser.BOOLEAN) | (1 << OParser.CHARACTER) | (1 << OParser.TEXT) | (1 << OParser.INTEGER) | (1 << OParser.DECIMAL) | (1 << OParser.DATE) | (1 << OParser.TIME) | (1 << OParser.DATETIME) | (1 << OParser.PERIOD) | (1 << OParser.VERSION) | (1 << OParser.CODE) | (1 << OParser.DOCUMENT) | (1 << OParser.BLOB) | (1 << OParser.IMAGE))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (OParser.UUID - 64)) | (1 << (OParser.ITERATOR - 64)) | (1 << (OParser.CURSOR - 64)) | (1 << (OParser.HTML - 64)) | (1 << (OParser.ABSTRACT - 64)) | (1 << (OParser.ALL - 64)) | (1 << (OParser.ALWAYS - 64)) | (1 << (OParser.AND - 64)) | (1 << (OParser.ANY - 64)) | (1 << (OParser.AS - 64)) | (1 << (OParser.ASC - 64)) | (1 << (OParser.ATTR - 64)) | (1 << (OParser.ATTRIBUTE - 64)) | (1 << (OParser.ATTRIBUTES - 64)) | (1 << (OParser.BINDINGS - 64)) | (1 << (OParser.BREAK - 64)) | (1 << (OParser.BY - 64)) | (1 << (OParser.CASE - 64)) | (1 << (OParser.CATCH - 64)) | (1 << (OParser.CATEGORY - 64)) | (1 << (OParser.CLASS - 64)) | (1 << (OParser.CLOSE - 64)) | (1 << (OParser.CONTAINS - 64)) | (1 << (OParser.DEF - 64)) | (1 << (OParser.DEFAULT - 64)) | (1 << (OParser.DEFINE - 64)) | (1 << (OParser.DELETE - 64)) | (1 << (OParser.DESC - 64)) | (1 << (OParser.DO - 64)) | (1 << (OParser.DOING - 64)) | (1 << (OParser.EACH - 64)) | (1 << (OParser.ELSE - 64)) | (1 << (OParser.ENUM - 64)) | (1 << (OParser.ENUMERATED - 64)) | (1 << (OParser.EXCEPT - 64)) | (1 << (OParser.EXECUTE - 64)) | (1 << (OParser.EXPECTING - 64)) | (1 << (OParser.EXTENDS - 64)) | (1 << (OParser.FETCH - 64)) | (1 << (OParser.FILTERED - 64)) | (1 << (OParser.FINALLY - 64)) | (1 << (OParser.FLUSH - 64)) | (1 << (OParser.FOR - 64)) | (1 << (OParser.FROM - 64)) | (1 << (OParser.GETTER - 64)) | (1 << (OParser.HAS - 64)) | (1 << (OParser.IF - 64)) | (1 << (OParser.IN - 64)) | (1 << (OParser.INDEX - 64)) | (1 << (OParser.IS - 64)) | (1 << (OParser.MATCHING - 64)) | (1 << (OParser.METHOD - 64)) | (1 << (OParser.METHODS - 64)) | (1 << (OParser.MODULO - 64)) | (1 << (OParser.MUTABLE - 64)) | (1 << (OParser.NATIVE - 64)) | (1 << (OParser.NONE - 64)) | (1 << (OParser.NOT - 64)) | (1 << (OParser.NOTHING - 64)) | (1 << (OParser.NULL - 64)) | (1 << (OParser.ON - 64)) | (1 << (OParser.ONE - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (OParser.OPERATOR - 128)) | (1 << (OParser.OR - 128)) | (1 << (OParser.ORDER - 128)) | (1 << (OParser.OTHERWISE - 128)) | (1 << (OParser.PASS - 128)) | (1 << (OParser.RAISE - 128)) | (1 << (OParser.READ - 128)) | (1 << (OParser.RECEIVING - 128)) | (1 << (OParser.RESOURCE - 128)) | (1 << (OParser.RETURN - 128)) | (1 << (OParser.RETURNING - 128)) | (1 << (OParser.ROWS - 128)) | (1 << (OParser.SELF - 128)) | (1 << (OParser.SETTER - 128)) | (1 << (OParser.SINGLETON - 128)) | (1 << (OParser.SORTED - 128)) | (1 << (OParser.STORABLE - 128)) | (1 << (OParser.STORE - 128)) | (1 << (OParser.SUPER - 128)) | (1 << (OParser.SWITCH - 128)) | (1 << (OParser.TEST - 128)) | (1 << (OParser.THIS - 128)) | (1 << (OParser.THROW - 128)) | (1 << (OParser.TO - 128)) | (1 << (OParser.TRY - 128)) | (1 << (OParser.VERIFYING - 128)) | (1 << (OParser.WIDGET - 128)) | (1 << (OParser.WITH - 128)) | (1 << (OParser.WHEN - 128)) | (1 << (OParser.WHERE - 128)) | (1 << (OParser.WHILE - 128)) | (1 << (OParser.WRITE - 128)) | (1 << (OParser.BOOLEAN_LITERAL - 128)) | (1 << (OParser.CHAR_LITERAL - 128)) | (1 << (OParser.SYMBOL_IDENTIFIER - 128)) | (1 << (OParser.TYPE_IDENTIFIER - 128)) | (1 << (OParser.VARIABLE_IDENTIFIER - 128)) | (1 << (OParser.DOLLAR_IDENTIFIER - 128)) | (1 << (OParser.TEXT_LITERAL - 128)) | (1 << (OParser.INTEGER_LITERAL - 128)) | (1 << (OParser.DECIMAL_LITERAL - 128)))) != 0):
                self.state = 2391
                localctx.args = self.python_argument_list()


            self.state = 2394
            self.match(OParser.RPAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Python_argument_listContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return OParser.RULE_python_argument_list

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class PythonOrdinalOnlyArgumentListContext(Python_argument_listContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Python_argument_listContext
            super().__init__(parser)
            self.ordinal = None # Python_ordinal_argument_listContext
            self.copyFrom(ctx)

        def python_ordinal_argument_list(self):
            return self.getTypedRuleContext(OParser.Python_ordinal_argument_listContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPythonOrdinalOnlyArgumentList" ):
                listener.enterPythonOrdinalOnlyArgumentList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPythonOrdinalOnlyArgumentList" ):
                listener.exitPythonOrdinalOnlyArgumentList(self)


    class PythonNamedOnlyArgumentListContext(Python_argument_listContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Python_argument_listContext
            super().__init__(parser)
            self.named = None # Python_named_argument_listContext
            self.copyFrom(ctx)

        def python_named_argument_list(self):
            return self.getTypedRuleContext(OParser.Python_named_argument_listContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPythonNamedOnlyArgumentList" ):
                listener.enterPythonNamedOnlyArgumentList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPythonNamedOnlyArgumentList" ):
                listener.exitPythonNamedOnlyArgumentList(self)


    class PythonArgumentListContext(Python_argument_listContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Python_argument_listContext
            super().__init__(parser)
            self.ordinal = None # Python_ordinal_argument_listContext
            self.named = None # Python_named_argument_listContext
            self.copyFrom(ctx)

        def COMMA(self):
            return self.getToken(OParser.COMMA, 0)
        def python_ordinal_argument_list(self):
            return self.getTypedRuleContext(OParser.Python_ordinal_argument_listContext,0)

        def python_named_argument_list(self):
            return self.getTypedRuleContext(OParser.Python_named_argument_listContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPythonArgumentList" ):
                listener.enterPythonArgumentList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPythonArgumentList" ):
                listener.exitPythonArgumentList(self)



    def python_argument_list(self):

        localctx = OParser.Python_argument_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 396, self.RULE_python_argument_list)
        try:
            self.state = 2402
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,210,self._ctx)
            if la_ == 1:
                localctx = OParser.PythonOrdinalOnlyArgumentListContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2396
                localctx.ordinal = self.python_ordinal_argument_list(0)
                pass

            elif la_ == 2:
                localctx = OParser.PythonNamedOnlyArgumentListContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2397
                localctx.named = self.python_named_argument_list(0)
                pass

            elif la_ == 3:
                localctx = OParser.PythonArgumentListContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 2398
                localctx.ordinal = self.python_ordinal_argument_list(0)
                self.state = 2399
                self.match(OParser.COMMA)
                self.state = 2400
                localctx.named = self.python_named_argument_list(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Python_ordinal_argument_listContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return OParser.RULE_python_ordinal_argument_list

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class PythonOrdinalArgumentListContext(Python_ordinal_argument_listContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Python_ordinal_argument_listContext
            super().__init__(parser)
            self.item = None # Python_expressionContext
            self.copyFrom(ctx)

        def python_expression(self):
            return self.getTypedRuleContext(OParser.Python_expressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPythonOrdinalArgumentList" ):
                listener.enterPythonOrdinalArgumentList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPythonOrdinalArgumentList" ):
                listener.exitPythonOrdinalArgumentList(self)


    class PythonOrdinalArgumentListItemContext(Python_ordinal_argument_listContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Python_ordinal_argument_listContext
            super().__init__(parser)
            self.items = None # Python_ordinal_argument_listContext
            self.item = None # Python_expressionContext
            self.copyFrom(ctx)

        def COMMA(self):
            return self.getToken(OParser.COMMA, 0)
        def python_ordinal_argument_list(self):
            return self.getTypedRuleContext(OParser.Python_ordinal_argument_listContext,0)

        def python_expression(self):
            return self.getTypedRuleContext(OParser.Python_expressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPythonOrdinalArgumentListItem" ):
                listener.enterPythonOrdinalArgumentListItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPythonOrdinalArgumentListItem" ):
                listener.exitPythonOrdinalArgumentListItem(self)



    def python_ordinal_argument_list(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = OParser.Python_ordinal_argument_listContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 398
        self.enterRecursionRule(localctx, 398, self.RULE_python_ordinal_argument_list, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            localctx = OParser.PythonOrdinalArgumentListContext(self, localctx)
            self._ctx = localctx
            _prevctx = localctx

            self.state = 2405
            localctx.item = self.python_expression(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 2412
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,211,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = OParser.PythonOrdinalArgumentListItemContext(self, OParser.Python_ordinal_argument_listContext(self, _parentctx, _parentState))
                    localctx.items = _prevctx
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_python_ordinal_argument_list)
                    self.state = 2407
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 2408
                    self.match(OParser.COMMA)
                    self.state = 2409
                    localctx.item = self.python_expression(0) 
                self.state = 2414
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,211,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class Python_named_argument_listContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return OParser.RULE_python_named_argument_list

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class PythonNamedArgumentListContext(Python_named_argument_listContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Python_named_argument_listContext
            super().__init__(parser)
            self.name = None # Python_identifierContext
            self.exp = None # Python_expressionContext
            self.copyFrom(ctx)

        def EQ(self):
            return self.getToken(OParser.EQ, 0)
        def python_identifier(self):
            return self.getTypedRuleContext(OParser.Python_identifierContext,0)

        def python_expression(self):
            return self.getTypedRuleContext(OParser.Python_expressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPythonNamedArgumentList" ):
                listener.enterPythonNamedArgumentList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPythonNamedArgumentList" ):
                listener.exitPythonNamedArgumentList(self)


    class PythonNamedArgumentListItemContext(Python_named_argument_listContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Python_named_argument_listContext
            super().__init__(parser)
            self.items = None # Python_named_argument_listContext
            self.name = None # Python_identifierContext
            self.exp = None # Python_expressionContext
            self.copyFrom(ctx)

        def COMMA(self):
            return self.getToken(OParser.COMMA, 0)
        def EQ(self):
            return self.getToken(OParser.EQ, 0)
        def python_named_argument_list(self):
            return self.getTypedRuleContext(OParser.Python_named_argument_listContext,0)

        def python_identifier(self):
            return self.getTypedRuleContext(OParser.Python_identifierContext,0)

        def python_expression(self):
            return self.getTypedRuleContext(OParser.Python_expressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPythonNamedArgumentListItem" ):
                listener.enterPythonNamedArgumentListItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPythonNamedArgumentListItem" ):
                listener.exitPythonNamedArgumentListItem(self)



    def python_named_argument_list(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = OParser.Python_named_argument_listContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 400
        self.enterRecursionRule(localctx, 400, self.RULE_python_named_argument_list, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            localctx = OParser.PythonNamedArgumentListContext(self, localctx)
            self._ctx = localctx
            _prevctx = localctx

            self.state = 2416
            localctx.name = self.python_identifier()
            self.state = 2417
            self.match(OParser.EQ)
            self.state = 2418
            localctx.exp = self.python_expression(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 2428
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,212,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = OParser.PythonNamedArgumentListItemContext(self, OParser.Python_named_argument_listContext(self, _parentctx, _parentState))
                    localctx.items = _prevctx
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_python_named_argument_list)
                    self.state = 2420
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 2421
                    self.match(OParser.COMMA)
                    self.state = 2422
                    localctx.name = self.python_identifier()
                    self.state = 2423
                    self.match(OParser.EQ)
                    self.state = 2424
                    localctx.exp = self.python_expression(0) 
                self.state = 2430
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,212,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class Python_parenthesis_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.exp = None # Python_expressionContext

        def LPAR(self):
            return self.getToken(OParser.LPAR, 0)

        def RPAR(self):
            return self.getToken(OParser.RPAR, 0)

        def python_expression(self):
            return self.getTypedRuleContext(OParser.Python_expressionContext,0)


        def getRuleIndex(self):
            return OParser.RULE_python_parenthesis_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPython_parenthesis_expression" ):
                listener.enterPython_parenthesis_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPython_parenthesis_expression" ):
                listener.exitPython_parenthesis_expression(self)




    def python_parenthesis_expression(self):

        localctx = OParser.Python_parenthesis_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 402, self.RULE_python_parenthesis_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2431
            self.match(OParser.LPAR)
            self.state = 2432
            localctx.exp = self.python_expression(0)
            self.state = 2433
            self.match(OParser.RPAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Python_identifier_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return OParser.RULE_python_identifier_expression

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class PythonChildIdentifierContext(Python_identifier_expressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Python_identifier_expressionContext
            super().__init__(parser)
            self.parent = None # Python_identifier_expressionContext
            self.name = None # Python_identifierContext
            self.copyFrom(ctx)

        def DOT(self):
            return self.getToken(OParser.DOT, 0)
        def python_identifier_expression(self):
            return self.getTypedRuleContext(OParser.Python_identifier_expressionContext,0)

        def python_identifier(self):
            return self.getTypedRuleContext(OParser.Python_identifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPythonChildIdentifier" ):
                listener.enterPythonChildIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPythonChildIdentifier" ):
                listener.exitPythonChildIdentifier(self)


    class PythonPromptoIdentifierContext(Python_identifier_expressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Python_identifier_expressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DOLLAR_IDENTIFIER(self):
            return self.getToken(OParser.DOLLAR_IDENTIFIER, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPythonPromptoIdentifier" ):
                listener.enterPythonPromptoIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPythonPromptoIdentifier" ):
                listener.exitPythonPromptoIdentifier(self)


    class PythonIdentifierContext(Python_identifier_expressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Python_identifier_expressionContext
            super().__init__(parser)
            self.name = None # Python_identifierContext
            self.copyFrom(ctx)

        def python_identifier(self):
            return self.getTypedRuleContext(OParser.Python_identifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPythonIdentifier" ):
                listener.enterPythonIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPythonIdentifier" ):
                listener.exitPythonIdentifier(self)



    def python_identifier_expression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = OParser.Python_identifier_expressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 404
        self.enterRecursionRule(localctx, 404, self.RULE_python_identifier_expression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2438
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,213,self._ctx)
            if la_ == 1:
                localctx = OParser.PythonPromptoIdentifierContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx

                self.state = 2436
                self.match(OParser.DOLLAR_IDENTIFIER)
                pass

            elif la_ == 2:
                localctx = OParser.PythonIdentifierContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2437
                localctx.name = self.python_identifier()
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 2445
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,214,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = OParser.PythonChildIdentifierContext(self, OParser.Python_identifier_expressionContext(self, _parentctx, _parentState))
                    localctx.parent = _prevctx
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_python_identifier_expression)
                    self.state = 2440
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 2441
                    self.match(OParser.DOT)
                    self.state = 2442
                    localctx.name = self.python_identifier() 
                self.state = 2447
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,214,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class Python_literal_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return OParser.RULE_python_literal_expression

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class PythonIntegerLiteralContext(Python_literal_expressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Python_literal_expressionContext
            super().__init__(parser)
            self.t = None # Token
            self.copyFrom(ctx)

        def INTEGER_LITERAL(self):
            return self.getToken(OParser.INTEGER_LITERAL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPythonIntegerLiteral" ):
                listener.enterPythonIntegerLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPythonIntegerLiteral" ):
                listener.exitPythonIntegerLiteral(self)


    class PythonBooleanLiteralContext(Python_literal_expressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Python_literal_expressionContext
            super().__init__(parser)
            self.t = None # Token
            self.copyFrom(ctx)

        def BOOLEAN_LITERAL(self):
            return self.getToken(OParser.BOOLEAN_LITERAL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPythonBooleanLiteral" ):
                listener.enterPythonBooleanLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPythonBooleanLiteral" ):
                listener.exitPythonBooleanLiteral(self)


    class PythonCharacterLiteralContext(Python_literal_expressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Python_literal_expressionContext
            super().__init__(parser)
            self.t = None # Token
            self.copyFrom(ctx)

        def CHAR_LITERAL(self):
            return self.getToken(OParser.CHAR_LITERAL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPythonCharacterLiteral" ):
                listener.enterPythonCharacterLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPythonCharacterLiteral" ):
                listener.exitPythonCharacterLiteral(self)


    class PythonTextLiteralContext(Python_literal_expressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Python_literal_expressionContext
            super().__init__(parser)
            self.t = None # Token
            self.copyFrom(ctx)

        def TEXT_LITERAL(self):
            return self.getToken(OParser.TEXT_LITERAL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPythonTextLiteral" ):
                listener.enterPythonTextLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPythonTextLiteral" ):
                listener.exitPythonTextLiteral(self)


    class PythonDecimalLiteralContext(Python_literal_expressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Python_literal_expressionContext
            super().__init__(parser)
            self.t = None # Token
            self.copyFrom(ctx)

        def DECIMAL_LITERAL(self):
            return self.getToken(OParser.DECIMAL_LITERAL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPythonDecimalLiteral" ):
                listener.enterPythonDecimalLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPythonDecimalLiteral" ):
                listener.exitPythonDecimalLiteral(self)



    def python_literal_expression(self):

        localctx = OParser.Python_literal_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 406, self.RULE_python_literal_expression)
        try:
            self.state = 2453
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [OParser.INTEGER_LITERAL]:
                localctx = OParser.PythonIntegerLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2448
                localctx.t = self.match(OParser.INTEGER_LITERAL)
                pass
            elif token in [OParser.DECIMAL_LITERAL]:
                localctx = OParser.PythonDecimalLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2449
                localctx.t = self.match(OParser.DECIMAL_LITERAL)
                pass
            elif token in [OParser.TEXT_LITERAL]:
                localctx = OParser.PythonTextLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 2450
                localctx.t = self.match(OParser.TEXT_LITERAL)
                pass
            elif token in [OParser.BOOLEAN_LITERAL]:
                localctx = OParser.PythonBooleanLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 2451
                localctx.t = self.match(OParser.BOOLEAN_LITERAL)
                pass
            elif token in [OParser.CHAR_LITERAL]:
                localctx = OParser.PythonCharacterLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 2452
                localctx.t = self.match(OParser.CHAR_LITERAL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Python_identifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VARIABLE_IDENTIFIER(self):
            return self.getToken(OParser.VARIABLE_IDENTIFIER, 0)

        def SYMBOL_IDENTIFIER(self):
            return self.getToken(OParser.SYMBOL_IDENTIFIER, 0)

        def DOLLAR_IDENTIFIER(self):
            return self.getToken(OParser.DOLLAR_IDENTIFIER, 0)

        def TYPE_IDENTIFIER(self):
            return self.getToken(OParser.TYPE_IDENTIFIER, 0)

        def keyword(self):
            return self.getTypedRuleContext(OParser.KeywordContext,0)


        def getRuleIndex(self):
            return OParser.RULE_python_identifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPython_identifier" ):
                listener.enterPython_identifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPython_identifier" ):
                listener.exitPython_identifier(self)




    def python_identifier(self):

        localctx = OParser.Python_identifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 408, self.RULE_python_identifier)
        try:
            self.state = 2460
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [OParser.VARIABLE_IDENTIFIER]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2455
                self.match(OParser.VARIABLE_IDENTIFIER)
                pass
            elif token in [OParser.SYMBOL_IDENTIFIER]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2456
                self.match(OParser.SYMBOL_IDENTIFIER)
                pass
            elif token in [OParser.DOLLAR_IDENTIFIER]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2457
                self.match(OParser.DOLLAR_IDENTIFIER)
                pass
            elif token in [OParser.TYPE_IDENTIFIER]:
                self.enterOuterAlt(localctx, 4)
                self.state = 2458
                self.match(OParser.TYPE_IDENTIFIER)
                pass
            elif token in [OParser.JAVA, OParser.CSHARP, OParser.PYTHON2, OParser.PYTHON3, OParser.JAVASCRIPT, OParser.SWIFT, OParser.BOOLEAN, OParser.CHARACTER, OParser.TEXT, OParser.INTEGER, OParser.DECIMAL, OParser.DATE, OParser.TIME, OParser.DATETIME, OParser.PERIOD, OParser.VERSION, OParser.CODE, OParser.DOCUMENT, OParser.BLOB, OParser.IMAGE, OParser.UUID, OParser.ITERATOR, OParser.CURSOR, OParser.HTML, OParser.ABSTRACT, OParser.ALL, OParser.ALWAYS, OParser.AND, OParser.ANY, OParser.AS, OParser.ASC, OParser.ATTR, OParser.ATTRIBUTE, OParser.ATTRIBUTES, OParser.BINDINGS, OParser.BREAK, OParser.BY, OParser.CASE, OParser.CATCH, OParser.CATEGORY, OParser.CLASS, OParser.CLOSE, OParser.CONTAINS, OParser.DEF, OParser.DEFAULT, OParser.DEFINE, OParser.DELETE, OParser.DESC, OParser.DO, OParser.DOING, OParser.EACH, OParser.ELSE, OParser.ENUM, OParser.ENUMERATED, OParser.EXCEPT, OParser.EXECUTE, OParser.EXPECTING, OParser.EXTENDS, OParser.FETCH, OParser.FILTERED, OParser.FINALLY, OParser.FLUSH, OParser.FOR, OParser.FROM, OParser.GETTER, OParser.HAS, OParser.IF, OParser.IN, OParser.INDEX, OParser.IS, OParser.MATCHING, OParser.METHOD, OParser.METHODS, OParser.MODULO, OParser.MUTABLE, OParser.NATIVE, OParser.NONE, OParser.NOT, OParser.NOTHING, OParser.NULL, OParser.ON, OParser.ONE, OParser.OPERATOR, OParser.OR, OParser.ORDER, OParser.OTHERWISE, OParser.PASS, OParser.RAISE, OParser.READ, OParser.RECEIVING, OParser.RESOURCE, OParser.RETURN, OParser.RETURNING, OParser.ROWS, OParser.SELF, OParser.SETTER, OParser.SINGLETON, OParser.SORTED, OParser.STORABLE, OParser.STORE, OParser.SUPER, OParser.SWITCH, OParser.TEST, OParser.THIS, OParser.THROW, OParser.TO, OParser.TRY, OParser.VERIFYING, OParser.WIDGET, OParser.WITH, OParser.WHEN, OParser.WHERE, OParser.WHILE, OParser.WRITE]:
                self.enterOuterAlt(localctx, 5)
                self.state = 2459
                self.keyword()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Java_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return OParser.RULE_java_statement

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class JavaReturnStatementContext(Java_statementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Java_statementContext
            super().__init__(parser)
            self.exp = None # Java_expressionContext
            self.copyFrom(ctx)

        def RETURN(self):
            return self.getToken(OParser.RETURN, 0)
        def SEMI(self):
            return self.getToken(OParser.SEMI, 0)
        def java_expression(self):
            return self.getTypedRuleContext(OParser.Java_expressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJavaReturnStatement" ):
                listener.enterJavaReturnStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJavaReturnStatement" ):
                listener.exitJavaReturnStatement(self)


    class JavaStatementContext(Java_statementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Java_statementContext
            super().__init__(parser)
            self.exp = None # Java_expressionContext
            self.copyFrom(ctx)

        def SEMI(self):
            return self.getToken(OParser.SEMI, 0)
        def java_expression(self):
            return self.getTypedRuleContext(OParser.Java_expressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJavaStatement" ):
                listener.enterJavaStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJavaStatement" ):
                listener.exitJavaStatement(self)



    def java_statement(self):

        localctx = OParser.Java_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 410, self.RULE_java_statement)
        try:
            self.state = 2469
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,217,self._ctx)
            if la_ == 1:
                localctx = OParser.JavaReturnStatementContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2462
                self.match(OParser.RETURN)
                self.state = 2463
                localctx.exp = self.java_expression(0)
                self.state = 2464
                self.match(OParser.SEMI)
                pass

            elif la_ == 2:
                localctx = OParser.JavaStatementContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2466
                localctx.exp = self.java_expression(0)
                self.state = 2467
                self.match(OParser.SEMI)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Java_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return OParser.RULE_java_expression

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class JavaSelectorExpressionContext(Java_expressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Java_expressionContext
            super().__init__(parser)
            self.parent = None # Java_expressionContext
            self.child = None # Java_selector_expressionContext
            self.copyFrom(ctx)

        def java_expression(self):
            return self.getTypedRuleContext(OParser.Java_expressionContext,0)

        def java_selector_expression(self):
            return self.getTypedRuleContext(OParser.Java_selector_expressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJavaSelectorExpression" ):
                listener.enterJavaSelectorExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJavaSelectorExpression" ):
                listener.exitJavaSelectorExpression(self)


    class JavaPrimaryExpressionContext(Java_expressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Java_expressionContext
            super().__init__(parser)
            self.exp = None # Java_primary_expressionContext
            self.copyFrom(ctx)

        def java_primary_expression(self):
            return self.getTypedRuleContext(OParser.Java_primary_expressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJavaPrimaryExpression" ):
                listener.enterJavaPrimaryExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJavaPrimaryExpression" ):
                listener.exitJavaPrimaryExpression(self)



    def java_expression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = OParser.Java_expressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 412
        self.enterRecursionRule(localctx, 412, self.RULE_java_expression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            localctx = OParser.JavaPrimaryExpressionContext(self, localctx)
            self._ctx = localctx
            _prevctx = localctx

            self.state = 2472
            localctx.exp = self.java_primary_expression()
            self._ctx.stop = self._input.LT(-1)
            self.state = 2478
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,218,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = OParser.JavaSelectorExpressionContext(self, OParser.Java_expressionContext(self, _parentctx, _parentState))
                    localctx.parent = _prevctx
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_java_expression)
                    self.state = 2474
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 2475
                    localctx.child = self.java_selector_expression() 
                self.state = 2480
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,218,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class Java_primary_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def java_this_expression(self):
            return self.getTypedRuleContext(OParser.Java_this_expressionContext,0)


        def java_new_expression(self):
            return self.getTypedRuleContext(OParser.Java_new_expressionContext,0)


        def java_parenthesis_expression(self):
            return self.getTypedRuleContext(OParser.Java_parenthesis_expressionContext,0)


        def java_identifier_expression(self):
            return self.getTypedRuleContext(OParser.Java_identifier_expressionContext,0)


        def java_literal_expression(self):
            return self.getTypedRuleContext(OParser.Java_literal_expressionContext,0)


        def getRuleIndex(self):
            return OParser.RULE_java_primary_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJava_primary_expression" ):
                listener.enterJava_primary_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJava_primary_expression" ):
                listener.exitJava_primary_expression(self)




    def java_primary_expression(self):

        localctx = OParser.Java_primary_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 414, self.RULE_java_primary_expression)
        try:
            self.state = 2486
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,219,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2481
                self.java_this_expression()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2482
                self.java_new_expression()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2483
                self.java_parenthesis_expression()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2484
                self.java_identifier_expression(0)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 2485
                self.java_literal_expression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Java_this_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def this_expression(self):
            return self.getTypedRuleContext(OParser.This_expressionContext,0)


        def getRuleIndex(self):
            return OParser.RULE_java_this_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJava_this_expression" ):
                listener.enterJava_this_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJava_this_expression" ):
                listener.exitJava_this_expression(self)




    def java_this_expression(self):

        localctx = OParser.Java_this_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 416, self.RULE_java_this_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2488
            self.this_expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Java_new_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def new_token(self):
            return self.getTypedRuleContext(OParser.New_tokenContext,0)


        def java_method_expression(self):
            return self.getTypedRuleContext(OParser.Java_method_expressionContext,0)


        def getRuleIndex(self):
            return OParser.RULE_java_new_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJava_new_expression" ):
                listener.enterJava_new_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJava_new_expression" ):
                listener.exitJava_new_expression(self)




    def java_new_expression(self):

        localctx = OParser.Java_new_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 418, self.RULE_java_new_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2490
            self.new_token()
            self.state = 2491
            self.java_method_expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Java_selector_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return OParser.RULE_java_selector_expression

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class JavaItemExpressionContext(Java_selector_expressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Java_selector_expressionContext
            super().__init__(parser)
            self.exp = None # Java_item_expressionContext
            self.copyFrom(ctx)

        def java_item_expression(self):
            return self.getTypedRuleContext(OParser.Java_item_expressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJavaItemExpression" ):
                listener.enterJavaItemExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJavaItemExpression" ):
                listener.exitJavaItemExpression(self)


    class JavaMethodExpressionContext(Java_selector_expressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Java_selector_expressionContext
            super().__init__(parser)
            self.exp = None # Java_method_expressionContext
            self.copyFrom(ctx)

        def DOT(self):
            return self.getToken(OParser.DOT, 0)
        def java_method_expression(self):
            return self.getTypedRuleContext(OParser.Java_method_expressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJavaMethodExpression" ):
                listener.enterJavaMethodExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJavaMethodExpression" ):
                listener.exitJavaMethodExpression(self)



    def java_selector_expression(self):

        localctx = OParser.Java_selector_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 420, self.RULE_java_selector_expression)
        try:
            self.state = 2496
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [OParser.DOT]:
                localctx = OParser.JavaMethodExpressionContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2493
                self.match(OParser.DOT)
                self.state = 2494
                localctx.exp = self.java_method_expression()
                pass
            elif token in [OParser.LBRAK]:
                localctx = OParser.JavaItemExpressionContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2495
                localctx.exp = self.java_item_expression()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Java_method_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # Java_identifierContext
            self.args = None # Java_argumentsContext

        def LPAR(self):
            return self.getToken(OParser.LPAR, 0)

        def RPAR(self):
            return self.getToken(OParser.RPAR, 0)

        def java_identifier(self):
            return self.getTypedRuleContext(OParser.Java_identifierContext,0)


        def java_arguments(self):
            return self.getTypedRuleContext(OParser.Java_argumentsContext,0)


        def getRuleIndex(self):
            return OParser.RULE_java_method_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJava_method_expression" ):
                listener.enterJava_method_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJava_method_expression" ):
                listener.exitJava_method_expression(self)




    def java_method_expression(self):

        localctx = OParser.Java_method_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 422, self.RULE_java_method_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2498
            localctx.name = self.java_identifier()
            self.state = 2499
            self.match(OParser.LPAR)
            self.state = 2501
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << OParser.JAVA) | (1 << OParser.CSHARP) | (1 << OParser.PYTHON2) | (1 << OParser.PYTHON3) | (1 << OParser.JAVASCRIPT) | (1 << OParser.SWIFT) | (1 << OParser.LPAR) | (1 << OParser.BOOLEAN) | (1 << OParser.CHARACTER) | (1 << OParser.TEXT) | (1 << OParser.INTEGER) | (1 << OParser.DECIMAL) | (1 << OParser.DATE) | (1 << OParser.TIME) | (1 << OParser.DATETIME) | (1 << OParser.PERIOD) | (1 << OParser.VERSION) | (1 << OParser.CODE) | (1 << OParser.DOCUMENT) | (1 << OParser.BLOB) | (1 << OParser.IMAGE))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (OParser.UUID - 64)) | (1 << (OParser.ITERATOR - 64)) | (1 << (OParser.CURSOR - 64)) | (1 << (OParser.HTML - 64)) | (1 << (OParser.ABSTRACT - 64)) | (1 << (OParser.ALL - 64)) | (1 << (OParser.ALWAYS - 64)) | (1 << (OParser.AND - 64)) | (1 << (OParser.ANY - 64)) | (1 << (OParser.AS - 64)) | (1 << (OParser.ASC - 64)) | (1 << (OParser.ATTR - 64)) | (1 << (OParser.ATTRIBUTE - 64)) | (1 << (OParser.ATTRIBUTES - 64)) | (1 << (OParser.BINDINGS - 64)) | (1 << (OParser.BREAK - 64)) | (1 << (OParser.BY - 64)) | (1 << (OParser.CASE - 64)) | (1 << (OParser.CATCH - 64)) | (1 << (OParser.CATEGORY - 64)) | (1 << (OParser.CLASS - 64)) | (1 << (OParser.CLOSE - 64)) | (1 << (OParser.CONTAINS - 64)) | (1 << (OParser.DEF - 64)) | (1 << (OParser.DEFAULT - 64)) | (1 << (OParser.DEFINE - 64)) | (1 << (OParser.DELETE - 64)) | (1 << (OParser.DESC - 64)) | (1 << (OParser.DO - 64)) | (1 << (OParser.DOING - 64)) | (1 << (OParser.EACH - 64)) | (1 << (OParser.ELSE - 64)) | (1 << (OParser.ENUM - 64)) | (1 << (OParser.ENUMERATED - 64)) | (1 << (OParser.EXCEPT - 64)) | (1 << (OParser.EXECUTE - 64)) | (1 << (OParser.EXPECTING - 64)) | (1 << (OParser.EXTENDS - 64)) | (1 << (OParser.FETCH - 64)) | (1 << (OParser.FILTERED - 64)) | (1 << (OParser.FINALLY - 64)) | (1 << (OParser.FLUSH - 64)) | (1 << (OParser.FOR - 64)) | (1 << (OParser.FROM - 64)) | (1 << (OParser.GETTER - 64)) | (1 << (OParser.HAS - 64)) | (1 << (OParser.IF - 64)) | (1 << (OParser.IN - 64)) | (1 << (OParser.INDEX - 64)) | (1 << (OParser.IS - 64)) | (1 << (OParser.MATCHING - 64)) | (1 << (OParser.METHOD - 64)) | (1 << (OParser.METHODS - 64)) | (1 << (OParser.MODULO - 64)) | (1 << (OParser.MUTABLE - 64)) | (1 << (OParser.NATIVE - 64)) | (1 << (OParser.NONE - 64)) | (1 << (OParser.NOT - 64)) | (1 << (OParser.NOTHING - 64)) | (1 << (OParser.NULL - 64)) | (1 << (OParser.ON - 64)) | (1 << (OParser.ONE - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (OParser.OPERATOR - 128)) | (1 << (OParser.OR - 128)) | (1 << (OParser.ORDER - 128)) | (1 << (OParser.OTHERWISE - 128)) | (1 << (OParser.PASS - 128)) | (1 << (OParser.RAISE - 128)) | (1 << (OParser.READ - 128)) | (1 << (OParser.RECEIVING - 128)) | (1 << (OParser.RESOURCE - 128)) | (1 << (OParser.RETURN - 128)) | (1 << (OParser.RETURNING - 128)) | (1 << (OParser.ROWS - 128)) | (1 << (OParser.SELF - 128)) | (1 << (OParser.SETTER - 128)) | (1 << (OParser.SINGLETON - 128)) | (1 << (OParser.SORTED - 128)) | (1 << (OParser.STORABLE - 128)) | (1 << (OParser.STORE - 128)) | (1 << (OParser.SUPER - 128)) | (1 << (OParser.SWITCH - 128)) | (1 << (OParser.TEST - 128)) | (1 << (OParser.THIS - 128)) | (1 << (OParser.THROW - 128)) | (1 << (OParser.TO - 128)) | (1 << (OParser.TRY - 128)) | (1 << (OParser.VERIFYING - 128)) | (1 << (OParser.WIDGET - 128)) | (1 << (OParser.WITH - 128)) | (1 << (OParser.WHEN - 128)) | (1 << (OParser.WHERE - 128)) | (1 << (OParser.WHILE - 128)) | (1 << (OParser.WRITE - 128)) | (1 << (OParser.BOOLEAN_LITERAL - 128)) | (1 << (OParser.CHAR_LITERAL - 128)) | (1 << (OParser.SYMBOL_IDENTIFIER - 128)) | (1 << (OParser.TYPE_IDENTIFIER - 128)) | (1 << (OParser.VARIABLE_IDENTIFIER - 128)) | (1 << (OParser.DOLLAR_IDENTIFIER - 128)) | (1 << (OParser.TEXT_LITERAL - 128)) | (1 << (OParser.INTEGER_LITERAL - 128)) | (1 << (OParser.DECIMAL_LITERAL - 128)))) != 0):
                self.state = 2500
                localctx.args = self.java_arguments(0)


            self.state = 2503
            self.match(OParser.RPAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Java_argumentsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return OParser.RULE_java_arguments

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class JavaArgumentListItemContext(Java_argumentsContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Java_argumentsContext
            super().__init__(parser)
            self.items = None # Java_argumentsContext
            self.item = None # Java_expressionContext
            self.copyFrom(ctx)

        def COMMA(self):
            return self.getToken(OParser.COMMA, 0)
        def java_arguments(self):
            return self.getTypedRuleContext(OParser.Java_argumentsContext,0)

        def java_expression(self):
            return self.getTypedRuleContext(OParser.Java_expressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJavaArgumentListItem" ):
                listener.enterJavaArgumentListItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJavaArgumentListItem" ):
                listener.exitJavaArgumentListItem(self)


    class JavaArgumentListContext(Java_argumentsContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Java_argumentsContext
            super().__init__(parser)
            self.item = None # Java_expressionContext
            self.copyFrom(ctx)

        def java_expression(self):
            return self.getTypedRuleContext(OParser.Java_expressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJavaArgumentList" ):
                listener.enterJavaArgumentList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJavaArgumentList" ):
                listener.exitJavaArgumentList(self)



    def java_arguments(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = OParser.Java_argumentsContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 424
        self.enterRecursionRule(localctx, 424, self.RULE_java_arguments, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            localctx = OParser.JavaArgumentListContext(self, localctx)
            self._ctx = localctx
            _prevctx = localctx

            self.state = 2506
            localctx.item = self.java_expression(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 2513
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,222,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = OParser.JavaArgumentListItemContext(self, OParser.Java_argumentsContext(self, _parentctx, _parentState))
                    localctx.items = _prevctx
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_java_arguments)
                    self.state = 2508
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 2509
                    self.match(OParser.COMMA)
                    self.state = 2510
                    localctx.item = self.java_expression(0) 
                self.state = 2515
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,222,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class Java_item_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.exp = None # Java_expressionContext

        def LBRAK(self):
            return self.getToken(OParser.LBRAK, 0)

        def RBRAK(self):
            return self.getToken(OParser.RBRAK, 0)

        def java_expression(self):
            return self.getTypedRuleContext(OParser.Java_expressionContext,0)


        def getRuleIndex(self):
            return OParser.RULE_java_item_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJava_item_expression" ):
                listener.enterJava_item_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJava_item_expression" ):
                listener.exitJava_item_expression(self)




    def java_item_expression(self):

        localctx = OParser.Java_item_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 426, self.RULE_java_item_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2516
            self.match(OParser.LBRAK)
            self.state = 2517
            localctx.exp = self.java_expression(0)
            self.state = 2518
            self.match(OParser.RBRAK)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Java_parenthesis_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.exp = None # Java_expressionContext

        def LPAR(self):
            return self.getToken(OParser.LPAR, 0)

        def RPAR(self):
            return self.getToken(OParser.RPAR, 0)

        def java_expression(self):
            return self.getTypedRuleContext(OParser.Java_expressionContext,0)


        def getRuleIndex(self):
            return OParser.RULE_java_parenthesis_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJava_parenthesis_expression" ):
                listener.enterJava_parenthesis_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJava_parenthesis_expression" ):
                listener.exitJava_parenthesis_expression(self)




    def java_parenthesis_expression(self):

        localctx = OParser.Java_parenthesis_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 428, self.RULE_java_parenthesis_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2520
            self.match(OParser.LPAR)
            self.state = 2521
            localctx.exp = self.java_expression(0)
            self.state = 2522
            self.match(OParser.RPAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Java_identifier_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return OParser.RULE_java_identifier_expression

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class JavaIdentifierContext(Java_identifier_expressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Java_identifier_expressionContext
            super().__init__(parser)
            self.name = None # Java_identifierContext
            self.copyFrom(ctx)

        def java_identifier(self):
            return self.getTypedRuleContext(OParser.Java_identifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJavaIdentifier" ):
                listener.enterJavaIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJavaIdentifier" ):
                listener.exitJavaIdentifier(self)


    class JavaChildIdentifierContext(Java_identifier_expressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Java_identifier_expressionContext
            super().__init__(parser)
            self.parent = None # Java_identifier_expressionContext
            self.name = None # Java_identifierContext
            self.copyFrom(ctx)

        def DOT(self):
            return self.getToken(OParser.DOT, 0)
        def java_identifier_expression(self):
            return self.getTypedRuleContext(OParser.Java_identifier_expressionContext,0)

        def java_identifier(self):
            return self.getTypedRuleContext(OParser.Java_identifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJavaChildIdentifier" ):
                listener.enterJavaChildIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJavaChildIdentifier" ):
                listener.exitJavaChildIdentifier(self)



    def java_identifier_expression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = OParser.Java_identifier_expressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 430
        self.enterRecursionRule(localctx, 430, self.RULE_java_identifier_expression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            localctx = OParser.JavaIdentifierContext(self, localctx)
            self._ctx = localctx
            _prevctx = localctx

            self.state = 2525
            localctx.name = self.java_identifier()
            self._ctx.stop = self._input.LT(-1)
            self.state = 2532
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,223,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = OParser.JavaChildIdentifierContext(self, OParser.Java_identifier_expressionContext(self, _parentctx, _parentState))
                    localctx.parent = _prevctx
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_java_identifier_expression)
                    self.state = 2527
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 2528
                    self.match(OParser.DOT)
                    self.state = 2529
                    localctx.name = self.java_identifier() 
                self.state = 2534
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,223,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class Java_class_identifier_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return OParser.RULE_java_class_identifier_expression

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class JavaClassIdentifierContext(Java_class_identifier_expressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Java_class_identifier_expressionContext
            super().__init__(parser)
            self.klass = None # Java_identifier_expressionContext
            self.copyFrom(ctx)

        def java_identifier_expression(self):
            return self.getTypedRuleContext(OParser.Java_identifier_expressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJavaClassIdentifier" ):
                listener.enterJavaClassIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJavaClassIdentifier" ):
                listener.exitJavaClassIdentifier(self)


    class JavaChildClassIdentifierContext(Java_class_identifier_expressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Java_class_identifier_expressionContext
            super().__init__(parser)
            self.parent = None # Java_class_identifier_expressionContext
            self.name = None # Token
            self.copyFrom(ctx)

        def java_class_identifier_expression(self):
            return self.getTypedRuleContext(OParser.Java_class_identifier_expressionContext,0)

        def DOLLAR_IDENTIFIER(self):
            return self.getToken(OParser.DOLLAR_IDENTIFIER, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJavaChildClassIdentifier" ):
                listener.enterJavaChildClassIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJavaChildClassIdentifier" ):
                listener.exitJavaChildClassIdentifier(self)



    def java_class_identifier_expression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = OParser.Java_class_identifier_expressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 432
        self.enterRecursionRule(localctx, 432, self.RULE_java_class_identifier_expression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            localctx = OParser.JavaClassIdentifierContext(self, localctx)
            self._ctx = localctx
            _prevctx = localctx

            self.state = 2536
            localctx.klass = self.java_identifier_expression(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 2542
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,224,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = OParser.JavaChildClassIdentifierContext(self, OParser.Java_class_identifier_expressionContext(self, _parentctx, _parentState))
                    localctx.parent = _prevctx
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_java_class_identifier_expression)
                    self.state = 2538
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 2539
                    localctx.name = self.match(OParser.DOLLAR_IDENTIFIER) 
                self.state = 2544
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,224,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class Java_literal_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return OParser.RULE_java_literal_expression

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class JavaBooleanLiteralContext(Java_literal_expressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Java_literal_expressionContext
            super().__init__(parser)
            self.t = None # Token
            self.copyFrom(ctx)

        def BOOLEAN_LITERAL(self):
            return self.getToken(OParser.BOOLEAN_LITERAL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJavaBooleanLiteral" ):
                listener.enterJavaBooleanLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJavaBooleanLiteral" ):
                listener.exitJavaBooleanLiteral(self)


    class JavaCharacterLiteralContext(Java_literal_expressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Java_literal_expressionContext
            super().__init__(parser)
            self.t = None # Token
            self.copyFrom(ctx)

        def CHAR_LITERAL(self):
            return self.getToken(OParser.CHAR_LITERAL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJavaCharacterLiteral" ):
                listener.enterJavaCharacterLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJavaCharacterLiteral" ):
                listener.exitJavaCharacterLiteral(self)


    class JavaIntegerLiteralContext(Java_literal_expressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Java_literal_expressionContext
            super().__init__(parser)
            self.t = None # Token
            self.copyFrom(ctx)

        def INTEGER_LITERAL(self):
            return self.getToken(OParser.INTEGER_LITERAL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJavaIntegerLiteral" ):
                listener.enterJavaIntegerLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJavaIntegerLiteral" ):
                listener.exitJavaIntegerLiteral(self)


    class JavaTextLiteralContext(Java_literal_expressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Java_literal_expressionContext
            super().__init__(parser)
            self.t = None # Token
            self.copyFrom(ctx)

        def TEXT_LITERAL(self):
            return self.getToken(OParser.TEXT_LITERAL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJavaTextLiteral" ):
                listener.enterJavaTextLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJavaTextLiteral" ):
                listener.exitJavaTextLiteral(self)


    class JavaDecimalLiteralContext(Java_literal_expressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Java_literal_expressionContext
            super().__init__(parser)
            self.t = None # Token
            self.copyFrom(ctx)

        def DECIMAL_LITERAL(self):
            return self.getToken(OParser.DECIMAL_LITERAL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJavaDecimalLiteral" ):
                listener.enterJavaDecimalLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJavaDecimalLiteral" ):
                listener.exitJavaDecimalLiteral(self)



    def java_literal_expression(self):

        localctx = OParser.Java_literal_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 434, self.RULE_java_literal_expression)
        try:
            self.state = 2550
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [OParser.INTEGER_LITERAL]:
                localctx = OParser.JavaIntegerLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2545
                localctx.t = self.match(OParser.INTEGER_LITERAL)
                pass
            elif token in [OParser.DECIMAL_LITERAL]:
                localctx = OParser.JavaDecimalLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2546
                localctx.t = self.match(OParser.DECIMAL_LITERAL)
                pass
            elif token in [OParser.TEXT_LITERAL]:
                localctx = OParser.JavaTextLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 2547
                localctx.t = self.match(OParser.TEXT_LITERAL)
                pass
            elif token in [OParser.BOOLEAN_LITERAL]:
                localctx = OParser.JavaBooleanLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 2548
                localctx.t = self.match(OParser.BOOLEAN_LITERAL)
                pass
            elif token in [OParser.CHAR_LITERAL]:
                localctx = OParser.JavaCharacterLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 2549
                localctx.t = self.match(OParser.CHAR_LITERAL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Java_identifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VARIABLE_IDENTIFIER(self):
            return self.getToken(OParser.VARIABLE_IDENTIFIER, 0)

        def SYMBOL_IDENTIFIER(self):
            return self.getToken(OParser.SYMBOL_IDENTIFIER, 0)

        def DOLLAR_IDENTIFIER(self):
            return self.getToken(OParser.DOLLAR_IDENTIFIER, 0)

        def TYPE_IDENTIFIER(self):
            return self.getToken(OParser.TYPE_IDENTIFIER, 0)

        def keyword(self):
            return self.getTypedRuleContext(OParser.KeywordContext,0)


        def getRuleIndex(self):
            return OParser.RULE_java_identifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJava_identifier" ):
                listener.enterJava_identifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJava_identifier" ):
                listener.exitJava_identifier(self)




    def java_identifier(self):

        localctx = OParser.Java_identifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 436, self.RULE_java_identifier)
        try:
            self.state = 2557
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [OParser.VARIABLE_IDENTIFIER]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2552
                self.match(OParser.VARIABLE_IDENTIFIER)
                pass
            elif token in [OParser.SYMBOL_IDENTIFIER]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2553
                self.match(OParser.SYMBOL_IDENTIFIER)
                pass
            elif token in [OParser.DOLLAR_IDENTIFIER]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2554
                self.match(OParser.DOLLAR_IDENTIFIER)
                pass
            elif token in [OParser.TYPE_IDENTIFIER]:
                self.enterOuterAlt(localctx, 4)
                self.state = 2555
                self.match(OParser.TYPE_IDENTIFIER)
                pass
            elif token in [OParser.JAVA, OParser.CSHARP, OParser.PYTHON2, OParser.PYTHON3, OParser.JAVASCRIPT, OParser.SWIFT, OParser.BOOLEAN, OParser.CHARACTER, OParser.TEXT, OParser.INTEGER, OParser.DECIMAL, OParser.DATE, OParser.TIME, OParser.DATETIME, OParser.PERIOD, OParser.VERSION, OParser.CODE, OParser.DOCUMENT, OParser.BLOB, OParser.IMAGE, OParser.UUID, OParser.ITERATOR, OParser.CURSOR, OParser.HTML, OParser.ABSTRACT, OParser.ALL, OParser.ALWAYS, OParser.AND, OParser.ANY, OParser.AS, OParser.ASC, OParser.ATTR, OParser.ATTRIBUTE, OParser.ATTRIBUTES, OParser.BINDINGS, OParser.BREAK, OParser.BY, OParser.CASE, OParser.CATCH, OParser.CATEGORY, OParser.CLASS, OParser.CLOSE, OParser.CONTAINS, OParser.DEF, OParser.DEFAULT, OParser.DEFINE, OParser.DELETE, OParser.DESC, OParser.DO, OParser.DOING, OParser.EACH, OParser.ELSE, OParser.ENUM, OParser.ENUMERATED, OParser.EXCEPT, OParser.EXECUTE, OParser.EXPECTING, OParser.EXTENDS, OParser.FETCH, OParser.FILTERED, OParser.FINALLY, OParser.FLUSH, OParser.FOR, OParser.FROM, OParser.GETTER, OParser.HAS, OParser.IF, OParser.IN, OParser.INDEX, OParser.IS, OParser.MATCHING, OParser.METHOD, OParser.METHODS, OParser.MODULO, OParser.MUTABLE, OParser.NATIVE, OParser.NONE, OParser.NOT, OParser.NOTHING, OParser.NULL, OParser.ON, OParser.ONE, OParser.OPERATOR, OParser.OR, OParser.ORDER, OParser.OTHERWISE, OParser.PASS, OParser.RAISE, OParser.READ, OParser.RECEIVING, OParser.RESOURCE, OParser.RETURN, OParser.RETURNING, OParser.ROWS, OParser.SELF, OParser.SETTER, OParser.SINGLETON, OParser.SORTED, OParser.STORABLE, OParser.STORE, OParser.SUPER, OParser.SWITCH, OParser.TEST, OParser.THIS, OParser.THROW, OParser.TO, OParser.TRY, OParser.VERIFYING, OParser.WIDGET, OParser.WITH, OParser.WHEN, OParser.WHERE, OParser.WHILE, OParser.WRITE]:
                self.enterOuterAlt(localctx, 5)
                self.state = 2556
                self.keyword()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Csharp_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return OParser.RULE_csharp_statement

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class CSharpReturnStatementContext(Csharp_statementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Csharp_statementContext
            super().__init__(parser)
            self.exp = None # Csharp_expressionContext
            self.copyFrom(ctx)

        def RETURN(self):
            return self.getToken(OParser.RETURN, 0)
        def SEMI(self):
            return self.getToken(OParser.SEMI, 0)
        def csharp_expression(self):
            return self.getTypedRuleContext(OParser.Csharp_expressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCSharpReturnStatement" ):
                listener.enterCSharpReturnStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCSharpReturnStatement" ):
                listener.exitCSharpReturnStatement(self)


    class CSharpStatementContext(Csharp_statementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Csharp_statementContext
            super().__init__(parser)
            self.exp = None # Csharp_expressionContext
            self.copyFrom(ctx)

        def SEMI(self):
            return self.getToken(OParser.SEMI, 0)
        def csharp_expression(self):
            return self.getTypedRuleContext(OParser.Csharp_expressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCSharpStatement" ):
                listener.enterCSharpStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCSharpStatement" ):
                listener.exitCSharpStatement(self)



    def csharp_statement(self):

        localctx = OParser.Csharp_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 438, self.RULE_csharp_statement)
        try:
            self.state = 2566
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,227,self._ctx)
            if la_ == 1:
                localctx = OParser.CSharpReturnStatementContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2559
                self.match(OParser.RETURN)
                self.state = 2560
                localctx.exp = self.csharp_expression(0)
                self.state = 2561
                self.match(OParser.SEMI)
                pass

            elif la_ == 2:
                localctx = OParser.CSharpStatementContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2563
                localctx.exp = self.csharp_expression(0)
                self.state = 2564
                self.match(OParser.SEMI)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Csharp_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return OParser.RULE_csharp_expression

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class CSharpSelectorExpressionContext(Csharp_expressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Csharp_expressionContext
            super().__init__(parser)
            self.parent = None # Csharp_expressionContext
            self.child = None # Csharp_selector_expressionContext
            self.copyFrom(ctx)

        def csharp_expression(self):
            return self.getTypedRuleContext(OParser.Csharp_expressionContext,0)

        def csharp_selector_expression(self):
            return self.getTypedRuleContext(OParser.Csharp_selector_expressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCSharpSelectorExpression" ):
                listener.enterCSharpSelectorExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCSharpSelectorExpression" ):
                listener.exitCSharpSelectorExpression(self)


    class CSharpPrimaryExpressionContext(Csharp_expressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Csharp_expressionContext
            super().__init__(parser)
            self.exp = None # Csharp_primary_expressionContext
            self.copyFrom(ctx)

        def csharp_primary_expression(self):
            return self.getTypedRuleContext(OParser.Csharp_primary_expressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCSharpPrimaryExpression" ):
                listener.enterCSharpPrimaryExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCSharpPrimaryExpression" ):
                listener.exitCSharpPrimaryExpression(self)



    def csharp_expression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = OParser.Csharp_expressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 440
        self.enterRecursionRule(localctx, 440, self.RULE_csharp_expression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            localctx = OParser.CSharpPrimaryExpressionContext(self, localctx)
            self._ctx = localctx
            _prevctx = localctx

            self.state = 2569
            localctx.exp = self.csharp_primary_expression()
            self._ctx.stop = self._input.LT(-1)
            self.state = 2575
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,228,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = OParser.CSharpSelectorExpressionContext(self, OParser.Csharp_expressionContext(self, _parentctx, _parentState))
                    localctx.parent = _prevctx
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_csharp_expression)
                    self.state = 2571
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 2572
                    localctx.child = self.csharp_selector_expression() 
                self.state = 2577
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,228,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class Csharp_primary_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def csharp_this_expression(self):
            return self.getTypedRuleContext(OParser.Csharp_this_expressionContext,0)


        def csharp_new_expression(self):
            return self.getTypedRuleContext(OParser.Csharp_new_expressionContext,0)


        def csharp_parenthesis_expression(self):
            return self.getTypedRuleContext(OParser.Csharp_parenthesis_expressionContext,0)


        def csharp_identifier_expression(self):
            return self.getTypedRuleContext(OParser.Csharp_identifier_expressionContext,0)


        def csharp_literal_expression(self):
            return self.getTypedRuleContext(OParser.Csharp_literal_expressionContext,0)


        def getRuleIndex(self):
            return OParser.RULE_csharp_primary_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCsharp_primary_expression" ):
                listener.enterCsharp_primary_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCsharp_primary_expression" ):
                listener.exitCsharp_primary_expression(self)




    def csharp_primary_expression(self):

        localctx = OParser.Csharp_primary_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 442, self.RULE_csharp_primary_expression)
        try:
            self.state = 2583
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,229,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2578
                self.csharp_this_expression()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2579
                self.csharp_new_expression()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2580
                self.csharp_parenthesis_expression()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2581
                self.csharp_identifier_expression(0)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 2582
                self.csharp_literal_expression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Csharp_this_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def this_expression(self):
            return self.getTypedRuleContext(OParser.This_expressionContext,0)


        def getRuleIndex(self):
            return OParser.RULE_csharp_this_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCsharp_this_expression" ):
                listener.enterCsharp_this_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCsharp_this_expression" ):
                listener.exitCsharp_this_expression(self)




    def csharp_this_expression(self):

        localctx = OParser.Csharp_this_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 444, self.RULE_csharp_this_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2585
            self.this_expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Csharp_new_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def new_token(self):
            return self.getTypedRuleContext(OParser.New_tokenContext,0)


        def csharp_method_expression(self):
            return self.getTypedRuleContext(OParser.Csharp_method_expressionContext,0)


        def getRuleIndex(self):
            return OParser.RULE_csharp_new_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCsharp_new_expression" ):
                listener.enterCsharp_new_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCsharp_new_expression" ):
                listener.exitCsharp_new_expression(self)




    def csharp_new_expression(self):

        localctx = OParser.Csharp_new_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 446, self.RULE_csharp_new_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2587
            self.new_token()
            self.state = 2588
            self.csharp_method_expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Csharp_selector_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return OParser.RULE_csharp_selector_expression

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class CSharpMethodExpressionContext(Csharp_selector_expressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Csharp_selector_expressionContext
            super().__init__(parser)
            self.exp = None # Csharp_method_expressionContext
            self.copyFrom(ctx)

        def DOT(self):
            return self.getToken(OParser.DOT, 0)
        def csharp_method_expression(self):
            return self.getTypedRuleContext(OParser.Csharp_method_expressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCSharpMethodExpression" ):
                listener.enterCSharpMethodExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCSharpMethodExpression" ):
                listener.exitCSharpMethodExpression(self)


    class CSharpItemExpressionContext(Csharp_selector_expressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Csharp_selector_expressionContext
            super().__init__(parser)
            self.exp = None # Csharp_item_expressionContext
            self.copyFrom(ctx)

        def csharp_item_expression(self):
            return self.getTypedRuleContext(OParser.Csharp_item_expressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCSharpItemExpression" ):
                listener.enterCSharpItemExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCSharpItemExpression" ):
                listener.exitCSharpItemExpression(self)



    def csharp_selector_expression(self):

        localctx = OParser.Csharp_selector_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 448, self.RULE_csharp_selector_expression)
        try:
            self.state = 2593
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [OParser.DOT]:
                localctx = OParser.CSharpMethodExpressionContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2590
                self.match(OParser.DOT)
                self.state = 2591
                localctx.exp = self.csharp_method_expression()
                pass
            elif token in [OParser.LBRAK]:
                localctx = OParser.CSharpItemExpressionContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2592
                localctx.exp = self.csharp_item_expression()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Csharp_method_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # Csharp_identifierContext
            self.args = None # Csharp_argumentsContext

        def LPAR(self):
            return self.getToken(OParser.LPAR, 0)

        def RPAR(self):
            return self.getToken(OParser.RPAR, 0)

        def csharp_identifier(self):
            return self.getTypedRuleContext(OParser.Csharp_identifierContext,0)


        def csharp_arguments(self):
            return self.getTypedRuleContext(OParser.Csharp_argumentsContext,0)


        def getRuleIndex(self):
            return OParser.RULE_csharp_method_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCsharp_method_expression" ):
                listener.enterCsharp_method_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCsharp_method_expression" ):
                listener.exitCsharp_method_expression(self)




    def csharp_method_expression(self):

        localctx = OParser.Csharp_method_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 450, self.RULE_csharp_method_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2595
            localctx.name = self.csharp_identifier()
            self.state = 2596
            self.match(OParser.LPAR)
            self.state = 2598
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << OParser.JAVA) | (1 << OParser.CSHARP) | (1 << OParser.PYTHON2) | (1 << OParser.PYTHON3) | (1 << OParser.JAVASCRIPT) | (1 << OParser.SWIFT) | (1 << OParser.LPAR) | (1 << OParser.BOOLEAN) | (1 << OParser.CHARACTER) | (1 << OParser.TEXT) | (1 << OParser.INTEGER) | (1 << OParser.DECIMAL) | (1 << OParser.DATE) | (1 << OParser.TIME) | (1 << OParser.DATETIME) | (1 << OParser.PERIOD) | (1 << OParser.VERSION) | (1 << OParser.CODE) | (1 << OParser.DOCUMENT) | (1 << OParser.BLOB) | (1 << OParser.IMAGE))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (OParser.UUID - 64)) | (1 << (OParser.ITERATOR - 64)) | (1 << (OParser.CURSOR - 64)) | (1 << (OParser.HTML - 64)) | (1 << (OParser.ABSTRACT - 64)) | (1 << (OParser.ALL - 64)) | (1 << (OParser.ALWAYS - 64)) | (1 << (OParser.AND - 64)) | (1 << (OParser.ANY - 64)) | (1 << (OParser.AS - 64)) | (1 << (OParser.ASC - 64)) | (1 << (OParser.ATTR - 64)) | (1 << (OParser.ATTRIBUTE - 64)) | (1 << (OParser.ATTRIBUTES - 64)) | (1 << (OParser.BINDINGS - 64)) | (1 << (OParser.BREAK - 64)) | (1 << (OParser.BY - 64)) | (1 << (OParser.CASE - 64)) | (1 << (OParser.CATCH - 64)) | (1 << (OParser.CATEGORY - 64)) | (1 << (OParser.CLASS - 64)) | (1 << (OParser.CLOSE - 64)) | (1 << (OParser.CONTAINS - 64)) | (1 << (OParser.DEF - 64)) | (1 << (OParser.DEFAULT - 64)) | (1 << (OParser.DEFINE - 64)) | (1 << (OParser.DELETE - 64)) | (1 << (OParser.DESC - 64)) | (1 << (OParser.DO - 64)) | (1 << (OParser.DOING - 64)) | (1 << (OParser.EACH - 64)) | (1 << (OParser.ELSE - 64)) | (1 << (OParser.ENUM - 64)) | (1 << (OParser.ENUMERATED - 64)) | (1 << (OParser.EXCEPT - 64)) | (1 << (OParser.EXECUTE - 64)) | (1 << (OParser.EXPECTING - 64)) | (1 << (OParser.EXTENDS - 64)) | (1 << (OParser.FETCH - 64)) | (1 << (OParser.FILTERED - 64)) | (1 << (OParser.FINALLY - 64)) | (1 << (OParser.FLUSH - 64)) | (1 << (OParser.FOR - 64)) | (1 << (OParser.FROM - 64)) | (1 << (OParser.GETTER - 64)) | (1 << (OParser.HAS - 64)) | (1 << (OParser.IF - 64)) | (1 << (OParser.IN - 64)) | (1 << (OParser.INDEX - 64)) | (1 << (OParser.IS - 64)) | (1 << (OParser.MATCHING - 64)) | (1 << (OParser.METHOD - 64)) | (1 << (OParser.METHODS - 64)) | (1 << (OParser.MODULO - 64)) | (1 << (OParser.MUTABLE - 64)) | (1 << (OParser.NATIVE - 64)) | (1 << (OParser.NONE - 64)) | (1 << (OParser.NOT - 64)) | (1 << (OParser.NOTHING - 64)) | (1 << (OParser.NULL - 64)) | (1 << (OParser.ON - 64)) | (1 << (OParser.ONE - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (OParser.OPERATOR - 128)) | (1 << (OParser.OR - 128)) | (1 << (OParser.ORDER - 128)) | (1 << (OParser.OTHERWISE - 128)) | (1 << (OParser.PASS - 128)) | (1 << (OParser.RAISE - 128)) | (1 << (OParser.READ - 128)) | (1 << (OParser.RECEIVING - 128)) | (1 << (OParser.RESOURCE - 128)) | (1 << (OParser.RETURN - 128)) | (1 << (OParser.RETURNING - 128)) | (1 << (OParser.ROWS - 128)) | (1 << (OParser.SELF - 128)) | (1 << (OParser.SETTER - 128)) | (1 << (OParser.SINGLETON - 128)) | (1 << (OParser.SORTED - 128)) | (1 << (OParser.STORABLE - 128)) | (1 << (OParser.STORE - 128)) | (1 << (OParser.SUPER - 128)) | (1 << (OParser.SWITCH - 128)) | (1 << (OParser.TEST - 128)) | (1 << (OParser.THIS - 128)) | (1 << (OParser.THROW - 128)) | (1 << (OParser.TO - 128)) | (1 << (OParser.TRY - 128)) | (1 << (OParser.VERIFYING - 128)) | (1 << (OParser.WIDGET - 128)) | (1 << (OParser.WITH - 128)) | (1 << (OParser.WHEN - 128)) | (1 << (OParser.WHERE - 128)) | (1 << (OParser.WHILE - 128)) | (1 << (OParser.WRITE - 128)) | (1 << (OParser.BOOLEAN_LITERAL - 128)) | (1 << (OParser.CHAR_LITERAL - 128)) | (1 << (OParser.SYMBOL_IDENTIFIER - 128)) | (1 << (OParser.TYPE_IDENTIFIER - 128)) | (1 << (OParser.VARIABLE_IDENTIFIER - 128)) | (1 << (OParser.DOLLAR_IDENTIFIER - 128)) | (1 << (OParser.TEXT_LITERAL - 128)) | (1 << (OParser.INTEGER_LITERAL - 128)) | (1 << (OParser.DECIMAL_LITERAL - 128)))) != 0):
                self.state = 2597
                localctx.args = self.csharp_arguments(0)


            self.state = 2600
            self.match(OParser.RPAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Csharp_argumentsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return OParser.RULE_csharp_arguments

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class CSharpArgumentListContext(Csharp_argumentsContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Csharp_argumentsContext
            super().__init__(parser)
            self.item = None # Csharp_expressionContext
            self.copyFrom(ctx)

        def csharp_expression(self):
            return self.getTypedRuleContext(OParser.Csharp_expressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCSharpArgumentList" ):
                listener.enterCSharpArgumentList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCSharpArgumentList" ):
                listener.exitCSharpArgumentList(self)


    class CSharpArgumentListItemContext(Csharp_argumentsContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Csharp_argumentsContext
            super().__init__(parser)
            self.items = None # Csharp_argumentsContext
            self.item = None # Csharp_expressionContext
            self.copyFrom(ctx)

        def COMMA(self):
            return self.getToken(OParser.COMMA, 0)
        def csharp_arguments(self):
            return self.getTypedRuleContext(OParser.Csharp_argumentsContext,0)

        def csharp_expression(self):
            return self.getTypedRuleContext(OParser.Csharp_expressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCSharpArgumentListItem" ):
                listener.enterCSharpArgumentListItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCSharpArgumentListItem" ):
                listener.exitCSharpArgumentListItem(self)



    def csharp_arguments(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = OParser.Csharp_argumentsContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 452
        self.enterRecursionRule(localctx, 452, self.RULE_csharp_arguments, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            localctx = OParser.CSharpArgumentListContext(self, localctx)
            self._ctx = localctx
            _prevctx = localctx

            self.state = 2603
            localctx.item = self.csharp_expression(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 2610
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,232,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = OParser.CSharpArgumentListItemContext(self, OParser.Csharp_argumentsContext(self, _parentctx, _parentState))
                    localctx.items = _prevctx
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_csharp_arguments)
                    self.state = 2605
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 2606
                    self.match(OParser.COMMA)
                    self.state = 2607
                    localctx.item = self.csharp_expression(0) 
                self.state = 2612
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,232,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class Csharp_item_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.exp = None # Csharp_expressionContext

        def LBRAK(self):
            return self.getToken(OParser.LBRAK, 0)

        def RBRAK(self):
            return self.getToken(OParser.RBRAK, 0)

        def csharp_expression(self):
            return self.getTypedRuleContext(OParser.Csharp_expressionContext,0)


        def getRuleIndex(self):
            return OParser.RULE_csharp_item_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCsharp_item_expression" ):
                listener.enterCsharp_item_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCsharp_item_expression" ):
                listener.exitCsharp_item_expression(self)




    def csharp_item_expression(self):

        localctx = OParser.Csharp_item_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 454, self.RULE_csharp_item_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2613
            self.match(OParser.LBRAK)
            self.state = 2614
            localctx.exp = self.csharp_expression(0)
            self.state = 2615
            self.match(OParser.RBRAK)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Csharp_parenthesis_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.exp = None # Csharp_expressionContext

        def LPAR(self):
            return self.getToken(OParser.LPAR, 0)

        def RPAR(self):
            return self.getToken(OParser.RPAR, 0)

        def csharp_expression(self):
            return self.getTypedRuleContext(OParser.Csharp_expressionContext,0)


        def getRuleIndex(self):
            return OParser.RULE_csharp_parenthesis_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCsharp_parenthesis_expression" ):
                listener.enterCsharp_parenthesis_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCsharp_parenthesis_expression" ):
                listener.exitCsharp_parenthesis_expression(self)




    def csharp_parenthesis_expression(self):

        localctx = OParser.Csharp_parenthesis_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 456, self.RULE_csharp_parenthesis_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2617
            self.match(OParser.LPAR)
            self.state = 2618
            localctx.exp = self.csharp_expression(0)
            self.state = 2619
            self.match(OParser.RPAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Csharp_identifier_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return OParser.RULE_csharp_identifier_expression

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class CSharpIdentifierContext(Csharp_identifier_expressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Csharp_identifier_expressionContext
            super().__init__(parser)
            self.name = None # Csharp_identifierContext
            self.copyFrom(ctx)

        def csharp_identifier(self):
            return self.getTypedRuleContext(OParser.Csharp_identifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCSharpIdentifier" ):
                listener.enterCSharpIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCSharpIdentifier" ):
                listener.exitCSharpIdentifier(self)


    class CSharpChildIdentifierContext(Csharp_identifier_expressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Csharp_identifier_expressionContext
            super().__init__(parser)
            self.parent = None # Csharp_identifier_expressionContext
            self.name = None # Csharp_identifierContext
            self.copyFrom(ctx)

        def DOT(self):
            return self.getToken(OParser.DOT, 0)
        def csharp_identifier_expression(self):
            return self.getTypedRuleContext(OParser.Csharp_identifier_expressionContext,0)

        def csharp_identifier(self):
            return self.getTypedRuleContext(OParser.Csharp_identifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCSharpChildIdentifier" ):
                listener.enterCSharpChildIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCSharpChildIdentifier" ):
                listener.exitCSharpChildIdentifier(self)


    class CSharpPromptoIdentifierContext(Csharp_identifier_expressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Csharp_identifier_expressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DOLLAR_IDENTIFIER(self):
            return self.getToken(OParser.DOLLAR_IDENTIFIER, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCSharpPromptoIdentifier" ):
                listener.enterCSharpPromptoIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCSharpPromptoIdentifier" ):
                listener.exitCSharpPromptoIdentifier(self)



    def csharp_identifier_expression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = OParser.Csharp_identifier_expressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 458
        self.enterRecursionRule(localctx, 458, self.RULE_csharp_identifier_expression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2624
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,233,self._ctx)
            if la_ == 1:
                localctx = OParser.CSharpPromptoIdentifierContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx

                self.state = 2622
                self.match(OParser.DOLLAR_IDENTIFIER)
                pass

            elif la_ == 2:
                localctx = OParser.CSharpIdentifierContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2623
                localctx.name = self.csharp_identifier()
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 2631
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,234,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = OParser.CSharpChildIdentifierContext(self, OParser.Csharp_identifier_expressionContext(self, _parentctx, _parentState))
                    localctx.parent = _prevctx
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_csharp_identifier_expression)
                    self.state = 2626
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 2627
                    self.match(OParser.DOT)
                    self.state = 2628
                    localctx.name = self.csharp_identifier() 
                self.state = 2633
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,234,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class Csharp_literal_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return OParser.RULE_csharp_literal_expression

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class CSharpBooleanLiteralContext(Csharp_literal_expressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Csharp_literal_expressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def BOOLEAN_LITERAL(self):
            return self.getToken(OParser.BOOLEAN_LITERAL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCSharpBooleanLiteral" ):
                listener.enterCSharpBooleanLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCSharpBooleanLiteral" ):
                listener.exitCSharpBooleanLiteral(self)


    class CSharpIntegerLiteralContext(Csharp_literal_expressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Csharp_literal_expressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def INTEGER_LITERAL(self):
            return self.getToken(OParser.INTEGER_LITERAL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCSharpIntegerLiteral" ):
                listener.enterCSharpIntegerLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCSharpIntegerLiteral" ):
                listener.exitCSharpIntegerLiteral(self)


    class CSharpDecimalLiteralContext(Csharp_literal_expressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Csharp_literal_expressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DECIMAL_LITERAL(self):
            return self.getToken(OParser.DECIMAL_LITERAL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCSharpDecimalLiteral" ):
                listener.enterCSharpDecimalLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCSharpDecimalLiteral" ):
                listener.exitCSharpDecimalLiteral(self)


    class CSharpCharacterLiteralContext(Csharp_literal_expressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Csharp_literal_expressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CHAR_LITERAL(self):
            return self.getToken(OParser.CHAR_LITERAL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCSharpCharacterLiteral" ):
                listener.enterCSharpCharacterLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCSharpCharacterLiteral" ):
                listener.exitCSharpCharacterLiteral(self)


    class CSharpTextLiteralContext(Csharp_literal_expressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Csharp_literal_expressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def TEXT_LITERAL(self):
            return self.getToken(OParser.TEXT_LITERAL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCSharpTextLiteral" ):
                listener.enterCSharpTextLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCSharpTextLiteral" ):
                listener.exitCSharpTextLiteral(self)



    def csharp_literal_expression(self):

        localctx = OParser.Csharp_literal_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 460, self.RULE_csharp_literal_expression)
        try:
            self.state = 2639
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [OParser.INTEGER_LITERAL]:
                localctx = OParser.CSharpIntegerLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2634
                self.match(OParser.INTEGER_LITERAL)
                pass
            elif token in [OParser.DECIMAL_LITERAL]:
                localctx = OParser.CSharpDecimalLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2635
                self.match(OParser.DECIMAL_LITERAL)
                pass
            elif token in [OParser.TEXT_LITERAL]:
                localctx = OParser.CSharpTextLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 2636
                self.match(OParser.TEXT_LITERAL)
                pass
            elif token in [OParser.BOOLEAN_LITERAL]:
                localctx = OParser.CSharpBooleanLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 2637
                self.match(OParser.BOOLEAN_LITERAL)
                pass
            elif token in [OParser.CHAR_LITERAL]:
                localctx = OParser.CSharpCharacterLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 2638
                self.match(OParser.CHAR_LITERAL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Csharp_identifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VARIABLE_IDENTIFIER(self):
            return self.getToken(OParser.VARIABLE_IDENTIFIER, 0)

        def SYMBOL_IDENTIFIER(self):
            return self.getToken(OParser.SYMBOL_IDENTIFIER, 0)

        def DOLLAR_IDENTIFIER(self):
            return self.getToken(OParser.DOLLAR_IDENTIFIER, 0)

        def TYPE_IDENTIFIER(self):
            return self.getToken(OParser.TYPE_IDENTIFIER, 0)

        def keyword(self):
            return self.getTypedRuleContext(OParser.KeywordContext,0)


        def getRuleIndex(self):
            return OParser.RULE_csharp_identifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCsharp_identifier" ):
                listener.enterCsharp_identifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCsharp_identifier" ):
                listener.exitCsharp_identifier(self)




    def csharp_identifier(self):

        localctx = OParser.Csharp_identifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 462, self.RULE_csharp_identifier)
        try:
            self.state = 2646
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [OParser.VARIABLE_IDENTIFIER]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2641
                self.match(OParser.VARIABLE_IDENTIFIER)
                pass
            elif token in [OParser.SYMBOL_IDENTIFIER]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2642
                self.match(OParser.SYMBOL_IDENTIFIER)
                pass
            elif token in [OParser.DOLLAR_IDENTIFIER]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2643
                self.match(OParser.DOLLAR_IDENTIFIER)
                pass
            elif token in [OParser.TYPE_IDENTIFIER]:
                self.enterOuterAlt(localctx, 4)
                self.state = 2644
                self.match(OParser.TYPE_IDENTIFIER)
                pass
            elif token in [OParser.JAVA, OParser.CSHARP, OParser.PYTHON2, OParser.PYTHON3, OParser.JAVASCRIPT, OParser.SWIFT, OParser.BOOLEAN, OParser.CHARACTER, OParser.TEXT, OParser.INTEGER, OParser.DECIMAL, OParser.DATE, OParser.TIME, OParser.DATETIME, OParser.PERIOD, OParser.VERSION, OParser.CODE, OParser.DOCUMENT, OParser.BLOB, OParser.IMAGE, OParser.UUID, OParser.ITERATOR, OParser.CURSOR, OParser.HTML, OParser.ABSTRACT, OParser.ALL, OParser.ALWAYS, OParser.AND, OParser.ANY, OParser.AS, OParser.ASC, OParser.ATTR, OParser.ATTRIBUTE, OParser.ATTRIBUTES, OParser.BINDINGS, OParser.BREAK, OParser.BY, OParser.CASE, OParser.CATCH, OParser.CATEGORY, OParser.CLASS, OParser.CLOSE, OParser.CONTAINS, OParser.DEF, OParser.DEFAULT, OParser.DEFINE, OParser.DELETE, OParser.DESC, OParser.DO, OParser.DOING, OParser.EACH, OParser.ELSE, OParser.ENUM, OParser.ENUMERATED, OParser.EXCEPT, OParser.EXECUTE, OParser.EXPECTING, OParser.EXTENDS, OParser.FETCH, OParser.FILTERED, OParser.FINALLY, OParser.FLUSH, OParser.FOR, OParser.FROM, OParser.GETTER, OParser.HAS, OParser.IF, OParser.IN, OParser.INDEX, OParser.IS, OParser.MATCHING, OParser.METHOD, OParser.METHODS, OParser.MODULO, OParser.MUTABLE, OParser.NATIVE, OParser.NONE, OParser.NOT, OParser.NOTHING, OParser.NULL, OParser.ON, OParser.ONE, OParser.OPERATOR, OParser.OR, OParser.ORDER, OParser.OTHERWISE, OParser.PASS, OParser.RAISE, OParser.READ, OParser.RECEIVING, OParser.RESOURCE, OParser.RETURN, OParser.RETURNING, OParser.ROWS, OParser.SELF, OParser.SETTER, OParser.SINGLETON, OParser.SORTED, OParser.STORABLE, OParser.STORE, OParser.SUPER, OParser.SWITCH, OParser.TEST, OParser.THIS, OParser.THROW, OParser.TO, OParser.TRY, OParser.VERIFYING, OParser.WIDGET, OParser.WITH, OParser.WHEN, OParser.WHERE, OParser.WHILE, OParser.WRITE]:
                self.enterOuterAlt(localctx, 5)
                self.state = 2645
                self.keyword()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Jsx_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def jsx_element(self):
            return self.getTypedRuleContext(OParser.Jsx_elementContext,0)


        def jsx_fragment(self):
            return self.getTypedRuleContext(OParser.Jsx_fragmentContext,0)


        def getRuleIndex(self):
            return OParser.RULE_jsx_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJsx_expression" ):
                listener.enterJsx_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJsx_expression" ):
                listener.exitJsx_expression(self)




    def jsx_expression(self):

        localctx = OParser.Jsx_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 464, self.RULE_jsx_expression)
        try:
            self.state = 2650
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,237,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2648
                self.jsx_element()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2649
                self.jsx_fragment()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Jsx_elementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return OParser.RULE_jsx_element

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class JsxSelfClosingContext(Jsx_elementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Jsx_elementContext
            super().__init__(parser)
            self.jsx = None # Jsx_self_closingContext
            self.copyFrom(ctx)

        def jsx_self_closing(self):
            return self.getTypedRuleContext(OParser.Jsx_self_closingContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJsxSelfClosing" ):
                listener.enterJsxSelfClosing(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJsxSelfClosing" ):
                listener.exitJsxSelfClosing(self)


    class JsxElementContext(Jsx_elementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Jsx_elementContext
            super().__init__(parser)
            self.opening = None # Jsx_openingContext
            self.children_ = None # Jsx_childrenContext
            self.closing = None # Jsx_closingContext
            self.copyFrom(ctx)

        def jsx_opening(self):
            return self.getTypedRuleContext(OParser.Jsx_openingContext,0)

        def jsx_closing(self):
            return self.getTypedRuleContext(OParser.Jsx_closingContext,0)

        def jsx_children(self):
            return self.getTypedRuleContext(OParser.Jsx_childrenContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJsxElement" ):
                listener.enterJsxElement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJsxElement" ):
                listener.exitJsxElement(self)



    def jsx_element(self):

        localctx = OParser.Jsx_elementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 466, self.RULE_jsx_element)
        try:
            self.state = 2659
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,239,self._ctx)
            if la_ == 1:
                localctx = OParser.JsxSelfClosingContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2652
                localctx.jsx = self.jsx_self_closing()
                pass

            elif la_ == 2:
                localctx = OParser.JsxElementContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2653
                localctx.opening = self.jsx_opening()
                self.state = 2655
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,238,self._ctx)
                if la_ == 1:
                    self.state = 2654
                    localctx.children_ = self.jsx_children()


                self.state = 2657
                localctx.closing = self.jsx_closing()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Jsx_fragmentContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.children_ = None # Jsx_childrenContext

        def jsx_fragment_start(self):
            return self.getTypedRuleContext(OParser.Jsx_fragment_startContext,0)


        def ws_plus(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(OParser.Ws_plusContext)
            else:
                return self.getTypedRuleContext(OParser.Ws_plusContext,i)


        def jsx_fragment_end(self):
            return self.getTypedRuleContext(OParser.Jsx_fragment_endContext,0)


        def jsx_children(self):
            return self.getTypedRuleContext(OParser.Jsx_childrenContext,0)


        def getRuleIndex(self):
            return OParser.RULE_jsx_fragment

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJsx_fragment" ):
                listener.enterJsx_fragment(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJsx_fragment" ):
                listener.exitJsx_fragment(self)




    def jsx_fragment(self):

        localctx = OParser.Jsx_fragmentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 468, self.RULE_jsx_fragment)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2661
            self.jsx_fragment_start()
            self.state = 2662
            self.ws_plus()
            self.state = 2664
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,240,self._ctx)
            if la_ == 1:
                self.state = 2663
                localctx.children_ = self.jsx_children()


            self.state = 2666
            self.ws_plus()
            self.state = 2667
            self.jsx_fragment_end()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Jsx_fragment_startContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LT(self):
            return self.getToken(OParser.LT, 0)

        def GT(self):
            return self.getToken(OParser.GT, 0)

        def LTGT(self):
            return self.getToken(OParser.LTGT, 0)

        def getRuleIndex(self):
            return OParser.RULE_jsx_fragment_start

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJsx_fragment_start" ):
                listener.enterJsx_fragment_start(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJsx_fragment_start" ):
                listener.exitJsx_fragment_start(self)




    def jsx_fragment_start(self):

        localctx = OParser.Jsx_fragment_startContext(self, self._ctx, self.state)
        self.enterRule(localctx, 470, self.RULE_jsx_fragment_start)
        try:
            self.state = 2672
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [OParser.LT]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2669
                self.match(OParser.LT)
                self.state = 2670
                self.match(OParser.GT)
                pass
            elif token in [OParser.LTGT]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2671
                self.match(OParser.LTGT)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Jsx_fragment_endContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LT(self):
            return self.getToken(OParser.LT, 0)

        def SLASH(self):
            return self.getToken(OParser.SLASH, 0)

        def GT(self):
            return self.getToken(OParser.GT, 0)

        def getRuleIndex(self):
            return OParser.RULE_jsx_fragment_end

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJsx_fragment_end" ):
                listener.enterJsx_fragment_end(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJsx_fragment_end" ):
                listener.exitJsx_fragment_end(self)




    def jsx_fragment_end(self):

        localctx = OParser.Jsx_fragment_endContext(self, self._ctx, self.state)
        self.enterRule(localctx, 472, self.RULE_jsx_fragment_end)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2674
            self.match(OParser.LT)
            self.state = 2675
            self.match(OParser.SLASH)
            self.state = 2676
            self.match(OParser.GT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Jsx_self_closingContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # Jsx_element_nameContext
            self.attributes = None # Jsx_attributeContext

        def LT(self):
            return self.getToken(OParser.LT, 0)

        def ws_plus(self):
            return self.getTypedRuleContext(OParser.Ws_plusContext,0)


        def SLASH(self):
            return self.getToken(OParser.SLASH, 0)

        def GT(self):
            return self.getToken(OParser.GT, 0)

        def jsx_element_name(self):
            return self.getTypedRuleContext(OParser.Jsx_element_nameContext,0)


        def jsx_attribute(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(OParser.Jsx_attributeContext)
            else:
                return self.getTypedRuleContext(OParser.Jsx_attributeContext,i)


        def getRuleIndex(self):
            return OParser.RULE_jsx_self_closing

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJsx_self_closing" ):
                listener.enterJsx_self_closing(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJsx_self_closing" ):
                listener.exitJsx_self_closing(self)




    def jsx_self_closing(self):

        localctx = OParser.Jsx_self_closingContext(self, self._ctx, self.state)
        self.enterRule(localctx, 474, self.RULE_jsx_self_closing)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2678
            self.match(OParser.LT)
            self.state = 2679
            localctx.name = self.jsx_element_name()
            self.state = 2680
            self.ws_plus()
            self.state = 2684
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << OParser.JAVA) | (1 << OParser.CSHARP) | (1 << OParser.PYTHON2) | (1 << OParser.PYTHON3) | (1 << OParser.JAVASCRIPT) | (1 << OParser.SWIFT) | (1 << OParser.BOOLEAN) | (1 << OParser.CHARACTER) | (1 << OParser.TEXT) | (1 << OParser.INTEGER) | (1 << OParser.DECIMAL) | (1 << OParser.DATE) | (1 << OParser.TIME) | (1 << OParser.DATETIME) | (1 << OParser.PERIOD) | (1 << OParser.VERSION) | (1 << OParser.CODE) | (1 << OParser.DOCUMENT) | (1 << OParser.BLOB) | (1 << OParser.IMAGE))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (OParser.UUID - 64)) | (1 << (OParser.ITERATOR - 64)) | (1 << (OParser.CURSOR - 64)) | (1 << (OParser.HTML - 64)) | (1 << (OParser.ABSTRACT - 64)) | (1 << (OParser.ALL - 64)) | (1 << (OParser.ALWAYS - 64)) | (1 << (OParser.AND - 64)) | (1 << (OParser.ANY - 64)) | (1 << (OParser.AS - 64)) | (1 << (OParser.ASC - 64)) | (1 << (OParser.ATTR - 64)) | (1 << (OParser.ATTRIBUTE - 64)) | (1 << (OParser.ATTRIBUTES - 64)) | (1 << (OParser.BINDINGS - 64)) | (1 << (OParser.BREAK - 64)) | (1 << (OParser.BY - 64)) | (1 << (OParser.CASE - 64)) | (1 << (OParser.CATCH - 64)) | (1 << (OParser.CATEGORY - 64)) | (1 << (OParser.CLASS - 64)) | (1 << (OParser.CLOSE - 64)) | (1 << (OParser.CONTAINS - 64)) | (1 << (OParser.DEF - 64)) | (1 << (OParser.DEFAULT - 64)) | (1 << (OParser.DEFINE - 64)) | (1 << (OParser.DELETE - 64)) | (1 << (OParser.DESC - 64)) | (1 << (OParser.DO - 64)) | (1 << (OParser.DOING - 64)) | (1 << (OParser.EACH - 64)) | (1 << (OParser.ELSE - 64)) | (1 << (OParser.ENUM - 64)) | (1 << (OParser.ENUMERATED - 64)) | (1 << (OParser.EXCEPT - 64)) | (1 << (OParser.EXECUTE - 64)) | (1 << (OParser.EXPECTING - 64)) | (1 << (OParser.EXTENDS - 64)) | (1 << (OParser.FETCH - 64)) | (1 << (OParser.FILTERED - 64)) | (1 << (OParser.FINALLY - 64)) | (1 << (OParser.FLUSH - 64)) | (1 << (OParser.FOR - 64)) | (1 << (OParser.FROM - 64)) | (1 << (OParser.GETTER - 64)) | (1 << (OParser.HAS - 64)) | (1 << (OParser.IF - 64)) | (1 << (OParser.IN - 64)) | (1 << (OParser.INDEX - 64)) | (1 << (OParser.IS - 64)) | (1 << (OParser.MATCHING - 64)) | (1 << (OParser.METHOD - 64)) | (1 << (OParser.METHODS - 64)) | (1 << (OParser.MODULO - 64)) | (1 << (OParser.MUTABLE - 64)) | (1 << (OParser.NATIVE - 64)) | (1 << (OParser.NONE - 64)) | (1 << (OParser.NOT - 64)) | (1 << (OParser.NOTHING - 64)) | (1 << (OParser.NULL - 64)) | (1 << (OParser.ON - 64)) | (1 << (OParser.ONE - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (OParser.OPERATOR - 128)) | (1 << (OParser.OR - 128)) | (1 << (OParser.ORDER - 128)) | (1 << (OParser.OTHERWISE - 128)) | (1 << (OParser.PASS - 128)) | (1 << (OParser.RAISE - 128)) | (1 << (OParser.READ - 128)) | (1 << (OParser.RECEIVING - 128)) | (1 << (OParser.RESOURCE - 128)) | (1 << (OParser.RETURN - 128)) | (1 << (OParser.RETURNING - 128)) | (1 << (OParser.ROWS - 128)) | (1 << (OParser.SELF - 128)) | (1 << (OParser.SETTER - 128)) | (1 << (OParser.SINGLETON - 128)) | (1 << (OParser.SORTED - 128)) | (1 << (OParser.STORABLE - 128)) | (1 << (OParser.STORE - 128)) | (1 << (OParser.SUPER - 128)) | (1 << (OParser.SWITCH - 128)) | (1 << (OParser.TEST - 128)) | (1 << (OParser.THIS - 128)) | (1 << (OParser.THROW - 128)) | (1 << (OParser.TO - 128)) | (1 << (OParser.TRY - 128)) | (1 << (OParser.VERIFYING - 128)) | (1 << (OParser.WIDGET - 128)) | (1 << (OParser.WITH - 128)) | (1 << (OParser.WHEN - 128)) | (1 << (OParser.WHERE - 128)) | (1 << (OParser.WHILE - 128)) | (1 << (OParser.WRITE - 128)) | (1 << (OParser.SYMBOL_IDENTIFIER - 128)) | (1 << (OParser.TYPE_IDENTIFIER - 128)) | (1 << (OParser.VARIABLE_IDENTIFIER - 128)))) != 0):
                self.state = 2681
                localctx.attributes = self.jsx_attribute()
                self.state = 2686
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2687
            self.match(OParser.SLASH)
            self.state = 2688
            self.match(OParser.GT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Jsx_openingContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # Jsx_element_nameContext
            self.attributes = None # Jsx_attributeContext

        def LT(self):
            return self.getToken(OParser.LT, 0)

        def ws_plus(self):
            return self.getTypedRuleContext(OParser.Ws_plusContext,0)


        def GT(self):
            return self.getToken(OParser.GT, 0)

        def jsx_element_name(self):
            return self.getTypedRuleContext(OParser.Jsx_element_nameContext,0)


        def jsx_attribute(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(OParser.Jsx_attributeContext)
            else:
                return self.getTypedRuleContext(OParser.Jsx_attributeContext,i)


        def getRuleIndex(self):
            return OParser.RULE_jsx_opening

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJsx_opening" ):
                listener.enterJsx_opening(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJsx_opening" ):
                listener.exitJsx_opening(self)




    def jsx_opening(self):

        localctx = OParser.Jsx_openingContext(self, self._ctx, self.state)
        self.enterRule(localctx, 476, self.RULE_jsx_opening)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2690
            self.match(OParser.LT)
            self.state = 2691
            localctx.name = self.jsx_element_name()
            self.state = 2692
            self.ws_plus()
            self.state = 2696
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << OParser.JAVA) | (1 << OParser.CSHARP) | (1 << OParser.PYTHON2) | (1 << OParser.PYTHON3) | (1 << OParser.JAVASCRIPT) | (1 << OParser.SWIFT) | (1 << OParser.BOOLEAN) | (1 << OParser.CHARACTER) | (1 << OParser.TEXT) | (1 << OParser.INTEGER) | (1 << OParser.DECIMAL) | (1 << OParser.DATE) | (1 << OParser.TIME) | (1 << OParser.DATETIME) | (1 << OParser.PERIOD) | (1 << OParser.VERSION) | (1 << OParser.CODE) | (1 << OParser.DOCUMENT) | (1 << OParser.BLOB) | (1 << OParser.IMAGE))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (OParser.UUID - 64)) | (1 << (OParser.ITERATOR - 64)) | (1 << (OParser.CURSOR - 64)) | (1 << (OParser.HTML - 64)) | (1 << (OParser.ABSTRACT - 64)) | (1 << (OParser.ALL - 64)) | (1 << (OParser.ALWAYS - 64)) | (1 << (OParser.AND - 64)) | (1 << (OParser.ANY - 64)) | (1 << (OParser.AS - 64)) | (1 << (OParser.ASC - 64)) | (1 << (OParser.ATTR - 64)) | (1 << (OParser.ATTRIBUTE - 64)) | (1 << (OParser.ATTRIBUTES - 64)) | (1 << (OParser.BINDINGS - 64)) | (1 << (OParser.BREAK - 64)) | (1 << (OParser.BY - 64)) | (1 << (OParser.CASE - 64)) | (1 << (OParser.CATCH - 64)) | (1 << (OParser.CATEGORY - 64)) | (1 << (OParser.CLASS - 64)) | (1 << (OParser.CLOSE - 64)) | (1 << (OParser.CONTAINS - 64)) | (1 << (OParser.DEF - 64)) | (1 << (OParser.DEFAULT - 64)) | (1 << (OParser.DEFINE - 64)) | (1 << (OParser.DELETE - 64)) | (1 << (OParser.DESC - 64)) | (1 << (OParser.DO - 64)) | (1 << (OParser.DOING - 64)) | (1 << (OParser.EACH - 64)) | (1 << (OParser.ELSE - 64)) | (1 << (OParser.ENUM - 64)) | (1 << (OParser.ENUMERATED - 64)) | (1 << (OParser.EXCEPT - 64)) | (1 << (OParser.EXECUTE - 64)) | (1 << (OParser.EXPECTING - 64)) | (1 << (OParser.EXTENDS - 64)) | (1 << (OParser.FETCH - 64)) | (1 << (OParser.FILTERED - 64)) | (1 << (OParser.FINALLY - 64)) | (1 << (OParser.FLUSH - 64)) | (1 << (OParser.FOR - 64)) | (1 << (OParser.FROM - 64)) | (1 << (OParser.GETTER - 64)) | (1 << (OParser.HAS - 64)) | (1 << (OParser.IF - 64)) | (1 << (OParser.IN - 64)) | (1 << (OParser.INDEX - 64)) | (1 << (OParser.IS - 64)) | (1 << (OParser.MATCHING - 64)) | (1 << (OParser.METHOD - 64)) | (1 << (OParser.METHODS - 64)) | (1 << (OParser.MODULO - 64)) | (1 << (OParser.MUTABLE - 64)) | (1 << (OParser.NATIVE - 64)) | (1 << (OParser.NONE - 64)) | (1 << (OParser.NOT - 64)) | (1 << (OParser.NOTHING - 64)) | (1 << (OParser.NULL - 64)) | (1 << (OParser.ON - 64)) | (1 << (OParser.ONE - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (OParser.OPERATOR - 128)) | (1 << (OParser.OR - 128)) | (1 << (OParser.ORDER - 128)) | (1 << (OParser.OTHERWISE - 128)) | (1 << (OParser.PASS - 128)) | (1 << (OParser.RAISE - 128)) | (1 << (OParser.READ - 128)) | (1 << (OParser.RECEIVING - 128)) | (1 << (OParser.RESOURCE - 128)) | (1 << (OParser.RETURN - 128)) | (1 << (OParser.RETURNING - 128)) | (1 << (OParser.ROWS - 128)) | (1 << (OParser.SELF - 128)) | (1 << (OParser.SETTER - 128)) | (1 << (OParser.SINGLETON - 128)) | (1 << (OParser.SORTED - 128)) | (1 << (OParser.STORABLE - 128)) | (1 << (OParser.STORE - 128)) | (1 << (OParser.SUPER - 128)) | (1 << (OParser.SWITCH - 128)) | (1 << (OParser.TEST - 128)) | (1 << (OParser.THIS - 128)) | (1 << (OParser.THROW - 128)) | (1 << (OParser.TO - 128)) | (1 << (OParser.TRY - 128)) | (1 << (OParser.VERIFYING - 128)) | (1 << (OParser.WIDGET - 128)) | (1 << (OParser.WITH - 128)) | (1 << (OParser.WHEN - 128)) | (1 << (OParser.WHERE - 128)) | (1 << (OParser.WHILE - 128)) | (1 << (OParser.WRITE - 128)) | (1 << (OParser.SYMBOL_IDENTIFIER - 128)) | (1 << (OParser.TYPE_IDENTIFIER - 128)) | (1 << (OParser.VARIABLE_IDENTIFIER - 128)))) != 0):
                self.state = 2693
                localctx.attributes = self.jsx_attribute()
                self.state = 2698
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2699
            self.match(OParser.GT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Jsx_closingContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # Jsx_element_nameContext

        def LT(self):
            return self.getToken(OParser.LT, 0)

        def SLASH(self):
            return self.getToken(OParser.SLASH, 0)

        def GT(self):
            return self.getToken(OParser.GT, 0)

        def jsx_element_name(self):
            return self.getTypedRuleContext(OParser.Jsx_element_nameContext,0)


        def getRuleIndex(self):
            return OParser.RULE_jsx_closing

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJsx_closing" ):
                listener.enterJsx_closing(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJsx_closing" ):
                listener.exitJsx_closing(self)




    def jsx_closing(self):

        localctx = OParser.Jsx_closingContext(self, self._ctx, self.state)
        self.enterRule(localctx, 478, self.RULE_jsx_closing)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2701
            self.match(OParser.LT)
            self.state = 2702
            self.match(OParser.SLASH)
            self.state = 2703
            localctx.name = self.jsx_element_name()
            self.state = 2704
            self.match(OParser.GT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Jsx_element_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def jsx_identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(OParser.Jsx_identifierContext)
            else:
                return self.getTypedRuleContext(OParser.Jsx_identifierContext,i)


        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(OParser.DOT)
            else:
                return self.getToken(OParser.DOT, i)

        def getRuleIndex(self):
            return OParser.RULE_jsx_element_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJsx_element_name" ):
                listener.enterJsx_element_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJsx_element_name" ):
                listener.exitJsx_element_name(self)




    def jsx_element_name(self):

        localctx = OParser.Jsx_element_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 480, self.RULE_jsx_element_name)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2706
            self.jsx_identifier()
            self.state = 2711
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==OParser.DOT:
                self.state = 2707
                self.match(OParser.DOT)
                self.state = 2708
                self.jsx_identifier()
                self.state = 2713
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Jsx_identifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier_or_keyword(self):
            return self.getTypedRuleContext(OParser.Identifier_or_keywordContext,0)


        def nospace_hyphen_identifier_or_keyword(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(OParser.Nospace_hyphen_identifier_or_keywordContext)
            else:
                return self.getTypedRuleContext(OParser.Nospace_hyphen_identifier_or_keywordContext,i)


        def getRuleIndex(self):
            return OParser.RULE_jsx_identifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJsx_identifier" ):
                listener.enterJsx_identifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJsx_identifier" ):
                listener.exitJsx_identifier(self)




    def jsx_identifier(self):

        localctx = OParser.Jsx_identifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 482, self.RULE_jsx_identifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2714
            self.identifier_or_keyword()
            self.state = 2718
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,245,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2715
                    self.nospace_hyphen_identifier_or_keyword() 
                self.state = 2720
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,245,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Jsx_attributeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # Jsx_identifierContext
            self.value = None # Jsx_attribute_valueContext

        def ws_plus(self):
            return self.getTypedRuleContext(OParser.Ws_plusContext,0)


        def jsx_identifier(self):
            return self.getTypedRuleContext(OParser.Jsx_identifierContext,0)


        def EQ(self):
            return self.getToken(OParser.EQ, 0)

        def jsx_attribute_value(self):
            return self.getTypedRuleContext(OParser.Jsx_attribute_valueContext,0)


        def getRuleIndex(self):
            return OParser.RULE_jsx_attribute

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJsx_attribute" ):
                listener.enterJsx_attribute(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJsx_attribute" ):
                listener.exitJsx_attribute(self)




    def jsx_attribute(self):

        localctx = OParser.Jsx_attributeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 484, self.RULE_jsx_attribute)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2721
            localctx.name = self.jsx_identifier()
            self.state = 2724
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==OParser.EQ:
                self.state = 2722
                self.match(OParser.EQ)
                self.state = 2723
                localctx.value = self.jsx_attribute_value()


            self.state = 2726
            self.ws_plus()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Jsx_attribute_valueContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return OParser.RULE_jsx_attribute_value

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class JsxValueContext(Jsx_attribute_valueContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Jsx_attribute_valueContext
            super().__init__(parser)
            self.exp = None # ExpressionContext
            self.copyFrom(ctx)

        def LCURL(self):
            return self.getToken(OParser.LCURL, 0)
        def RCURL(self):
            return self.getToken(OParser.RCURL, 0)
        def expression(self):
            return self.getTypedRuleContext(OParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJsxValue" ):
                listener.enterJsxValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJsxValue" ):
                listener.exitJsxValue(self)


    class JsxLiteralContext(Jsx_attribute_valueContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Jsx_attribute_valueContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def TEXT_LITERAL(self):
            return self.getToken(OParser.TEXT_LITERAL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJsxLiteral" ):
                listener.enterJsxLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJsxLiteral" ):
                listener.exitJsxLiteral(self)



    def jsx_attribute_value(self):

        localctx = OParser.Jsx_attribute_valueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 486, self.RULE_jsx_attribute_value)
        try:
            self.state = 2733
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [OParser.TEXT_LITERAL]:
                localctx = OParser.JsxLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2728
                self.match(OParser.TEXT_LITERAL)
                pass
            elif token in [OParser.LCURL]:
                localctx = OParser.JsxValueContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2729
                self.match(OParser.LCURL)
                self.state = 2730
                localctx.exp = self.expression(0)
                self.state = 2731
                self.match(OParser.RCURL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Jsx_childrenContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def jsx_child(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(OParser.Jsx_childContext)
            else:
                return self.getTypedRuleContext(OParser.Jsx_childContext,i)


        def getRuleIndex(self):
            return OParser.RULE_jsx_children

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJsx_children" ):
                listener.enterJsx_children(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJsx_children" ):
                listener.exitJsx_children(self)




    def jsx_children(self):

        localctx = OParser.Jsx_childrenContext(self, self._ctx, self.state)
        self.enterRule(localctx, 488, self.RULE_jsx_children)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2736 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 2735
                    self.jsx_child()

                else:
                    raise NoViableAltException(self)
                self.state = 2738 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,248,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Jsx_childContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return OParser.RULE_jsx_child

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class JsxTextContext(Jsx_childContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Jsx_childContext
            super().__init__(parser)
            self.text = None # Jsx_textContext
            self.copyFrom(ctx)

        def jsx_text(self):
            return self.getTypedRuleContext(OParser.Jsx_textContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJsxText" ):
                listener.enterJsxText(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJsxText" ):
                listener.exitJsxText(self)


    class JsxChildContext(Jsx_childContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Jsx_childContext
            super().__init__(parser)
            self.jsx = None # Jsx_elementContext
            self.copyFrom(ctx)

        def jsx_element(self):
            return self.getTypedRuleContext(OParser.Jsx_elementContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJsxChild" ):
                listener.enterJsxChild(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJsxChild" ):
                listener.exitJsxChild(self)


    class JsxCodeContext(Jsx_childContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Jsx_childContext
            super().__init__(parser)
            self.exp = None # ExpressionContext
            self.copyFrom(ctx)

        def LCURL(self):
            return self.getToken(OParser.LCURL, 0)
        def RCURL(self):
            return self.getToken(OParser.RCURL, 0)
        def expression(self):
            return self.getTypedRuleContext(OParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJsxCode" ):
                listener.enterJsxCode(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJsxCode" ):
                listener.exitJsxCode(self)



    def jsx_child(self):

        localctx = OParser.Jsx_childContext(self, self._ctx, self.state)
        self.enterRule(localctx, 490, self.RULE_jsx_child)
        self._la = 0 # Token type
        try:
            self.state = 2747
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [OParser.SPACE, OParser.WS, OParser.LF, OParser.COMMENT, OParser.JAVA, OParser.CSHARP, OParser.PYTHON2, OParser.PYTHON3, OParser.JAVASCRIPT, OParser.SWIFT, OParser.COLON, OParser.SEMI, OParser.COMMA, OParser.RANGE, OParser.DOT, OParser.LPAR, OParser.RPAR, OParser.LBRAK, OParser.RBRAK, OParser.QMARK, OParser.XMARK, OParser.AMP, OParser.AMP2, OParser.PIPE, OParser.PIPE2, OParser.PLUS, OParser.MINUS, OParser.STAR, OParser.SLASH, OParser.BSLASH, OParser.PERCENT, OParser.GTE, OParser.LTE, OParser.LTGT, OParser.LTCOLONGT, OParser.EQ, OParser.XEQ, OParser.EQ2, OParser.TEQ, OParser.TILDE, OParser.LARROW, OParser.RARROW, OParser.EGT, OParser.BOOLEAN, OParser.CSS, OParser.CHARACTER, OParser.TEXT, OParser.INTEGER, OParser.DECIMAL, OParser.DATE, OParser.TIME, OParser.DATETIME, OParser.PERIOD, OParser.VERSION, OParser.METHOD_COLON, OParser.CODE, OParser.DOCUMENT, OParser.BLOB, OParser.IMAGE, OParser.UUID, OParser.ITERATOR, OParser.CURSOR, OParser.HTML, OParser.TYPE, OParser.ABSTRACT, OParser.ALL, OParser.ALWAYS, OParser.AND, OParser.ANY, OParser.AS, OParser.ASC, OParser.ATTR, OParser.ATTRIBUTE, OParser.ATTRIBUTES, OParser.BINDINGS, OParser.BREAK, OParser.BY, OParser.CASE, OParser.CATCH, OParser.CATEGORY, OParser.CLASS, OParser.CLOSE, OParser.CONTAINS, OParser.DEF, OParser.DEFAULT, OParser.DEFINE, OParser.DELETE, OParser.DESC, OParser.DO, OParser.DOING, OParser.EACH, OParser.ELSE, OParser.ENUM, OParser.ENUMERATED, OParser.EXCEPT, OParser.EXECUTE, OParser.EXPECTING, OParser.EXTENDS, OParser.FETCH, OParser.FILTERED, OParser.FINALLY, OParser.FLUSH, OParser.FOR, OParser.FROM, OParser.GETTER, OParser.HAS, OParser.IF, OParser.IN, OParser.INDEX, OParser.INVOKE_COLON, OParser.IS, OParser.MATCHING, OParser.METHOD, OParser.METHODS, OParser.MODULO, OParser.MUTABLE, OParser.NATIVE, OParser.NONE, OParser.NOT, OParser.NOTHING, OParser.NULL, OParser.ON, OParser.ONE, OParser.OPERATOR, OParser.OR, OParser.ORDER, OParser.OTHERWISE, OParser.PASS, OParser.RAISE, OParser.READ, OParser.RECEIVING, OParser.RESOURCE, OParser.RETURN, OParser.RETURNING, OParser.ROWS, OParser.SELF, OParser.SETTER, OParser.SINGLETON, OParser.SORTED, OParser.STORABLE, OParser.STORE, OParser.SUPER, OParser.SWITCH, OParser.TEST, OParser.THEN, OParser.THIS, OParser.THROW, OParser.TO, OParser.TRY, OParser.VERIFYING, OParser.WIDGET, OParser.WITH, OParser.WHEN, OParser.WHERE, OParser.WHILE, OParser.WRITE, OParser.BOOLEAN_LITERAL, OParser.CHAR_LITERAL, OParser.MIN_INTEGER, OParser.MAX_INTEGER, OParser.SYMBOL_IDENTIFIER, OParser.TYPE_IDENTIFIER, OParser.VARIABLE_IDENTIFIER, OParser.NATIVE_IDENTIFIER, OParser.DOLLAR_IDENTIFIER, OParser.ARONDBASE_IDENTIFIER, OParser.TEXT_LITERAL, OParser.UUID_LITERAL, OParser.INTEGER_LITERAL, OParser.HEXA_LITERAL, OParser.DECIMAL_LITERAL, OParser.DATETIME_LITERAL, OParser.TIME_LITERAL, OParser.DATE_LITERAL, OParser.PERIOD_LITERAL, OParser.VERSION_LITERAL]:
                localctx = OParser.JsxTextContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2740
                localctx.text = self.jsx_text()
                pass
            elif token in [OParser.LT]:
                localctx = OParser.JsxChildContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2741
                localctx.jsx = self.jsx_element()
                pass
            elif token in [OParser.LCURL]:
                localctx = OParser.JsxCodeContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 2742
                self.match(OParser.LCURL)
                self.state = 2744
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << OParser.LPAR) | (1 << OParser.LBRAK) | (1 << OParser.LCURL) | (1 << OParser.XMARK) | (1 << OParser.MINUS) | (1 << OParser.LT) | (1 << OParser.LTGT) | (1 << OParser.LTCOLONGT) | (1 << OParser.BOOLEAN) | (1 << OParser.CSS) | (1 << OParser.CHARACTER) | (1 << OParser.TEXT) | (1 << OParser.INTEGER) | (1 << OParser.DECIMAL) | (1 << OParser.DATE) | (1 << OParser.TIME) | (1 << OParser.DATETIME) | (1 << OParser.PERIOD) | (1 << OParser.VERSION) | (1 << OParser.CODE) | (1 << OParser.DOCUMENT) | (1 << OParser.BLOB) | (1 << OParser.IMAGE))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (OParser.UUID - 64)) | (1 << (OParser.ITERATOR - 64)) | (1 << (OParser.CURSOR - 64)) | (1 << (OParser.HTML - 64)) | (1 << (OParser.ANY - 64)) | (1 << (OParser.EXECUTE - 64)) | (1 << (OParser.FETCH - 64)) | (1 << (OParser.FILTERED - 64)) | (1 << (OParser.MUTABLE - 64)) | (1 << (OParser.NULL - 64)))) != 0) or ((((_la - 134)) & ~0x3f) == 0 and ((1 << (_la - 134)) & ((1 << (OParser.READ - 134)) | (1 << (OParser.SELF - 134)) | (1 << (OParser.SORTED - 134)) | (1 << (OParser.SUPER - 134)) | (1 << (OParser.THIS - 134)) | (1 << (OParser.BOOLEAN_LITERAL - 134)) | (1 << (OParser.CHAR_LITERAL - 134)) | (1 << (OParser.MIN_INTEGER - 134)) | (1 << (OParser.MAX_INTEGER - 134)) | (1 << (OParser.SYMBOL_IDENTIFIER - 134)) | (1 << (OParser.TYPE_IDENTIFIER - 134)) | (1 << (OParser.VARIABLE_IDENTIFIER - 134)) | (1 << (OParser.TEXT_LITERAL - 134)) | (1 << (OParser.UUID_LITERAL - 134)) | (1 << (OParser.INTEGER_LITERAL - 134)) | (1 << (OParser.HEXA_LITERAL - 134)) | (1 << (OParser.DECIMAL_LITERAL - 134)) | (1 << (OParser.DATETIME_LITERAL - 134)) | (1 << (OParser.TIME_LITERAL - 134)) | (1 << (OParser.DATE_LITERAL - 134)) | (1 << (OParser.PERIOD_LITERAL - 134)) | (1 << (OParser.VERSION_LITERAL - 134)))) != 0):
                    self.state = 2743
                    localctx.exp = self.expression(0)


                self.state = 2746
                self.match(OParser.RCURL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Jsx_textContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LCURL(self, i:int=None):
            if i is None:
                return self.getTokens(OParser.LCURL)
            else:
                return self.getToken(OParser.LCURL, i)

        def RCURL(self, i:int=None):
            if i is None:
                return self.getTokens(OParser.RCURL)
            else:
                return self.getToken(OParser.RCURL, i)

        def LT(self, i:int=None):
            if i is None:
                return self.getTokens(OParser.LT)
            else:
                return self.getToken(OParser.LT, i)

        def GT(self, i:int=None):
            if i is None:
                return self.getTokens(OParser.GT)
            else:
                return self.getToken(OParser.GT, i)

        def getRuleIndex(self):
            return OParser.RULE_jsx_text

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJsx_text" ):
                listener.enterJsx_text(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJsx_text" ):
                listener.exitJsx_text(self)




    def jsx_text(self):

        localctx = OParser.Jsx_textContext(self, self._ctx, self.state)
        self.enterRule(localctx, 492, self.RULE_jsx_text)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2750 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 2749
                    _la = self._input.LA(1)
                    if _la <= 0 or (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << OParser.LCURL) | (1 << OParser.RCURL) | (1 << OParser.GT) | (1 << OParser.LT))) != 0):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()

                else:
                    raise NoViableAltException(self)
                self.state = 2752 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,251,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Css_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.field = None # Css_fieldContext

        def LCURL(self):
            return self.getToken(OParser.LCURL, 0)

        def RCURL(self):
            return self.getToken(OParser.RCURL, 0)

        def css_field(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(OParser.Css_fieldContext)
            else:
                return self.getTypedRuleContext(OParser.Css_fieldContext,i)


        def getRuleIndex(self):
            return OParser.RULE_css_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCss_expression" ):
                listener.enterCss_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCss_expression" ):
                listener.exitCss_expression(self)




    def css_expression(self):

        localctx = OParser.Css_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 494, self.RULE_css_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2754
            self.match(OParser.LCURL)
            self.state = 2756 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 2755
                localctx.field = self.css_field()
                self.state = 2758 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << OParser.JAVA) | (1 << OParser.CSHARP) | (1 << OParser.PYTHON2) | (1 << OParser.PYTHON3) | (1 << OParser.JAVASCRIPT) | (1 << OParser.SWIFT) | (1 << OParser.MINUS) | (1 << OParser.BOOLEAN) | (1 << OParser.CHARACTER) | (1 << OParser.TEXT) | (1 << OParser.INTEGER) | (1 << OParser.DECIMAL) | (1 << OParser.DATE) | (1 << OParser.TIME) | (1 << OParser.DATETIME) | (1 << OParser.PERIOD) | (1 << OParser.VERSION) | (1 << OParser.CODE) | (1 << OParser.DOCUMENT) | (1 << OParser.BLOB) | (1 << OParser.IMAGE))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (OParser.UUID - 64)) | (1 << (OParser.ITERATOR - 64)) | (1 << (OParser.CURSOR - 64)) | (1 << (OParser.HTML - 64)) | (1 << (OParser.ABSTRACT - 64)) | (1 << (OParser.ALL - 64)) | (1 << (OParser.ALWAYS - 64)) | (1 << (OParser.AND - 64)) | (1 << (OParser.ANY - 64)) | (1 << (OParser.AS - 64)) | (1 << (OParser.ASC - 64)) | (1 << (OParser.ATTR - 64)) | (1 << (OParser.ATTRIBUTE - 64)) | (1 << (OParser.ATTRIBUTES - 64)) | (1 << (OParser.BINDINGS - 64)) | (1 << (OParser.BREAK - 64)) | (1 << (OParser.BY - 64)) | (1 << (OParser.CASE - 64)) | (1 << (OParser.CATCH - 64)) | (1 << (OParser.CATEGORY - 64)) | (1 << (OParser.CLASS - 64)) | (1 << (OParser.CLOSE - 64)) | (1 << (OParser.CONTAINS - 64)) | (1 << (OParser.DEF - 64)) | (1 << (OParser.DEFAULT - 64)) | (1 << (OParser.DEFINE - 64)) | (1 << (OParser.DELETE - 64)) | (1 << (OParser.DESC - 64)) | (1 << (OParser.DO - 64)) | (1 << (OParser.DOING - 64)) | (1 << (OParser.EACH - 64)) | (1 << (OParser.ELSE - 64)) | (1 << (OParser.ENUM - 64)) | (1 << (OParser.ENUMERATED - 64)) | (1 << (OParser.EXCEPT - 64)) | (1 << (OParser.EXECUTE - 64)) | (1 << (OParser.EXPECTING - 64)) | (1 << (OParser.EXTENDS - 64)) | (1 << (OParser.FETCH - 64)) | (1 << (OParser.FILTERED - 64)) | (1 << (OParser.FINALLY - 64)) | (1 << (OParser.FLUSH - 64)) | (1 << (OParser.FOR - 64)) | (1 << (OParser.FROM - 64)) | (1 << (OParser.GETTER - 64)) | (1 << (OParser.HAS - 64)) | (1 << (OParser.IF - 64)) | (1 << (OParser.IN - 64)) | (1 << (OParser.INDEX - 64)) | (1 << (OParser.IS - 64)) | (1 << (OParser.MATCHING - 64)) | (1 << (OParser.METHOD - 64)) | (1 << (OParser.METHODS - 64)) | (1 << (OParser.MODULO - 64)) | (1 << (OParser.MUTABLE - 64)) | (1 << (OParser.NATIVE - 64)) | (1 << (OParser.NONE - 64)) | (1 << (OParser.NOT - 64)) | (1 << (OParser.NOTHING - 64)) | (1 << (OParser.NULL - 64)) | (1 << (OParser.ON - 64)) | (1 << (OParser.ONE - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (OParser.OPERATOR - 128)) | (1 << (OParser.OR - 128)) | (1 << (OParser.ORDER - 128)) | (1 << (OParser.OTHERWISE - 128)) | (1 << (OParser.PASS - 128)) | (1 << (OParser.RAISE - 128)) | (1 << (OParser.READ - 128)) | (1 << (OParser.RECEIVING - 128)) | (1 << (OParser.RESOURCE - 128)) | (1 << (OParser.RETURN - 128)) | (1 << (OParser.RETURNING - 128)) | (1 << (OParser.ROWS - 128)) | (1 << (OParser.SELF - 128)) | (1 << (OParser.SETTER - 128)) | (1 << (OParser.SINGLETON - 128)) | (1 << (OParser.SORTED - 128)) | (1 << (OParser.STORABLE - 128)) | (1 << (OParser.STORE - 128)) | (1 << (OParser.SUPER - 128)) | (1 << (OParser.SWITCH - 128)) | (1 << (OParser.TEST - 128)) | (1 << (OParser.THIS - 128)) | (1 << (OParser.THROW - 128)) | (1 << (OParser.TO - 128)) | (1 << (OParser.TRY - 128)) | (1 << (OParser.VERIFYING - 128)) | (1 << (OParser.WIDGET - 128)) | (1 << (OParser.WITH - 128)) | (1 << (OParser.WHEN - 128)) | (1 << (OParser.WHERE - 128)) | (1 << (OParser.WHILE - 128)) | (1 << (OParser.WRITE - 128)) | (1 << (OParser.SYMBOL_IDENTIFIER - 128)) | (1 << (OParser.TYPE_IDENTIFIER - 128)) | (1 << (OParser.VARIABLE_IDENTIFIER - 128)))) != 0)):
                    break

            self.state = 2760
            self.match(OParser.RCURL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Css_fieldContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # Css_identifierContext
            self.value = None # Css_valueContext

        def COLON(self):
            return self.getToken(OParser.COLON, 0)

        def SEMI(self):
            return self.getToken(OParser.SEMI, 0)

        def css_identifier(self):
            return self.getTypedRuleContext(OParser.Css_identifierContext,0)


        def css_value(self):
            return self.getTypedRuleContext(OParser.Css_valueContext,0)


        def getRuleIndex(self):
            return OParser.RULE_css_field

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCss_field" ):
                listener.enterCss_field(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCss_field" ):
                listener.exitCss_field(self)




    def css_field(self):

        localctx = OParser.Css_fieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 496, self.RULE_css_field)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2762
            localctx.name = self.css_identifier(0)
            self.state = 2763
            self.match(OParser.COLON)
            self.state = 2764
            localctx.value = self.css_value()
            self.state = 2765
            self.match(OParser.SEMI)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Css_identifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier_or_keyword(self):
            return self.getTypedRuleContext(OParser.Identifier_or_keywordContext,0)


        def MINUS(self):
            return self.getToken(OParser.MINUS, 0)

        def nospace_identifier_or_keyword(self):
            return self.getTypedRuleContext(OParser.Nospace_identifier_or_keywordContext,0)


        def css_identifier(self):
            return self.getTypedRuleContext(OParser.Css_identifierContext,0)


        def nospace_hyphen_identifier_or_keyword(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(OParser.Nospace_hyphen_identifier_or_keywordContext)
            else:
                return self.getTypedRuleContext(OParser.Nospace_hyphen_identifier_or_keywordContext,i)


        def getRuleIndex(self):
            return OParser.RULE_css_identifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCss_identifier" ):
                listener.enterCss_identifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCss_identifier" ):
                listener.exitCss_identifier(self)



    def css_identifier(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = OParser.Css_identifierContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 498
        self.enterRecursionRule(localctx, 498, self.RULE_css_identifier, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2771
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [OParser.JAVA, OParser.CSHARP, OParser.PYTHON2, OParser.PYTHON3, OParser.JAVASCRIPT, OParser.SWIFT, OParser.BOOLEAN, OParser.CHARACTER, OParser.TEXT, OParser.INTEGER, OParser.DECIMAL, OParser.DATE, OParser.TIME, OParser.DATETIME, OParser.PERIOD, OParser.VERSION, OParser.CODE, OParser.DOCUMENT, OParser.BLOB, OParser.IMAGE, OParser.UUID, OParser.ITERATOR, OParser.CURSOR, OParser.HTML, OParser.ABSTRACT, OParser.ALL, OParser.ALWAYS, OParser.AND, OParser.ANY, OParser.AS, OParser.ASC, OParser.ATTR, OParser.ATTRIBUTE, OParser.ATTRIBUTES, OParser.BINDINGS, OParser.BREAK, OParser.BY, OParser.CASE, OParser.CATCH, OParser.CATEGORY, OParser.CLASS, OParser.CLOSE, OParser.CONTAINS, OParser.DEF, OParser.DEFAULT, OParser.DEFINE, OParser.DELETE, OParser.DESC, OParser.DO, OParser.DOING, OParser.EACH, OParser.ELSE, OParser.ENUM, OParser.ENUMERATED, OParser.EXCEPT, OParser.EXECUTE, OParser.EXPECTING, OParser.EXTENDS, OParser.FETCH, OParser.FILTERED, OParser.FINALLY, OParser.FLUSH, OParser.FOR, OParser.FROM, OParser.GETTER, OParser.HAS, OParser.IF, OParser.IN, OParser.INDEX, OParser.IS, OParser.MATCHING, OParser.METHOD, OParser.METHODS, OParser.MODULO, OParser.MUTABLE, OParser.NATIVE, OParser.NONE, OParser.NOT, OParser.NOTHING, OParser.NULL, OParser.ON, OParser.ONE, OParser.OPERATOR, OParser.OR, OParser.ORDER, OParser.OTHERWISE, OParser.PASS, OParser.RAISE, OParser.READ, OParser.RECEIVING, OParser.RESOURCE, OParser.RETURN, OParser.RETURNING, OParser.ROWS, OParser.SELF, OParser.SETTER, OParser.SINGLETON, OParser.SORTED, OParser.STORABLE, OParser.STORE, OParser.SUPER, OParser.SWITCH, OParser.TEST, OParser.THIS, OParser.THROW, OParser.TO, OParser.TRY, OParser.VERIFYING, OParser.WIDGET, OParser.WITH, OParser.WHEN, OParser.WHERE, OParser.WHILE, OParser.WRITE, OParser.SYMBOL_IDENTIFIER, OParser.TYPE_IDENTIFIER, OParser.VARIABLE_IDENTIFIER]:
                self.state = 2768
                self.identifier_or_keyword()
                pass
            elif token in [OParser.MINUS]:
                self.state = 2769
                self.match(OParser.MINUS)
                self.state = 2770
                self.nospace_identifier_or_keyword()
                pass
            else:
                raise NoViableAltException(self)

            self._ctx.stop = self._input.LT(-1)
            self.state = 2781
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,255,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = OParser.Css_identifierContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_css_identifier)
                    self.state = 2773
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 2775 
                    self._errHandler.sync(self)
                    _alt = 1
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt == 1:
                            self.state = 2774
                            self.nospace_hyphen_identifier_or_keyword()

                        else:
                            raise NoViableAltException(self)
                        self.state = 2777 
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,254,self._ctx)
             
                self.state = 2783
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,255,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class Css_valueContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return OParser.RULE_css_value

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class CssTextContext(Css_valueContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Css_valueContext
            super().__init__(parser)
            self.text = None # Css_textContext
            self.copyFrom(ctx)

        def css_text(self):
            return self.getTypedRuleContext(OParser.Css_textContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCssText" ):
                listener.enterCssText(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCssText" ):
                listener.exitCssText(self)


    class CssValueContext(Css_valueContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Css_valueContext
            super().__init__(parser)
            self.exp = None # ExpressionContext
            self.copyFrom(ctx)

        def LCURL(self):
            return self.getToken(OParser.LCURL, 0)
        def RCURL(self):
            return self.getToken(OParser.RCURL, 0)
        def expression(self):
            return self.getTypedRuleContext(OParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCssValue" ):
                listener.enterCssValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCssValue" ):
                listener.exitCssValue(self)



    def css_value(self):

        localctx = OParser.Css_valueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 500, self.RULE_css_value)
        try:
            self.state = 2789
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [OParser.LCURL]:
                localctx = OParser.CssValueContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2784
                self.match(OParser.LCURL)
                self.state = 2785
                localctx.exp = self.expression(0)
                self.state = 2786
                self.match(OParser.RCURL)
                pass
            elif token in [OParser.SPACE, OParser.LF, OParser.COMMENT, OParser.JAVA, OParser.CSHARP, OParser.PYTHON2, OParser.PYTHON3, OParser.JAVASCRIPT, OParser.SWIFT, OParser.COMMA, OParser.RANGE, OParser.DOT, OParser.LPAR, OParser.RPAR, OParser.LBRAK, OParser.RBRAK, OParser.QMARK, OParser.XMARK, OParser.AMP, OParser.AMP2, OParser.PIPE, OParser.PIPE2, OParser.PLUS, OParser.MINUS, OParser.STAR, OParser.SLASH, OParser.BSLASH, OParser.PERCENT, OParser.GT, OParser.GTE, OParser.LT, OParser.LTE, OParser.LTGT, OParser.LTCOLONGT, OParser.EQ, OParser.XEQ, OParser.EQ2, OParser.TEQ, OParser.TILDE, OParser.LARROW, OParser.RARROW, OParser.EGT, OParser.BOOLEAN, OParser.CSS, OParser.CHARACTER, OParser.TEXT, OParser.INTEGER, OParser.DECIMAL, OParser.DATE, OParser.TIME, OParser.DATETIME, OParser.PERIOD, OParser.VERSION, OParser.METHOD_COLON, OParser.CODE, OParser.DOCUMENT, OParser.BLOB, OParser.IMAGE, OParser.UUID, OParser.ITERATOR, OParser.CURSOR, OParser.HTML, OParser.TYPE, OParser.ABSTRACT, OParser.ALL, OParser.ALWAYS, OParser.AND, OParser.ANY, OParser.AS, OParser.ASC, OParser.ATTR, OParser.ATTRIBUTE, OParser.ATTRIBUTES, OParser.BINDINGS, OParser.BREAK, OParser.BY, OParser.CASE, OParser.CATCH, OParser.CATEGORY, OParser.CLASS, OParser.CLOSE, OParser.CONTAINS, OParser.DEF, OParser.DEFAULT, OParser.DEFINE, OParser.DELETE, OParser.DESC, OParser.DO, OParser.DOING, OParser.EACH, OParser.ELSE, OParser.ENUM, OParser.ENUMERATED, OParser.EXCEPT, OParser.EXECUTE, OParser.EXPECTING, OParser.EXTENDS, OParser.FETCH, OParser.FILTERED, OParser.FINALLY, OParser.FLUSH, OParser.FOR, OParser.FROM, OParser.GETTER, OParser.HAS, OParser.IF, OParser.IN, OParser.INDEX, OParser.INVOKE_COLON, OParser.IS, OParser.MATCHING, OParser.METHOD, OParser.METHODS, OParser.MODULO, OParser.MUTABLE, OParser.NATIVE, OParser.NONE, OParser.NOT, OParser.NOTHING, OParser.NULL, OParser.ON, OParser.ONE, OParser.OPERATOR, OParser.OR, OParser.ORDER, OParser.OTHERWISE, OParser.PASS, OParser.RAISE, OParser.READ, OParser.RECEIVING, OParser.RESOURCE, OParser.RETURN, OParser.RETURNING, OParser.ROWS, OParser.SELF, OParser.SETTER, OParser.SINGLETON, OParser.SORTED, OParser.STORABLE, OParser.STORE, OParser.SUPER, OParser.SWITCH, OParser.TEST, OParser.THEN, OParser.THIS, OParser.THROW, OParser.TO, OParser.TRY, OParser.VERIFYING, OParser.WIDGET, OParser.WITH, OParser.WHEN, OParser.WHERE, OParser.WHILE, OParser.WRITE, OParser.BOOLEAN_LITERAL, OParser.CHAR_LITERAL, OParser.MIN_INTEGER, OParser.MAX_INTEGER, OParser.SYMBOL_IDENTIFIER, OParser.TYPE_IDENTIFIER, OParser.VARIABLE_IDENTIFIER, OParser.NATIVE_IDENTIFIER, OParser.DOLLAR_IDENTIFIER, OParser.ARONDBASE_IDENTIFIER, OParser.TEXT_LITERAL, OParser.UUID_LITERAL, OParser.INTEGER_LITERAL, OParser.HEXA_LITERAL, OParser.DECIMAL_LITERAL, OParser.DATETIME_LITERAL, OParser.TIME_LITERAL, OParser.DATE_LITERAL, OParser.PERIOD_LITERAL, OParser.VERSION_LITERAL]:
                localctx = OParser.CssTextContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2788
                localctx.text = self.css_text()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Css_textContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LCURL(self, i:int=None):
            if i is None:
                return self.getTokens(OParser.LCURL)
            else:
                return self.getToken(OParser.LCURL, i)

        def RCURL(self, i:int=None):
            if i is None:
                return self.getTokens(OParser.RCURL)
            else:
                return self.getToken(OParser.RCURL, i)

        def COLON(self, i:int=None):
            if i is None:
                return self.getTokens(OParser.COLON)
            else:
                return self.getToken(OParser.COLON, i)

        def SEMI(self, i:int=None):
            if i is None:
                return self.getTokens(OParser.SEMI)
            else:
                return self.getToken(OParser.SEMI, i)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(OParser.WS)
            else:
                return self.getToken(OParser.WS, i)

        def getRuleIndex(self):
            return OParser.RULE_css_text

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCss_text" ):
                listener.enterCss_text(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCss_text" ):
                listener.exitCss_text(self)




    def css_text(self):

        localctx = OParser.Css_textContext(self, self._ctx, self.state)
        self.enterRule(localctx, 502, self.RULE_css_text)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2792 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 2791
                _la = self._input.LA(1)
                if _la <= 0 or (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << OParser.WS) | (1 << OParser.COLON) | (1 << OParser.SEMI) | (1 << OParser.LCURL) | (1 << OParser.RCURL))) != 0):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2794 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << OParser.SPACE) | (1 << OParser.LF) | (1 << OParser.COMMENT) | (1 << OParser.JAVA) | (1 << OParser.CSHARP) | (1 << OParser.PYTHON2) | (1 << OParser.PYTHON3) | (1 << OParser.JAVASCRIPT) | (1 << OParser.SWIFT) | (1 << OParser.COMMA) | (1 << OParser.RANGE) | (1 << OParser.DOT) | (1 << OParser.LPAR) | (1 << OParser.RPAR) | (1 << OParser.LBRAK) | (1 << OParser.RBRAK) | (1 << OParser.QMARK) | (1 << OParser.XMARK) | (1 << OParser.AMP) | (1 << OParser.AMP2) | (1 << OParser.PIPE) | (1 << OParser.PIPE2) | (1 << OParser.PLUS) | (1 << OParser.MINUS) | (1 << OParser.STAR) | (1 << OParser.SLASH) | (1 << OParser.BSLASH) | (1 << OParser.PERCENT) | (1 << OParser.GT) | (1 << OParser.GTE) | (1 << OParser.LT) | (1 << OParser.LTE) | (1 << OParser.LTGT) | (1 << OParser.LTCOLONGT) | (1 << OParser.EQ) | (1 << OParser.XEQ) | (1 << OParser.EQ2) | (1 << OParser.TEQ) | (1 << OParser.TILDE) | (1 << OParser.LARROW) | (1 << OParser.RARROW) | (1 << OParser.EGT) | (1 << OParser.BOOLEAN) | (1 << OParser.CSS) | (1 << OParser.CHARACTER) | (1 << OParser.TEXT) | (1 << OParser.INTEGER) | (1 << OParser.DECIMAL) | (1 << OParser.DATE) | (1 << OParser.TIME) | (1 << OParser.DATETIME) | (1 << OParser.PERIOD) | (1 << OParser.VERSION) | (1 << OParser.METHOD_COLON) | (1 << OParser.CODE) | (1 << OParser.DOCUMENT) | (1 << OParser.BLOB) | (1 << OParser.IMAGE))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (OParser.UUID - 64)) | (1 << (OParser.ITERATOR - 64)) | (1 << (OParser.CURSOR - 64)) | (1 << (OParser.HTML - 64)) | (1 << (OParser.TYPE - 64)) | (1 << (OParser.ABSTRACT - 64)) | (1 << (OParser.ALL - 64)) | (1 << (OParser.ALWAYS - 64)) | (1 << (OParser.AND - 64)) | (1 << (OParser.ANY - 64)) | (1 << (OParser.AS - 64)) | (1 << (OParser.ASC - 64)) | (1 << (OParser.ATTR - 64)) | (1 << (OParser.ATTRIBUTE - 64)) | (1 << (OParser.ATTRIBUTES - 64)) | (1 << (OParser.BINDINGS - 64)) | (1 << (OParser.BREAK - 64)) | (1 << (OParser.BY - 64)) | (1 << (OParser.CASE - 64)) | (1 << (OParser.CATCH - 64)) | (1 << (OParser.CATEGORY - 64)) | (1 << (OParser.CLASS - 64)) | (1 << (OParser.CLOSE - 64)) | (1 << (OParser.CONTAINS - 64)) | (1 << (OParser.DEF - 64)) | (1 << (OParser.DEFAULT - 64)) | (1 << (OParser.DEFINE - 64)) | (1 << (OParser.DELETE - 64)) | (1 << (OParser.DESC - 64)) | (1 << (OParser.DO - 64)) | (1 << (OParser.DOING - 64)) | (1 << (OParser.EACH - 64)) | (1 << (OParser.ELSE - 64)) | (1 << (OParser.ENUM - 64)) | (1 << (OParser.ENUMERATED - 64)) | (1 << (OParser.EXCEPT - 64)) | (1 << (OParser.EXECUTE - 64)) | (1 << (OParser.EXPECTING - 64)) | (1 << (OParser.EXTENDS - 64)) | (1 << (OParser.FETCH - 64)) | (1 << (OParser.FILTERED - 64)) | (1 << (OParser.FINALLY - 64)) | (1 << (OParser.FLUSH - 64)) | (1 << (OParser.FOR - 64)) | (1 << (OParser.FROM - 64)) | (1 << (OParser.GETTER - 64)) | (1 << (OParser.HAS - 64)) | (1 << (OParser.IF - 64)) | (1 << (OParser.IN - 64)) | (1 << (OParser.INDEX - 64)) | (1 << (OParser.INVOKE_COLON - 64)) | (1 << (OParser.IS - 64)) | (1 << (OParser.MATCHING - 64)) | (1 << (OParser.METHOD - 64)) | (1 << (OParser.METHODS - 64)) | (1 << (OParser.MODULO - 64)) | (1 << (OParser.MUTABLE - 64)) | (1 << (OParser.NATIVE - 64)) | (1 << (OParser.NONE - 64)) | (1 << (OParser.NOT - 64)) | (1 << (OParser.NOTHING - 64)) | (1 << (OParser.NULL - 64)) | (1 << (OParser.ON - 64)) | (1 << (OParser.ONE - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (OParser.OPERATOR - 128)) | (1 << (OParser.OR - 128)) | (1 << (OParser.ORDER - 128)) | (1 << (OParser.OTHERWISE - 128)) | (1 << (OParser.PASS - 128)) | (1 << (OParser.RAISE - 128)) | (1 << (OParser.READ - 128)) | (1 << (OParser.RECEIVING - 128)) | (1 << (OParser.RESOURCE - 128)) | (1 << (OParser.RETURN - 128)) | (1 << (OParser.RETURNING - 128)) | (1 << (OParser.ROWS - 128)) | (1 << (OParser.SELF - 128)) | (1 << (OParser.SETTER - 128)) | (1 << (OParser.SINGLETON - 128)) | (1 << (OParser.SORTED - 128)) | (1 << (OParser.STORABLE - 128)) | (1 << (OParser.STORE - 128)) | (1 << (OParser.SUPER - 128)) | (1 << (OParser.SWITCH - 128)) | (1 << (OParser.TEST - 128)) | (1 << (OParser.THEN - 128)) | (1 << (OParser.THIS - 128)) | (1 << (OParser.THROW - 128)) | (1 << (OParser.TO - 128)) | (1 << (OParser.TRY - 128)) | (1 << (OParser.VERIFYING - 128)) | (1 << (OParser.WIDGET - 128)) | (1 << (OParser.WITH - 128)) | (1 << (OParser.WHEN - 128)) | (1 << (OParser.WHERE - 128)) | (1 << (OParser.WHILE - 128)) | (1 << (OParser.WRITE - 128)) | (1 << (OParser.BOOLEAN_LITERAL - 128)) | (1 << (OParser.CHAR_LITERAL - 128)) | (1 << (OParser.MIN_INTEGER - 128)) | (1 << (OParser.MAX_INTEGER - 128)) | (1 << (OParser.SYMBOL_IDENTIFIER - 128)) | (1 << (OParser.TYPE_IDENTIFIER - 128)) | (1 << (OParser.VARIABLE_IDENTIFIER - 128)) | (1 << (OParser.NATIVE_IDENTIFIER - 128)) | (1 << (OParser.DOLLAR_IDENTIFIER - 128)) | (1 << (OParser.ARONDBASE_IDENTIFIER - 128)) | (1 << (OParser.TEXT_LITERAL - 128)) | (1 << (OParser.UUID_LITERAL - 128)) | (1 << (OParser.INTEGER_LITERAL - 128)) | (1 << (OParser.HEXA_LITERAL - 128)) | (1 << (OParser.DECIMAL_LITERAL - 128)) | (1 << (OParser.DATETIME_LITERAL - 128)) | (1 << (OParser.TIME_LITERAL - 128)) | (1 << (OParser.DATE_LITERAL - 128)) | (1 << (OParser.PERIOD_LITERAL - 128)) | (1 << (OParser.VERSION_LITERAL - 128)))) != 0)):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[9] = self.derived_list_sempred
        self._predicates[19] = self.native_category_binding_list_sempred
        self._predicates[38] = self.else_if_statement_list_sempred
        self._predicates[47] = self.expression_sempred
        self._predicates[48] = self.an_expression_sempred
        self._predicates[51] = self.instance_expression_sempred
        self._predicates[52] = self.mutable_instance_expression_sempred
        self._predicates[63] = self.copy_from_sempred
        self._predicates[64] = self.argument_assignment_list_sempred
        self._predicates[91] = self.typedef_sempred
        self._predicates[102] = self.nospace_hyphen_identifier_or_keyword_sempred
        self._predicates[103] = self.nospace_identifier_or_keyword_sempred
        self._predicates[116] = self.any_type_sempred
        self._predicates[155] = self.assignable_instance_sempred
        self._predicates[156] = self.is_expression_sempred
        self._predicates[167] = self.new_token_sempred
        self._predicates[168] = self.key_token_sempred
        self._predicates[169] = self.module_token_sempred
        self._predicates[170] = self.value_token_sempred
        self._predicates[171] = self.symbols_token_sempred
        self._predicates[180] = self.javascript_expression_sempred
        self._predicates[186] = self.javascript_arguments_sempred
        self._predicates[193] = self.python_expression_sempred
        self._predicates[199] = self.python_ordinal_argument_list_sempred
        self._predicates[200] = self.python_named_argument_list_sempred
        self._predicates[202] = self.python_identifier_expression_sempred
        self._predicates[206] = self.java_expression_sempred
        self._predicates[212] = self.java_arguments_sempred
        self._predicates[215] = self.java_identifier_expression_sempred
        self._predicates[216] = self.java_class_identifier_expression_sempred
        self._predicates[220] = self.csharp_expression_sempred
        self._predicates[226] = self.csharp_arguments_sempred
        self._predicates[229] = self.csharp_identifier_expression_sempred
        self._predicates[249] = self.css_identifier_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def derived_list_sempred(self, localctx:Derived_listContext, predIndex:int):
            if predIndex == 0:
                return self.precpred(self._ctx, 1)
         

    def native_category_binding_list_sempred(self, localctx:Native_category_binding_listContext, predIndex:int):
            if predIndex == 1:
                return self.precpred(self._ctx, 1)
         

    def else_if_statement_list_sempred(self, localctx:Else_if_statement_listContext, predIndex:int):
            if predIndex == 2:
                return self.precpred(self._ctx, 1)
         

    def expression_sempred(self, localctx:ExpressionContext, predIndex:int):
            if predIndex == 3:
                return self.precpred(self._ctx, 34)
         

            if predIndex == 4:
                return self.precpred(self._ctx, 33)
         

            if predIndex == 5:
                return self.precpred(self._ctx, 32)
         

            if predIndex == 6:
                return self.precpred(self._ctx, 31)
         

            if predIndex == 7:
                return self.precpred(self._ctx, 30)
         

            if predIndex == 8:
                return self.precpred(self._ctx, 28)
         

            if predIndex == 9:
                return self.precpred(self._ctx, 27)
         

            if predIndex == 10:
                return self.precpred(self._ctx, 26)
         

            if predIndex == 11:
                return self.precpred(self._ctx, 25)
         

            if predIndex == 12:
                return self.precpred(self._ctx, 22)
         

            if predIndex == 13:
                return self.precpred(self._ctx, 21)
         

            if predIndex == 14:
                return self.precpred(self._ctx, 20)
         

            if predIndex == 15:
                return self.precpred(self._ctx, 19)
         

            if predIndex == 16:
                return self.precpred(self._ctx, 18)
         

            if predIndex == 17:
                return self.precpred(self._ctx, 17)
         

            if predIndex == 18:
                return self.precpred(self._ctx, 16)
         

            if predIndex == 19:
                return self.precpred(self._ctx, 15)
         

            if predIndex == 20:
                return self.precpred(self._ctx, 14)
         

            if predIndex == 21:
                return self.precpred(self._ctx, 13)
         

            if predIndex == 22:
                return self.precpred(self._ctx, 12)
         

            if predIndex == 23:
                return self.precpred(self._ctx, 11)
         

            if predIndex == 24:
                return self.precpred(self._ctx, 10)
         

            if predIndex == 25:
                return self.precpred(self._ctx, 9)
         

            if predIndex == 26:
                return self.precpred(self._ctx, 8)
         

            if predIndex == 27:
                return self.precpred(self._ctx, 7)
         

            if predIndex == 28:
                return self.precpred(self._ctx, 6)
         

            if predIndex == 29:
                return self.precpred(self._ctx, 5)
         

            if predIndex == 30:
                return self.precpred(self._ctx, 24)
         

            if predIndex == 31:
                return self.precpred(self._ctx, 23)
         

            if predIndex == 32:
                return self.precpred(self._ctx, 1)
         

    def an_expression_sempred(self, localctx:An_expressionContext, predIndex:int):
            if predIndex == 33:
                return self.willBeAOrAn()
         

    def instance_expression_sempred(self, localctx:Instance_expressionContext, predIndex:int):
            if predIndex == 34:
                return self.precpred(self._ctx, 1)
         

    def mutable_instance_expression_sempred(self, localctx:Mutable_instance_expressionContext, predIndex:int):
            if predIndex == 35:
                return self.precpred(self._ctx, 1)
         

    def copy_from_sempred(self, localctx:Copy_fromContext, predIndex:int):
            if predIndex == 36:
                return self.willNotBe(self.equalToken())
         

    def argument_assignment_list_sempred(self, localctx:Argument_assignment_listContext, predIndex:int):
            if predIndex == 37:
                return self.willNotBe(self.equalToken())
         

            if predIndex == 38:
                return self.precpred(self._ctx, 1)
         

    def typedef_sempred(self, localctx:TypedefContext, predIndex:int):
            if predIndex == 39:
                return self.precpred(self._ctx, 5)
         

            if predIndex == 40:
                return self.precpred(self._ctx, 4)
         

            if predIndex == 41:
                return self.precpred(self._ctx, 3)
         

    def nospace_hyphen_identifier_or_keyword_sempred(self, localctx:Nospace_hyphen_identifier_or_keywordContext, predIndex:int):
            if predIndex == 42:
                return self.wasNotWhiteSpace()
         

    def nospace_identifier_or_keyword_sempred(self, localctx:Nospace_identifier_or_keywordContext, predIndex:int):
            if predIndex == 43:
                return self.wasNotWhiteSpace()
         

    def any_type_sempred(self, localctx:Any_typeContext, predIndex:int):
            if predIndex == 44:
                return self.precpred(self._ctx, 2)
         

            if predIndex == 45:
                return self.precpred(self._ctx, 1)
         

    def assignable_instance_sempred(self, localctx:Assignable_instanceContext, predIndex:int):
            if predIndex == 46:
                return self.precpred(self._ctx, 1)
         

    def is_expression_sempred(self, localctx:Is_expressionContext, predIndex:int):
            if predIndex == 47:
                return self.willBeAOrAn()
         

    def new_token_sempred(self, localctx:New_tokenContext, predIndex:int):
            if predIndex == 48:
                return self.isText(localctx.i1,"new")
         

    def key_token_sempred(self, localctx:Key_tokenContext, predIndex:int):
            if predIndex == 49:
                return self.isText(localctx.i1,"key")
         

    def module_token_sempred(self, localctx:Module_tokenContext, predIndex:int):
            if predIndex == 50:
                return self.isText(localctx.i1,"module")
         

    def value_token_sempred(self, localctx:Value_tokenContext, predIndex:int):
            if predIndex == 51:
                return self.isText(localctx.i1,"value")
         

    def symbols_token_sempred(self, localctx:Symbols_tokenContext, predIndex:int):
            if predIndex == 52:
                return self.isText(localctx.i1,"symbols")
         

    def javascript_expression_sempred(self, localctx:Javascript_expressionContext, predIndex:int):
            if predIndex == 53:
                return self.precpred(self._ctx, 1)
         

    def javascript_arguments_sempred(self, localctx:Javascript_argumentsContext, predIndex:int):
            if predIndex == 54:
                return self.precpred(self._ctx, 1)
         

    def python_expression_sempred(self, localctx:Python_expressionContext, predIndex:int):
            if predIndex == 55:
                return self.precpred(self._ctx, 1)
         

    def python_ordinal_argument_list_sempred(self, localctx:Python_ordinal_argument_listContext, predIndex:int):
            if predIndex == 56:
                return self.precpred(self._ctx, 1)
         

    def python_named_argument_list_sempred(self, localctx:Python_named_argument_listContext, predIndex:int):
            if predIndex == 57:
                return self.precpred(self._ctx, 1)
         

    def python_identifier_expression_sempred(self, localctx:Python_identifier_expressionContext, predIndex:int):
            if predIndex == 58:
                return self.precpred(self._ctx, 1)
         

    def java_expression_sempred(self, localctx:Java_expressionContext, predIndex:int):
            if predIndex == 59:
                return self.precpred(self._ctx, 1)
         

    def java_arguments_sempred(self, localctx:Java_argumentsContext, predIndex:int):
            if predIndex == 60:
                return self.precpred(self._ctx, 1)
         

    def java_identifier_expression_sempred(self, localctx:Java_identifier_expressionContext, predIndex:int):
            if predIndex == 61:
                return self.precpred(self._ctx, 1)
         

    def java_class_identifier_expression_sempred(self, localctx:Java_class_identifier_expressionContext, predIndex:int):
            if predIndex == 62:
                return self.precpred(self._ctx, 1)
         

    def csharp_expression_sempred(self, localctx:Csharp_expressionContext, predIndex:int):
            if predIndex == 63:
                return self.precpred(self._ctx, 1)
         

    def csharp_arguments_sempred(self, localctx:Csharp_argumentsContext, predIndex:int):
            if predIndex == 64:
                return self.precpred(self._ctx, 1)
         

    def csharp_identifier_expression_sempred(self, localctx:Csharp_identifier_expressionContext, predIndex:int):
            if predIndex == 65:
                return self.precpred(self._ctx, 1)
         

    def css_identifier_sempred(self, localctx:Css_identifierContext, predIndex:int):
            if predIndex == 66:
                return self.precpred(self._ctx, 1)
         




