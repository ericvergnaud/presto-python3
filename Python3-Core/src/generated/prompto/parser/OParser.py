# Generated from java-escape by ANTLR 4.5
# encoding: utf-8
from antlr4 import *
from io import StringIO
package = globals().get("__package__", None)
ischild = len(package)>0 if package is not None else False
if ischild:
    from .OParserListener import OParserListener
else:
    from OParserListener import OParserListener
from .AbstractParser import AbstractParser

def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u0430\ud6d1\u8206\uad2d\u4417\uaef1\u8d80\uaadd\3\u00a7")
        buf.write("\u08b0\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7")
        buf.write("\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r\4\16")
        buf.write("\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23\t\23")
        buf.write("\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31")
        buf.write("\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36")
        buf.write("\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t")
        buf.write("&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t,\4-\t-\4.\t.\4")
        buf.write("/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64\t\64")
        buf.write("\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\49\t9\4:\t:\4;\t")
        buf.write(";\4<\t<\4=\t=\4>\t>\4?\t?\4@\t@\4A\tA\4B\tB\4C\tC\4D\t")
        buf.write("D\4E\tE\4F\tF\4G\tG\4H\tH\4I\tI\4J\tJ\4K\tK\4L\tL\4M\t")
        buf.write("M\4N\tN\4O\tO\4P\tP\4Q\tQ\4R\tR\4S\tS\4T\tT\4U\tU\4V\t")
        buf.write("V\4W\tW\4X\tX\4Y\tY\4Z\tZ\4[\t[\4\\\t\\\4]\t]\4^\t^\4")
        buf.write("_\t_\4`\t`\4a\ta\4b\tb\4c\tc\4d\td\4e\te\4f\tf\4g\tg\4")
        buf.write("h\th\4i\ti\4j\tj\4k\tk\4l\tl\4m\tm\4n\tn\4o\to\4p\tp\4")
        buf.write("q\tq\4r\tr\4s\ts\4t\tt\4u\tu\4v\tv\4w\tw\4x\tx\4y\ty\4")
        buf.write("z\tz\4{\t{\4|\t|\4}\t}\4~\t~\4\177\t\177\4\u0080\t\u0080")
        buf.write("\4\u0081\t\u0081\4\u0082\t\u0082\4\u0083\t\u0083\4\u0084")
        buf.write("\t\u0084\4\u0085\t\u0085\4\u0086\t\u0086\4\u0087\t\u0087")
        buf.write("\4\u0088\t\u0088\4\u0089\t\u0089\4\u008a\t\u008a\4\u008b")
        buf.write("\t\u008b\4\u008c\t\u008c\4\u008d\t\u008d\4\u008e\t\u008e")
        buf.write("\4\u008f\t\u008f\4\u0090\t\u0090\4\u0091\t\u0091\4\u0092")
        buf.write("\t\u0092\4\u0093\t\u0093\4\u0094\t\u0094\4\u0095\t\u0095")
        buf.write("\4\u0096\t\u0096\4\u0097\t\u0097\4\u0098\t\u0098\4\u0099")
        buf.write("\t\u0099\4\u009a\t\u009a\4\u009b\t\u009b\4\u009c\t\u009c")
        buf.write("\4\u009d\t\u009d\4\u009e\t\u009e\4\u009f\t\u009f\4\u00a0")
        buf.write("\t\u00a0\4\u00a1\t\u00a1\4\u00a2\t\u00a2\4\u00a3\t\u00a3")
        buf.write("\4\u00a4\t\u00a4\4\u00a5\t\u00a5\4\u00a6\t\u00a6\4\u00a7")
        buf.write("\t\u00a7\4\u00a8\t\u00a8\4\u00a9\t\u00a9\4\u00aa\t\u00aa")
        buf.write("\4\u00ab\t\u00ab\4\u00ac\t\u00ac\4\u00ad\t\u00ad\4\u00ae")
        buf.write("\t\u00ae\4\u00af\t\u00af\4\u00b0\t\u00b0\4\u00b1\t\u00b1")
        buf.write("\4\u00b2\t\u00b2\4\u00b3\t\u00b3\4\u00b4\t\u00b4\4\u00b5")
        buf.write("\t\u00b5\4\u00b6\t\u00b6\4\u00b7\t\u00b7\4\u00b8\t\u00b8")
        buf.write("\4\u00b9\t\u00b9\4\u00ba\t\u00ba\4\u00bb\t\u00bb\4\u00bc")
        buf.write("\t\u00bc\4\u00bd\t\u00bd\4\u00be\t\u00be\4\u00bf\t\u00bf")
        buf.write("\4\u00c0\t\u00c0\4\u00c1\t\u00c1\4\u00c2\t\u00c2\4\u00c3")
        buf.write("\t\u00c3\4\u00c4\t\u00c4\4\u00c5\t\u00c5\4\u00c6\t\u00c6")
        buf.write("\4\u00c7\t\u00c7\4\u00c8\t\u00c8\4\u00c9\t\u00c9\4\u00ca")
        buf.write("\t\u00ca\4\u00cb\t\u00cb\4\u00cc\t\u00cc\3\2\3\2\3\2\3")
        buf.write("\2\3\2\3\2\3\2\5\2\u01a0\n\2\3\2\3\2\5\2\u01a4\n\2\3\2")
        buf.write("\3\2\3\2\3\2\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\4\3")
        buf.write("\4\3\4\3\4\3\4\3\4\3\5\3\5\3\5\3\5\3\5\3\6\5\6\u01bf\n")
        buf.write("\6\3\6\3\6\3\6\3\6\3\6\5\6\u01c6\n\6\3\6\3\6\3\6\3\6\3")
        buf.write("\6\3\6\5\6\u01ce\n\6\5\6\u01d0\n\6\3\6\3\6\3\7\5\7\u01d5")
        buf.write("\n\7\3\7\3\7\3\7\3\7\3\7\3\7\5\7\u01dd\n\7\3\7\3\7\5\7")
        buf.write("\u01e1\n\7\3\7\3\7\3\b\3\b\3\b\3\b\3\b\3\b\5\b\u01eb\n")
        buf.write("\b\3\b\3\b\3\t\3\t\3\t\3\t\3\t\3\t\7\t\u01f5\n\t\f\t\16")
        buf.write("\t\u01f8\13\t\3\n\3\n\3\n\5\n\u01fd\n\n\3\n\5\n\u0200")
        buf.write("\n\n\3\13\5\13\u0203\n\13\3\13\3\13\3\13\3\13\3\13\3\13")
        buf.write("\3\13\5\13\u020c\n\13\3\13\3\13\3\f\3\f\3\f\3\f\5\f\u0214")
        buf.write("\n\f\3\f\3\f\3\r\5\r\u0219\n\r\3\r\3\r\3\r\3\r\5\r\u021f")
        buf.write("\n\r\3\r\3\r\3\16\3\16\3\16\3\16\5\16\u0227\n\16\3\16")
        buf.write("\3\16\3\17\5\17\u022c\n\17\3\17\3\17\3\17\3\17\5\17\u0232")
        buf.write("\n\17\3\17\3\17\3\20\3\20\3\20\3\20\3\20\3\20\3\20\5\20")
        buf.write("\u023d\n\20\3\20\3\20\3\20\5\20\u0242\n\20\3\20\3\20\3")
        buf.write("\21\5\21\u0247\n\21\3\21\3\21\3\21\3\21\3\21\3\21\3\21")
        buf.write("\5\21\u0250\n\21\3\21\3\21\3\21\5\21\u0255\n\21\3\21\3")
        buf.write("\21\3\22\3\22\3\22\3\22\3\22\3\22\3\23\3\23\3\23\3\23")
        buf.write("\3\23\3\23\3\23\3\23\7\23\u0267\n\23\f\23\16\23\u026a")
        buf.write("\13\23\3\24\3\24\5\24\u026e\n\24\3\24\3\24\3\24\3\24\5")
        buf.write("\24\u0274\n\24\3\24\3\24\3\24\3\25\5\25\u027a\n\25\3\25")
        buf.write("\3\25\3\25\3\25\5\25\u0280\n\25\3\25\3\25\3\25\5\25\u0285")
        buf.write("\n\25\3\25\3\25\3\26\5\26\u028a\n\26\3\26\5\26\u028d\n")
        buf.write("\26\3\26\3\26\3\26\3\26\5\26\u0293\n\26\3\26\3\26\3\26")
        buf.write("\3\26\3\26\3\27\3\27\3\27\3\27\3\27\3\27\3\27\3\27\3\27")
        buf.write("\3\27\3\27\3\27\3\27\3\27\3\27\3\27\5\27\u02aa\n\27\3")
        buf.write("\30\3\30\3\30\3\31\3\31\3\31\3\31\3\31\5\31\u02b4\n\31")
        buf.write("\3\31\3\31\3\31\5\31\u02b9\n\31\3\32\3\32\3\32\3\32\3")
        buf.write("\32\5\32\u02c0\n\32\5\32\u02c2\n\32\3\33\3\33\3\33\3\33")
        buf.write("\3\33\3\33\3\33\3\33\3\33\3\33\3\33\3\33\3\33\3\33\3\33")
        buf.write("\3\33\3\33\3\33\3\33\5\33\u02d7\n\33\3\34\3\34\3\34\3")
        buf.write("\34\3\34\3\34\3\34\3\34\3\34\3\34\3\34\3\34\3\34\3\34")
        buf.write("\3\34\3\34\3\34\3\34\3\34\3\34\3\34\3\34\3\34\5\34\u02f0")
        buf.write("\n\34\3\35\3\35\3\35\3\35\3\35\3\35\3\36\3\36\3\36\3\36")
        buf.write("\3\36\3\36\3\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37")
        buf.write("\5\37\u0307\n\37\5\37\u0309\n\37\3\37\3\37\3 \3 \3 \3")
        buf.write(" \5 \u0311\n \3 \3 \3 \3 \3 \5 \u0318\n \5 \u031a\n \3")
        buf.write("!\3!\3!\3!\3!\3!\5!\u0322\n!\3!\3!\3!\3!\3!\3\"\3\"\3")
        buf.write("\"\5\"\u032c\n\"\3\"\3\"\3\"\3\"\3\"\3\"\3\"\3#\3#\3#")
        buf.write("\3#\3#\3#\3$\3$\3$\3$\3$\3$\5$\u0341\n$\3$\3$\5$\u0345")
        buf.write("\n$\3%\3%\3%\3%\3%\3%\3%\3%\3%\3%\3%\3%\3%\3%\3%\3%\7")
        buf.write("%\u0357\n%\f%\16%\u035a\13%\3&\3&\3&\3&\3\'\3\'\3\'\3")
        buf.write("\'\3\'\3\'\5\'\u0366\n\'\3\'\3\'\5\'\u036a\n\'\3\'\3\'")
        buf.write("\3\'\3\'\3\'\3\'\5\'\u0372\n\'\3\'\5\'\u0375\n\'\3\'\3")
        buf.write("\'\3\'\5\'\u037a\n\'\3\'\5\'\u037d\n\'\3(\3(\3(\3(\3(")
        buf.write("\3(\5(\u0385\n(\3(\3(\3(\3(\3(\3(\3(\3(\3(\5(\u0390\n")
        buf.write("(\3(\3(\5(\u0394\n(\3)\3)\5)\u0398\n)\3)\3)\3*\3*\3*\5")
        buf.write("*\u039f\n*\3*\3*\3+\3+\3+\3+\3+\5+\u03a8\n+\3,\3,\3,\3")
        buf.write(",\3,\7,\u03af\n,\f,\16,\u03b2\13,\3-\3-\3-\3-\3-\3-\5")
        buf.write("-\u03ba\n-\3.\3.\3.\3.\3.\3.\3.\3.\3.\3.\3.\3.\3.\3.\3")
        buf.write(".\3.\3.\3.\3.\3.\3.\3.\3.\5.\u03d3\n.\3.\3.\3.\3.\3.\3")
        buf.write(".\3.\3.\3.\3.\3.\3.\3.\3.\3.\3.\3.\3.\3.\3.\3.\3.\3.\3")
        buf.write(".\3.\3.\3.\3.\3.\3.\3.\3.\3.\3.\3.\3.\3.\3.\3.\3.\3.\3")
        buf.write(".\3.\3.\3.\3.\3.\3.\3.\3.\3.\3.\3.\3.\3.\3.\3.\3.\3.\3")
        buf.write(".\3.\3.\3.\3.\3.\3.\3.\3.\3.\3.\3.\3.\3.\3.\3.\3.\3.\3")
        buf.write(".\3.\3.\3.\3.\3.\3.\3.\3.\3.\3.\3.\3.\3.\3.\3.\3.\3.\3")
        buf.write(".\3.\3.\3.\3.\3.\3.\3.\3.\3.\3.\3.\7.\u0440\n.\f.\16.")
        buf.write("\u0443\13.\3/\3/\3/\3/\3\60\3\60\3\61\3\61\3\61\3\61\3")
        buf.write("\61\7\61\u0450\n\61\f\61\16\61\u0453\13\61\3\62\3\62\3")
        buf.write("\62\3\62\3\62\3\62\3\62\3\62\5\62\u045d\n\62\3\63\3\63")
        buf.write("\3\63\3\63\3\63\3\64\3\64\3\64\5\64\u0467\n\64\3\64\3")
        buf.write("\64\3\65\3\65\3\65\3\65\3\66\3\66\3\66\3\66\3\66\3\66")
        buf.write("\3\66\3\66\3\67\3\67\3\67\3\67\3\67\3\67\3\67\3\67\3\67")
        buf.write("\38\38\38\38\58\u0484\n8\38\38\38\38\38\38\38\38\38\3")
        buf.write("8\58\u0490\n8\38\38\38\58\u0495\n8\38\38\38\38\38\38\3")
        buf.write("8\38\58\u049f\n8\38\38\38\38\38\58\u04a6\n8\38\38\38\3")
        buf.write("8\38\38\58\u04ae\n8\58\u04b0\n8\39\39\39\39\39\39\39\3")
        buf.write("9\59\u04ba\n9\39\39\3:\3:\3:\3:\3:\3:\3:\3:\3:\3:\5:\u04c8")
        buf.write("\n:\3;\3;\3;\5;\u04cd\n;\3;\3;\3<\3<\3<\3<\3<\5<\u04d6")
        buf.write("\n<\3<\3<\3<\7<\u04db\n<\f<\16<\u04de\13<\3=\3=\3=\3=")
        buf.write("\3>\3>\3>\3>\3>\3?\3?\3?\3?\3?\3?\5?\u04ef\n?\3@\3@\3")
        buf.write("@\3@\3@\3A\3A\3B\5B\u04f9\nB\3B\3B\3B\3C\3C\3C\3C\7C\u0502")
        buf.write("\nC\fC\16C\u0505\13C\3D\3D\3D\7D\u050a\nD\fD\16D\u050d")
        buf.write("\13D\3D\3D\3D\3D\3D\5D\u0514\nD\3E\3E\3F\3F\5F\u051a\n")
        buf.write("F\3G\3G\3G\3G\7G\u0520\nG\fG\16G\u0523\13G\3H\3H\3H\3")
        buf.write("H\7H\u0529\nH\fH\16H\u052c\13H\3I\3I\3I\7I\u0531\nI\f")
        buf.write("I\16I\u0534\13I\3J\3J\3J\3J\3J\3J\3J\3J\3J\3J\5J\u0540")
        buf.write("\nJ\3K\5K\u0543\nK\3K\3K\5K\u0547\nK\3K\3K\3L\5L\u054c")
        buf.write("\nL\3L\3L\5L\u0550\nL\3L\3L\3M\3M\3M\7M\u0557\nM\fM\16")
        buf.write("M\u055a\13M\3N\3N\3N\3N\3N\3N\3O\3O\3O\3O\3O\3O\3O\3O")
        buf.write("\3O\3O\3O\3O\5O\u056e\nO\3O\3O\3O\3O\3O\3O\3O\3O\7O\u0578")
        buf.write("\nO\fO\16O\u057b\13O\3P\3P\5P\u057f\nP\3Q\3Q\3Q\3Q\3Q")
        buf.write("\3Q\3Q\3Q\3Q\3Q\3Q\3Q\3Q\3Q\5Q\u058f\nQ\3R\3R\3S\5S\u0594")
        buf.write("\nS\3S\3S\3T\3T\3U\3U\3U\5U\u059d\nU\3V\3V\3V\7V\u05a2")
        buf.write("\nV\fV\16V\u05a5\13V\3W\3W\5W\u05a9\nW\3X\3X\3X\5X\u05ae")
        buf.write("\nX\3Y\3Y\3Z\3Z\3[\3[\3\\\3\\\3]\3]\3]\7]\u05bb\n]\f]")
        buf.write("\16]\u05be\13]\3^\3^\5^\u05c2\n^\3^\5^\u05c5\n^\3_\3_")
        buf.write("\5_\u05c9\n_\3`\3`\3`\5`\u05ce\n`\3a\3a\3a\3b\3b\5b\u05d5")
        buf.write("\nb\3c\3c\3c\3c\3c\3c\3c\3c\3c\7c\u05e0\nc\fc\16c\u05e3")
        buf.write("\13c\3d\3d\3d\3d\7d\u05e9\nd\fd\16d\u05ec\13d\3e\3e\3")
        buf.write("e\3e\3e\5e\u05f3\ne\3f\3f\3f\3f\7f\u05f9\nf\ff\16f\u05fc")
        buf.write("\13f\3g\3g\3g\5g\u0601\ng\3h\3h\3h\3h\3h\3h\3h\3h\3h\3")
        buf.write("h\5h\u060d\nh\3i\3i\5i\u0611\ni\3j\3j\3j\3j\3j\3j\7j\u0619")
        buf.write("\nj\fj\16j\u061c\13j\3k\3k\5k\u0620\nk\3l\3l\3l\3l\5l")
        buf.write("\u0626\nl\3l\3l\3l\7l\u062b\nl\fl\16l\u062e\13l\3l\3l")
        buf.write("\5l\u0632\nl\3m\3m\3m\7m\u0637\nm\fm\16m\u063a\13m\3n")
        buf.write("\3n\3n\7n\u063f\nn\fn\16n\u0642\13n\3o\3o\3o\3o\5o\u0648")
        buf.write("\no\3p\3p\3q\3q\3q\3q\7q\u0650\nq\fq\16q\u0653\13q\3r")
        buf.write("\3r\3r\3r\3r\3r\3r\3r\3r\3r\5r\u065f\nr\3s\3s\5s\u0663")
        buf.write("\ns\3s\5s\u0666\ns\3t\3t\5t\u066a\nt\3t\5t\u066d\nt\3")
        buf.write("u\3u\3u\3u\7u\u0673\nu\fu\16u\u0676\13u\3v\3v\3v\3v\7")
        buf.write("v\u067c\nv\fv\16v\u067f\13v\3w\3w\3w\3w\7w\u0685\nw\f")
        buf.write("w\16w\u0688\13w\3x\3x\3x\3x\7x\u068e\nx\fx\16x\u0691\13")
        buf.write("x\3y\3y\3y\3y\3y\3y\3y\3y\3y\3y\3y\3y\3y\3y\5y\u06a1\n")
        buf.write("y\3z\3z\3z\3z\3z\3z\3z\3z\3z\3z\3z\3z\3z\5z\u06b0\nz\3")
        buf.write("{\3{\3{\7{\u06b5\n{\f{\16{\u06b8\13{\3|\3|\3|\3|\5|\u06be")
        buf.write("\n|\3}\3}\3~\3~\3~\3~\3\177\3\177\5\177\u06c8\n\177\3")
        buf.write("\u0080\3\u0080\3\u0080\3\u0080\3\u0080\5\u0080\u06cf\n")
        buf.write("\u0080\3\u0081\5\u0081\u06d2\n\u0081\3\u0081\3\u0081\5")
        buf.write("\u0081\u06d6\n\u0081\3\u0081\3\u0081\3\u0082\5\u0082\u06db")
        buf.write("\n\u0082\3\u0082\3\u0082\5\u0082\u06df\n\u0082\3\u0082")
        buf.write("\3\u0082\3\u0083\3\u0083\3\u0083\3\u0083\3\u0083\7\u0083")
        buf.write("\u06e8\n\u0083\f\u0083\16\u0083\u06eb\13\u0083\5\u0083")
        buf.write("\u06ed\n\u0083\3\u0084\3\u0084\3\u0084\7\u0084\u06f2\n")
        buf.write("\u0084\f\u0084\16\u0084\u06f5\13\u0084\3\u0085\3\u0085")
        buf.write("\3\u0085\3\u0085\3\u0086\3\u0086\3\u0086\3\u0086\3\u0086")
        buf.write("\3\u0086\3\u0086\3\u0086\3\u0086\5\u0086\u0704\n\u0086")
        buf.write("\3\u0087\3\u0087\3\u0087\3\u0087\3\u0088\3\u0088\3\u0088")
        buf.write("\3\u0088\3\u0088\7\u0088\u070f\n\u0088\f\u0088\16\u0088")
        buf.write("\u0712\13\u0088\3\u0089\3\u0089\3\u0089\3\u0089\5\u0089")
        buf.write("\u0718\n\u0089\3\u008a\3\u008a\3\u008a\7\u008a\u071d\n")
        buf.write("\u008a\f\u008a\16\u008a\u0720\13\u008a\3\u008b\3\u008b")
        buf.write("\3\u008b\7\u008b\u0725\n\u008b\f\u008b\16\u008b\u0728")
        buf.write("\13\u008b\3\u008b\5\u008b\u072b\n\u008b\3\u008c\3\u008c")
        buf.write("\3\u008c\3\u008c\3\u008c\3\u008c\5\u008c\u0733\n\u008c")
        buf.write("\3\u008d\3\u008d\3\u008d\3\u008e\3\u008e\3\u008e\3\u008f")
        buf.write("\3\u008f\3\u008f\3\u0090\3\u0090\3\u0090\3\u0091\3\u0091")
        buf.write("\3\u0091\3\u0092\3\u0092\3\u0093\3\u0093\3\u0094\3\u0094")
        buf.write("\3\u0095\3\u0095\3\u0096\3\u0096\3\u0097\3\u0097\3\u0098")
        buf.write("\3\u0098\3\u0099\3\u0099\3\u0099\3\u0099\3\u0099\3\u0099")
        buf.write("\3\u0099\5\u0099\u0759\n\u0099\3\u009a\3\u009a\3\u009a")
        buf.write("\3\u009a\3\u009a\7\u009a\u0760\n\u009a\f\u009a\16\u009a")
        buf.write("\u0763\13\u009a\3\u009b\3\u009b\3\u009b\3\u009b\3\u009b")
        buf.write("\3\u009b\3\u009b\5\u009b\u076c\n\u009b\3\u009c\3\u009c")
        buf.write("\3\u009d\3\u009d\3\u009d\3\u009e\3\u009e\3\u009e\3\u009e")
        buf.write("\3\u009e\5\u009e\u0778\n\u009e\3\u009f\3\u009f\3\u009f")
        buf.write("\5\u009f\u077d\n\u009f\3\u009f\3\u009f\3\u00a0\3\u00a0")
        buf.write("\3\u00a0\3\u00a0\3\u00a0\3\u00a0\7\u00a0\u0787\n\u00a0")
        buf.write("\f\u00a0\16\u00a0\u078a\13\u00a0\3\u00a1\3\u00a1\3\u00a1")
        buf.write("\3\u00a1\3\u00a2\3\u00a2\3\u00a2\3\u00a2\3\u00a3\3\u00a3")
        buf.write("\3\u00a4\3\u00a4\3\u00a4\3\u00a4\3\u00a4\5\u00a4\u079b")
        buf.write("\n\u00a4\3\u00a5\3\u00a5\3\u00a6\3\u00a6\3\u00a6\5\u00a6")
        buf.write("\u07a2\n\u00a6\3\u00a7\3\u00a7\3\u00a7\3\u00a7\3\u00a7")
        buf.write("\7\u00a7\u07a9\n\u00a7\f\u00a7\16\u00a7\u07ac\13\u00a7")
        buf.write("\3\u00a8\3\u00a8\3\u00a8\3\u00a8\5\u00a8\u07b2\n\u00a8")
        buf.write("\3\u00a9\3\u00a9\3\u00a9\3\u00a9\3\u00a9\3\u00a9\5\u00a9")
        buf.write("\u07ba\n\u00a9\3\u00aa\3\u00aa\3\u00aa\5\u00aa\u07bf\n")
        buf.write("\u00aa\3\u00aa\3\u00aa\3\u00ab\3\u00ab\3\u00ab\3\u00ab")
        buf.write("\3\u00ab\3\u00ab\5\u00ab\u07c9\n\u00ab\3\u00ac\3\u00ac")
        buf.write("\3\u00ac\3\u00ac\3\u00ac\3\u00ac\7\u00ac\u07d1\n\u00ac")
        buf.write("\f\u00ac\16\u00ac\u07d4\13\u00ac\3\u00ad\3\u00ad\3\u00ad")
        buf.write("\3\u00ad\3\u00ad\3\u00ad\3\u00ad\3\u00ad\3\u00ad\3\u00ad")
        buf.write("\3\u00ad\7\u00ad\u07e1\n\u00ad\f\u00ad\16\u00ad\u07e4")
        buf.write("\13\u00ad\3\u00ae\3\u00ae\3\u00ae\3\u00ae\3\u00af\3\u00af")
        buf.write("\3\u00af\5\u00af\u07ed\n\u00af\3\u00af\3\u00af\3\u00af")
        buf.write("\7\u00af\u07f2\n\u00af\f\u00af\16\u00af\u07f5\13\u00af")
        buf.write("\3\u00b0\3\u00b0\3\u00b0\3\u00b0\3\u00b0\5\u00b0\u07fc")
        buf.write("\n\u00b0\3\u00b1\3\u00b1\3\u00b2\3\u00b2\3\u00b2\3\u00b2")
        buf.write("\3\u00b2\3\u00b2\3\u00b2\5\u00b2\u0807\n\u00b2\3\u00b3")
        buf.write("\3\u00b3\3\u00b3\3\u00b3\3\u00b3\7\u00b3\u080e\n\u00b3")
        buf.write("\f\u00b3\16\u00b3\u0811\13\u00b3\3\u00b4\3\u00b4\3\u00b4")
        buf.write("\3\u00b4\3\u00b4\5\u00b4\u0818\n\u00b4\3\u00b5\3\u00b5")
        buf.write("\3\u00b6\3\u00b6\3\u00b6\3\u00b7\3\u00b7\3\u00b7\5\u00b7")
        buf.write("\u0822\n\u00b7\3\u00b8\3\u00b8\3\u00b8\5\u00b8\u0827\n")
        buf.write("\u00b8\3\u00b8\3\u00b8\3\u00b9\3\u00b9\3\u00b9\3\u00b9")
        buf.write("\3\u00b9\3\u00b9\7\u00b9\u0831\n\u00b9\f\u00b9\16\u00b9")
        buf.write("\u0834\13\u00b9\3\u00ba\3\u00ba\3\u00ba\3\u00ba\3\u00bb")
        buf.write("\3\u00bb\3\u00bb\3\u00bb\3\u00bc\3\u00bc\3\u00bc\3\u00bc")
        buf.write("\3\u00bc\3\u00bc\7\u00bc\u0844\n\u00bc\f\u00bc\16\u00bc")
        buf.write("\u0847\13\u00bc\3\u00bd\3\u00bd\3\u00bd\3\u00bd\3\u00bd")
        buf.write("\7\u00bd\u084e\n\u00bd\f\u00bd\16\u00bd\u0851\13\u00bd")
        buf.write("\3\u00be\3\u00be\3\u00be\3\u00be\3\u00be\5\u00be\u0858")
        buf.write("\n\u00be\3\u00bf\3\u00bf\3\u00c0\3\u00c0\3\u00c0\3\u00c0")
        buf.write("\3\u00c0\3\u00c0\3\u00c0\5\u00c0\u0863\n\u00c0\3\u00c1")
        buf.write("\3\u00c1\3\u00c1\3\u00c1\3\u00c1\7\u00c1\u086a\n\u00c1")
        buf.write("\f\u00c1\16\u00c1\u086d\13\u00c1\3\u00c2\3\u00c2\3\u00c2")
        buf.write("\3\u00c2\3\u00c2\5\u00c2\u0874\n\u00c2\3\u00c3\3\u00c3")
        buf.write("\3\u00c4\3\u00c4\3\u00c4\3\u00c5\3\u00c5\3\u00c5\5\u00c5")
        buf.write("\u087e\n\u00c5\3\u00c6\3\u00c6\3\u00c6\5\u00c6\u0883\n")
        buf.write("\u00c6\3\u00c6\3\u00c6\3\u00c7\3\u00c7\3\u00c7\3\u00c7")
        buf.write("\3\u00c7\3\u00c7\7\u00c7\u088d\n\u00c7\f\u00c7\16\u00c7")
        buf.write("\u0890\13\u00c7\3\u00c8\3\u00c8\3\u00c8\3\u00c8\3\u00c9")
        buf.write("\3\u00c9\3\u00c9\3\u00c9\3\u00ca\3\u00ca\3\u00ca\5\u00ca")
        buf.write("\u089d\n\u00ca\3\u00ca\3\u00ca\3\u00ca\7\u00ca\u08a2\n")
        buf.write("\u00ca\f\u00ca\16\u00ca\u08a5\13\u00ca\3\u00cb\3\u00cb")
        buf.write("\3\u00cb\3\u00cb\3\u00cb\5\u00cb\u08ac\n\u00cb\3\u00cc")
        buf.write("\3\u00cc\3\u00cc\2\31\20$HVZ`v\u009c\u00c4\u010e\u0132")
        buf.write("\u013e\u014c\u0156\u0158\u015c\u0164\u0170\u0176\u0178")
        buf.write("\u0180\u018c\u0192\u00cd\2\4\6\b\n\f\16\20\22\24\26\30")
        buf.write("\32\34\36 \"$&(*,.\60\62\64\668:<>@BDFHJLNPRTVXZ\\^`b")
        buf.write("dfhjlnprtvxz|~\u0080\u0082\u0084\u0086\u0088\u008a\u008c")
        buf.write("\u008e\u0090\u0092\u0094\u0096\u0098\u009a\u009c\u009e")
        buf.write("\u00a0\u00a2\u00a4\u00a6\u00a8\u00aa\u00ac\u00ae\u00b0")
        buf.write("\u00b2\u00b4\u00b6\u00b8\u00ba\u00bc\u00be\u00c0\u00c2")
        buf.write("\u00c4\u00c6\u00c8\u00ca\u00cc\u00ce\u00d0\u00d2\u00d4")
        buf.write("\u00d6\u00d8\u00da\u00dc\u00de\u00e0\u00e2\u00e4\u00e6")
        buf.write("\u00e8\u00ea\u00ec\u00ee\u00f0\u00f2\u00f4\u00f6\u00f8")
        buf.write("\u00fa\u00fc\u00fe\u0100\u0102\u0104\u0106\u0108\u010a")
        buf.write("\u010c\u010e\u0110\u0112\u0114\u0116\u0118\u011a\u011c")
        buf.write("\u011e\u0120\u0122\u0124\u0126\u0128\u012a\u012c\u012e")
        buf.write("\u0130\u0132\u0134\u0136\u0138\u013a\u013c\u013e\u0140")
        buf.write("\u0142\u0144\u0146\u0148\u014a\u014c\u014e\u0150\u0152")
        buf.write("\u0154\u0156\u0158\u015a\u015c\u015e\u0160\u0162\u0164")
        buf.write("\u0166\u0168\u016a\u016c\u016e\u0170\u0172\u0174\u0176")
        buf.write("\u0178\u017a\u017c\u017e\u0180\u0182\u0184\u0186\u0188")
        buf.write("\u018a\u018c\u018e\u0190\u0192\u0194\u0196\2\13\3\2\36")
        buf.write("\37\4\2\u0089\u0089\u009d\u009d\4\2\u0085\u0085\u008d")
        buf.write("\u008d\4\2GGWW\4\2##oo\b\2\608\177\177\u008c\u008c\u0096")
        buf.write("\u0096\u009b\u009d\u009f\u009f\b\2\608\177\177\u0085\u0085")
        buf.write("\u008c\u008d\u0096\u0096\u009b\u009d\7\2\608\177\177\u008c")
        buf.write("\u008c\u0096\u0096\u009b\u009f\7\2\608\177\177\u008c\u008c")
        buf.write("\u0096\u0096\u009b\u009d\u0933\2\u0198\3\2\2\2\4\u01a9")
        buf.write("\3\2\2\2\6\u01b2\3\2\2\2\b\u01b8\3\2\2\2\n\u01be\3\2\2")
        buf.write("\2\f\u01d4\3\2\2\2\16\u01e4\3\2\2\2\20\u01ee\3\2\2\2\22")
        buf.write("\u01ff\3\2\2\2\24\u0202\3\2\2\2\26\u020f\3\2\2\2\30\u0218")
        buf.write("\3\2\2\2\32\u0222\3\2\2\2\34\u022b\3\2\2\2\36\u0235\3")
        buf.write("\2\2\2 \u0246\3\2\2\2\"\u0258\3\2\2\2$\u025e\3\2\2\2&")
        buf.write("\u026b\3\2\2\2(\u0279\3\2\2\2*\u0289\3\2\2\2,\u0299\3")
        buf.write("\2\2\2.\u02ab\3\2\2\2\60\u02ae\3\2\2\2\62\u02c1\3\2\2")
        buf.write("\2\64\u02d6\3\2\2\2\66\u02ef\3\2\2\28\u02f1\3\2\2\2:\u02f7")
        buf.write("\3\2\2\2<\u02fd\3\2\2\2>\u0319\3\2\2\2@\u031b\3\2\2\2")
        buf.write("B\u0328\3\2\2\2D\u0334\3\2\2\2F\u033a\3\2\2\2H\u0346\3")
        buf.write("\2\2\2J\u035b\3\2\2\2L\u035f\3\2\2\2N\u0393\3\2\2\2P\u0395")
        buf.write("\3\2\2\2R\u039b\3\2\2\2T\u03a7\3\2\2\2V\u03a9\3\2\2\2")
        buf.write("X\u03b9\3\2\2\2Z\u03d2\3\2\2\2\\\u0444\3\2\2\2^\u0448")
        buf.write("\3\2\2\2`\u044a\3\2\2\2b\u045c\3\2\2\2d\u045e\3\2\2\2")
        buf.write("f\u0463\3\2\2\2h\u046a\3\2\2\2j\u046e\3\2\2\2l\u0476\3")
        buf.write("\2\2\2n\u04af\3\2\2\2p\u04b1\3\2\2\2r\u04c7\3\2\2\2t\u04c9")
        buf.write("\3\2\2\2v\u04d5\3\2\2\2x\u04df\3\2\2\2z\u04e3\3\2\2\2")
        buf.write("|\u04ee\3\2\2\2~\u04f0\3\2\2\2\u0080\u04f5\3\2\2\2\u0082")
        buf.write("\u04f8\3\2\2\2\u0084\u04fd\3\2\2\2\u0086\u050b\3\2\2\2")
        buf.write("\u0088\u0515\3\2\2\2\u008a\u0519\3\2\2\2\u008c\u051b\3")
        buf.write("\2\2\2\u008e\u0524\3\2\2\2\u0090\u052d\3\2\2\2\u0092\u053f")
        buf.write("\3\2\2\2\u0094\u0542\3\2\2\2\u0096\u054b\3\2\2\2\u0098")
        buf.write("\u0553\3\2\2\2\u009a\u055b\3\2\2\2\u009c\u056d\3\2\2\2")
        buf.write("\u009e\u057e\3\2\2\2\u00a0\u058e\3\2\2\2\u00a2\u0590\3")
        buf.write("\2\2\2\u00a4\u0593\3\2\2\2\u00a6\u0597\3\2\2\2\u00a8\u059c")
        buf.write("\3\2\2\2\u00aa\u059e\3\2\2\2\u00ac\u05a8\3\2\2\2\u00ae")
        buf.write("\u05ad\3\2\2\2\u00b0\u05af\3\2\2\2\u00b2\u05b1\3\2\2\2")
        buf.write("\u00b4\u05b3\3\2\2\2\u00b6\u05b5\3\2\2\2\u00b8\u05b7\3")
        buf.write("\2\2\2\u00ba\u05c4\3\2\2\2\u00bc\u05c8\3\2\2\2\u00be\u05ca")
        buf.write("\3\2\2\2\u00c0\u05cf\3\2\2\2\u00c2\u05d4\3\2\2\2\u00c4")
        buf.write("\u05d6\3\2\2\2\u00c6\u05e4\3\2\2\2\u00c8\u05f2\3\2\2\2")
        buf.write("\u00ca\u05f4\3\2\2\2\u00cc\u0600\3\2\2\2\u00ce\u060c\3")
        buf.write("\2\2\2\u00d0\u060e\3\2\2\2\u00d2\u0612\3\2\2\2\u00d4\u061d")
        buf.write("\3\2\2\2\u00d6\u0621\3\2\2\2\u00d8\u0633\3\2\2\2\u00da")
        buf.write("\u063b\3\2\2\2\u00dc\u0647\3\2\2\2\u00de\u0649\3\2\2\2")
        buf.write("\u00e0\u064b\3\2\2\2\u00e2\u065e\3\2\2\2\u00e4\u0660\3")
        buf.write("\2\2\2\u00e6\u0667\3\2\2\2\u00e8\u066e\3\2\2\2\u00ea\u0677")
        buf.write("\3\2\2\2\u00ec\u0680\3\2\2\2\u00ee\u0689\3\2\2\2\u00f0")
        buf.write("\u06a0\3\2\2\2\u00f2\u06af\3\2\2\2\u00f4\u06b1\3\2\2\2")
        buf.write("\u00f6\u06bd\3\2\2\2\u00f8\u06bf\3\2\2\2\u00fa\u06c1\3")
        buf.write("\2\2\2\u00fc\u06c7\3\2\2\2\u00fe\u06ce\3\2\2\2\u0100\u06d1")
        buf.write("\3\2\2\2\u0102\u06da\3\2\2\2\u0104\u06e2\3\2\2\2\u0106")
        buf.write("\u06ee\3\2\2\2\u0108\u06f6\3\2\2\2\u010a\u0703\3\2\2\2")
        buf.write("\u010c\u0705\3\2\2\2\u010e\u0709\3\2\2\2\u0110\u0717\3")
        buf.write("\2\2\2\u0112\u0719\3\2\2\2\u0114\u0721\3\2\2\2\u0116\u0732")
        buf.write("\3\2\2\2\u0118\u0734\3\2\2\2\u011a\u0737\3\2\2\2\u011c")
        buf.write("\u073a\3\2\2\2\u011e\u073d\3\2\2\2\u0120\u0740\3\2\2\2")
        buf.write("\u0122\u0743\3\2\2\2\u0124\u0745\3\2\2\2\u0126\u0747\3")
        buf.write("\2\2\2\u0128\u0749\3\2\2\2\u012a\u074b\3\2\2\2\u012c\u074d")
        buf.write("\3\2\2\2\u012e\u074f\3\2\2\2\u0130\u0758\3\2\2\2\u0132")
        buf.write("\u075a\3\2\2\2\u0134\u076b\3\2\2\2\u0136\u076d\3\2\2\2")
        buf.write("\u0138\u076f\3\2\2\2\u013a\u0777\3\2\2\2\u013c\u0779\3")
        buf.write("\2\2\2\u013e\u0780\3\2\2\2\u0140\u078b\3\2\2\2\u0142\u078f")
        buf.write("\3\2\2\2\u0144\u0793\3\2\2\2\u0146\u079a\3\2\2\2\u0148")
        buf.write("\u079c\3\2\2\2\u014a\u07a1\3\2\2\2\u014c\u07a3\3\2\2\2")
        buf.write("\u014e\u07b1\3\2\2\2\u0150\u07b9\3\2\2\2\u0152\u07bb\3")
        buf.write("\2\2\2\u0154\u07c8\3\2\2\2\u0156\u07ca\3\2\2\2\u0158\u07d5")
        buf.write("\3\2\2\2\u015a\u07e5\3\2\2\2\u015c\u07ec\3\2\2\2\u015e")
        buf.write("\u07fb\3\2\2\2\u0160\u07fd\3\2\2\2\u0162\u0806\3\2\2\2")
        buf.write("\u0164\u0808\3\2\2\2\u0166\u0817\3\2\2\2\u0168\u0819\3")
        buf.write("\2\2\2\u016a\u081b\3\2\2\2\u016c\u0821\3\2\2\2\u016e\u0823")
        buf.write("\3\2\2\2\u0170\u082a\3\2\2\2\u0172\u0835\3\2\2\2\u0174")
        buf.write("\u0839\3\2\2\2\u0176\u083d\3\2\2\2\u0178\u0848\3\2\2\2")
        buf.write("\u017a\u0857\3\2\2\2\u017c\u0859\3\2\2\2\u017e\u0862\3")
        buf.write("\2\2\2\u0180\u0864\3\2\2\2\u0182\u0873\3\2\2\2\u0184\u0875")
        buf.write("\3\2\2\2\u0186\u0877\3\2\2\2\u0188\u087d\3\2\2\2\u018a")
        buf.write("\u087f\3\2\2\2\u018c\u0886\3\2\2\2\u018e\u0891\3\2\2\2")
        buf.write("\u0190\u0895\3\2\2\2\u0192\u089c\3\2\2\2\u0194\u08ab\3")
        buf.write("\2\2\2\u0196\u08ad\3\2\2\2\u0198\u0199\7]\2\2\u0199\u019a")
        buf.write("\7O\2\2\u019a\u019f\5\u00b4[\2\u019b\u019c\7\22\2\2\u019c")
        buf.write("\u019d\5\u00dan\2\u019d\u019e\7\23\2\2\u019e\u01a0\3\2")
        buf.write("\2\2\u019f\u019b\3\2\2\2\u019f\u01a0\3\2\2\2\u01a0\u01a3")
        buf.write("\3\2\2\2\u01a1\u01a2\7a\2\2\u01a2\u01a4\5\u00b4[\2\u01a3")
        buf.write("\u01a1\3\2\2\2\u01a3\u01a4\3\2\2\2\u01a4\u01a5\3\2\2\2")
        buf.write("\u01a5\u01a6\7\26\2\2\u01a6\u01a7\5\u008eH\2\u01a7\u01a8")
        buf.write("\7\27\2\2\u01a8\3\3\2\2\2\u01a9\u01aa\7]\2\2\u01aa\u01ab")
        buf.write("\5\u00b4[\2\u01ab\u01ac\7\22\2\2\u01ac\u01ad\5\u00a0Q")
        buf.write("\2\u01ad\u01ae\7\23\2\2\u01ae\u01af\7\26\2\2\u01af\u01b0")
        buf.write("\5\u008cG\2\u01b0\u01b1\7\27\2\2\u01b1\5\3\2\2\2\u01b2")
        buf.write("\u01b3\5\u00b6\\\2\u01b3\u01b4\7\22\2\2\u01b4\u01b5\5")
        buf.write("v<\2\u01b5\u01b6\7\23\2\2\u01b6\u01b7\7\16\2\2\u01b7\7")
        buf.write("\3\2\2\2\u01b8\u01b9\5\u00b6\\\2\u01b9\u01ba\7)\2\2\u01ba")
        buf.write("\u01bb\5Z.\2\u01bb\u01bc\7\16\2\2\u01bc\t\3\2\2\2\u01bd")
        buf.write("\u01bf\7\u0089\2\2\u01be\u01bd\3\2\2\2\u01be\u01bf\3\2")
        buf.write("\2\2\u01bf\u01c0\3\2\2\2\u01c0\u01c1\7I\2\2\u01c1\u01c2")
        buf.write("\5\u00b2Z\2\u01c2\u01c3\7\r\2\2\u01c3\u01c5\5\u009cO\2")
        buf.write("\u01c4\u01c6\5\u0092J\2\u01c5\u01c4\3\2\2\2\u01c5\u01c6")
        buf.write("\3\2\2\2\u01c6\u01cf\3\2\2\2\u01c7\u01c8\7\u0092\2\2\u01c8")
        buf.write("\u01cd\7i\2\2\u01c9\u01ca\7\22\2\2\u01ca\u01cb\5\u00d8")
        buf.write("m\2\u01cb\u01cc\7\23\2\2\u01cc\u01ce\3\2\2\2\u01cd\u01c9")
        buf.write("\3\2\2\2\u01cd\u01ce\3\2\2\2\u01ce\u01d0\3\2\2\2\u01cf")
        buf.write("\u01c7\3\2\2\2\u01cf\u01d0\3\2\2\2\u01d0\u01d1\3\2\2\2")
        buf.write("\u01d1\u01d2\7\16\2\2\u01d2\13\3\2\2\2\u01d3\u01d5\7\u0089")
        buf.write("\2\2\u01d4\u01d3\3\2\2\2\u01d4\u01d5\3\2\2\2\u01d5\u01d6")
        buf.write("\3\2\2\2\u01d6\u01d7\7O\2\2\u01d7\u01dc\5\u00b4[\2\u01d8")
        buf.write("\u01d9\7\22\2\2\u01d9\u01da\5\u00dan\2\u01da\u01db\7\23")
        buf.write("\2\2\u01db\u01dd\3\2\2\2\u01dc\u01d8\3\2\2\2\u01dc\u01dd")
        buf.write("\3\2\2\2\u01dd\u01e0\3\2\2\2\u01de\u01df\7a\2\2\u01df")
        buf.write("\u01e1\5\20\t\2\u01e0\u01de\3\2\2\2\u01e0\u01e1\3\2\2")
        buf.write("\2\u01e1\u01e2\3\2\2\2\u01e2\u01e3\5\22\n\2\u01e3\r\3")
        buf.write("\2\2\2\u01e4\u01e5\7\u0087\2\2\u01e5\u01ea\5\u00b4[\2")
        buf.write("\u01e6\u01e7\7\22\2\2\u01e7\u01e8\5\u00dan\2\u01e8\u01e9")
        buf.write("\7\23\2\2\u01e9\u01eb\3\2\2\2\u01ea\u01e6\3\2\2\2\u01ea")
        buf.write("\u01eb\3\2\2\2\u01eb\u01ec\3\2\2\2\u01ec\u01ed\5\22\n")
        buf.write("\2\u01ed\17\3\2\2\2\u01ee\u01ef\b\t\1\2\u01ef\u01f0\5")
        buf.write("\u00b4[\2\u01f0\u01f6\3\2\2\2\u01f1\u01f2\f\3\2\2\u01f2")
        buf.write("\u01f3\7\17\2\2\u01f3\u01f5\5\u00b4[\2\u01f4\u01f1\3\2")
        buf.write("\2\2\u01f5\u01f8\3\2\2\2\u01f6\u01f4\3\2\2\2\u01f6\u01f7")
        buf.write("\3\2\2\2\u01f7\21\3\2\2\2\u01f8\u01f6\3\2\2\2\u01f9\u0200")
        buf.write("\7\16\2\2\u01fa\u01fc\7\26\2\2\u01fb\u01fd\5\u00c6d\2")
        buf.write("\u01fc\u01fb\3\2\2\2\u01fc\u01fd\3\2\2\2\u01fd\u01fe\3")
        buf.write("\2\2\2\u01fe\u0200\7\27\2\2\u01ff\u01f9\3\2\2\2\u01ff")
        buf.write("\u01fa\3\2\2\2\u0200\23\3\2\2\2\u0201\u0203\5\u009cO\2")
        buf.write("\u0202\u0201\3\2\2\2\u0202\u0203\3\2\2\2\u0203\u0204\3")
        buf.write("\2\2\2\u0204\u0205\7y\2\2\u0205\u0206\5\u0116\u008c\2")
        buf.write("\u0206\u0207\7\22\2\2\u0207\u0208\5\u00bc_\2\u0208\u0209")
        buf.write("\7\23\2\2\u0209\u020b\7\26\2\2\u020a\u020c\5\u00e8u\2")
        buf.write("\u020b\u020a\3\2\2\2\u020b\u020c\3\2\2\2\u020c\u020d\3")
        buf.write("\2\2\2\u020d\u020e\7\27\2\2\u020e\25\3\2\2\2\u020f\u0210")
        buf.write("\7\u0086\2\2\u0210\u0211\5\u00b0Y\2\u0211\u0213\7\26\2")
        buf.write("\2\u0212\u0214\5\u00e8u\2\u0213\u0212\3\2\2\2\u0213\u0214")
        buf.write("\3\2\2\2\u0214\u0215\3\2\2\2\u0215\u0216\7\27\2\2\u0216")
        buf.write("\27\3\2\2\2\u0217\u0219\7q\2\2\u0218\u0217\3\2\2\2\u0218")
        buf.write("\u0219\3\2\2\2\u0219\u021a\3\2\2\2\u021a\u021b\7\u0086")
        buf.write("\2\2\u021b\u021c\5\u00b0Y\2\u021c\u021e\7\26\2\2\u021d")
        buf.write("\u021f\5\u00e0q\2\u021e\u021d\3\2\2\2\u021e\u021f\3\2")
        buf.write("\2\2\u021f\u0220\3\2\2\2\u0220\u0221\7\27\2\2\u0221\31")
        buf.write("\3\2\2\2\u0222\u0223\7f\2\2\u0223\u0224\5\u00b0Y\2\u0224")
        buf.write("\u0226\7\26\2\2\u0225\u0227\5\u00e8u\2\u0226\u0225\3\2")
        buf.write("\2\2\u0226\u0227\3\2\2\2\u0227\u0228\3\2\2\2\u0228\u0229")
        buf.write("\7\27\2\2\u0229\33\3\2\2\2\u022a\u022c\7q\2\2\u022b\u022a")
        buf.write("\3\2\2\2\u022b\u022c\3\2\2\2\u022c\u022d\3\2\2\2\u022d")
        buf.write("\u022e\7f\2\2\u022e\u022f\5\u00b0Y\2\u022f\u0231\7\26")
        buf.write("\2\2\u0230\u0232\5\u00e0q\2\u0231\u0230\3\2\2\2\u0231")
        buf.write("\u0232\3\2\2\2\u0232\u0233\3\2\2\2\u0233\u0234\7\27\2")
        buf.write("\2\u0234\35\3\2\2\2\u0235\u0236\7q\2\2\u0236\u0237\7\u0081")
        buf.write("\2\2\u0237\u023c\5\u00b4[\2\u0238\u0239\7\22\2\2\u0239")
        buf.write("\u023a\5\u00dan\2\u023a\u023b\7\23\2\2\u023b\u023d\3\2")
        buf.write("\2\2\u023c\u0238\3\2\2\2\u023c\u023d\3\2\2\2\u023d\u023e")
        buf.write("\3\2\2\2\u023e\u023f\7\26\2\2\u023f\u0241\5\"\22\2\u0240")
        buf.write("\u0242\5\u00caf\2\u0241\u0240\3\2\2\2\u0241\u0242\3\2")
        buf.write("\2\2\u0242\u0243\3\2\2\2\u0243\u0244\7\27\2\2\u0244\37")
        buf.write("\3\2\2\2\u0245\u0247\7\u0089\2\2\u0246\u0245\3\2\2\2\u0246")
        buf.write("\u0247\3\2\2\2\u0247\u0248\3\2\2\2\u0248\u0249\7q\2\2")
        buf.write("\u0249\u024a\7O\2\2\u024a\u024f\5\u00b4[\2\u024b\u024c")
        buf.write("\7\22\2\2\u024c\u024d\5\u00dan\2\u024d\u024e\7\23\2\2")
        buf.write("\u024e\u0250\3\2\2\2\u024f\u024b\3\2\2\2\u024f\u0250\3")
        buf.write("\2\2\2\u0250\u0251\3\2\2\2\u0251\u0252\7\26\2\2\u0252")
        buf.write("\u0254\5\"\22\2\u0253\u0255\5\u00caf\2\u0254\u0253\3\2")
        buf.write("\2\2\u0254\u0255\3\2\2\2\u0255\u0256\3\2\2\2\u0256\u0257")
        buf.write("\7\27\2\2\u0257!\3\2\2\2\u0258\u0259\7O\2\2\u0259\u025a")
        buf.write("\7K\2\2\u025a\u025b\7\26\2\2\u025b\u025c\5$\23\2\u025c")
        buf.write("\u025d\7\27\2\2\u025d#\3\2\2\2\u025e\u025f\b\23\1\2\u025f")
        buf.write("\u0260\5\u00ceh\2\u0260\u0261\7\16\2\2\u0261\u0268\3\2")
        buf.write("\2\2\u0262\u0263\f\3\2\2\u0263\u0264\5\u00ceh\2\u0264")
        buf.write("\u0265\7\16\2\2\u0265\u0267\3\2\2\2\u0266\u0262\3\2\2")
        buf.write("\2\u0267\u026a\3\2\2\2\u0268\u0266\3\2\2\2\u0268\u0269")
        buf.write("\3\2\2\2\u0269%\3\2\2\2\u026a\u0268\3\2\2\2\u026b\u026d")
        buf.write("\7A\2\2\u026c\u026e\5\u009cO\2\u026d\u026c\3\2\2\2\u026d")
        buf.write("\u026e\3\2\2\2\u026e\u026f\3\2\2\2\u026f\u0270\7m\2\2")
        buf.write("\u0270\u0271\5\u00acW\2\u0271\u0273\7\22\2\2\u0272\u0274")
        buf.write("\5\u00b8]\2\u0273\u0272\3\2\2\2\u0273\u0274\3\2\2\2\u0274")
        buf.write("\u0275\3\2\2\2\u0275\u0276\7\23\2\2\u0276\u0277\7\16\2")
        buf.write("\2\u0277\'\3\2\2\2\u0278\u027a\5\u009cO\2\u0279\u0278")
        buf.write("\3\2\2\2\u0279\u027a\3\2\2\2\u027a\u027b\3\2\2\2\u027b")
        buf.write("\u027c\7m\2\2\u027c\u027d\5\u00acW\2\u027d\u027f\7\22")
        buf.write("\2\2\u027e\u0280\5\u00b8]\2\u027f\u027e\3\2\2\2\u027f")
        buf.write("\u0280\3\2\2\2\u0280\u0281\3\2\2\2\u0281\u0282\7\23\2")
        buf.write("\2\u0282\u0284\7\26\2\2\u0283\u0285\5\u00e8u\2\u0284\u0283")
        buf.write("\3\2\2\2\u0284\u0285\3\2\2\2\u0285\u0286\3\2\2\2\u0286")
        buf.write("\u0287\7\27\2\2\u0287)\3\2\2\2\u0288\u028a\5\u00c2b\2")
        buf.write("\u0289\u0288\3\2\2\2\u0289\u028a\3\2\2\2\u028a\u028c\3")
        buf.write("\2\2\2\u028b\u028d\7q\2\2\u028c\u028b\3\2\2\2\u028c\u028d")
        buf.write("\3\2\2\2\u028d\u028e\3\2\2\2\u028e\u028f\7m\2\2\u028f")
        buf.write("\u0290\5\u00acW\2\u0290\u0292\7\22\2\2\u0291\u0293\5\u00b8")
        buf.write("]\2\u0292\u0291\3\2\2\2\u0292\u0293\3\2\2\2\u0293\u0294")
        buf.write("\3\2\2\2\u0294\u0295\7\23\2\2\u0295\u0296\7\26\2\2\u0296")
        buf.write("\u0297\5\u00e0q\2\u0297\u0298\7\27\2\2\u0298+\3\2\2\2")
        buf.write("\u0299\u029a\7\u008c\2\2\u029a\u029b\7m\2\2\u029b\u029c")
        buf.write("\7\u00a0\2\2\u029c\u029d\7\22\2\2\u029d\u029e\7\23\2\2")
        buf.write("\u029e\u029f\7\26\2\2\u029f\u02a0\5\u00e8u\2\u02a0\u02a1")
        buf.write("\7\27\2\2\u02a1\u02a9\7\u0091\2\2\u02a2\u02a3\7\26\2\2")
        buf.write("\u02a3\u02a4\5\u00eav\2\u02a4\u02a5\7\27\2\2\u02a5\u02aa")
        buf.write("\3\2\2\2\u02a6\u02a7\5\u00b6\\\2\u02a7\u02a8\7\16\2\2")
        buf.write("\u02a8\u02aa\3\2\2\2\u02a9\u02a2\3\2\2\2\u02a9\u02a6\3")
        buf.write("\2\2\2\u02aa-\3\2\2\2\u02ab\u02ac\5Z.\2\u02ac\u02ad\7")
        buf.write("\16\2\2\u02ad/\3\2\2\2\u02ae\u02b3\5\u00c2b\2\u02af\u02b0")
        buf.write("\7\22\2\2\u02b0\u02b1\5\u00dan\2\u02b1\u02b2\7\23\2\2")
        buf.write("\u02b2\u02b4\3\2\2\2\u02b3\u02af\3\2\2\2\u02b3\u02b4\3")
        buf.write("\2\2\2\u02b4\u02b5\3\2\2\2\u02b5\u02b8\5\u00b0Y\2\u02b6")
        buf.write("\u02b7\7)\2\2\u02b7\u02b9\5\u00fc\177\2\u02b8\u02b6\3")
        buf.write("\2\2\2\u02b8\u02b9\3\2\2\2\u02b9\61\3\2\2\2\u02ba\u02c2")
        buf.write("\5\64\33\2\u02bb\u02bf\7\26\2\2\u02bc\u02bd\5\u00e8u\2")
        buf.write("\u02bd\u02be\7\27\2\2\u02be\u02c0\3\2\2\2\u02bf\u02bc")
        buf.write("\3\2\2\2\u02bf\u02c0\3\2\2\2\u02c0\u02c2\3\2\2\2\u02c1")
        buf.write("\u02ba\3\2\2\2\u02c1\u02bb\3\2\2\2\u02c2\63\3\2\2\2\u02c3")
        buf.write("\u02c4\5R*\2\u02c4\u02c5\7\16\2\2\u02c5\u02d7\3\2\2\2")
        buf.write("\u02c6\u02d7\5z>\2\u02c7\u02d7\5~@\2\u02c8\u02d7\5\66")
        buf.write("\34\2\u02c9\u02d7\5P)\2\u02ca\u02d7\5F$\2\u02cb\u02d7")
        buf.write("\5<\37\2\u02cc\u02d7\5@!\2\u02cd\u02d7\5D#\2\u02ce\u02d7")
        buf.write("\5B\"\2\u02cf\u02d7\5L\'\2\u02d0\u02d7\5J&\2\u02d1\u02d7")
        buf.write("\5j\66\2\u02d2\u02d7\58\35\2\u02d3\u02d7\5:\36\2\u02d4")
        buf.write("\u02d7\5(\25\2\u02d5\u02d7\5\u00dep\2\u02d6\u02c3\3\2")
        buf.write("\2\2\u02d6\u02c6\3\2\2\2\u02d6\u02c7\3\2\2\2\u02d6\u02c8")
        buf.write("\3\2\2\2\u02d6\u02c9\3\2\2\2\u02d6\u02ca\3\2\2\2\u02d6")
        buf.write("\u02cb\3\2\2\2\u02d6\u02cc\3\2\2\2\u02d6\u02cd\3\2\2\2")
        buf.write("\u02d6\u02ce\3\2\2\2\u02d6\u02cf\3\2\2\2\u02d6\u02d0\3")
        buf.write("\2\2\2\u02d6\u02d1\3\2\2\2\u02d6\u02d2\3\2\2\2\u02d6\u02d3")
        buf.write("\3\2\2\2\u02d6\u02d4\3\2\2\2\u02d6\u02d5\3\2\2\2\u02d7")
        buf.write("\65\3\2\2\2\u02d8\u02d9\7V\2\2\u02d9\u02da\7\22\2\2\u02da")
        buf.write("\u02db\5\u0098M\2\u02db\u02dc\7\23\2\2\u02dc\u02dd\7\16")
        buf.write("\2\2\u02dd\u02f0\3\2\2\2\u02de\u02df\7\u008a\2\2\u02df")
        buf.write("\u02e0\7\22\2\2\u02e0\u02e1\5\u0098M\2\u02e1\u02e2\7\23")
        buf.write("\2\2\u02e2\u02e3\7\16\2\2\u02e3\u02f0\3\2\2\2\u02e4\u02e5")
        buf.write("\7V\2\2\u02e5\u02e6\7\22\2\2\u02e6\u02e7\5\u0098M\2\u02e7")
        buf.write("\u02e8\7\23\2\2\u02e8\u02e9\7D\2\2\u02e9\u02ea\7\u008a")
        buf.write("\2\2\u02ea\u02eb\7\22\2\2\u02eb\u02ec\5\u0098M\2\u02ec")
        buf.write("\u02ed\7\23\2\2\u02ed\u02ee\7\16\2\2\u02ee\u02f0\3\2\2")
        buf.write("\2\u02ef\u02d8\3\2\2\2\u02ef\u02de\3\2\2\2\u02ef\u02e4")
        buf.write("\3\2\2\2\u02f0\67\3\2\2\2\u02f1\u02f2\7\u0092\2\2\u02f2")
        buf.write("\u02f3\7\22\2\2\u02f3\u02f4\5\u010c\u0087\2\u02f4\u02f5")
        buf.write("\7\23\2\2\u02f5\u02f6\5\62\32\2\u02f69\3\2\2\2\u02f7\u02f8")
        buf.write("\7\u0092\2\2\u02f8\u02f9\7\22\2\2\u02f9\u02fa\5\u00b4")
        buf.write("[\2\u02fa\u02fb\7\23\2\2\u02fb\u02fc\5\62\32\2\u02fc;")
        buf.write("\3\2\2\2\u02fd\u02fe\7\u008b\2\2\u02fe\u02ff\7\22\2\2")
        buf.write("\u02ff\u0300\5Z.\2\u0300\u0301\7\23\2\2\u0301\u0302\7")
        buf.write("\26\2\2\u0302\u0308\5\u00ecw\2\u0303\u0304\7T\2\2\u0304")
        buf.write("\u0306\7\r\2\2\u0305\u0307\5\u00e8u\2\u0306\u0305\3\2")
        buf.write("\2\2\u0306\u0307\3\2\2\2\u0307\u0309\3\2\2\2\u0308\u0303")
        buf.write("\3\2\2\2\u0308\u0309\3\2\2\2\u0309\u030a\3\2\2\2\u030a")
        buf.write("\u030b\7\27\2\2\u030b=\3\2\2\2\u030c\u030d\7M\2\2\u030d")
        buf.write("\u030e\5\u00f2z\2\u030e\u0310\7\r\2\2\u030f\u0311\5\u00e8")
        buf.write("u\2\u0310\u030f\3\2\2\2\u0310\u0311\3\2\2\2\u0311\u031a")
        buf.write("\3\2\2\2\u0312\u0313\7M\2\2\u0313\u0314\7h\2\2\u0314\u0315")
        buf.write("\5\u00f0y\2\u0315\u0317\7\r\2\2\u0316\u0318\5\u00e8u\2")
        buf.write("\u0317\u0316\3\2\2\2\u0317\u0318\3\2\2\2\u0318\u031a\3")
        buf.write("\2\2\2\u0319\u030c\3\2\2\2\u0319\u0312\3\2\2\2\u031a?")
        buf.write("\3\2\2\2\u031b\u031c\7d\2\2\u031c\u031d\7Z\2\2\u031d\u031e")
        buf.write("\7\22\2\2\u031e\u0321\5\u00b0Y\2\u031f\u0320\7\17\2\2")
        buf.write("\u0320\u0322\5\u00b0Y\2\u0321\u031f\3\2\2\2\u0321\u0322")
        buf.write("\3\2\2\2\u0322\u0323\3\2\2\2\u0323\u0324\7h\2\2\u0324")
        buf.write("\u0325\5Z.\2\u0325\u0326\7\23\2\2\u0326\u0327\5\62\32")
        buf.write("\2\u0327A\3\2\2\2\u0328\u0329\7X\2\2\u0329\u032b\7\26")
        buf.write("\2\2\u032a\u032c\5\u00e8u\2\u032b\u032a\3\2\2\2\u032b")
        buf.write("\u032c\3\2\2\2\u032c\u032d\3\2\2\2\u032d\u032e\7\27\2")
        buf.write("\2\u032e\u032f\7\u0095\2\2\u032f\u0330\7\22\2\2\u0330")
        buf.write("\u0331\5Z.\2\u0331\u0332\7\23\2\2\u0332\u0333\7\16\2\2")
        buf.write("\u0333C\3\2\2\2\u0334\u0335\7\u0095\2\2\u0335\u0336\7")
        buf.write("\22\2\2\u0336\u0337\5Z.\2\u0337\u0338\7\23\2\2\u0338\u0339")
        buf.write("\5\62\32\2\u0339E\3\2\2\2\u033a\u033b\7g\2\2\u033b\u033c")
        buf.write("\7\22\2\2\u033c\u033d\5Z.\2\u033d\u033e\7\23\2\2\u033e")
        buf.write("\u0340\5\62\32\2\u033f\u0341\5H%\2\u0340\u033f\3\2\2\2")
        buf.write("\u0340\u0341\3\2\2\2\u0341\u0344\3\2\2\2\u0342\u0343\7")
        buf.write("[\2\2\u0343\u0345\5\62\32\2\u0344\u0342\3\2\2\2\u0344")
        buf.write("\u0345\3\2\2\2\u0345G\3\2\2\2\u0346\u0347\b%\1\2\u0347")
        buf.write("\u0348\7[\2\2\u0348\u0349\7g\2\2\u0349\u034a\7\22\2\2")
        buf.write("\u034a\u034b\5Z.\2\u034b\u034c\7\23\2\2\u034c\u034d\5")
        buf.write("\62\32\2\u034d\u0358\3\2\2\2\u034e\u034f\f\3\2\2\u034f")
        buf.write("\u0350\7[\2\2\u0350\u0351\7g\2\2\u0351\u0352\7\22\2\2")
        buf.write("\u0352\u0353\5Z.\2\u0353\u0354\7\23\2\2\u0354\u0355\5")
        buf.write("\62\32\2\u0355\u0357\3\2\2\2\u0356\u034e\3\2\2\2\u0357")
        buf.write("\u035a\3\2\2\2\u0358\u0356\3\2\2\2\u0358\u0359\3\2\2\2")
        buf.write("\u0359I\3\2\2\2\u035a\u0358\3\2\2\2\u035b\u035c\7\u008e")
        buf.write("\2\2\u035c\u035d\5Z.\2\u035d\u035e\7\16\2\2\u035eK\3\2")
        buf.write("\2\2\u035f\u0360\7\u0090\2\2\u0360\u0361\7\22\2\2\u0361")
        buf.write("\u0362\5\u00b0Y\2\u0362\u0363\7\23\2\2\u0363\u0365\7\26")
        buf.write("\2\2\u0364\u0366\5\u00e8u\2\u0365\u0364\3\2\2\2\u0365")
        buf.write("\u0366\3\2\2\2\u0366\u0367\3\2\2\2\u0367\u0369\7\27\2")
        buf.write("\2\u0368\u036a\5\u00eex\2\u0369\u0368\3\2\2\2\u0369\u036a")
        buf.write("\3\2\2\2\u036a\u0374\3\2\2\2\u036b\u036c\7N\2\2\u036c")
        buf.write("\u036d\7\22\2\2\u036d\u036e\7E\2\2\u036e\u036f\7\23\2")
        buf.write("\2\u036f\u0371\7\26\2\2\u0370\u0372\5\u00e8u\2\u0371\u0370")
        buf.write("\3\2\2\2\u0371\u0372\3\2\2\2\u0372\u0373\3\2\2\2\u0373")
        buf.write("\u0375\7\27\2\2\u0374\u036b\3\2\2\2\u0374\u0375\3\2\2")
        buf.write("\2\u0375\u037c\3\2\2\2\u0376\u0377\7c\2\2\u0377\u0379")
        buf.write("\7\26\2\2\u0378\u037a\5\u00e8u\2\u0379\u0378\3\2\2\2\u0379")
        buf.write("\u037a\3\2\2\2\u037a\u037b\3\2\2\2\u037b\u037d\7\27\2")
        buf.write("\2\u037c\u0376\3\2\2\2\u037c\u037d\3\2\2\2\u037dM\3\2")
        buf.write("\2\2\u037e\u037f\7N\2\2\u037f\u0380\7\22\2\2\u0380\u0381")
        buf.write("\5\u00b6\\\2\u0381\u0382\7\23\2\2\u0382\u0384\7\26\2\2")
        buf.write("\u0383\u0385\5\u00e8u\2\u0384\u0383\3\2\2\2\u0384\u0385")
        buf.write("\3\2\2\2\u0385\u0386\3\2\2\2\u0386\u0387\7\27\2\2\u0387")
        buf.write("\u0394\3\2\2\2\u0388\u0389\7N\2\2\u0389\u038a\7h\2\2\u038a")
        buf.write("\u038b\7\22\2\2\u038b\u038c\5\u0090I\2\u038c\u038d\7\23")
        buf.write("\2\2\u038d\u038f\7\26\2\2\u038e\u0390\5\u00e8u\2\u038f")
        buf.write("\u038e\3\2\2\2\u038f\u0390\3\2\2\2\u0390\u0391\3\2\2\2")
        buf.write("\u0391\u0392\7\27\2\2\u0392\u0394\3\2\2\2\u0393\u037e")
        buf.write("\3\2\2\2\u0393\u0388\3\2\2\2\u0394O\3\2\2\2\u0395\u0397")
        buf.write("\7\u0082\2\2\u0396\u0398\5Z.\2\u0397\u0396\3\2\2\2\u0397")
        buf.write("\u0398\3\2\2\2\u0398\u0399\3\2\2\2\u0399\u039a\7\16\2")
        buf.write("\2\u039aQ\3\2\2\2\u039b\u039c\5T+\2\u039c\u039e\7\22\2")
        buf.write("\2\u039d\u039f\5v<\2\u039e\u039d\3\2\2\2\u039e\u039f\3")
        buf.write("\2\2\2\u039f\u03a0\3\2\2\2\u03a0\u03a1\7\23\2\2\u03a1")
        buf.write("S\3\2\2\2\u03a2\u03a8\5\u00acW\2\u03a3\u03a4\5V,\2\u03a4")
        buf.write("\u03a5\7\21\2\2\u03a5\u03a6\5\u00acW\2\u03a6\u03a8\3\2")
        buf.write("\2\2\u03a7\u03a2\3\2\2\2\u03a7\u03a3\3\2\2\2\u03a8U\3")
        buf.write("\2\2\2\u03a9\u03aa\b,\1\2\u03aa\u03ab\5\u00aeX\2\u03ab")
        buf.write("\u03b0\3\2\2\2\u03ac\u03ad\f\3\2\2\u03ad\u03af\5X-\2\u03ae")
        buf.write("\u03ac\3\2\2\2\u03af\u03b2\3\2\2\2\u03b0\u03ae\3\2\2\2")
        buf.write("\u03b0\u03b1\3\2\2\2\u03b1W\3\2\2\2\u03b2\u03b0\3\2\2")
        buf.write("\2\u03b3\u03b4\7\21\2\2\u03b4\u03ba\5\u00b0Y\2\u03b5\u03b6")
        buf.write("\7\24\2\2\u03b6\u03b7\5Z.\2\u03b7\u03b8\7\25\2\2\u03b8")
        buf.write("\u03ba\3\2\2\2\u03b9\u03b3\3\2\2\2\u03b9\u03b5\3\2\2\2")
        buf.write("\u03baY\3\2\2\2\u03bb\u03bc\b.\1\2\u03bc\u03bd\7\37\2")
        buf.write("\2\u03bd\u03d3\5Z.$\u03be\u03bf\7\31\2\2\u03bf\u03d3\5")
        buf.write("Z.#\u03c0\u03c1\7\22\2\2\u03c1\u03c2\5\u00c2b\2\u03c2")
        buf.write("\u03c3\7\23\2\2\u03c3\u03c4\5Z.\17\u03c4\u03d3\3\2\2\2")
        buf.write("\u03c5\u03d3\5`\61\2\u03c6\u03d3\5b\62\2\u03c7\u03c8\7")
        buf.write(":\2\2\u03c8\u03c9\7\22\2\2\u03c9\u03ca\5Z.\2\u03ca\u03cb")
        buf.write("\7\23\2\2\u03cb\u03d3\3\2\2\2\u03cc\u03cd\7_\2\2\u03cd")
        buf.write("\u03ce\7\22\2\2\u03ce\u03cf\5\u00b0Y\2\u03cf\u03d0\7\23")
        buf.write("\2\2\u03d0\u03d3\3\2\2\2\u03d1\u03d3\5^\60\2\u03d2\u03bb")
        buf.write("\3\2\2\2\u03d2\u03be\3\2\2\2\u03d2\u03c0\3\2\2\2\u03d2")
        buf.write("\u03c5\3\2\2\2\u03d2\u03c6\3\2\2\2\u03d2\u03c7\3\2\2\2")
        buf.write("\u03d2\u03cc\3\2\2\2\u03d2\u03d1\3\2\2\2\u03d3\u0441\3")
        buf.write("\2\2\2\u03d4\u03d5\f\"\2\2\u03d5\u03d6\5\u0124\u0093\2")
        buf.write("\u03d6\u03d7\5Z.#\u03d7\u0440\3\2\2\2\u03d8\u03d9\f!\2")
        buf.write("\2\u03d9\u03da\5\u0126\u0094\2\u03da\u03db\5Z.\"\u03db")
        buf.write("\u0440\3\2\2\2\u03dc\u03dd\f \2\2\u03dd\u03de\5\u012a")
        buf.write("\u0096\2\u03de\u03df\5Z.!\u03df\u0440\3\2\2\2\u03e0\u03e1")
        buf.write("\f\37\2\2\u03e1\u03e2\5\u0128\u0095\2\u03e2\u03e3\5Z.")
        buf.write(" \u03e3\u0440\3\2\2\2\u03e4\u03e5\f\36\2\2\u03e5\u03e6")
        buf.write("\t\2\2\2\u03e6\u0440\5Z.\37\u03e7\u03e8\f\35\2\2\u03e8")
        buf.write("\u03e9\7&\2\2\u03e9\u0440\5Z.\36\u03ea\u03eb\f\34\2\2")
        buf.write("\u03eb\u03ec\7\'\2\2\u03ec\u0440\5Z.\35\u03ed\u03ee\f")
        buf.write("\33\2\2\u03ee\u03ef\7$\2\2\u03ef\u0440\5Z.\34\u03f0\u03f1")
        buf.write("\f\32\2\2\u03f1\u03f2\7%\2\2\u03f2\u0440\5Z.\33\u03f3")
        buf.write("\u03f4\f\27\2\2\u03f4\u03f5\7k\2\2\u03f5\u03f6\7s\2\2")
        buf.write("\u03f6\u0440\5Z.\30\u03f7\u03f8\f\26\2\2\u03f8\u03f9\7")
        buf.write("k\2\2\u03f9\u0440\5Z.\27\u03fa\u03fb\f\25\2\2\u03fb\u03fc")
        buf.write("\7+\2\2\u03fc\u0440\5Z.\26\u03fd\u03fe\f\24\2\2\u03fe")
        buf.write("\u03ff\7*\2\2\u03ff\u0440\5Z.\25\u0400\u0401\f\23\2\2")
        buf.write("\u0401\u0402\7,\2\2\u0402\u0440\5Z.\24\u0403\u0404\f\22")
        buf.write("\2\2\u0404\u0405\7\35\2\2\u0405\u0440\5Z.\23\u0406\u0407")
        buf.write("\f\21\2\2\u0407\u0408\7\33\2\2\u0408\u0440\5Z.\22\u0409")
        buf.write("\u040a\f\20\2\2\u040a\u040b\7\30\2\2\u040b\u040c\5Z.\2")
        buf.write("\u040c\u040d\7\r\2\2\u040d\u040e\5Z.\21\u040e\u0440\3")
        buf.write("\2\2\2\u040f\u0410\f\16\2\2\u0410\u0411\7h\2\2\u0411\u0440")
        buf.write("\5Z.\17\u0412\u0413\f\r\2\2\u0413\u0414\7R\2\2\u0414\u0440")
        buf.write("\5Z.\16\u0415\u0416\f\f\2\2\u0416\u0417\7R\2\2\u0417\u0418")
        buf.write("\7B\2\2\u0418\u0440\5Z.\r\u0419\u041a\f\13\2\2\u041a\u041b")
        buf.write("\7R\2\2\u041b\u041c\7E\2\2\u041c\u0440\5Z.\f\u041d\u041e")
        buf.write("\f\n\2\2\u041e\u041f\7s\2\2\u041f\u0420\7h\2\2\u0420\u0440")
        buf.write("\5Z.\13\u0421\u0422\f\t\2\2\u0422\u0423\7s\2\2\u0423\u0424")
        buf.write("\7R\2\2\u0424\u0440\5Z.\n\u0425\u0426\f\b\2\2\u0426\u0427")
        buf.write("\7s\2\2\u0427\u0428\7R\2\2\u0428\u0429\7B\2\2\u0429\u0440")
        buf.write("\5Z.\t\u042a\u042b\f\7\2\2\u042b\u042c\7s\2\2\u042c\u042d")
        buf.write("\7R\2\2\u042d\u042e\7E\2\2\u042e\u0440\5Z.\b\u042f\u0430")
        buf.write("\f\31\2\2\u0430\u0431\7k\2\2\u0431\u0432\7s\2\2\u0432")
        buf.write("\u0440\5\\/\2\u0433\u0434\f\30\2\2\u0434\u0435\7k\2\2")
        buf.write("\u0435\u0440\5\\/\2\u0436\u0437\f\3\2\2\u0437\u0438\7")
        buf.write("d\2\2\u0438\u0439\7Z\2\2\u0439\u043a\7\22\2\2\u043a\u043b")
        buf.write("\5\u00b0Y\2\u043b\u043c\7h\2\2\u043c\u043d\5Z.\2\u043d")
        buf.write("\u043e\7\23\2\2\u043e\u0440\3\2\2\2\u043f\u03d4\3\2\2")
        buf.write("\2\u043f\u03d8\3\2\2\2\u043f\u03dc\3\2\2\2\u043f\u03e0")
        buf.write("\3\2\2\2\u043f\u03e4\3\2\2\2\u043f\u03e7\3\2\2\2\u043f")
        buf.write("\u03ea\3\2\2\2\u043f\u03ed\3\2\2\2\u043f\u03f0\3\2\2\2")
        buf.write("\u043f\u03f3\3\2\2\2\u043f\u03f7\3\2\2\2\u043f\u03fa\3")
        buf.write("\2\2\2\u043f\u03fd\3\2\2\2\u043f\u0400\3\2\2\2\u043f\u0403")
        buf.write("\3\2\2\2\u043f\u0406\3\2\2\2\u043f\u0409\3\2\2\2\u043f")
        buf.write("\u040f\3\2\2\2\u043f\u0412\3\2\2\2\u043f\u0415\3\2\2\2")
        buf.write("\u043f\u0419\3\2\2\2\u043f\u041d\3\2\2\2\u043f\u0421\3")
        buf.write("\2\2\2\u043f\u0425\3\2\2\2\u043f\u042a\3\2\2\2\u043f\u042f")
        buf.write("\3\2\2\2\u043f\u0433\3\2\2\2\u043f\u0436\3\2\2\2\u0440")
        buf.write("\u0443\3\2\2\2\u0441\u043f\3\2\2\2\u0441\u0442\3\2\2\2")
        buf.write("\u0442[\3\2\2\2\u0443\u0441\3\2\2\2\u0444\u0445\6/\"\3")
        buf.write("\u0445\u0446\7\u009d\2\2\u0446\u0447\5\u00c2b\2\u0447")
        buf.write("]\3\2\2\2\u0448\u0449\5\u00b4[\2\u0449_\3\2\2\2\u044a")
        buf.write("\u044b\b\61\1\2\u044b\u044c\5\u00f6|\2\u044c\u0451\3\2")
        buf.write("\2\2\u044d\u044e\f\3\2\2\u044e\u0450\5r:\2\u044f\u044d")
        buf.write("\3\2\2\2\u0450\u0453\3\2\2\2\u0451\u044f\3\2\2\2\u0451")
        buf.write("\u0452\3\2\2\2\u0452a\3\2\2\2\u0453\u0451\3\2\2\2\u0454")
        buf.write("\u045d\5d\63\2\u0455\u045d\5f\64\2\u0456\u045d\5l\67\2")
        buf.write("\u0457\u045d\5n8\2\u0458\u045d\5h\65\2\u0459\u045d\5p")
        buf.write("9\2\u045a\u045d\5R*\2\u045b\u045d\5t;\2\u045c\u0454\3")
        buf.write("\2\2\2\u045c\u0455\3\2\2\2\u045c\u0456\3\2\2\2\u045c\u0457")
        buf.write("\3\2\2\2\u045c\u0458\3\2\2\2\u045c\u0459\3\2\2\2\u045c")
        buf.write("\u045a\3\2\2\2\u045c\u045b\3\2\2\2\u045dc\3\2\2\2\u045e")
        buf.write("\u045f\7<\2\2\u045f\u0460\7\22\2\2\u0460\u0461\5Z.\2\u0461")
        buf.write("\u0462\7\23\2\2\u0462e\3\2\2\2\u0463\u0464\7;\2\2\u0464")
        buf.write("\u0466\7\22\2\2\u0465\u0467\5Z.\2\u0466\u0465\3\2\2\2")
        buf.write("\u0466\u0467\3\2\2\2\u0467\u0468\3\2\2\2\u0468\u0469\7")
        buf.write("\23\2\2\u0469g\3\2\2\2\u046a\u046b\7\177\2\2\u046b\u046c")
        buf.write("\7e\2\2\u046c\u046d\5Z.\2\u046di\3\2\2\2\u046e\u046f\7")
        buf.write("\u0096\2\2\u046f\u0470\7\22\2\2\u0470\u0471\5Z.\2\u0471")
        buf.write("\u0472\7\23\2\2\u0472\u0473\7\u008f\2\2\u0473\u0474\5")
        buf.write("Z.\2\u0474\u0475\7\16\2\2\u0475k\3\2\2\2\u0476\u0477\7")
        buf.write("b\2\2\u0477\u0478\7\22\2\2\u0478\u0479\5\u00b0Y\2\u0479")
        buf.write("\u047a\7\23\2\2\u047a\u047b\7e\2\2\u047b\u047c\5Z.\2\u047c")
        buf.write("\u047d\7\u0094\2\2\u047d\u047e\5Z.\2\u047em\3\2\2\2\u047f")
        buf.write("\u0480\7b\2\2\u0480\u0481\7w\2\2\u0481\u0483\7\22\2\2")
        buf.write("\u0482\u0484\5\u00a4S\2\u0483\u0482\3\2\2\2\u0483\u0484")
        buf.write("\3\2\2\2\u0484\u0485\3\2\2\2\u0485\u0486\7\23\2\2\u0486")
        buf.write("\u0487\7\u0094\2\2\u0487\u0488\7\22\2\2\u0488\u0489\5")
        buf.write("Z.\2\u0489\u048a\7\23\2\2\u048a\u04b0\3\2\2\2\u048b\u049e")
        buf.write("\7b\2\2\u048c\u048d\7B\2\2\u048d\u048f\7\22\2\2\u048e")
        buf.write("\u0490\5\u00a4S\2\u048f\u048e\3\2\2\2\u048f\u0490\3\2")
        buf.write("\2\2\u0490\u0491\3\2\2\2\u0491\u049f\7\23\2\2\u0492\u0494")
        buf.write("\7\22\2\2\u0493\u0495\5\u00a4S\2\u0494\u0493\3\2\2\2\u0494")
        buf.write("\u0495\3\2\2\2\u0495\u0496\3\2\2\2\u0496\u0497\7\23\2")
        buf.write("\2\u0497\u0498\7\u0084\2\2\u0498\u0499\7\22\2\2\u0499")
        buf.write("\u049a\5Z.\2\u049a\u049b\7\u008f\2\2\u049b\u049c\5Z.\2")
        buf.write("\u049c\u049d\7\23\2\2\u049d\u049f\3\2\2\2\u049e\u048c")
        buf.write("\3\2\2\2\u049e\u0492\3\2\2\2\u049f\u04a5\3\2\2\2\u04a0")
        buf.write("\u04a1\7\u0094\2\2\u04a1\u04a2\7\22\2\2\u04a2\u04a3\5")
        buf.write("Z.\2\u04a3\u04a4\7\23\2\2\u04a4\u04a6\3\2\2\2\u04a5\u04a0")
        buf.write("\3\2\2\2\u04a5\u04a6\3\2\2\2\u04a6\u04ad\3\2\2\2\u04a7")
        buf.write("\u04a8\7{\2\2\u04a8\u04a9\7L\2\2\u04a9\u04aa\7\22\2\2")
        buf.write("\u04aa\u04ab\5\u0112\u008a\2\u04ab\u04ac\7\23\2\2\u04ac")
        buf.write("\u04ae\3\2\2\2\u04ad\u04a7\3\2\2\2\u04ad\u04ae\3\2\2\2")
        buf.write("\u04ae\u04b0\3\2\2\2\u04af\u047f\3\2\2\2\u04af\u048b\3")
        buf.write("\2\2\2\u04b0o\3\2\2\2\u04b1\u04b2\7\u0088\2\2\u04b2\u04b3")
        buf.write("\7\22\2\2\u04b3\u04b9\5`\61\2\u04b4\u04b5\7\17\2\2\u04b5")
        buf.write("\u04b6\5\u011a\u008e\2\u04b6\u04b7\7)\2\2\u04b7\u04b8")
        buf.write("\5`\61\2\u04b8\u04ba\3\2\2\2\u04b9\u04b4\3\2\2\2\u04b9")
        buf.write("\u04ba\3\2\2\2\u04ba\u04bb\3\2\2\2\u04bb\u04bc\7\23\2")
        buf.write("\2\u04bcq\3\2\2\2\u04bd\u04be\7\21\2\2\u04be\u04c8\5\u00b0")
        buf.write("Y\2\u04bf\u04c0\7\24\2\2\u04c0\u04c1\5Z.\2\u04c1\u04c2")
        buf.write("\7\25\2\2\u04c2\u04c8\3\2\2\2\u04c3\u04c4\7\24\2\2\u04c4")
        buf.write("\u04c5\5\u010a\u0086\2\u04c5\u04c6\7\25\2\2\u04c6\u04c8")
        buf.write("\3\2\2\2\u04c7\u04bd\3\2\2\2\u04c7\u04bf\3\2\2\2\u04c7")
        buf.write("\u04c3\3\2\2\2\u04c8s\3\2\2\2\u04c9\u04ca\5\u00a4S\2\u04ca")
        buf.write("\u04cc\7\22\2\2\u04cb\u04cd\5v<\2\u04cc\u04cb\3\2\2\2")
        buf.write("\u04cc\u04cd\3\2\2\2\u04cd\u04ce\3\2\2\2\u04ce\u04cf\7")
        buf.write("\23\2\2\u04cfu\3\2\2\2\u04d0\u04d1\b<\1\2\u04d1\u04d2")
        buf.write("\5Z.\2\u04d2\u04d3\6<$\3\u04d3\u04d6\3\2\2\2\u04d4\u04d6")
        buf.write("\5x=\2\u04d5\u04d0\3\2\2\2\u04d5\u04d4\3\2\2\2\u04d6\u04dc")
        buf.write("\3\2\2\2\u04d7\u04d8\f\3\2\2\u04d8\u04d9\7\17\2\2\u04d9")
        buf.write("\u04db\5x=\2\u04da\u04d7\3\2\2\2\u04db\u04de\3\2\2\2\u04dc")
        buf.write("\u04da\3\2\2\2\u04dc\u04dd\3\2\2\2\u04ddw\3\2\2\2\u04de")
        buf.write("\u04dc\3\2\2\2\u04df\u04e0\5\u00b0Y\2\u04e0\u04e1\5\u0122")
        buf.write("\u0092\2\u04e1\u04e2\5Z.\2\u04e2y\3\2\2\2\u04e3\u04e4")
        buf.write("\5\u010e\u0088\2\u04e4\u04e5\5\u0122\u0092\2\u04e5\u04e6")
        buf.write("\5Z.\2\u04e6\u04e7\7\16\2\2\u04e7{\3\2\2\2\u04e8\u04e9")
        buf.write("\7\21\2\2\u04e9\u04ef\5\u00b0Y\2\u04ea\u04eb\7\24\2\2")
        buf.write("\u04eb\u04ec\5Z.\2\u04ec\u04ed\7\25\2\2\u04ed\u04ef\3")
        buf.write("\2\2\2\u04ee\u04e8\3\2\2\2\u04ee\u04ea\3\2\2\2\u04ef}")
        buf.write("\3\2\2\2\u04f0\u04f1\5\u00d8m\2\u04f1\u04f2\5\u0122\u0092")
        buf.write("\2\u04f2\u04f3\5Z.\2\u04f3\u04f4\7\16\2\2\u04f4\177\3")
        buf.write("\2\2\2\u04f5\u04f6\7u\2\2\u04f6\u0081\3\2\2\2\u04f7\u04f9")
        buf.write("\5\u0084C\2\u04f8\u04f7\3\2\2\2\u04f8\u04f9\3\2\2\2\u04f9")
        buf.write("\u04fa\3\2\2\2\u04fa\u04fb\5\u012c\u0097\2\u04fb\u04fc")
        buf.write("\7\2\2\3\u04fc\u0083\3\2\2\2\u04fd\u0503\5\u0086D\2\u04fe")
        buf.write("\u04ff\5\u012e\u0098\2\u04ff\u0500\5\u0086D\2\u0500\u0502")
        buf.write("\3\2\2\2\u0501\u04fe\3\2\2\2\u0502\u0505\3\2\2\2\u0503")
        buf.write("\u0501\3\2\2\2\u0503\u0504\3\2\2\2\u0504\u0085\3\2\2\2")
        buf.write("\u0505\u0503\3\2\2\2\u0506\u0507\5\u00dep\2\u0507\u0508")
        buf.write("\5\u012e\u0098\2\u0508\u050a\3\2\2\2\u0509\u0506\3\2\2")
        buf.write("\2\u050a\u050d\3\2\2\2\u050b\u0509\3\2\2\2\u050b\u050c")
        buf.write("\3\2\2\2\u050c\u0513\3\2\2\2\u050d\u050b\3\2\2\2\u050e")
        buf.write("\u0514\5\n\6\2\u050f\u0514\5\u00a8U\2\u0510\u0514\5\u0088")
        buf.write("E\2\u0511\u0514\5\u008aF\2\u0512\u0514\5\u00dco\2\u0513")
        buf.write("\u050e\3\2\2\2\u0513\u050f\3\2\2\2\u0513\u0510\3\2\2\2")
        buf.write("\u0513\u0511\3\2\2\2\u0513\u0512\3\2\2\2\u0514\u0087\3")
        buf.write("\2\2\2\u0515\u0516\5\36\20\2\u0516\u0089\3\2\2\2\u0517")
        buf.write("\u051a\5\2\2\2\u0518\u051a\5\4\3\2\u0519\u0517\3\2\2\2")
        buf.write("\u0519\u0518\3\2\2\2\u051a\u008b\3\2\2\2\u051b\u0521\5")
        buf.write("\b\5\2\u051c\u051d\5\u012e\u0098\2\u051d\u051e\5\b\5\2")
        buf.write("\u051e\u0520\3\2\2\2\u051f\u051c\3\2\2\2\u0520\u0523\3")
        buf.write("\2\2\2\u0521\u051f\3\2\2\2\u0521\u0522\3\2\2\2\u0522\u008d")
        buf.write("\3\2\2\2\u0523\u0521\3\2\2\2\u0524\u052a\5\6\4\2\u0525")
        buf.write("\u0526\5\u012e\u0098\2\u0526\u0527\5\6\4\2\u0527\u0529")
        buf.write("\3\2\2\2\u0528\u0525\3\2\2\2\u0529\u052c\3\2\2\2\u052a")
        buf.write("\u0528\3\2\2\2\u052a\u052b\3\2\2\2\u052b\u008f\3\2\2\2")
        buf.write("\u052c\u052a\3\2\2\2\u052d\u0532\5\u00b6\\\2\u052e\u052f")
        buf.write("\7\17\2\2\u052f\u0531\5\u00b6\\\2\u0530\u052e\3\2\2\2")
        buf.write("\u0531\u0534\3\2\2\2\u0532\u0530\3\2\2\2\u0532\u0533\3")
        buf.write("\2\2\2\u0533\u0091\3\2\2\2\u0534\u0532\3\2\2\2\u0535\u0536")
        buf.write("\7h\2\2\u0536\u0540\5\u0094K\2\u0537\u0538\7h\2\2\u0538")
        buf.write("\u0540\5\u0096L\2\u0539\u053a\7h\2\2\u053a\u0540\5\u009a")
        buf.write("N\2\u053b\u053c\7l\2\2\u053c\u0540\7\u00a0\2\2\u053d\u053e")
        buf.write("\7l\2\2\u053e\u0540\5Z.\2\u053f\u0535\3\2\2\2\u053f\u0537")
        buf.write("\3\2\2\2\u053f\u0539\3\2\2\2\u053f\u053b\3\2\2\2\u053f")
        buf.write("\u053d\3\2\2\2\u0540\u0093\3\2\2\2\u0541\u0543\7p\2\2")
        buf.write("\u0542\u0541\3\2\2\2\u0542\u0543\3\2\2\2\u0543\u0544\3")
        buf.write("\2\2\2\u0544\u0546\7\24\2\2\u0545\u0547\5\u0098M\2\u0546")
        buf.write("\u0545\3\2\2\2\u0546\u0547\3\2\2\2\u0547\u0548\3\2\2\2")
        buf.write("\u0548\u0549\7\25\2\2\u0549\u0095\3\2\2\2\u054a\u054c")
        buf.write("\7p\2\2\u054b\u054a\3\2\2\2\u054b\u054c\3\2\2\2\u054c")
        buf.write("\u054d\3\2\2\2\u054d\u054f\7&\2\2\u054e\u0550\5\u0098")
        buf.write("M\2\u054f\u054e\3\2\2\2\u054f\u0550\3\2\2\2\u0550\u0551")
        buf.write("\3\2\2\2\u0551\u0552\7$\2\2\u0552\u0097\3\2\2\2\u0553")
        buf.write("\u0558\5Z.\2\u0554\u0555\7\17\2\2\u0555\u0557\5Z.\2\u0556")
        buf.write("\u0554\3\2\2\2\u0557\u055a\3\2\2\2\u0558\u0556\3\2\2\2")
        buf.write("\u0558\u0559\3\2\2\2\u0559\u0099\3\2\2\2\u055a\u0558\3")
        buf.write("\2\2\2\u055b\u055c\7\24\2\2\u055c\u055d\5Z.\2\u055d\u055e")
        buf.write("\7\20\2\2\u055e\u055f\5Z.\2\u055f\u0560\7\25\2\2\u0560")
        buf.write("\u009b\3\2\2\2\u0561\u0562\bO\1\2\u0562\u056e\5\u009e")
        buf.write("P\2\u0563\u0564\7@\2\2\u0564\u0565\7&\2\2\u0565\u0566")
        buf.write("\5\u009cO\2\u0566\u0567\7$\2\2\u0567\u056e\3\2\2\2\u0568")
        buf.write("\u0569\7?\2\2\u0569\u056a\7&\2\2\u056a\u056b\5\u009cO")
        buf.write("\2\u056b\u056c\7$\2\2\u056c\u056e\3\2\2\2\u056d\u0561")
        buf.write("\3\2\2\2\u056d\u0563\3\2\2\2\u056d\u0568\3\2\2\2\u056e")
        buf.write("\u0579\3\2\2\2\u056f\u0570\f\7\2\2\u0570\u0578\7(\2\2")
        buf.write("\u0571\u0572\f\6\2\2\u0572\u0573\7\24\2\2\u0573\u0578")
        buf.write("\7\25\2\2\u0574\u0575\f\5\2\2\u0575\u0576\7\26\2\2\u0576")
        buf.write("\u0578\7\27\2\2\u0577\u056f\3\2\2\2\u0577\u0571\3\2\2")
        buf.write("\2\u0577\u0574\3\2\2\2\u0578\u057b\3\2\2\2\u0579\u0577")
        buf.write("\3\2\2\2\u0579\u057a\3\2\2\2\u057a\u009d\3\2\2\2\u057b")
        buf.write("\u0579\3\2\2\2\u057c\u057f\5\u00a0Q\2\u057d\u057f\5\u00a2")
        buf.write("R\2\u057e\u057c\3\2\2\2\u057e\u057d\3\2\2\2\u057f\u009f")
        buf.write("\3\2\2\2\u0580\u058f\7\60\2\2\u0581\u058f\7\61\2\2\u0582")
        buf.write("\u058f\7\62\2\2\u0583\u058f\7=\2\2\u0584\u058f\7\63\2")
        buf.write("\2\u0585\u058f\7\64\2\2\u0586\u058f\7;\2\2\u0587\u058f")
        buf.write("\7\65\2\2\u0588\u058f\7\67\2\2\u0589\u058f\7\66\2\2\u058a")
        buf.write("\u058f\78\2\2\u058b\u058f\7:\2\2\u058c\u058f\7<\2\2\u058d")
        buf.write("\u058f\7>\2\2\u058e\u0580\3\2\2\2\u058e\u0581\3\2\2\2")
        buf.write("\u058e\u0582\3\2\2\2\u058e\u0583\3\2\2\2\u058e\u0584\3")
        buf.write("\2\2\2\u058e\u0585\3\2\2\2\u058e\u0586\3\2\2\2\u058e\u0587")
        buf.write("\3\2\2\2\u058e\u0588\3\2\2\2\u058e\u0589\3\2\2\2\u058e")
        buf.write("\u058a\3\2\2\2\u058e\u058b\3\2\2\2\u058e\u058c\3\2\2\2")
        buf.write("\u058e\u058d\3\2\2\2\u058f\u00a1\3\2\2\2\u0590\u0591\7")
        buf.write("\u009c\2\2\u0591\u00a3\3\2\2\2\u0592\u0594\7p\2\2\u0593")
        buf.write("\u0592\3\2\2\2\u0593\u0594\3\2\2\2\u0594\u0595\3\2\2\2")
        buf.write("\u0595\u0596\5\u00a2R\2\u0596\u00a5\3\2\2\2\u0597\u0598")
        buf.write("\7:\2\2\u0598\u00a7\3\2\2\2\u0599\u059d\5\f\7\2\u059a")
        buf.write("\u059d\5 \21\2\u059b\u059d\5\16\b\2\u059c\u0599\3\2\2")
        buf.write("\2\u059c\u059a\3\2\2\2\u059c\u059b\3\2\2\2\u059d\u00a9")
        buf.write("\3\2\2\2\u059e\u05a3\5\u00b4[\2\u059f\u05a0\7\17\2\2\u05a0")
        buf.write("\u05a2\5\u00b4[\2\u05a1\u059f\3\2\2\2\u05a2\u05a5\3\2")
        buf.write("\2\2\u05a3\u05a1\3\2\2\2\u05a3\u05a4\3\2\2\2\u05a4\u00ab")
        buf.write("\3\2\2\2\u05a5\u05a3\3\2\2\2\u05a6\u05a9\5\u00b0Y\2\u05a7")
        buf.write("\u05a9\5\u00b4[\2\u05a8\u05a6\3\2\2\2\u05a8\u05a7\3\2")
        buf.write("\2\2\u05a9\u00ad\3\2\2\2\u05aa\u05ae\5\u00b0Y\2\u05ab")
        buf.write("\u05ae\5\u00b4[\2\u05ac\u05ae\5\u00b6\\\2\u05ad\u05aa")
        buf.write("\3\2\2\2\u05ad\u05ab\3\2\2\2\u05ad\u05ac\3\2\2\2\u05ae")
        buf.write("\u00af\3\2\2\2\u05af\u05b0\7\u009d\2\2\u05b0\u00b1\3\2")
        buf.write("\2\2\u05b1\u05b2\t\3\2\2\u05b2\u00b3\3\2\2\2\u05b3\u05b4")
        buf.write("\7\u009c\2\2\u05b4\u00b5\3\2\2\2\u05b5\u05b6\7\u009b\2")
        buf.write("\2\u05b6\u00b7\3\2\2\2\u05b7\u05bc\5\u00ba^\2\u05b8\u05b9")
        buf.write("\7\17\2\2\u05b9\u05bb\5\u00ba^\2\u05ba\u05b8\3\2\2\2\u05bb")
        buf.write("\u05be\3\2\2\2\u05bc\u05ba\3\2\2\2\u05bc\u05bd\3\2\2\2")
        buf.write("\u05bd\u00b9\3\2\2\2\u05be\u05bc\3\2\2\2\u05bf\u05c5\5")
        buf.write("\u00c0a\2\u05c0\u05c2\7p\2\2\u05c1\u05c0\3\2\2\2\u05c1")
        buf.write("\u05c2\3\2\2\2\u05c2\u05c3\3\2\2\2\u05c3\u05c5\5\u00bc")
        buf.write("_\2\u05c4\u05bf\3\2\2\2\u05c4\u05c1\3\2\2\2\u05c5\u00bb")
        buf.write("\3\2\2\2\u05c6\u05c9\5\u00be`\2\u05c7\u05c9\5\60\31\2")
        buf.write("\u05c8\u05c6\3\2\2\2\u05c8\u05c7\3\2\2\2\u05c9\u00bd\3")
        buf.write("\2\2\2\u05ca\u05cd\5\u00b0Y\2\u05cb\u05cc\7)\2\2\u05cc")
        buf.write("\u05ce\5\u00fc\177\2\u05cd\u05cb\3\2\2\2\u05cd\u05ce\3")
        buf.write("\2\2\2\u05ce\u00bf\3\2\2\2\u05cf\u05d0\5\u00a6T\2\u05d0")
        buf.write("\u05d1\5\u00b0Y\2\u05d1\u00c1\3\2\2\2\u05d2\u05d5\5\u009c")
        buf.write("O\2\u05d3\u05d5\5\u00c4c\2\u05d4\u05d2\3\2\2\2\u05d4\u05d3")
        buf.write("\3\2\2\2\u05d5\u00c3\3\2\2\2\u05d6\u05d7\bc\1\2\u05d7")
        buf.write("\u05d8\7E\2\2\u05d8\u05e1\3\2\2\2\u05d9\u05da\f\4\2\2")
        buf.write("\u05da\u05db\7\24\2\2\u05db\u05e0\7\25\2\2\u05dc\u05dd")
        buf.write("\f\3\2\2\u05dd\u05de\7\26\2\2\u05de\u05e0\7\27\2\2\u05df")
        buf.write("\u05d9\3\2\2\2\u05df\u05dc\3\2\2\2\u05e0\u05e3\3\2\2\2")
        buf.write("\u05e1\u05df\3\2\2\2\u05e1\u05e2\3\2\2\2\u05e2\u00c5\3")
        buf.write("\2\2\2\u05e3\u05e1\3\2\2\2\u05e4\u05ea\5\u00c8e\2\u05e5")
        buf.write("\u05e6\5\u012e\u0098\2\u05e6\u05e7\5\u00c8e\2\u05e7\u05e9")
        buf.write("\3\2\2\2\u05e8\u05e5\3\2\2\2\u05e9\u05ec\3\2\2\2\u05ea")
        buf.write("\u05e8\3\2\2\2\u05ea\u05eb\3\2\2\2\u05eb\u00c7\3\2\2\2")
        buf.write("\u05ec\u05ea\3\2\2\2\u05ed\u05f3\5\26\f\2\u05ee\u05f3")
        buf.write("\5\32\16\2\u05ef\u05f3\5(\25\2\u05f0\u05f3\5&\24\2\u05f1")
        buf.write("\u05f3\5\24\13\2\u05f2\u05ed\3\2\2\2\u05f2\u05ee\3\2\2")
        buf.write("\2\u05f2\u05ef\3\2\2\2\u05f2\u05f0\3\2\2\2\u05f2\u05f1")
        buf.write("\3\2\2\2\u05f3\u00c9\3\2\2\2\u05f4\u05fa\5\u00ccg\2\u05f5")
        buf.write("\u05f6\5\u012e\u0098\2\u05f6\u05f7\5\u00ccg\2\u05f7\u05f9")
        buf.write("\3\2\2\2\u05f8\u05f5\3\2\2\2\u05f9\u05fc\3\2\2\2\u05fa")
        buf.write("\u05f8\3\2\2\2\u05fa\u05fb\3\2\2\2\u05fb\u00cb\3\2\2\2")
        buf.write("\u05fc\u05fa\3\2\2\2\u05fd\u0601\5\34\17\2\u05fe\u0601")
        buf.write("\5\30\r\2\u05ff\u0601\5*\26\2\u0600\u05fd\3\2\2\2\u0600")
        buf.write("\u05fe\3\2\2\2\u0600\u05ff\3\2\2\2\u0601\u00cd\3\2\2\2")
        buf.write("\u0602\u0603\7\7\2\2\u0603\u060d\5\u0178\u00bd\2\u0604")
        buf.write("\u0605\7\b\2\2\u0605\u060d\5\u0192\u00ca\2\u0606\u0607")
        buf.write("\7\t\2\2\u0607\u060d\5\u00d0i\2\u0608\u0609\7\n\2\2\u0609")
        buf.write("\u060d\5\u00d0i\2\u060a\u060b\7\13\2\2\u060b\u060d\5\u00d4")
        buf.write("k\2\u060c\u0602\3\2\2\2\u060c\u0604\3\2\2\2\u060c\u0606")
        buf.write("\3\2\2\2\u060c\u0608\3\2\2\2\u060c\u060a\3\2\2\2\u060d")
        buf.write("\u00cf\3\2\2\2\u060e\u0610\5\u00aeX\2\u060f\u0611\5\u00d2")
        buf.write("j\2\u0610\u060f\3\2\2\2\u0610\u0611\3\2\2\2\u0611\u00d1")
        buf.write("\3\2\2\2\u0612\u0613\7e\2\2\u0613\u0614\5\u011c\u008f")
        buf.write("\2\u0614\u0615\7\r\2\2\u0615\u061a\5\u00aeX\2\u0616\u0617")
        buf.write("\7\21\2\2\u0617\u0619\5\u00aeX\2\u0618\u0616\3\2\2\2\u0619")
        buf.write("\u061c\3\2\2\2\u061a\u0618\3\2\2\2\u061a\u061b\3\2\2\2")
        buf.write("\u061b\u00d3\3\2\2\2\u061c\u061a\3\2\2\2\u061d\u061f\5")
        buf.write("\u00aeX\2\u061e\u0620\5\u00d6l\2\u061f\u061e\3\2\2\2\u061f")
        buf.write("\u0620\3\2\2\2\u0620\u00d5\3\2\2\2\u0621\u0622\7e\2\2")
        buf.write("\u0622\u0623\5\u011c\u008f\2\u0623\u0625\7\r\2\2\u0624")
        buf.write("\u0626\7!\2\2\u0625\u0624\3\2\2\2\u0625\u0626\3\2\2\2")
        buf.write("\u0626\u0627\3\2\2\2\u0627\u062c\5\u0148\u00a5\2\u0628")
        buf.write("\u0629\7!\2\2\u0629\u062b\5\u0148\u00a5\2\u062a\u0628")
        buf.write("\3\2\2\2\u062b\u062e\3\2\2\2\u062c\u062a\3\2\2\2\u062c")
        buf.write("\u062d\3\2\2\2\u062d\u0631\3\2\2\2\u062e\u062c\3\2\2\2")
        buf.write("\u062f\u0630\7\21\2\2\u0630\u0632\5\u0148\u00a5\2\u0631")
        buf.write("\u062f\3\2\2\2\u0631\u0632\3\2\2\2\u0632\u00d7\3\2\2\2")
        buf.write("\u0633\u0638\5\u00b0Y\2\u0634\u0635\7\17\2\2\u0635\u0637")
        buf.write("\5\u00b0Y\2\u0636\u0634\3\2\2\2\u0637\u063a\3\2\2\2\u0638")
        buf.write("\u0636\3\2\2\2\u0638\u0639\3\2\2\2\u0639\u00d9\3\2\2\2")
        buf.write("\u063a\u0638\3\2\2\2\u063b\u0640\5\u00b2Z\2\u063c\u063d")
        buf.write("\7\17\2\2\u063d\u063f\5\u00b2Z\2\u063e\u063c\3\2\2\2\u063f")
        buf.write("\u0642\3\2\2\2\u0640\u063e\3\2\2\2\u0640\u0641\3\2\2\2")
        buf.write("\u0641\u00db\3\2\2\2\u0642\u0640\3\2\2\2\u0643\u0648\5")
        buf.write("&\24\2\u0644\u0648\5(\25\2\u0645\u0648\5*\26\2\u0646\u0648")
        buf.write("\5,\27\2\u0647\u0643\3\2\2\2\u0647\u0644\3\2\2\2\u0647")
        buf.write("\u0645\3\2\2\2\u0647\u0646\3\2\2\2\u0648\u00dd\3\2\2\2")
        buf.write("\u0649\u064a\7\6\2\2\u064a\u00df\3\2\2\2\u064b\u0651\5")
        buf.write("\u00e2r\2\u064c\u064d\5\u012e\u0098\2\u064d\u064e\5\u00e2")
        buf.write("r\2\u064e\u0650\3\2\2\2\u064f\u064c\3\2\2\2\u0650\u0653")
        buf.write("\3\2\2\2\u0651\u064f\3\2\2\2\u0651\u0652\3\2\2\2\u0652")
        buf.write("\u00e1\3\2\2\2\u0653\u0651\3\2\2\2\u0654\u0655\7\7\2\2")
        buf.write("\u0655\u065f\5\u0162\u00b2\2\u0656\u0657\7\b\2\2\u0657")
        buf.write("\u065f\5\u017e\u00c0\2\u0658\u0659\7\t\2\2\u0659\u065f")
        buf.write("\5\u00e4s\2\u065a\u065b\7\n\2\2\u065b\u065f\5\u00e4s\2")
        buf.write("\u065c\u065d\7\13\2\2\u065d\u065f\5\u00e6t\2\u065e\u0654")
        buf.write("\3\2\2\2\u065e\u0656\3\2\2\2\u065e\u0658\3\2\2\2\u065e")
        buf.write("\u065a\3\2\2\2\u065e\u065c\3\2\2\2\u065f\u00e3\3\2\2\2")
        buf.write("\u0660\u0662\5\u014a\u00a6\2\u0661\u0663\7\16\2\2\u0662")
        buf.write("\u0661\3\2\2\2\u0662\u0663\3\2\2\2\u0663\u0665\3\2\2\2")
        buf.write("\u0664\u0666\5\u00d2j\2\u0665\u0664\3\2\2\2\u0665\u0666")
        buf.write("\3\2\2\2\u0666\u00e5\3\2\2\2\u0667\u0669\5\u0130\u0099")
        buf.write("\2\u0668\u066a\7\16\2\2\u0669\u0668\3\2\2\2\u0669\u066a")
        buf.write("\3\2\2\2\u066a\u066c\3\2\2\2\u066b\u066d\5\u00d6l\2\u066c")
        buf.write("\u066b\3\2\2\2\u066c\u066d\3\2\2\2\u066d\u00e7\3\2\2\2")
        buf.write("\u066e\u0674\5\64\33\2\u066f\u0670\5\u012e\u0098\2\u0670")
        buf.write("\u0671\5\64\33\2\u0671\u0673\3\2\2\2\u0672\u066f\3\2\2")
        buf.write("\2\u0673\u0676\3\2\2\2\u0674\u0672\3\2\2\2\u0674\u0675")
        buf.write("\3\2\2\2\u0675\u00e9\3\2\2\2\u0676\u0674\3\2\2\2\u0677")
        buf.write("\u067d\5.\30\2\u0678\u0679\5\u012e\u0098\2\u0679\u067a")
        buf.write("\5.\30\2\u067a\u067c\3\2\2\2\u067b\u0678\3\2\2\2\u067c")
        buf.write("\u067f\3\2\2\2\u067d\u067b\3\2\2\2\u067d\u067e\3\2\2\2")
        buf.write("\u067e\u00eb\3\2\2\2\u067f\u067d\3\2\2\2\u0680\u0686\5")
        buf.write("> \2\u0681\u0682\5\u012e\u0098\2\u0682\u0683\5> \2\u0683")
        buf.write("\u0685\3\2\2\2\u0684\u0681\3\2\2\2\u0685\u0688\3\2\2\2")
        buf.write("\u0686\u0684\3\2\2\2\u0686\u0687\3\2\2\2\u0687\u00ed\3")
        buf.write("\2\2\2\u0688\u0686\3\2\2\2\u0689\u068f\5N(\2\u068a\u068b")
        buf.write("\5\u012e\u0098\2\u068b\u068c\5N(\2\u068c\u068e\3\2\2\2")
        buf.write("\u068d\u068a\3\2\2\2\u068e\u0691\3\2\2\2\u068f\u068d\3")
        buf.write("\2\2\2\u068f\u0690\3\2\2\2\u0690\u00ef\3\2\2\2\u0691\u068f")
        buf.write("\3\2\2\2\u0692\u0693\7\24\2\2\u0693\u0694\5\u00f2z\2\u0694")
        buf.write("\u0695\7\20\2\2\u0695\u0696\5\u00f2z\2\u0696\u0697\7\25")
        buf.write("\2\2\u0697\u06a1\3\2\2\2\u0698\u0699\7\24\2\2\u0699\u069a")
        buf.write("\5\u00f4{\2\u069a\u069b\7\25\2\2\u069b\u06a1\3\2\2\2\u069c")
        buf.write("\u069d\7&\2\2\u069d\u069e\5\u00f4{\2\u069e\u069f\7$\2")
        buf.write("\2\u069f\u06a1\3\2\2\2\u06a0\u0692\3\2\2\2\u06a0\u0698")
        buf.write("\3\2\2\2\u06a0\u069c\3\2\2\2\u06a1\u00f1\3\2\2\2\u06a2")
        buf.write("\u06b0\7\u0099\2\2\u06a3\u06b0\7\u009a\2\2\u06a4\u06b0")
        buf.write("\7\u00a1\2\2\u06a5\u06b0\7\u00a2\2\2\u06a6\u06b0\7\u0098")
        buf.write("\2\2\u06a7\u06b0\7\u00a6\2\2\u06a8\u06b0\7\u00a5\2\2\u06a9")
        buf.write("\u06b0\7\u00a0\2\2\u06aa\u06b0\7\u00a3\2\2\u06ab\u06b0")
        buf.write("\7\u00a4\2\2\u06ac\u06b0\7\u0097\2\2\u06ad\u06b0\7\u00a7")
        buf.write("\2\2\u06ae\u06b0\5\u0080A\2\u06af\u06a2\3\2\2\2\u06af")
        buf.write("\u06a3\3\2\2\2\u06af\u06a4\3\2\2\2\u06af\u06a5\3\2\2\2")
        buf.write("\u06af\u06a6\3\2\2\2\u06af\u06a7\3\2\2\2\u06af\u06a8\3")
        buf.write("\2\2\2\u06af\u06a9\3\2\2\2\u06af\u06aa\3\2\2\2\u06af\u06ab")
        buf.write("\3\2\2\2\u06af\u06ac\3\2\2\2\u06af\u06ad\3\2\2\2\u06af")
        buf.write("\u06ae\3\2\2\2\u06b0\u00f3\3\2\2\2\u06b1\u06b6\5\u00f2")
        buf.write("z\2\u06b2\u06b3\7\17\2\2\u06b3\u06b5\5\u00f2z\2\u06b4")
        buf.write("\u06b2\3\2\2\2\u06b5\u06b8\3\2\2\2\u06b6\u06b4\3\2\2\2")
        buf.write("\u06b6\u06b7\3\2\2\2\u06b7\u00f5\3\2\2\2\u06b8\u06b6\3")
        buf.write("\2\2\2\u06b9\u06be\5\u00fa~\2\u06ba\u06be\5\u00fc\177")
        buf.write("\2\u06bb\u06be\5\u00aeX\2\u06bc\u06be\5\u00f8}\2\u06bd")
        buf.write("\u06b9\3\2\2\2\u06bd\u06ba\3\2\2\2\u06bd\u06bb\3\2\2\2")
        buf.write("\u06bd\u06bc\3\2\2\2\u06be\u00f7\3\2\2\2\u06bf\u06c0\t")
        buf.write("\4\2\2\u06c0\u00f9\3\2\2\2\u06c1\u06c2\7\22\2\2\u06c2")
        buf.write("\u06c3\5Z.\2\u06c3\u06c4\7\23\2\2\u06c4\u00fb\3\2\2\2")
        buf.write("\u06c5\u06c8\5\u00f2z\2\u06c6\u06c8\5\u00fe\u0080\2\u06c7")
        buf.write("\u06c5\3\2\2\2\u06c7\u06c6\3\2\2\2\u06c8\u00fd\3\2\2\2")
        buf.write("\u06c9\u06cf\5\u009aN\2\u06ca\u06cf\5\u0094K\2\u06cb\u06cf")
        buf.write("\5\u0096L\2\u06cc\u06cf\5\u0102\u0082\2\u06cd\u06cf\5")
        buf.write("\u0100\u0081\2\u06ce\u06c9\3\2\2\2\u06ce\u06ca\3\2\2\2")
        buf.write("\u06ce\u06cb\3\2\2\2\u06ce\u06cc\3\2\2\2\u06ce\u06cd\3")
        buf.write("\2\2\2\u06cf\u00ff\3\2\2\2\u06d0\u06d2\7p\2\2\u06d1\u06d0")
        buf.write("\3\2\2\2\u06d1\u06d2\3\2\2\2\u06d2\u06d3\3\2\2\2\u06d3")
        buf.write("\u06d5\7\22\2\2\u06d4\u06d6\5\u0104\u0083\2\u06d5\u06d4")
        buf.write("\3\2\2\2\u06d5\u06d6\3\2\2\2\u06d6\u06d7\3\2\2\2\u06d7")
        buf.write("\u06d8\7\23\2\2\u06d8\u0101\3\2\2\2\u06d9\u06db\7p\2\2")
        buf.write("\u06da\u06d9\3\2\2\2\u06da\u06db\3\2\2\2\u06db\u06dc\3")
        buf.write("\2\2\2\u06dc\u06de\7\26\2\2\u06dd\u06df\5\u0106\u0084")
        buf.write("\2\u06de\u06dd\3\2\2\2\u06de\u06df\3\2\2\2\u06df\u06e0")
        buf.write("\3\2\2\2\u06e0\u06e1\7\27\2\2\u06e1\u0103\3\2\2\2\u06e2")
        buf.write("\u06e3\5Z.\2\u06e3\u06ec\7\17\2\2\u06e4\u06e9\5Z.\2\u06e5")
        buf.write("\u06e6\7\17\2\2\u06e6\u06e8\5Z.\2\u06e7\u06e5\3\2\2\2")
        buf.write("\u06e8\u06eb\3\2\2\2\u06e9\u06e7\3\2\2\2\u06e9\u06ea\3")
        buf.write("\2\2\2\u06ea\u06ed\3\2\2\2\u06eb\u06e9\3\2\2\2\u06ec\u06e4")
        buf.write("\3\2\2\2\u06ec\u06ed\3\2\2\2\u06ed\u0105\3\2\2\2\u06ee")
        buf.write("\u06f3\5\u0108\u0085\2\u06ef\u06f0\7\17\2\2\u06f0\u06f2")
        buf.write("\5\u0108\u0085\2\u06f1\u06ef\3\2\2\2\u06f2\u06f5\3\2\2")
        buf.write("\2\u06f3\u06f1\3\2\2\2\u06f3\u06f4\3\2\2\2\u06f4\u0107")
        buf.write("\3\2\2\2\u06f5\u06f3\3\2\2\2\u06f6\u06f7\5Z.\2\u06f7\u06f8")
        buf.write("\7\r\2\2\u06f8\u06f9\5Z.\2\u06f9\u0109\3\2\2\2\u06fa\u06fb")
        buf.write("\5Z.\2\u06fb\u06fc\7\r\2\2\u06fc\u06fd\5Z.\2\u06fd\u0704")
        buf.write("\3\2\2\2\u06fe\u06ff\5Z.\2\u06ff\u0700\7\r\2\2\u0700\u0704")
        buf.write("\3\2\2\2\u0701\u0702\7\r\2\2\u0702\u0704\5Z.\2\u0703\u06fa")
        buf.write("\3\2\2\2\u0703\u06fe\3\2\2\2\u0703\u0701\3\2\2\2\u0704")
        buf.write("\u010b\3\2\2\2\u0705\u0706\5\u00b0Y\2\u0706\u0707\5\u0122")
        buf.write("\u0092\2\u0707\u0708\5Z.\2\u0708\u010d\3\2\2\2\u0709\u070a")
        buf.write("\b\u0088\1\2\u070a\u070b\5\u00b0Y\2\u070b\u0710\3\2\2")
        buf.write("\2\u070c\u070d\f\3\2\2\u070d\u070f\5|?\2\u070e\u070c\3")
        buf.write("\2\2\2\u070f\u0712\3\2\2\2\u0710\u070e\3\2\2\2\u0710\u0711")
        buf.write("\3\2\2\2\u0711\u010f\3\2\2\2\u0712\u0710\3\2\2\2\u0713")
        buf.write("\u0714\6\u0089,\3\u0714\u0715\7\u009d\2\2\u0715\u0718")
        buf.write("\5\u00c2b\2\u0716\u0718\5Z.\2\u0717\u0713\3\2\2\2\u0717")
        buf.write("\u0716\3\2\2\2\u0718\u0111\3\2\2\2\u0719\u071e\5\u0114")
        buf.write("\u008b\2\u071a\u071b\7\17\2\2\u071b\u071d\5\u0114\u008b")
        buf.write("\2\u071c\u071a\3\2\2\2\u071d\u0720\3\2\2\2\u071e\u071c")
        buf.write("\3\2\2\2\u071e\u071f\3\2\2\2\u071f\u0113\3\2\2\2\u0720")
        buf.write("\u071e\3\2\2\2\u0721\u0726\5\u00b0Y\2\u0722\u0723\7\21")
        buf.write("\2\2\u0723\u0725\5\u00b0Y\2\u0724\u0722\3\2\2\2\u0725")
        buf.write("\u0728\3\2\2\2\u0726\u0724\3\2\2\2\u0726\u0727\3\2\2\2")
        buf.write("\u0727\u072a\3\2\2\2\u0728\u0726\3\2\2\2\u0729\u072b\t")
        buf.write("\5\2\2\u072a\u0729\3\2\2\2\u072a\u072b\3\2\2\2\u072b\u0115")
        buf.write("\3\2\2\2\u072c\u0733\7\36\2\2\u072d\u0733\7\37\2\2\u072e")
        buf.write("\u0733\5\u0124\u0093\2\u072f\u0733\5\u0126\u0094\2\u0730")
        buf.write("\u0733\5\u0128\u0095\2\u0731\u0733\5\u012a\u0096\2\u0732")
        buf.write("\u072c\3\2\2\2\u0732\u072d\3\2\2\2\u0732\u072e\3\2\2\2")
        buf.write("\u0732\u072f\3\2\2\2\u0732\u0730\3\2\2\2\u0732\u0731\3")
        buf.write("\2\2\2\u0733\u0117\3\2\2\2\u0734\u0735\7\u009d\2\2\u0735")
        buf.write("\u0736\6\u008d-\3\u0736\u0119\3\2\2\2\u0737\u0738\7\u009d")
        buf.write("\2\2\u0738\u0739\6\u008e.\3\u0739\u011b\3\2\2\2\u073a")
        buf.write("\u073b\7\u009d\2\2\u073b\u073c\6\u008f/\3\u073c\u011d")
        buf.write("\3\2\2\2\u073d\u073e\7\u009d\2\2\u073e\u073f\6\u0090\60")
        buf.write("\3\u073f\u011f\3\2\2\2\u0740\u0741\7\u009d\2\2\u0741\u0742")
        buf.write("\6\u0091\61\3\u0742\u0121\3\2\2\2\u0743\u0744\7)\2\2\u0744")
        buf.write("\u0123\3\2\2\2\u0745\u0746\7 \2\2\u0746\u0125\3\2\2\2")
        buf.write("\u0747\u0748\7!\2\2\u0748\u0127\3\2\2\2\u0749\u074a\7")
        buf.write("\"\2\2\u074a\u0129\3\2\2\2\u074b\u074c\t\6\2\2\u074c\u012b")
        buf.write("\3\2\2\2\u074d\u074e\3\2\2\2\u074e\u012d\3\2\2\2\u074f")
        buf.write("\u0750\3\2\2\2\u0750\u012f\3\2\2\2\u0751\u0752\7\u0082")
        buf.write("\2\2\u0752\u0753\5\u0132\u009a\2\u0753\u0754\7\16\2\2")
        buf.write("\u0754\u0759\3\2\2\2\u0755\u0756\5\u0132\u009a\2\u0756")
        buf.write("\u0757\7\16\2\2\u0757\u0759\3\2\2\2\u0758\u0751\3\2\2")
        buf.write("\2\u0758\u0755\3\2\2\2\u0759\u0131\3\2\2\2\u075a\u075b")
        buf.write("\b\u009a\1\2\u075b\u075c\5\u0134\u009b\2\u075c\u0761\3")
        buf.write("\2\2\2\u075d\u075e\f\3\2\2\u075e\u0760\5\u013a\u009e\2")
        buf.write("\u075f\u075d\3\2\2\2\u0760\u0763\3\2\2\2\u0761\u075f\3")
        buf.write("\2\2\2\u0761\u0762\3\2\2\2\u0762\u0133\3\2\2\2\u0763\u0761")
        buf.write("\3\2\2\2\u0764\u076c\5\u0136\u009c\2\u0765\u076c\5\u0138")
        buf.write("\u009d\2\u0766\u076c\5\u0142\u00a2\2\u0767\u076c\5\u0144")
        buf.write("\u00a3\2\u0768\u076c\5\u0146\u00a4\2\u0769\u076c\5\u013c")
        buf.write("\u009f\2\u076a\u076c\5\u0140\u00a1\2\u076b\u0764\3\2\2")
        buf.write("\2\u076b\u0765\3\2\2\2\u076b\u0766\3\2\2\2\u076b\u0767")
        buf.write("\3\2\2\2\u076b\u0768\3\2\2\2\u076b\u0769\3\2\2\2\u076b")
        buf.write("\u076a\3\2\2\2\u076c\u0135\3\2\2\2\u076d\u076e\5\u00f8")
        buf.write("}\2\u076e\u0137\3\2\2\2\u076f\u0770\5\u0118\u008d\2\u0770")
        buf.write("\u0771\5\u013c\u009f\2\u0771\u0139\3\2\2\2\u0772\u0773")
        buf.write("\7\21\2\2\u0773\u0778\5\u013c\u009f\2\u0774\u0775\7\21")
        buf.write("\2\2\u0775\u0778\5\u0148\u00a5\2\u0776\u0778\5\u0140\u00a1")
        buf.write("\2\u0777\u0772\3\2\2\2\u0777\u0774\3\2\2\2\u0777\u0776")
        buf.write("\3\2\2\2\u0778\u013b\3\2\2\2\u0779\u077a\5\u0148\u00a5")
        buf.write("\2\u077a\u077c\7\22\2\2\u077b\u077d\5\u013e\u00a0\2\u077c")
        buf.write("\u077b\3\2\2\2\u077c\u077d\3\2\2\2\u077d\u077e\3\2\2\2")
        buf.write("\u077e\u077f\7\23\2\2\u077f\u013d\3\2\2\2\u0780\u0781")
        buf.write("\b\u00a0\1\2\u0781\u0782\5\u0132\u009a\2\u0782\u0788\3")
        buf.write("\2\2\2\u0783\u0784\f\3\2\2\u0784\u0785\7\17\2\2\u0785")
        buf.write("\u0787\5\u0132\u009a\2\u0786\u0783\3\2\2\2\u0787\u078a")
        buf.write("\3\2\2\2\u0788\u0786\3\2\2\2\u0788\u0789\3\2\2\2\u0789")
        buf.write("\u013f\3\2\2\2\u078a\u0788\3\2\2\2\u078b\u078c\7\24\2")
        buf.write("\2\u078c\u078d\5\u0132\u009a\2\u078d\u078e\7\25\2\2\u078e")
        buf.write("\u0141\3\2\2\2\u078f\u0790\7\22\2\2\u0790\u0791\5\u0132")
        buf.write("\u009a\2\u0791\u0792\7\23\2\2\u0792\u0143\3\2\2\2\u0793")
        buf.write("\u0794\5\u0148\u00a5\2\u0794\u0145\3\2\2\2\u0795\u079b")
        buf.write("\7\u00a1\2\2\u0796\u079b\7\u00a3\2\2\u0797\u079b\7\u00a0")
        buf.write("\2\2\u0798\u079b\7\u0097\2\2\u0799\u079b\7\u0098\2\2\u079a")
        buf.write("\u0795\3\2\2\2\u079a\u0796\3\2\2\2\u079a\u0797\3\2\2\2")
        buf.write("\u079a\u0798\3\2\2\2\u079a\u0799\3\2\2\2\u079b\u0147\3")
        buf.write("\2\2\2\u079c\u079d\t\7\2\2\u079d\u0149\3\2\2\2\u079e\u079f")
        buf.write("\7\u0082\2\2\u079f\u07a2\5\u014c\u00a7\2\u07a0\u07a2\5")
        buf.write("\u014c\u00a7\2\u07a1\u079e\3\2\2\2\u07a1\u07a0\3\2\2\2")
        buf.write("\u07a2\u014b\3\2\2\2\u07a3\u07a4\b\u00a7\1\2\u07a4\u07a5")
        buf.write("\5\u014e\u00a8\2\u07a5\u07aa\3\2\2\2\u07a6\u07a7\f\3\2")
        buf.write("\2\u07a7\u07a9\5\u0150\u00a9\2\u07a8\u07a6\3\2\2\2\u07a9")
        buf.write("\u07ac\3\2\2\2\u07aa\u07a8\3\2\2\2\u07aa\u07ab\3\2\2\2")
        buf.write("\u07ab\u014d\3\2\2\2\u07ac\u07aa\3\2\2\2\u07ad\u07b2\5")
        buf.write("\u015a\u00ae\2\u07ae\u07b2\5\u015c\u00af\2\u07af\u07b2")
        buf.write("\5\u015e\u00b0\2\u07b0\u07b2\5\u0152\u00aa\2\u07b1\u07ad")
        buf.write("\3\2\2\2\u07b1\u07ae\3\2\2\2\u07b1\u07af\3\2\2\2\u07b1")
        buf.write("\u07b0\3\2\2\2\u07b2\u014f\3\2\2\2\u07b3\u07b4\7\21\2")
        buf.write("\2\u07b4\u07ba\5\u0152\u00aa\2\u07b5\u07b6\7\24\2\2\u07b6")
        buf.write("\u07b7\5\u014c\u00a7\2\u07b7\u07b8\7\25\2\2\u07b8\u07ba")
        buf.write("\3\2\2\2\u07b9\u07b3\3\2\2\2\u07b9\u07b5\3\2\2\2\u07ba")
        buf.write("\u0151\3\2\2\2\u07bb\u07bc\5\u0160\u00b1\2\u07bc\u07be")
        buf.write("\7\22\2\2\u07bd\u07bf\5\u0154\u00ab\2\u07be\u07bd\3\2")
        buf.write("\2\2\u07be\u07bf\3\2\2\2\u07bf\u07c0\3\2\2\2\u07c0\u07c1")
        buf.write("\7\23\2\2\u07c1\u0153\3\2\2\2\u07c2\u07c9\5\u0156\u00ac")
        buf.write("\2\u07c3\u07c9\5\u0158\u00ad\2\u07c4\u07c5\5\u0156\u00ac")
        buf.write("\2\u07c5\u07c6\7\17\2\2\u07c6\u07c7\5\u0158\u00ad\2\u07c7")
        buf.write("\u07c9\3\2\2\2\u07c8\u07c2\3\2\2\2\u07c8\u07c3\3\2\2\2")
        buf.write("\u07c8\u07c4\3\2\2\2\u07c9\u0155\3\2\2\2\u07ca\u07cb\b")
        buf.write("\u00ac\1\2\u07cb\u07cc\5\u014c\u00a7\2\u07cc\u07d2\3\2")
        buf.write("\2\2\u07cd\u07ce\f\3\2\2\u07ce\u07cf\7\17\2\2\u07cf\u07d1")
        buf.write("\5\u014c\u00a7\2\u07d0\u07cd\3\2\2\2\u07d1\u07d4\3\2\2")
        buf.write("\2\u07d2\u07d0\3\2\2\2\u07d2\u07d3\3\2\2\2\u07d3\u0157")
        buf.write("\3\2\2\2\u07d4\u07d2\3\2\2\2\u07d5\u07d6\b\u00ad\1\2\u07d6")
        buf.write("\u07d7\5\u0160\u00b1\2\u07d7\u07d8\7)\2\2\u07d8\u07d9")
        buf.write("\5\u014c\u00a7\2\u07d9\u07e2\3\2\2\2\u07da\u07db\f\3\2")
        buf.write("\2\u07db\u07dc\7\17\2\2\u07dc\u07dd\5\u0160\u00b1\2\u07dd")
        buf.write("\u07de\7)\2\2\u07de\u07df\5\u014c\u00a7\2\u07df\u07e1")
        buf.write("\3\2\2\2\u07e0\u07da\3\2\2\2\u07e1\u07e4\3\2\2\2\u07e2")
        buf.write("\u07e0\3\2\2\2\u07e2\u07e3\3\2\2\2\u07e3\u0159\3\2\2\2")
        buf.write("\u07e4\u07e2\3\2\2\2\u07e5\u07e6\7\22\2\2\u07e6\u07e7")
        buf.write("\5\u014c\u00a7\2\u07e7\u07e8\7\23\2\2\u07e8\u015b\3\2")
        buf.write("\2\2\u07e9\u07ea\b\u00af\1\2\u07ea\u07ed\7\u009f\2\2\u07eb")
        buf.write("\u07ed\5\u0160\u00b1\2\u07ec\u07e9\3\2\2\2\u07ec\u07eb")
        buf.write("\3\2\2\2\u07ed\u07f3\3\2\2\2\u07ee\u07ef\f\3\2\2\u07ef")
        buf.write("\u07f0\7\21\2\2\u07f0\u07f2\5\u0160\u00b1\2\u07f1\u07ee")
        buf.write("\3\2\2\2\u07f2\u07f5\3\2\2\2\u07f3\u07f1\3\2\2\2\u07f3")
        buf.write("\u07f4\3\2\2\2\u07f4\u015d\3\2\2\2\u07f5\u07f3\3\2\2\2")
        buf.write("\u07f6\u07fc\7\u00a1\2\2\u07f7\u07fc\7\u00a3\2\2\u07f8")
        buf.write("\u07fc\7\u00a0\2\2\u07f9\u07fc\7\u0097\2\2\u07fa\u07fc")
        buf.write("\7\u0098\2\2\u07fb\u07f6\3\2\2\2\u07fb\u07f7\3\2\2\2\u07fb")
        buf.write("\u07f8\3\2\2\2\u07fb\u07f9\3\2\2\2\u07fb\u07fa\3\2\2\2")
        buf.write("\u07fc\u015f\3\2\2\2\u07fd\u07fe\t\b\2\2\u07fe\u0161\3")
        buf.write("\2\2\2\u07ff\u0800\7\u0082\2\2\u0800\u0801\5\u0164\u00b3")
        buf.write("\2\u0801\u0802\7\16\2\2\u0802\u0807\3\2\2\2\u0803\u0804")
        buf.write("\5\u0164\u00b3\2\u0804\u0805\7\16\2\2\u0805\u0807\3\2")
        buf.write("\2\2\u0806\u07ff\3\2\2\2\u0806\u0803\3\2\2\2\u0807\u0163")
        buf.write("\3\2\2\2\u0808\u0809\b\u00b3\1\2\u0809\u080a\5\u0166\u00b4")
        buf.write("\2\u080a\u080f\3\2\2\2\u080b\u080c\f\3\2\2\u080c\u080e")
        buf.write("\5\u016c\u00b7\2\u080d\u080b\3\2\2\2\u080e\u0811\3\2\2")
        buf.write("\2\u080f\u080d\3\2\2\2\u080f\u0810\3\2\2\2\u0810\u0165")
        buf.write("\3\2\2\2\u0811\u080f\3\2\2\2\u0812\u0818\5\u0168\u00b5")
        buf.write("\2\u0813\u0818\5\u016a\u00b6\2\u0814\u0818\5\u0174\u00bb")
        buf.write("\2\u0815\u0818\5\u0176\u00bc\2\u0816\u0818\5\u017a\u00be")
        buf.write("\2\u0817\u0812\3\2\2\2\u0817\u0813\3\2\2\2\u0817\u0814")
        buf.write("\3\2\2\2\u0817\u0815\3\2\2\2\u0817\u0816\3\2\2\2\u0818")
        buf.write("\u0167\3\2\2\2\u0819\u081a\5\u00f8}\2\u081a\u0169\3\2")
        buf.write("\2\2\u081b\u081c\5\u0118\u008d\2\u081c\u081d\5\u016e\u00b8")
        buf.write("\2\u081d\u016b\3\2\2\2\u081e\u081f\7\21\2\2\u081f\u0822")
        buf.write("\5\u016e\u00b8\2\u0820\u0822\5\u0172\u00ba\2\u0821\u081e")
        buf.write("\3\2\2\2\u0821\u0820\3\2\2\2\u0822\u016d\3\2\2\2\u0823")
        buf.write("\u0824\5\u017c\u00bf\2\u0824\u0826\7\22\2\2\u0825\u0827")
        buf.write("\5\u0170\u00b9\2\u0826\u0825\3\2\2\2\u0826\u0827\3\2\2")
        buf.write("\2\u0827\u0828\3\2\2\2\u0828\u0829\7\23\2\2\u0829\u016f")
        buf.write("\3\2\2\2\u082a\u082b\b\u00b9\1\2\u082b\u082c\5\u0164\u00b3")
        buf.write("\2\u082c\u0832\3\2\2\2\u082d\u082e\f\3\2\2\u082e\u082f")
        buf.write("\7\17\2\2\u082f\u0831\5\u0164\u00b3\2\u0830\u082d\3\2")
        buf.write("\2\2\u0831\u0834\3\2\2\2\u0832\u0830\3\2\2\2\u0832\u0833")
        buf.write("\3\2\2\2\u0833\u0171\3\2\2\2\u0834\u0832\3\2\2\2\u0835")
        buf.write("\u0836\7\24\2\2\u0836\u0837\5\u0164\u00b3\2\u0837\u0838")
        buf.write("\7\25\2\2\u0838\u0173\3\2\2\2\u0839\u083a\7\22\2\2\u083a")
        buf.write("\u083b\5\u0164\u00b3\2\u083b\u083c\7\23\2\2\u083c\u0175")
        buf.write("\3\2\2\2\u083d\u083e\b\u00bc\1\2\u083e\u083f\5\u017c\u00bf")
        buf.write("\2\u083f\u0845\3\2\2\2\u0840\u0841\f\3\2\2\u0841\u0842")
        buf.write("\7\21\2\2\u0842\u0844\5\u017c\u00bf\2\u0843\u0840\3\2")
        buf.write("\2\2\u0844\u0847\3\2\2\2\u0845\u0843\3\2\2\2\u0845\u0846")
        buf.write("\3\2\2\2\u0846\u0177\3\2\2\2\u0847\u0845\3\2\2\2\u0848")
        buf.write("\u0849\b\u00bd\1\2\u0849\u084a\5\u0176\u00bc\2\u084a\u084f")
        buf.write("\3\2\2\2\u084b\u084c\f\3\2\2\u084c\u084e\7\u009f\2\2\u084d")
        buf.write("\u084b\3\2\2\2\u084e\u0851\3\2\2\2\u084f\u084d\3\2\2\2")
        buf.write("\u084f\u0850\3\2\2\2\u0850\u0179\3\2\2\2\u0851\u084f\3")
        buf.write("\2\2\2\u0852\u0858\7\u00a1\2\2\u0853\u0858\7\u00a3\2\2")
        buf.write("\u0854\u0858\7\u00a0\2\2\u0855\u0858\7\u0097\2\2\u0856")
        buf.write("\u0858\7\u0098\2\2\u0857\u0852\3\2\2\2\u0857\u0853\3\2")
        buf.write("\2\2\u0857\u0854\3\2\2\2\u0857\u0855\3\2\2\2\u0857\u0856")
        buf.write("\3\2\2\2\u0858\u017b\3\2\2\2\u0859\u085a\t\t\2\2\u085a")
        buf.write("\u017d\3\2\2\2\u085b\u085c\7\u0082\2\2\u085c\u085d\5\u0180")
        buf.write("\u00c1\2\u085d\u085e\7\16\2\2\u085e\u0863\3\2\2\2\u085f")
        buf.write("\u0860\5\u0180\u00c1\2\u0860\u0861\7\16\2\2\u0861\u0863")
        buf.write("\3\2\2\2\u0862\u085b\3\2\2\2\u0862\u085f\3\2\2\2\u0863")
        buf.write("\u017f\3\2\2\2\u0864\u0865\b\u00c1\1\2\u0865\u0866\5\u0182")
        buf.write("\u00c2\2\u0866\u086b\3\2\2\2\u0867\u0868\f\3\2\2\u0868")
        buf.write("\u086a\5\u0188\u00c5\2\u0869\u0867\3\2\2\2\u086a\u086d")
        buf.write("\3\2\2\2\u086b\u0869\3\2\2\2\u086b\u086c\3\2\2\2\u086c")
        buf.write("\u0181\3\2\2\2\u086d\u086b\3\2\2\2\u086e\u0874\5\u0184")
        buf.write("\u00c3\2\u086f\u0874\5\u0186\u00c4\2\u0870\u0874\5\u0190")
        buf.write("\u00c9\2\u0871\u0874\5\u0192\u00ca\2\u0872\u0874\5\u0194")
        buf.write("\u00cb\2\u0873\u086e\3\2\2\2\u0873\u086f\3\2\2\2\u0873")
        buf.write("\u0870\3\2\2\2\u0873\u0871\3\2\2\2\u0873\u0872\3\2\2\2")
        buf.write("\u0874\u0183\3\2\2\2\u0875\u0876\5\u00f8}\2\u0876\u0185")
        buf.write("\3\2\2\2\u0877\u0878\5\u0118\u008d\2\u0878\u0879\5\u018a")
        buf.write("\u00c6\2\u0879\u0187\3\2\2\2\u087a\u087b\7\21\2\2\u087b")
        buf.write("\u087e\5\u018a\u00c6\2\u087c\u087e\5\u018e\u00c8\2\u087d")
        buf.write("\u087a\3\2\2\2\u087d\u087c\3\2\2\2\u087e\u0189\3\2\2\2")
        buf.write("\u087f\u0880\5\u0196\u00cc\2\u0880\u0882\7\22\2\2\u0881")
        buf.write("\u0883\5\u018c\u00c7\2\u0882\u0881\3\2\2\2\u0882\u0883")
        buf.write("\3\2\2\2\u0883\u0884\3\2\2\2\u0884\u0885\7\23\2\2\u0885")
        buf.write("\u018b\3\2\2\2\u0886\u0887\b\u00c7\1\2\u0887\u0888\5\u0180")
        buf.write("\u00c1\2\u0888\u088e\3\2\2\2\u0889\u088a\f\3\2\2\u088a")
        buf.write("\u088b\7\17\2\2\u088b\u088d\5\u0180\u00c1\2\u088c\u0889")
        buf.write("\3\2\2\2\u088d\u0890\3\2\2\2\u088e\u088c\3\2\2\2\u088e")
        buf.write("\u088f\3\2\2\2\u088f\u018d\3\2\2\2\u0890\u088e\3\2\2\2")
        buf.write("\u0891\u0892\7\24\2\2\u0892\u0893\5\u0180\u00c1\2\u0893")
        buf.write("\u0894\7\25\2\2\u0894\u018f\3\2\2\2\u0895\u0896\7\22\2")
        buf.write("\2\u0896\u0897\5\u0180\u00c1\2\u0897\u0898\7\23\2\2\u0898")
        buf.write("\u0191\3\2\2\2\u0899\u089a\b\u00ca\1\2\u089a\u089d\7\u009f")
        buf.write("\2\2\u089b\u089d\5\u0196\u00cc\2\u089c\u0899\3\2\2\2\u089c")
        buf.write("\u089b\3\2\2\2\u089d\u08a3\3\2\2\2\u089e\u089f\f\3\2\2")
        buf.write("\u089f\u08a0\7\21\2\2\u08a0\u08a2\5\u0196\u00cc\2\u08a1")
        buf.write("\u089e\3\2\2\2\u08a2\u08a5\3\2\2\2\u08a3\u08a1\3\2\2\2")
        buf.write("\u08a3\u08a4\3\2\2\2\u08a4\u0193\3\2\2\2\u08a5\u08a3\3")
        buf.write("\2\2\2\u08a6\u08ac\7\u00a1\2\2\u08a7\u08ac\7\u00a3\2\2")
        buf.write("\u08a8\u08ac\7\u00a0\2\2\u08a9\u08ac\7\u0097\2\2\u08aa")
        buf.write("\u08ac\7\u0098\2\2\u08ab\u08a6\3\2\2\2\u08ab\u08a7\3\2")
        buf.write("\2\2\u08ab\u08a8\3\2\2\2\u08ab\u08a9\3\2\2\2\u08ab\u08aa")
        buf.write("\3\2\2\2\u08ac\u0195\3\2\2\2\u08ad\u08ae\t\n\2\2\u08ae")
        buf.write("\u0197\3\2\2\2\u00c7\u019f\u01a3\u01be\u01c5\u01cd\u01cf")
        buf.write("\u01d4\u01dc\u01e0\u01ea\u01f6\u01fc\u01ff\u0202\u020b")
        buf.write("\u0213\u0218\u021e\u0226\u022b\u0231\u023c\u0241\u0246")
        buf.write("\u024f\u0254\u0268\u026d\u0273\u0279\u027f\u0284\u0289")
        buf.write("\u028c\u0292\u02a9\u02b3\u02b8\u02bf\u02c1\u02d6\u02ef")
        buf.write("\u0306\u0308\u0310\u0317\u0319\u0321\u032b\u0340\u0344")
        buf.write("\u0358\u0365\u0369\u0371\u0374\u0379\u037c\u0384\u038f")
        buf.write("\u0393\u0397\u039e\u03a7\u03b0\u03b9\u03d2\u043f\u0441")
        buf.write("\u0451\u045c\u0466\u0483\u048f\u0494\u049e\u04a5\u04ad")
        buf.write("\u04af\u04b9\u04c7\u04cc\u04d5\u04dc\u04ee\u04f8\u0503")
        buf.write("\u050b\u0513\u0519\u0521\u052a\u0532\u053f\u0542\u0546")
        buf.write("\u054b\u054f\u0558\u056d\u0577\u0579\u057e\u058e\u0593")
        buf.write("\u059c\u05a3\u05a8\u05ad\u05bc\u05c1\u05c4\u05c8\u05cd")
        buf.write("\u05d4\u05df\u05e1\u05ea\u05f2\u05fa\u0600\u060c\u0610")
        buf.write("\u061a\u061f\u0625\u062c\u0631\u0638\u0640\u0647\u0651")
        buf.write("\u065e\u0662\u0665\u0669\u066c\u0674\u067d\u0686\u068f")
        buf.write("\u06a0\u06af\u06b6\u06bd\u06c7\u06ce\u06d1\u06d5\u06da")
        buf.write("\u06de\u06e9\u06ec\u06f3\u0703\u0710\u0717\u071e\u0726")
        buf.write("\u072a\u0732\u0758\u0761\u076b\u0777\u077c\u0788\u079a")
        buf.write("\u07a1\u07aa\u07b1\u07b9\u07be\u07c8\u07d2\u07e2\u07ec")
        buf.write("\u07f3\u07fb\u0806\u080f\u0817\u0821\u0826\u0832\u0845")
        buf.write("\u084f\u0857\u0862\u086b\u0873\u087d\u0882\u088e\u089c")
        buf.write("\u08a3\u08ab")
        return buf.getvalue()


class OParser ( AbstractParser ):

    grammarFileName = "java-escape"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ u"<INVALID>", u"' '", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"'Java:'", u"'C#:'", u"'Python2:'", u"'Python3:'", 
                     u"'JavaScript:'", u"'Swift:'", u"':'", u"';'", u"','", 
                     u"'..'", u"'.'", u"'('", u"')'", u"'['", u"']'", u"'{'", 
                     u"'}'", u"'?'", u"'!'", u"'&'", u"'&&'", u"'|'", u"'||'", 
                     u"'+'", u"'-'", u"'*'", u"'/'", u"'\\'", u"'%'", u"'>'", 
                     u"'>='", u"'<'", u"'<='", u"'<>'", u"'='", u"'!='", 
                     u"'=='", u"'~='", u"'~'", u"'<-'", u"'->'", u"'Boolean'", 
                     u"'Character'", u"'Text'", u"'Integer'", u"'Decimal'", 
                     u"'Date'", u"'Time'", u"'DateTime'", u"'Period'", u"'Method'", 
                     u"'Code'", u"'Document'", u"'Blob'", u"'Image'", u"'UUID'", 
                     u"'Iterator'", u"'Cursor'", u"'abstract'", u"'all'", 
                     u"'always'", u"'and'", u"'any'", u"'as'", u"<INVALID>", 
                     u"'attr'", u"'attribute'", u"'attributes'", u"'bindings'", 
                     u"'by'", u"'case'", u"'catch'", u"'category'", u"'class'", 
                     u"'close'", u"'contains'", u"'def'", u"'default'", 
                     u"'define'", u"'delete'", u"<INVALID>", u"'do'", u"'doing'", 
                     u"'each'", u"'else'", u"'enum'", u"'enumerated'", u"'except'", 
                     u"'execute'", u"'expecting'", u"'extends'", u"'fetch'", 
                     u"'finally'", u"'for'", u"'from'", u"'getter'", u"'if'", 
                     u"'in'", u"'index'", u"'invoke'", u"'is'", u"'matching'", 
                     u"'method'", u"'methods'", u"'modulo'", u"'mutable'", 
                     u"'native'", u"'None'", u"'not'", u"<INVALID>", u"'null'", 
                     u"'on'", u"'one'", u"'open'", u"'operator'", u"'or'", 
                     u"'order'", u"'otherwise'", u"'pass'", u"'raise'", 
                     u"'read'", u"'receiving'", u"'resource'", u"'return'", 
                     u"'returning'", u"'rows'", u"'self'", u"'setter'", 
                     u"'singleton'", u"'sorted'", u"'storable'", u"'store'", 
                     u"'switch'", u"'test'", u"'this'", u"'throw'", u"'to'", 
                     u"'try'", u"'verifying'", u"'with'", u"'when'", u"'where'", 
                     u"'while'", u"'write'", u"<INVALID>", u"<INVALID>", 
                     u"'MIN_INTEGER'", u"'MAX_INTEGER'" ]

    symbolicNames = [ u"<INVALID>", u"SPACE", u"WS", u"LF", u"COMMENT", 
                      u"JAVA", u"CSHARP", u"PYTHON2", u"PYTHON3", u"JAVASCRIPT", 
                      u"SWIFT", u"COLON", u"SEMI", u"COMMA", u"RANGE", u"DOT", 
                      u"LPAR", u"RPAR", u"LBRAK", u"RBRAK", u"LCURL", u"RCURL", 
                      u"QMARK", u"XMARK", u"AMP", u"AMP2", u"PIPE", u"PIPE2", 
                      u"PLUS", u"MINUS", u"STAR", u"SLASH", u"BSLASH", u"PERCENT", 
                      u"GT", u"GTE", u"LT", u"LTE", u"LTGT", u"EQ", u"XEQ", 
                      u"EQ2", u"TEQ", u"TILDE", u"LARROW", u"RARROW", u"BOOLEAN", 
                      u"CHARACTER", u"TEXT", u"INTEGER", u"DECIMAL", u"DATE", 
                      u"TIME", u"DATETIME", u"PERIOD", u"METHOD_T", u"CODE", 
                      u"DOCUMENT", u"BLOB", u"IMAGE", u"UUID", u"ITERATOR", 
                      u"CURSOR", u"ABSTRACT", u"ALL", u"ALWAYS", u"AND", 
                      u"ANY", u"AS", u"ASC", u"ATTR", u"ATTRIBUTE", u"ATTRIBUTES", 
                      u"BINDINGS", u"BY", u"CASE", u"CATCH", u"CATEGORY", 
                      u"CLASS", u"CLOSE", u"CONTAINS", u"DEF", u"DEFAULT", 
                      u"DEFINE", u"DELETE", u"DESC", u"DO", u"DOING", u"EACH", 
                      u"ELSE", u"ENUM", u"ENUMERATED", u"EXCEPT", u"EXECUTE", 
                      u"EXPECTING", u"EXTENDS", u"FETCH", u"FINALLY", u"FOR", 
                      u"FROM", u"GETTER", u"IF", u"IN", u"INDEX", u"INVOKE", 
                      u"IS", u"MATCHING", u"METHOD", u"METHODS", u"MODULO", 
                      u"MUTABLE", u"NATIVE", u"NONE", u"NOT", u"NOTHING", 
                      u"NULL", u"ON", u"ONE", u"OPEN", u"OPERATOR", u"OR", 
                      u"ORDER", u"OTHERWISE", u"PASS", u"RAISE", u"READ", 
                      u"RECEIVING", u"RESOURCE", u"RETURN", u"RETURNING", 
                      u"ROWS", u"SELF", u"SETTER", u"SINGLETON", u"SORTED", 
                      u"STORABLE", u"STORE", u"SWITCH", u"TEST", u"THIS", 
                      u"THROW", u"TO", u"TRY", u"VERIFYING", u"WITH", u"WHEN", 
                      u"WHERE", u"WHILE", u"WRITE", u"BOOLEAN_LITERAL", 
                      u"CHAR_LITERAL", u"MIN_INTEGER", u"MAX_INTEGER", u"SYMBOL_IDENTIFIER", 
                      u"TYPE_IDENTIFIER", u"VARIABLE_IDENTIFIER", u"NATIVE_IDENTIFIER", 
                      u"DOLLAR_IDENTIFIER", u"TEXT_LITERAL", u"INTEGER_LITERAL", 
                      u"HEXA_LITERAL", u"DECIMAL_LITERAL", u"DATETIME_LITERAL", 
                      u"TIME_LITERAL", u"DATE_LITERAL", u"PERIOD_LITERAL" ]

    RULE_enum_category_declaration = 0
    RULE_enum_native_declaration = 1
    RULE_category_symbol = 2
    RULE_native_symbol = 3
    RULE_attribute_declaration = 4
    RULE_concrete_category_declaration = 5
    RULE_singleton_category_declaration = 6
    RULE_derived_list = 7
    RULE_category_method_list = 8
    RULE_operator_method_declaration = 9
    RULE_setter_method_declaration = 10
    RULE_native_setter_declaration = 11
    RULE_getter_method_declaration = 12
    RULE_native_getter_declaration = 13
    RULE_native_resource_declaration = 14
    RULE_native_category_declaration = 15
    RULE_native_category_bindings = 16
    RULE_native_category_binding_list = 17
    RULE_abstract_method_declaration = 18
    RULE_concrete_method_declaration = 19
    RULE_native_method_declaration = 20
    RULE_test_method_declaration = 21
    RULE_assertion = 22
    RULE_typed_argument = 23
    RULE_statement_or_list = 24
    RULE_statement = 25
    RULE_store_statement = 26
    RULE_with_resource_statement = 27
    RULE_with_singleton_statement = 28
    RULE_switch_statement = 29
    RULE_switch_case_statement = 30
    RULE_for_each_statement = 31
    RULE_do_while_statement = 32
    RULE_while_statement = 33
    RULE_if_statement = 34
    RULE_else_if_statement_list = 35
    RULE_raise_statement = 36
    RULE_try_statement = 37
    RULE_catch_statement = 38
    RULE_return_statement = 39
    RULE_method_call = 40
    RULE_method_selector = 41
    RULE_callable_parent = 42
    RULE_callable_selector = 43
    RULE_expression = 44
    RULE_an_expression = 45
    RULE_closure_expression = 46
    RULE_instance_expression = 47
    RULE_method_expression = 48
    RULE_blob_expression = 49
    RULE_document_expression = 50
    RULE_read_expression = 51
    RULE_write_statement = 52
    RULE_fetch_list_expression = 53
    RULE_fetch_store_expression = 54
    RULE_sorted_expression = 55
    RULE_selector_expression = 56
    RULE_constructor_expression = 57
    RULE_argument_assignment_list = 58
    RULE_argument_assignment = 59
    RULE_assign_instance_statement = 60
    RULE_child_instance = 61
    RULE_assign_tuple_statement = 62
    RULE_null_literal = 63
    RULE_declaration_list = 64
    RULE_declarations = 65
    RULE_declaration = 66
    RULE_resource_declaration = 67
    RULE_enum_declaration = 68
    RULE_native_symbol_list = 69
    RULE_category_symbol_list = 70
    RULE_symbol_list = 71
    RULE_attribute_constraint = 72
    RULE_list_literal = 73
    RULE_set_literal = 74
    RULE_expression_list = 75
    RULE_range_literal = 76
    RULE_typedef = 77
    RULE_primary_type = 78
    RULE_native_type = 79
    RULE_category_type = 80
    RULE_mutable_category_type = 81
    RULE_code_type = 82
    RULE_category_declaration = 83
    RULE_type_identifier_list = 84
    RULE_method_identifier = 85
    RULE_identifier = 86
    RULE_variable_identifier = 87
    RULE_attribute_identifier = 88
    RULE_type_identifier = 89
    RULE_symbol_identifier = 90
    RULE_argument_list = 91
    RULE_argument = 92
    RULE_operator_argument = 93
    RULE_named_argument = 94
    RULE_code_argument = 95
    RULE_category_or_any_type = 96
    RULE_any_type = 97
    RULE_member_method_declaration_list = 98
    RULE_member_method_declaration = 99
    RULE_native_member_method_declaration_list = 100
    RULE_native_member_method_declaration = 101
    RULE_native_category_binding = 102
    RULE_python_category_binding = 103
    RULE_python_module = 104
    RULE_javascript_category_binding = 105
    RULE_javascript_module = 106
    RULE_variable_identifier_list = 107
    RULE_attribute_identifier_list = 108
    RULE_method_declaration = 109
    RULE_comment_statement = 110
    RULE_native_statement_list = 111
    RULE_native_statement = 112
    RULE_python_native_statement = 113
    RULE_javascript_native_statement = 114
    RULE_statement_list = 115
    RULE_assertion_list = 116
    RULE_switch_case_statement_list = 117
    RULE_catch_statement_list = 118
    RULE_literal_collection = 119
    RULE_atomic_literal = 120
    RULE_literal_list_literal = 121
    RULE_selectable_expression = 122
    RULE_this_expression = 123
    RULE_parenthesis_expression = 124
    RULE_literal_expression = 125
    RULE_collection_literal = 126
    RULE_tuple_literal = 127
    RULE_dict_literal = 128
    RULE_expression_tuple = 129
    RULE_dict_entry_list = 130
    RULE_dict_entry = 131
    RULE_slice_arguments = 132
    RULE_assign_variable_statement = 133
    RULE_assignable_instance = 134
    RULE_is_expression = 135
    RULE_order_by_list = 136
    RULE_order_by = 137
    RULE_operator = 138
    RULE_new_token = 139
    RULE_key_token = 140
    RULE_module_token = 141
    RULE_value_token = 142
    RULE_symbols_token = 143
    RULE_assign = 144
    RULE_multiply = 145
    RULE_divide = 146
    RULE_idivide = 147
    RULE_modulo = 148
    RULE_lfs = 149
    RULE_lfp = 150
    RULE_javascript_statement = 151
    RULE_javascript_expression = 152
    RULE_javascript_primary_expression = 153
    RULE_javascript_this_expression = 154
    RULE_javascript_new_expression = 155
    RULE_javascript_selector_expression = 156
    RULE_javascript_method_expression = 157
    RULE_javascript_arguments = 158
    RULE_javascript_item_expression = 159
    RULE_javascript_parenthesis_expression = 160
    RULE_javascript_identifier_expression = 161
    RULE_javascript_literal_expression = 162
    RULE_javascript_identifier = 163
    RULE_python_statement = 164
    RULE_python_expression = 165
    RULE_python_primary_expression = 166
    RULE_python_selector_expression = 167
    RULE_python_method_expression = 168
    RULE_python_argument_list = 169
    RULE_python_ordinal_argument_list = 170
    RULE_python_named_argument_list = 171
    RULE_python_parenthesis_expression = 172
    RULE_python_identifier_expression = 173
    RULE_python_literal_expression = 174
    RULE_python_identifier = 175
    RULE_java_statement = 176
    RULE_java_expression = 177
    RULE_java_primary_expression = 178
    RULE_java_this_expression = 179
    RULE_java_new_expression = 180
    RULE_java_selector_expression = 181
    RULE_java_method_expression = 182
    RULE_java_arguments = 183
    RULE_java_item_expression = 184
    RULE_java_parenthesis_expression = 185
    RULE_java_identifier_expression = 186
    RULE_java_class_identifier_expression = 187
    RULE_java_literal_expression = 188
    RULE_java_identifier = 189
    RULE_csharp_statement = 190
    RULE_csharp_expression = 191
    RULE_csharp_primary_expression = 192
    RULE_csharp_this_expression = 193
    RULE_csharp_new_expression = 194
    RULE_csharp_selector_expression = 195
    RULE_csharp_method_expression = 196
    RULE_csharp_arguments = 197
    RULE_csharp_item_expression = 198
    RULE_csharp_parenthesis_expression = 199
    RULE_csharp_identifier_expression = 200
    RULE_csharp_literal_expression = 201
    RULE_csharp_identifier = 202

    ruleNames =  [ "enum_category_declaration", "enum_native_declaration", 
                   "category_symbol", "native_symbol", "attribute_declaration", 
                   "concrete_category_declaration", "singleton_category_declaration", 
                   "derived_list", "category_method_list", "operator_method_declaration", 
                   "setter_method_declaration", "native_setter_declaration", 
                   "getter_method_declaration", "native_getter_declaration", 
                   "native_resource_declaration", "native_category_declaration", 
                   "native_category_bindings", "native_category_binding_list", 
                   "abstract_method_declaration", "concrete_method_declaration", 
                   "native_method_declaration", "test_method_declaration", 
                   "assertion", "typed_argument", "statement_or_list", "statement", 
                   "store_statement", "with_resource_statement", "with_singleton_statement", 
                   "switch_statement", "switch_case_statement", "for_each_statement", 
                   "do_while_statement", "while_statement", "if_statement", 
                   "else_if_statement_list", "raise_statement", "try_statement", 
                   "catch_statement", "return_statement", "method_call", 
                   "method_selector", "callable_parent", "callable_selector", 
                   "expression", "an_expression", "closure_expression", 
                   "instance_expression", "method_expression", "blob_expression", 
                   "document_expression", "read_expression", "write_statement", 
                   "fetch_list_expression", "fetch_store_expression", "sorted_expression", 
                   "selector_expression", "constructor_expression", "argument_assignment_list", 
                   "argument_assignment", "assign_instance_statement", "child_instance", 
                   "assign_tuple_statement", "null_literal", "declaration_list", 
                   "declarations", "declaration", "resource_declaration", 
                   "enum_declaration", "native_symbol_list", "category_symbol_list", 
                   "symbol_list", "attribute_constraint", "list_literal", 
                   "set_literal", "expression_list", "range_literal", "typedef", 
                   "primary_type", "native_type", "category_type", "mutable_category_type", 
                   "code_type", "category_declaration", "type_identifier_list", 
                   "method_identifier", "identifier", "variable_identifier", 
                   "attribute_identifier", "type_identifier", "symbol_identifier", 
                   "argument_list", "argument", "operator_argument", "named_argument", 
                   "code_argument", "category_or_any_type", "any_type", 
                   "member_method_declaration_list", "member_method_declaration", 
                   "native_member_method_declaration_list", "native_member_method_declaration", 
                   "native_category_binding", "python_category_binding", 
                   "python_module", "javascript_category_binding", "javascript_module", 
                   "variable_identifier_list", "attribute_identifier_list", 
                   "method_declaration", "comment_statement", "native_statement_list", 
                   "native_statement", "python_native_statement", "javascript_native_statement", 
                   "statement_list", "assertion_list", "switch_case_statement_list", 
                   "catch_statement_list", "literal_collection", "atomic_literal", 
                   "literal_list_literal", "selectable_expression", "this_expression", 
                   "parenthesis_expression", "literal_expression", "collection_literal", 
                   "tuple_literal", "dict_literal", "expression_tuple", 
                   "dict_entry_list", "dict_entry", "slice_arguments", "assign_variable_statement", 
                   "assignable_instance", "is_expression", "order_by_list", 
                   "order_by", "operator", "new_token", "key_token", "module_token", 
                   "value_token", "symbols_token", "assign", "multiply", 
                   "divide", "idivide", "modulo", "lfs", "lfp", "javascript_statement", 
                   "javascript_expression", "javascript_primary_expression", 
                   "javascript_this_expression", "javascript_new_expression", 
                   "javascript_selector_expression", "javascript_method_expression", 
                   "javascript_arguments", "javascript_item_expression", 
                   "javascript_parenthesis_expression", "javascript_identifier_expression", 
                   "javascript_literal_expression", "javascript_identifier", 
                   "python_statement", "python_expression", "python_primary_expression", 
                   "python_selector_expression", "python_method_expression", 
                   "python_argument_list", "python_ordinal_argument_list", 
                   "python_named_argument_list", "python_parenthesis_expression", 
                   "python_identifier_expression", "python_literal_expression", 
                   "python_identifier", "java_statement", "java_expression", 
                   "java_primary_expression", "java_this_expression", "java_new_expression", 
                   "java_selector_expression", "java_method_expression", 
                   "java_arguments", "java_item_expression", "java_parenthesis_expression", 
                   "java_identifier_expression", "java_class_identifier_expression", 
                   "java_literal_expression", "java_identifier", "csharp_statement", 
                   "csharp_expression", "csharp_primary_expression", "csharp_this_expression", 
                   "csharp_new_expression", "csharp_selector_expression", 
                   "csharp_method_expression", "csharp_arguments", "csharp_item_expression", 
                   "csharp_parenthesis_expression", "csharp_identifier_expression", 
                   "csharp_literal_expression", "csharp_identifier" ]

    EOF = Token.EOF
    SPACE=1
    WS=2
    LF=3
    COMMENT=4
    JAVA=5
    CSHARP=6
    PYTHON2=7
    PYTHON3=8
    JAVASCRIPT=9
    SWIFT=10
    COLON=11
    SEMI=12
    COMMA=13
    RANGE=14
    DOT=15
    LPAR=16
    RPAR=17
    LBRAK=18
    RBRAK=19
    LCURL=20
    RCURL=21
    QMARK=22
    XMARK=23
    AMP=24
    AMP2=25
    PIPE=26
    PIPE2=27
    PLUS=28
    MINUS=29
    STAR=30
    SLASH=31
    BSLASH=32
    PERCENT=33
    GT=34
    GTE=35
    LT=36
    LTE=37
    LTGT=38
    EQ=39
    XEQ=40
    EQ2=41
    TEQ=42
    TILDE=43
    LARROW=44
    RARROW=45
    BOOLEAN=46
    CHARACTER=47
    TEXT=48
    INTEGER=49
    DECIMAL=50
    DATE=51
    TIME=52
    DATETIME=53
    PERIOD=54
    METHOD_T=55
    CODE=56
    DOCUMENT=57
    BLOB=58
    IMAGE=59
    UUID=60
    ITERATOR=61
    CURSOR=62
    ABSTRACT=63
    ALL=64
    ALWAYS=65
    AND=66
    ANY=67
    AS=68
    ASC=69
    ATTR=70
    ATTRIBUTE=71
    ATTRIBUTES=72
    BINDINGS=73
    BY=74
    CASE=75
    CATCH=76
    CATEGORY=77
    CLASS=78
    CLOSE=79
    CONTAINS=80
    DEF=81
    DEFAULT=82
    DEFINE=83
    DELETE=84
    DESC=85
    DO=86
    DOING=87
    EACH=88
    ELSE=89
    ENUM=90
    ENUMERATED=91
    EXCEPT=92
    EXECUTE=93
    EXPECTING=94
    EXTENDS=95
    FETCH=96
    FINALLY=97
    FOR=98
    FROM=99
    GETTER=100
    IF=101
    IN=102
    INDEX=103
    INVOKE=104
    IS=105
    MATCHING=106
    METHOD=107
    METHODS=108
    MODULO=109
    MUTABLE=110
    NATIVE=111
    NONE=112
    NOT=113
    NOTHING=114
    NULL=115
    ON=116
    ONE=117
    OPEN=118
    OPERATOR=119
    OR=120
    ORDER=121
    OTHERWISE=122
    PASS=123
    RAISE=124
    READ=125
    RECEIVING=126
    RESOURCE=127
    RETURN=128
    RETURNING=129
    ROWS=130
    SELF=131
    SETTER=132
    SINGLETON=133
    SORTED=134
    STORABLE=135
    STORE=136
    SWITCH=137
    TEST=138
    THIS=139
    THROW=140
    TO=141
    TRY=142
    VERIFYING=143
    WITH=144
    WHEN=145
    WHERE=146
    WHILE=147
    WRITE=148
    BOOLEAN_LITERAL=149
    CHAR_LITERAL=150
    MIN_INTEGER=151
    MAX_INTEGER=152
    SYMBOL_IDENTIFIER=153
    TYPE_IDENTIFIER=154
    VARIABLE_IDENTIFIER=155
    NATIVE_IDENTIFIER=156
    DOLLAR_IDENTIFIER=157
    TEXT_LITERAL=158
    INTEGER_LITERAL=159
    HEXA_LITERAL=160
    DECIMAL_LITERAL=161
    DATETIME_LITERAL=162
    TIME_LITERAL=163
    DATE_LITERAL=164
    PERIOD_LITERAL=165

    def __init__(self, input:TokenStream):
        super().__init__(input)
        self.checkVersion("4.5")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None



    class Enum_category_declarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # Type_identifierContext
            self.attrs = None # Attribute_identifier_listContext
            self.derived = None # Type_identifierContext
            self.symbols = None # Category_symbol_listContext

        def ENUMERATED(self):
            return self.getToken(OParser.ENUMERATED, 0)

        def CATEGORY(self):
            return self.getToken(OParser.CATEGORY, 0)

        def LCURL(self):
            return self.getToken(OParser.LCURL, 0)

        def RCURL(self):
            return self.getToken(OParser.RCURL, 0)

        def type_identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(OParser.Type_identifierContext)
            else:
                return self.getTypedRuleContext(OParser.Type_identifierContext,i)


        def category_symbol_list(self):
            return self.getTypedRuleContext(OParser.Category_symbol_listContext,0)


        def LPAR(self):
            return self.getToken(OParser.LPAR, 0)

        def RPAR(self):
            return self.getToken(OParser.RPAR, 0)

        def EXTENDS(self):
            return self.getToken(OParser.EXTENDS, 0)

        def attribute_identifier_list(self):
            return self.getTypedRuleContext(OParser.Attribute_identifier_listContext,0)


        def getRuleIndex(self):
            return OParser.RULE_enum_category_declaration

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterEnum_category_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitEnum_category_declaration(self)




    def enum_category_declaration(self):

        localctx = OParser.Enum_category_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_enum_category_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 406
            self.match(OParser.ENUMERATED)
            self.state = 407
            self.match(OParser.CATEGORY)
            self.state = 408
            localctx.name = self.type_identifier()
            self.state = 413
            _la = self._input.LA(1)
            if _la==OParser.LPAR:
                self.state = 409
                self.match(OParser.LPAR)
                self.state = 410
                localctx.attrs = self.attribute_identifier_list()
                self.state = 411
                self.match(OParser.RPAR)


            self.state = 417
            _la = self._input.LA(1)
            if _la==OParser.EXTENDS:
                self.state = 415
                self.match(OParser.EXTENDS)
                self.state = 416
                localctx.derived = self.type_identifier()


            self.state = 419
            self.match(OParser.LCURL)
            self.state = 420
            localctx.symbols = self.category_symbol_list()
            self.state = 421
            self.match(OParser.RCURL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Enum_native_declarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # Type_identifierContext
            self.typ = None # Native_typeContext
            self.symbols = None # Native_symbol_listContext

        def ENUMERATED(self):
            return self.getToken(OParser.ENUMERATED, 0)

        def LPAR(self):
            return self.getToken(OParser.LPAR, 0)

        def RPAR(self):
            return self.getToken(OParser.RPAR, 0)

        def LCURL(self):
            return self.getToken(OParser.LCURL, 0)

        def RCURL(self):
            return self.getToken(OParser.RCURL, 0)

        def type_identifier(self):
            return self.getTypedRuleContext(OParser.Type_identifierContext,0)


        def native_type(self):
            return self.getTypedRuleContext(OParser.Native_typeContext,0)


        def native_symbol_list(self):
            return self.getTypedRuleContext(OParser.Native_symbol_listContext,0)


        def getRuleIndex(self):
            return OParser.RULE_enum_native_declaration

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterEnum_native_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitEnum_native_declaration(self)




    def enum_native_declaration(self):

        localctx = OParser.Enum_native_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_enum_native_declaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 423
            self.match(OParser.ENUMERATED)
            self.state = 424
            localctx.name = self.type_identifier()
            self.state = 425
            self.match(OParser.LPAR)
            self.state = 426
            localctx.typ = self.native_type()
            self.state = 427
            self.match(OParser.RPAR)
            self.state = 428
            self.match(OParser.LCURL)
            self.state = 429
            localctx.symbols = self.native_symbol_list()
            self.state = 430
            self.match(OParser.RCURL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Category_symbolContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # Symbol_identifierContext
            self.args = None # Argument_assignment_listContext

        def LPAR(self):
            return self.getToken(OParser.LPAR, 0)

        def RPAR(self):
            return self.getToken(OParser.RPAR, 0)

        def SEMI(self):
            return self.getToken(OParser.SEMI, 0)

        def symbol_identifier(self):
            return self.getTypedRuleContext(OParser.Symbol_identifierContext,0)


        def argument_assignment_list(self):
            return self.getTypedRuleContext(OParser.Argument_assignment_listContext,0)


        def getRuleIndex(self):
            return OParser.RULE_category_symbol

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterCategory_symbol(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitCategory_symbol(self)




    def category_symbol(self):

        localctx = OParser.Category_symbolContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_category_symbol)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 432
            localctx.name = self.symbol_identifier()
            self.state = 433
            self.match(OParser.LPAR)
            self.state = 434
            localctx.args = self.argument_assignment_list(0)
            self.state = 435
            self.match(OParser.RPAR)
            self.state = 436
            self.match(OParser.SEMI)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Native_symbolContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # Symbol_identifierContext
            self.exp = None # ExpressionContext

        def EQ(self):
            return self.getToken(OParser.EQ, 0)

        def SEMI(self):
            return self.getToken(OParser.SEMI, 0)

        def symbol_identifier(self):
            return self.getTypedRuleContext(OParser.Symbol_identifierContext,0)


        def expression(self):
            return self.getTypedRuleContext(OParser.ExpressionContext,0)


        def getRuleIndex(self):
            return OParser.RULE_native_symbol

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterNative_symbol(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitNative_symbol(self)




    def native_symbol(self):

        localctx = OParser.Native_symbolContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_native_symbol)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 438
            localctx.name = self.symbol_identifier()
            self.state = 439
            self.match(OParser.EQ)
            self.state = 440
            localctx.exp = self.expression(0)
            self.state = 441
            self.match(OParser.SEMI)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Attribute_declarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # Attribute_identifierContext
            self.typ = None # TypedefContext
            self.match = None # Attribute_constraintContext
            self.indices = None # Variable_identifier_listContext

        def ATTRIBUTE(self):
            return self.getToken(OParser.ATTRIBUTE, 0)

        def COLON(self):
            return self.getToken(OParser.COLON, 0)

        def SEMI(self):
            return self.getToken(OParser.SEMI, 0)

        def attribute_identifier(self):
            return self.getTypedRuleContext(OParser.Attribute_identifierContext,0)


        def typedef(self):
            return self.getTypedRuleContext(OParser.TypedefContext,0)


        def STORABLE(self):
            return self.getToken(OParser.STORABLE, 0)

        def WITH(self):
            return self.getToken(OParser.WITH, 0)

        def INDEX(self):
            return self.getToken(OParser.INDEX, 0)

        def attribute_constraint(self):
            return self.getTypedRuleContext(OParser.Attribute_constraintContext,0)


        def LPAR(self):
            return self.getToken(OParser.LPAR, 0)

        def RPAR(self):
            return self.getToken(OParser.RPAR, 0)

        def variable_identifier_list(self):
            return self.getTypedRuleContext(OParser.Variable_identifier_listContext,0)


        def getRuleIndex(self):
            return OParser.RULE_attribute_declaration

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterAttribute_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitAttribute_declaration(self)




    def attribute_declaration(self):

        localctx = OParser.Attribute_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_attribute_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 444
            _la = self._input.LA(1)
            if _la==OParser.STORABLE:
                self.state = 443
                self.match(OParser.STORABLE)


            self.state = 446
            self.match(OParser.ATTRIBUTE)
            self.state = 447
            localctx.name = self.attribute_identifier()
            self.state = 448
            self.match(OParser.COLON)
            self.state = 449
            localctx.typ = self.typedef(0)
            self.state = 451
            _la = self._input.LA(1)
            if _la==OParser.IN or _la==OParser.MATCHING:
                self.state = 450
                localctx.match = self.attribute_constraint()


            self.state = 461
            _la = self._input.LA(1)
            if _la==OParser.WITH:
                self.state = 453
                self.match(OParser.WITH)
                self.state = 454
                self.match(OParser.INDEX)
                self.state = 459
                _la = self._input.LA(1)
                if _la==OParser.LPAR:
                    self.state = 455
                    self.match(OParser.LPAR)
                    self.state = 456
                    localctx.indices = self.variable_identifier_list()
                    self.state = 457
                    self.match(OParser.RPAR)




            self.state = 463
            self.match(OParser.SEMI)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Concrete_category_declarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # Type_identifierContext
            self.attrs = None # Attribute_identifier_listContext
            self.derived = None # Derived_listContext
            self.methods = None # Category_method_listContext

        def CATEGORY(self):
            return self.getToken(OParser.CATEGORY, 0)

        def type_identifier(self):
            return self.getTypedRuleContext(OParser.Type_identifierContext,0)


        def category_method_list(self):
            return self.getTypedRuleContext(OParser.Category_method_listContext,0)


        def STORABLE(self):
            return self.getToken(OParser.STORABLE, 0)

        def LPAR(self):
            return self.getToken(OParser.LPAR, 0)

        def RPAR(self):
            return self.getToken(OParser.RPAR, 0)

        def EXTENDS(self):
            return self.getToken(OParser.EXTENDS, 0)

        def attribute_identifier_list(self):
            return self.getTypedRuleContext(OParser.Attribute_identifier_listContext,0)


        def derived_list(self):
            return self.getTypedRuleContext(OParser.Derived_listContext,0)


        def getRuleIndex(self):
            return OParser.RULE_concrete_category_declaration

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterConcrete_category_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitConcrete_category_declaration(self)




    def concrete_category_declaration(self):

        localctx = OParser.Concrete_category_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_concrete_category_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 466
            _la = self._input.LA(1)
            if _la==OParser.STORABLE:
                self.state = 465
                self.match(OParser.STORABLE)


            self.state = 468
            self.match(OParser.CATEGORY)
            self.state = 469
            localctx.name = self.type_identifier()
            self.state = 474
            _la = self._input.LA(1)
            if _la==OParser.LPAR:
                self.state = 470
                self.match(OParser.LPAR)
                self.state = 471
                localctx.attrs = self.attribute_identifier_list()
                self.state = 472
                self.match(OParser.RPAR)


            self.state = 478
            _la = self._input.LA(1)
            if _la==OParser.EXTENDS:
                self.state = 476
                self.match(OParser.EXTENDS)
                self.state = 477
                localctx.derived = self.derived_list(0)


            self.state = 480
            localctx.methods = self.category_method_list()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Singleton_category_declarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # Type_identifierContext
            self.attrs = None # Attribute_identifier_listContext
            self.methods = None # Category_method_listContext

        def SINGLETON(self):
            return self.getToken(OParser.SINGLETON, 0)

        def type_identifier(self):
            return self.getTypedRuleContext(OParser.Type_identifierContext,0)


        def category_method_list(self):
            return self.getTypedRuleContext(OParser.Category_method_listContext,0)


        def LPAR(self):
            return self.getToken(OParser.LPAR, 0)

        def RPAR(self):
            return self.getToken(OParser.RPAR, 0)

        def attribute_identifier_list(self):
            return self.getTypedRuleContext(OParser.Attribute_identifier_listContext,0)


        def getRuleIndex(self):
            return OParser.RULE_singleton_category_declaration

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterSingleton_category_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitSingleton_category_declaration(self)




    def singleton_category_declaration(self):

        localctx = OParser.Singleton_category_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_singleton_category_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 482
            self.match(OParser.SINGLETON)
            self.state = 483
            localctx.name = self.type_identifier()
            self.state = 488
            _la = self._input.LA(1)
            if _la==OParser.LPAR:
                self.state = 484
                self.match(OParser.LPAR)
                self.state = 485
                localctx.attrs = self.attribute_identifier_list()
                self.state = 486
                self.match(OParser.RPAR)


            self.state = 490
            localctx.methods = self.category_method_list()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Derived_listContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return OParser.RULE_derived_list

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class DerivedListItemContext(Derived_listContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Derived_listContext)
            super().__init__(parser)
            self.items = None # Derived_listContext
            self.item = None # Type_identifierContext
            self.copyFrom(ctx)

        def COMMA(self):
            return self.getToken(OParser.COMMA, 0)
        def derived_list(self):
            return self.getTypedRuleContext(OParser.Derived_listContext,0)

        def type_identifier(self):
            return self.getTypedRuleContext(OParser.Type_identifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterDerivedListItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitDerivedListItem(self)


    class DerivedListContext(Derived_listContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Derived_listContext)
            super().__init__(parser)
            self.item = None # Type_identifierContext
            self.copyFrom(ctx)

        def type_identifier(self):
            return self.getTypedRuleContext(OParser.Type_identifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterDerivedList(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitDerivedList(self)



    def derived_list(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = OParser.Derived_listContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 14
        self.enterRecursionRule(localctx, 14, self.RULE_derived_list, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            localctx = OParser.DerivedListContext(self, localctx)
            self._ctx = localctx
            _prevctx = localctx

            self.state = 493
            localctx.item = self.type_identifier()
            self._ctx.stop = self._input.LT(-1)
            self.state = 500
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,10,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = OParser.DerivedListItemContext(self, OParser.Derived_listContext(self, _parentctx, _parentState))
                    localctx.items = _prevctx
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_derived_list)
                    self.state = 495
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 496
                    self.match(OParser.COMMA)
                    self.state = 497
                    localctx.item = self.type_identifier() 
                self.state = 502
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,10,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class Category_method_listContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return OParser.RULE_category_method_list

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class EmptyCategoryMethodListContext(Category_method_listContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Category_method_listContext)
            super().__init__(parser)
            self.copyFrom(ctx)

        def SEMI(self):
            return self.getToken(OParser.SEMI, 0)

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterEmptyCategoryMethodList(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitEmptyCategoryMethodList(self)


    class CurlyCategoryMethodListContext(Category_method_listContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Category_method_listContext)
            super().__init__(parser)
            self.items = None # Member_method_declaration_listContext
            self.copyFrom(ctx)

        def LCURL(self):
            return self.getToken(OParser.LCURL, 0)
        def RCURL(self):
            return self.getToken(OParser.RCURL, 0)
        def member_method_declaration_list(self):
            return self.getTypedRuleContext(OParser.Member_method_declaration_listContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterCurlyCategoryMethodList(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitCurlyCategoryMethodList(self)



    def category_method_list(self):

        localctx = OParser.Category_method_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_category_method_list)
        self._la = 0 # Token type
        try:
            self.state = 509
            token = self._input.LA(1)
            if token in [OParser.SEMI]:
                localctx = OParser.EmptyCategoryMethodListContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 503
                self.match(OParser.SEMI)

            elif token in [OParser.LCURL]:
                localctx = OParser.CurlyCategoryMethodListContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 504
                self.match(OParser.LCURL)
                self.state = 506
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << OParser.BOOLEAN) | (1 << OParser.CHARACTER) | (1 << OParser.TEXT) | (1 << OParser.INTEGER) | (1 << OParser.DECIMAL) | (1 << OParser.DATE) | (1 << OParser.TIME) | (1 << OParser.DATETIME) | (1 << OParser.PERIOD) | (1 << OParser.CODE) | (1 << OParser.DOCUMENT) | (1 << OParser.BLOB) | (1 << OParser.IMAGE) | (1 << OParser.UUID) | (1 << OParser.ITERATOR) | (1 << OParser.CURSOR) | (1 << OParser.ABSTRACT))) != 0) or ((((_la - 100)) & ~0x3f) == 0 and ((1 << (_la - 100)) & ((1 << (OParser.GETTER - 100)) | (1 << (OParser.METHOD - 100)) | (1 << (OParser.OPERATOR - 100)) | (1 << (OParser.SETTER - 100)) | (1 << (OParser.TYPE_IDENTIFIER - 100)))) != 0):
                    self.state = 505
                    localctx.items = self.member_method_declaration_list()


                self.state = 508
                self.match(OParser.RCURL)

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Operator_method_declarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.typ = None # TypedefContext
            self.op = None # OperatorContext
            self.arg = None # Operator_argumentContext
            self.stmts = None # Statement_listContext

        def OPERATOR(self):
            return self.getToken(OParser.OPERATOR, 0)

        def LPAR(self):
            return self.getToken(OParser.LPAR, 0)

        def RPAR(self):
            return self.getToken(OParser.RPAR, 0)

        def LCURL(self):
            return self.getToken(OParser.LCURL, 0)

        def RCURL(self):
            return self.getToken(OParser.RCURL, 0)

        def operator(self):
            return self.getTypedRuleContext(OParser.OperatorContext,0)


        def operator_argument(self):
            return self.getTypedRuleContext(OParser.Operator_argumentContext,0)


        def typedef(self):
            return self.getTypedRuleContext(OParser.TypedefContext,0)


        def statement_list(self):
            return self.getTypedRuleContext(OParser.Statement_listContext,0)


        def getRuleIndex(self):
            return OParser.RULE_operator_method_declaration

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterOperator_method_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitOperator_method_declaration(self)




    def operator_method_declaration(self):

        localctx = OParser.Operator_method_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_operator_method_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 512
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << OParser.BOOLEAN) | (1 << OParser.CHARACTER) | (1 << OParser.TEXT) | (1 << OParser.INTEGER) | (1 << OParser.DECIMAL) | (1 << OParser.DATE) | (1 << OParser.TIME) | (1 << OParser.DATETIME) | (1 << OParser.PERIOD) | (1 << OParser.CODE) | (1 << OParser.DOCUMENT) | (1 << OParser.BLOB) | (1 << OParser.IMAGE) | (1 << OParser.UUID) | (1 << OParser.ITERATOR) | (1 << OParser.CURSOR))) != 0) or _la==OParser.TYPE_IDENTIFIER:
                self.state = 511
                localctx.typ = self.typedef(0)


            self.state = 514
            self.match(OParser.OPERATOR)
            self.state = 515
            localctx.op = self.operator()
            self.state = 516
            self.match(OParser.LPAR)
            self.state = 517
            localctx.arg = self.operator_argument()
            self.state = 518
            self.match(OParser.RPAR)
            self.state = 519
            self.match(OParser.LCURL)
            self.state = 521
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << OParser.COMMENT) | (1 << OParser.BOOLEAN) | (1 << OParser.CHARACTER) | (1 << OParser.TEXT) | (1 << OParser.INTEGER) | (1 << OParser.DECIMAL) | (1 << OParser.DATE) | (1 << OParser.TIME) | (1 << OParser.DATETIME) | (1 << OParser.PERIOD) | (1 << OParser.CODE) | (1 << OParser.DOCUMENT) | (1 << OParser.BLOB) | (1 << OParser.IMAGE) | (1 << OParser.UUID) | (1 << OParser.ITERATOR) | (1 << OParser.CURSOR))) != 0) or ((((_la - 84)) & ~0x3f) == 0 and ((1 << (_la - 84)) & ((1 << (OParser.DELETE - 84)) | (1 << (OParser.DO - 84)) | (1 << (OParser.FOR - 84)) | (1 << (OParser.IF - 84)) | (1 << (OParser.METHOD - 84)) | (1 << (OParser.RETURN - 84)) | (1 << (OParser.STORE - 84)) | (1 << (OParser.SWITCH - 84)) | (1 << (OParser.THROW - 84)) | (1 << (OParser.TRY - 84)) | (1 << (OParser.WITH - 84)) | (1 << (OParser.WHILE - 84)))) != 0) or ((((_la - 148)) & ~0x3f) == 0 and ((1 << (_la - 148)) & ((1 << (OParser.WRITE - 148)) | (1 << (OParser.SYMBOL_IDENTIFIER - 148)) | (1 << (OParser.TYPE_IDENTIFIER - 148)) | (1 << (OParser.VARIABLE_IDENTIFIER - 148)))) != 0):
                self.state = 520
                localctx.stmts = self.statement_list()


            self.state = 523
            self.match(OParser.RCURL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Setter_method_declarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # Variable_identifierContext
            self.stmts = None # Statement_listContext

        def SETTER(self):
            return self.getToken(OParser.SETTER, 0)

        def LCURL(self):
            return self.getToken(OParser.LCURL, 0)

        def RCURL(self):
            return self.getToken(OParser.RCURL, 0)

        def variable_identifier(self):
            return self.getTypedRuleContext(OParser.Variable_identifierContext,0)


        def statement_list(self):
            return self.getTypedRuleContext(OParser.Statement_listContext,0)


        def getRuleIndex(self):
            return OParser.RULE_setter_method_declaration

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterSetter_method_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitSetter_method_declaration(self)




    def setter_method_declaration(self):

        localctx = OParser.Setter_method_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_setter_method_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 525
            self.match(OParser.SETTER)
            self.state = 526
            localctx.name = self.variable_identifier()
            self.state = 527
            self.match(OParser.LCURL)
            self.state = 529
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << OParser.COMMENT) | (1 << OParser.BOOLEAN) | (1 << OParser.CHARACTER) | (1 << OParser.TEXT) | (1 << OParser.INTEGER) | (1 << OParser.DECIMAL) | (1 << OParser.DATE) | (1 << OParser.TIME) | (1 << OParser.DATETIME) | (1 << OParser.PERIOD) | (1 << OParser.CODE) | (1 << OParser.DOCUMENT) | (1 << OParser.BLOB) | (1 << OParser.IMAGE) | (1 << OParser.UUID) | (1 << OParser.ITERATOR) | (1 << OParser.CURSOR))) != 0) or ((((_la - 84)) & ~0x3f) == 0 and ((1 << (_la - 84)) & ((1 << (OParser.DELETE - 84)) | (1 << (OParser.DO - 84)) | (1 << (OParser.FOR - 84)) | (1 << (OParser.IF - 84)) | (1 << (OParser.METHOD - 84)) | (1 << (OParser.RETURN - 84)) | (1 << (OParser.STORE - 84)) | (1 << (OParser.SWITCH - 84)) | (1 << (OParser.THROW - 84)) | (1 << (OParser.TRY - 84)) | (1 << (OParser.WITH - 84)) | (1 << (OParser.WHILE - 84)))) != 0) or ((((_la - 148)) & ~0x3f) == 0 and ((1 << (_la - 148)) & ((1 << (OParser.WRITE - 148)) | (1 << (OParser.SYMBOL_IDENTIFIER - 148)) | (1 << (OParser.TYPE_IDENTIFIER - 148)) | (1 << (OParser.VARIABLE_IDENTIFIER - 148)))) != 0):
                self.state = 528
                localctx.stmts = self.statement_list()


            self.state = 531
            self.match(OParser.RCURL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Native_setter_declarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # Variable_identifierContext
            self.stmts = None # Native_statement_listContext

        def SETTER(self):
            return self.getToken(OParser.SETTER, 0)

        def LCURL(self):
            return self.getToken(OParser.LCURL, 0)

        def RCURL(self):
            return self.getToken(OParser.RCURL, 0)

        def variable_identifier(self):
            return self.getTypedRuleContext(OParser.Variable_identifierContext,0)


        def NATIVE(self):
            return self.getToken(OParser.NATIVE, 0)

        def native_statement_list(self):
            return self.getTypedRuleContext(OParser.Native_statement_listContext,0)


        def getRuleIndex(self):
            return OParser.RULE_native_setter_declaration

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterNative_setter_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitNative_setter_declaration(self)




    def native_setter_declaration(self):

        localctx = OParser.Native_setter_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_native_setter_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 534
            _la = self._input.LA(1)
            if _la==OParser.NATIVE:
                self.state = 533
                self.match(OParser.NATIVE)


            self.state = 536
            self.match(OParser.SETTER)
            self.state = 537
            localctx.name = self.variable_identifier()
            self.state = 538
            self.match(OParser.LCURL)
            self.state = 540
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << OParser.JAVA) | (1 << OParser.CSHARP) | (1 << OParser.PYTHON2) | (1 << OParser.PYTHON3) | (1 << OParser.JAVASCRIPT))) != 0):
                self.state = 539
                localctx.stmts = self.native_statement_list()


            self.state = 542
            self.match(OParser.RCURL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Getter_method_declarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # Variable_identifierContext
            self.stmts = None # Statement_listContext

        def GETTER(self):
            return self.getToken(OParser.GETTER, 0)

        def LCURL(self):
            return self.getToken(OParser.LCURL, 0)

        def RCURL(self):
            return self.getToken(OParser.RCURL, 0)

        def variable_identifier(self):
            return self.getTypedRuleContext(OParser.Variable_identifierContext,0)


        def statement_list(self):
            return self.getTypedRuleContext(OParser.Statement_listContext,0)


        def getRuleIndex(self):
            return OParser.RULE_getter_method_declaration

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterGetter_method_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitGetter_method_declaration(self)




    def getter_method_declaration(self):

        localctx = OParser.Getter_method_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_getter_method_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 544
            self.match(OParser.GETTER)
            self.state = 545
            localctx.name = self.variable_identifier()
            self.state = 546
            self.match(OParser.LCURL)
            self.state = 548
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << OParser.COMMENT) | (1 << OParser.BOOLEAN) | (1 << OParser.CHARACTER) | (1 << OParser.TEXT) | (1 << OParser.INTEGER) | (1 << OParser.DECIMAL) | (1 << OParser.DATE) | (1 << OParser.TIME) | (1 << OParser.DATETIME) | (1 << OParser.PERIOD) | (1 << OParser.CODE) | (1 << OParser.DOCUMENT) | (1 << OParser.BLOB) | (1 << OParser.IMAGE) | (1 << OParser.UUID) | (1 << OParser.ITERATOR) | (1 << OParser.CURSOR))) != 0) or ((((_la - 84)) & ~0x3f) == 0 and ((1 << (_la - 84)) & ((1 << (OParser.DELETE - 84)) | (1 << (OParser.DO - 84)) | (1 << (OParser.FOR - 84)) | (1 << (OParser.IF - 84)) | (1 << (OParser.METHOD - 84)) | (1 << (OParser.RETURN - 84)) | (1 << (OParser.STORE - 84)) | (1 << (OParser.SWITCH - 84)) | (1 << (OParser.THROW - 84)) | (1 << (OParser.TRY - 84)) | (1 << (OParser.WITH - 84)) | (1 << (OParser.WHILE - 84)))) != 0) or ((((_la - 148)) & ~0x3f) == 0 and ((1 << (_la - 148)) & ((1 << (OParser.WRITE - 148)) | (1 << (OParser.SYMBOL_IDENTIFIER - 148)) | (1 << (OParser.TYPE_IDENTIFIER - 148)) | (1 << (OParser.VARIABLE_IDENTIFIER - 148)))) != 0):
                self.state = 547
                localctx.stmts = self.statement_list()


            self.state = 550
            self.match(OParser.RCURL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Native_getter_declarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # Variable_identifierContext
            self.stmts = None # Native_statement_listContext

        def GETTER(self):
            return self.getToken(OParser.GETTER, 0)

        def LCURL(self):
            return self.getToken(OParser.LCURL, 0)

        def RCURL(self):
            return self.getToken(OParser.RCURL, 0)

        def variable_identifier(self):
            return self.getTypedRuleContext(OParser.Variable_identifierContext,0)


        def NATIVE(self):
            return self.getToken(OParser.NATIVE, 0)

        def native_statement_list(self):
            return self.getTypedRuleContext(OParser.Native_statement_listContext,0)


        def getRuleIndex(self):
            return OParser.RULE_native_getter_declaration

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterNative_getter_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitNative_getter_declaration(self)




    def native_getter_declaration(self):

        localctx = OParser.Native_getter_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_native_getter_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 553
            _la = self._input.LA(1)
            if _la==OParser.NATIVE:
                self.state = 552
                self.match(OParser.NATIVE)


            self.state = 555
            self.match(OParser.GETTER)
            self.state = 556
            localctx.name = self.variable_identifier()
            self.state = 557
            self.match(OParser.LCURL)
            self.state = 559
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << OParser.JAVA) | (1 << OParser.CSHARP) | (1 << OParser.PYTHON2) | (1 << OParser.PYTHON3) | (1 << OParser.JAVASCRIPT))) != 0):
                self.state = 558
                localctx.stmts = self.native_statement_list()


            self.state = 561
            self.match(OParser.RCURL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Native_resource_declarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # Type_identifierContext
            self.attrs = None # Attribute_identifier_listContext
            self.bindings = None # Native_category_bindingsContext
            self.methods = None # Native_member_method_declaration_listContext

        def NATIVE(self):
            return self.getToken(OParser.NATIVE, 0)

        def RESOURCE(self):
            return self.getToken(OParser.RESOURCE, 0)

        def LCURL(self):
            return self.getToken(OParser.LCURL, 0)

        def RCURL(self):
            return self.getToken(OParser.RCURL, 0)

        def type_identifier(self):
            return self.getTypedRuleContext(OParser.Type_identifierContext,0)


        def native_category_bindings(self):
            return self.getTypedRuleContext(OParser.Native_category_bindingsContext,0)


        def LPAR(self):
            return self.getToken(OParser.LPAR, 0)

        def RPAR(self):
            return self.getToken(OParser.RPAR, 0)

        def attribute_identifier_list(self):
            return self.getTypedRuleContext(OParser.Attribute_identifier_listContext,0)


        def native_member_method_declaration_list(self):
            return self.getTypedRuleContext(OParser.Native_member_method_declaration_listContext,0)


        def getRuleIndex(self):
            return OParser.RULE_native_resource_declaration

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterNative_resource_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitNative_resource_declaration(self)




    def native_resource_declaration(self):

        localctx = OParser.Native_resource_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_native_resource_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 563
            self.match(OParser.NATIVE)
            self.state = 564
            self.match(OParser.RESOURCE)
            self.state = 565
            localctx.name = self.type_identifier()
            self.state = 570
            _la = self._input.LA(1)
            if _la==OParser.LPAR:
                self.state = 566
                self.match(OParser.LPAR)
                self.state = 567
                localctx.attrs = self.attribute_identifier_list()
                self.state = 568
                self.match(OParser.RPAR)


            self.state = 572
            self.match(OParser.LCURL)
            self.state = 573
            localctx.bindings = self.native_category_bindings()
            self.state = 575
            _la = self._input.LA(1)
            if ((((_la - 46)) & ~0x3f) == 0 and ((1 << (_la - 46)) & ((1 << (OParser.BOOLEAN - 46)) | (1 << (OParser.CHARACTER - 46)) | (1 << (OParser.TEXT - 46)) | (1 << (OParser.INTEGER - 46)) | (1 << (OParser.DECIMAL - 46)) | (1 << (OParser.DATE - 46)) | (1 << (OParser.TIME - 46)) | (1 << (OParser.DATETIME - 46)) | (1 << (OParser.PERIOD - 46)) | (1 << (OParser.CODE - 46)) | (1 << (OParser.DOCUMENT - 46)) | (1 << (OParser.BLOB - 46)) | (1 << (OParser.IMAGE - 46)) | (1 << (OParser.UUID - 46)) | (1 << (OParser.ITERATOR - 46)) | (1 << (OParser.CURSOR - 46)) | (1 << (OParser.ANY - 46)) | (1 << (OParser.GETTER - 46)) | (1 << (OParser.METHOD - 46)))) != 0) or ((((_la - 111)) & ~0x3f) == 0 and ((1 << (_la - 111)) & ((1 << (OParser.NATIVE - 111)) | (1 << (OParser.SETTER - 111)) | (1 << (OParser.TYPE_IDENTIFIER - 111)))) != 0):
                self.state = 574
                localctx.methods = self.native_member_method_declaration_list()


            self.state = 577
            self.match(OParser.RCURL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Native_category_declarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # Type_identifierContext
            self.attrs = None # Attribute_identifier_listContext
            self.bindings = None # Native_category_bindingsContext
            self.methods = None # Native_member_method_declaration_listContext

        def NATIVE(self):
            return self.getToken(OParser.NATIVE, 0)

        def CATEGORY(self):
            return self.getToken(OParser.CATEGORY, 0)

        def LCURL(self):
            return self.getToken(OParser.LCURL, 0)

        def RCURL(self):
            return self.getToken(OParser.RCURL, 0)

        def type_identifier(self):
            return self.getTypedRuleContext(OParser.Type_identifierContext,0)


        def native_category_bindings(self):
            return self.getTypedRuleContext(OParser.Native_category_bindingsContext,0)


        def STORABLE(self):
            return self.getToken(OParser.STORABLE, 0)

        def LPAR(self):
            return self.getToken(OParser.LPAR, 0)

        def RPAR(self):
            return self.getToken(OParser.RPAR, 0)

        def attribute_identifier_list(self):
            return self.getTypedRuleContext(OParser.Attribute_identifier_listContext,0)


        def native_member_method_declaration_list(self):
            return self.getTypedRuleContext(OParser.Native_member_method_declaration_listContext,0)


        def getRuleIndex(self):
            return OParser.RULE_native_category_declaration

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterNative_category_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitNative_category_declaration(self)




    def native_category_declaration(self):

        localctx = OParser.Native_category_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_native_category_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 580
            _la = self._input.LA(1)
            if _la==OParser.STORABLE:
                self.state = 579
                self.match(OParser.STORABLE)


            self.state = 582
            self.match(OParser.NATIVE)
            self.state = 583
            self.match(OParser.CATEGORY)
            self.state = 584
            localctx.name = self.type_identifier()
            self.state = 589
            _la = self._input.LA(1)
            if _la==OParser.LPAR:
                self.state = 585
                self.match(OParser.LPAR)
                self.state = 586
                localctx.attrs = self.attribute_identifier_list()
                self.state = 587
                self.match(OParser.RPAR)


            self.state = 591
            self.match(OParser.LCURL)
            self.state = 592
            localctx.bindings = self.native_category_bindings()
            self.state = 594
            _la = self._input.LA(1)
            if ((((_la - 46)) & ~0x3f) == 0 and ((1 << (_la - 46)) & ((1 << (OParser.BOOLEAN - 46)) | (1 << (OParser.CHARACTER - 46)) | (1 << (OParser.TEXT - 46)) | (1 << (OParser.INTEGER - 46)) | (1 << (OParser.DECIMAL - 46)) | (1 << (OParser.DATE - 46)) | (1 << (OParser.TIME - 46)) | (1 << (OParser.DATETIME - 46)) | (1 << (OParser.PERIOD - 46)) | (1 << (OParser.CODE - 46)) | (1 << (OParser.DOCUMENT - 46)) | (1 << (OParser.BLOB - 46)) | (1 << (OParser.IMAGE - 46)) | (1 << (OParser.UUID - 46)) | (1 << (OParser.ITERATOR - 46)) | (1 << (OParser.CURSOR - 46)) | (1 << (OParser.ANY - 46)) | (1 << (OParser.GETTER - 46)) | (1 << (OParser.METHOD - 46)))) != 0) or ((((_la - 111)) & ~0x3f) == 0 and ((1 << (_la - 111)) & ((1 << (OParser.NATIVE - 111)) | (1 << (OParser.SETTER - 111)) | (1 << (OParser.TYPE_IDENTIFIER - 111)))) != 0):
                self.state = 593
                localctx.methods = self.native_member_method_declaration_list()


            self.state = 596
            self.match(OParser.RCURL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Native_category_bindingsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.items = None # Native_category_binding_listContext

        def CATEGORY(self):
            return self.getToken(OParser.CATEGORY, 0)

        def BINDINGS(self):
            return self.getToken(OParser.BINDINGS, 0)

        def LCURL(self):
            return self.getToken(OParser.LCURL, 0)

        def RCURL(self):
            return self.getToken(OParser.RCURL, 0)

        def native_category_binding_list(self):
            return self.getTypedRuleContext(OParser.Native_category_binding_listContext,0)


        def getRuleIndex(self):
            return OParser.RULE_native_category_bindings

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterNative_category_bindings(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitNative_category_bindings(self)




    def native_category_bindings(self):

        localctx = OParser.Native_category_bindingsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_native_category_bindings)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 598
            self.match(OParser.CATEGORY)
            self.state = 599
            self.match(OParser.BINDINGS)
            self.state = 600
            self.match(OParser.LCURL)
            self.state = 601
            localctx.items = self.native_category_binding_list(0)
            self.state = 602
            self.match(OParser.RCURL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Native_category_binding_listContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return OParser.RULE_native_category_binding_list

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class NativeCategoryBindingListItemContext(Native_category_binding_listContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Native_category_binding_listContext)
            super().__init__(parser)
            self.items = None # Native_category_binding_listContext
            self.item = None # Native_category_bindingContext
            self.copyFrom(ctx)

        def SEMI(self):
            return self.getToken(OParser.SEMI, 0)
        def native_category_binding_list(self):
            return self.getTypedRuleContext(OParser.Native_category_binding_listContext,0)

        def native_category_binding(self):
            return self.getTypedRuleContext(OParser.Native_category_bindingContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterNativeCategoryBindingListItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitNativeCategoryBindingListItem(self)


    class NativeCategoryBindingListContext(Native_category_binding_listContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Native_category_binding_listContext)
            super().__init__(parser)
            self.item = None # Native_category_bindingContext
            self.copyFrom(ctx)

        def SEMI(self):
            return self.getToken(OParser.SEMI, 0)
        def native_category_binding(self):
            return self.getTypedRuleContext(OParser.Native_category_bindingContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterNativeCategoryBindingList(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitNativeCategoryBindingList(self)



    def native_category_binding_list(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = OParser.Native_category_binding_listContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 34
        self.enterRecursionRule(localctx, 34, self.RULE_native_category_binding_list, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            localctx = OParser.NativeCategoryBindingListContext(self, localctx)
            self._ctx = localctx
            _prevctx = localctx

            self.state = 605
            localctx.item = self.native_category_binding()
            self.state = 606
            self.match(OParser.SEMI)
            self._ctx.stop = self._input.LT(-1)
            self.state = 614
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,26,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = OParser.NativeCategoryBindingListItemContext(self, OParser.Native_category_binding_listContext(self, _parentctx, _parentState))
                    localctx.items = _prevctx
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_native_category_binding_list)
                    self.state = 608
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 609
                    localctx.item = self.native_category_binding()
                    self.state = 610
                    self.match(OParser.SEMI) 
                self.state = 616
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,26,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class Abstract_method_declarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.typ = None # TypedefContext
            self.name = None # Method_identifierContext
            self.args = None # Argument_listContext

        def ABSTRACT(self):
            return self.getToken(OParser.ABSTRACT, 0)

        def METHOD(self):
            return self.getToken(OParser.METHOD, 0)

        def LPAR(self):
            return self.getToken(OParser.LPAR, 0)

        def RPAR(self):
            return self.getToken(OParser.RPAR, 0)

        def SEMI(self):
            return self.getToken(OParser.SEMI, 0)

        def method_identifier(self):
            return self.getTypedRuleContext(OParser.Method_identifierContext,0)


        def typedef(self):
            return self.getTypedRuleContext(OParser.TypedefContext,0)


        def argument_list(self):
            return self.getTypedRuleContext(OParser.Argument_listContext,0)


        def getRuleIndex(self):
            return OParser.RULE_abstract_method_declaration

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterAbstract_method_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitAbstract_method_declaration(self)




    def abstract_method_declaration(self):

        localctx = OParser.Abstract_method_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_abstract_method_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 617
            self.match(OParser.ABSTRACT)
            self.state = 619
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << OParser.BOOLEAN) | (1 << OParser.CHARACTER) | (1 << OParser.TEXT) | (1 << OParser.INTEGER) | (1 << OParser.DECIMAL) | (1 << OParser.DATE) | (1 << OParser.TIME) | (1 << OParser.DATETIME) | (1 << OParser.PERIOD) | (1 << OParser.CODE) | (1 << OParser.DOCUMENT) | (1 << OParser.BLOB) | (1 << OParser.IMAGE) | (1 << OParser.UUID) | (1 << OParser.ITERATOR) | (1 << OParser.CURSOR))) != 0) or _la==OParser.TYPE_IDENTIFIER:
                self.state = 618
                localctx.typ = self.typedef(0)


            self.state = 621
            self.match(OParser.METHOD)
            self.state = 622
            localctx.name = self.method_identifier()
            self.state = 623
            self.match(OParser.LPAR)
            self.state = 625
            _la = self._input.LA(1)
            if ((((_la - 46)) & ~0x3f) == 0 and ((1 << (_la - 46)) & ((1 << (OParser.BOOLEAN - 46)) | (1 << (OParser.CHARACTER - 46)) | (1 << (OParser.TEXT - 46)) | (1 << (OParser.INTEGER - 46)) | (1 << (OParser.DECIMAL - 46)) | (1 << (OParser.DATE - 46)) | (1 << (OParser.TIME - 46)) | (1 << (OParser.DATETIME - 46)) | (1 << (OParser.PERIOD - 46)) | (1 << (OParser.CODE - 46)) | (1 << (OParser.DOCUMENT - 46)) | (1 << (OParser.BLOB - 46)) | (1 << (OParser.IMAGE - 46)) | (1 << (OParser.UUID - 46)) | (1 << (OParser.ITERATOR - 46)) | (1 << (OParser.CURSOR - 46)) | (1 << (OParser.ANY - 46)))) != 0) or ((((_la - 110)) & ~0x3f) == 0 and ((1 << (_la - 110)) & ((1 << (OParser.MUTABLE - 110)) | (1 << (OParser.TYPE_IDENTIFIER - 110)) | (1 << (OParser.VARIABLE_IDENTIFIER - 110)))) != 0):
                self.state = 624
                localctx.args = self.argument_list()


            self.state = 627
            self.match(OParser.RPAR)
            self.state = 628
            self.match(OParser.SEMI)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Concrete_method_declarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.typ = None # TypedefContext
            self.name = None # Method_identifierContext
            self.args = None # Argument_listContext
            self.stmts = None # Statement_listContext

        def METHOD(self):
            return self.getToken(OParser.METHOD, 0)

        def LPAR(self):
            return self.getToken(OParser.LPAR, 0)

        def RPAR(self):
            return self.getToken(OParser.RPAR, 0)

        def LCURL(self):
            return self.getToken(OParser.LCURL, 0)

        def RCURL(self):
            return self.getToken(OParser.RCURL, 0)

        def method_identifier(self):
            return self.getTypedRuleContext(OParser.Method_identifierContext,0)


        def typedef(self):
            return self.getTypedRuleContext(OParser.TypedefContext,0)


        def argument_list(self):
            return self.getTypedRuleContext(OParser.Argument_listContext,0)


        def statement_list(self):
            return self.getTypedRuleContext(OParser.Statement_listContext,0)


        def getRuleIndex(self):
            return OParser.RULE_concrete_method_declaration

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterConcrete_method_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitConcrete_method_declaration(self)




    def concrete_method_declaration(self):

        localctx = OParser.Concrete_method_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_concrete_method_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 631
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << OParser.BOOLEAN) | (1 << OParser.CHARACTER) | (1 << OParser.TEXT) | (1 << OParser.INTEGER) | (1 << OParser.DECIMAL) | (1 << OParser.DATE) | (1 << OParser.TIME) | (1 << OParser.DATETIME) | (1 << OParser.PERIOD) | (1 << OParser.CODE) | (1 << OParser.DOCUMENT) | (1 << OParser.BLOB) | (1 << OParser.IMAGE) | (1 << OParser.UUID) | (1 << OParser.ITERATOR) | (1 << OParser.CURSOR))) != 0) or _la==OParser.TYPE_IDENTIFIER:
                self.state = 630
                localctx.typ = self.typedef(0)


            self.state = 633
            self.match(OParser.METHOD)
            self.state = 634
            localctx.name = self.method_identifier()
            self.state = 635
            self.match(OParser.LPAR)
            self.state = 637
            _la = self._input.LA(1)
            if ((((_la - 46)) & ~0x3f) == 0 and ((1 << (_la - 46)) & ((1 << (OParser.BOOLEAN - 46)) | (1 << (OParser.CHARACTER - 46)) | (1 << (OParser.TEXT - 46)) | (1 << (OParser.INTEGER - 46)) | (1 << (OParser.DECIMAL - 46)) | (1 << (OParser.DATE - 46)) | (1 << (OParser.TIME - 46)) | (1 << (OParser.DATETIME - 46)) | (1 << (OParser.PERIOD - 46)) | (1 << (OParser.CODE - 46)) | (1 << (OParser.DOCUMENT - 46)) | (1 << (OParser.BLOB - 46)) | (1 << (OParser.IMAGE - 46)) | (1 << (OParser.UUID - 46)) | (1 << (OParser.ITERATOR - 46)) | (1 << (OParser.CURSOR - 46)) | (1 << (OParser.ANY - 46)))) != 0) or ((((_la - 110)) & ~0x3f) == 0 and ((1 << (_la - 110)) & ((1 << (OParser.MUTABLE - 110)) | (1 << (OParser.TYPE_IDENTIFIER - 110)) | (1 << (OParser.VARIABLE_IDENTIFIER - 110)))) != 0):
                self.state = 636
                localctx.args = self.argument_list()


            self.state = 639
            self.match(OParser.RPAR)
            self.state = 640
            self.match(OParser.LCURL)
            self.state = 642
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << OParser.COMMENT) | (1 << OParser.BOOLEAN) | (1 << OParser.CHARACTER) | (1 << OParser.TEXT) | (1 << OParser.INTEGER) | (1 << OParser.DECIMAL) | (1 << OParser.DATE) | (1 << OParser.TIME) | (1 << OParser.DATETIME) | (1 << OParser.PERIOD) | (1 << OParser.CODE) | (1 << OParser.DOCUMENT) | (1 << OParser.BLOB) | (1 << OParser.IMAGE) | (1 << OParser.UUID) | (1 << OParser.ITERATOR) | (1 << OParser.CURSOR))) != 0) or ((((_la - 84)) & ~0x3f) == 0 and ((1 << (_la - 84)) & ((1 << (OParser.DELETE - 84)) | (1 << (OParser.DO - 84)) | (1 << (OParser.FOR - 84)) | (1 << (OParser.IF - 84)) | (1 << (OParser.METHOD - 84)) | (1 << (OParser.RETURN - 84)) | (1 << (OParser.STORE - 84)) | (1 << (OParser.SWITCH - 84)) | (1 << (OParser.THROW - 84)) | (1 << (OParser.TRY - 84)) | (1 << (OParser.WITH - 84)) | (1 << (OParser.WHILE - 84)))) != 0) or ((((_la - 148)) & ~0x3f) == 0 and ((1 << (_la - 148)) & ((1 << (OParser.WRITE - 148)) | (1 << (OParser.SYMBOL_IDENTIFIER - 148)) | (1 << (OParser.TYPE_IDENTIFIER - 148)) | (1 << (OParser.VARIABLE_IDENTIFIER - 148)))) != 0):
                self.state = 641
                localctx.stmts = self.statement_list()


            self.state = 644
            self.match(OParser.RCURL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Native_method_declarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.typ = None # Category_or_any_typeContext
            self.name = None # Method_identifierContext
            self.args = None # Argument_listContext
            self.stmts = None # Native_statement_listContext

        def METHOD(self):
            return self.getToken(OParser.METHOD, 0)

        def LPAR(self):
            return self.getToken(OParser.LPAR, 0)

        def RPAR(self):
            return self.getToken(OParser.RPAR, 0)

        def LCURL(self):
            return self.getToken(OParser.LCURL, 0)

        def RCURL(self):
            return self.getToken(OParser.RCURL, 0)

        def method_identifier(self):
            return self.getTypedRuleContext(OParser.Method_identifierContext,0)


        def native_statement_list(self):
            return self.getTypedRuleContext(OParser.Native_statement_listContext,0)


        def NATIVE(self):
            return self.getToken(OParser.NATIVE, 0)

        def category_or_any_type(self):
            return self.getTypedRuleContext(OParser.Category_or_any_typeContext,0)


        def argument_list(self):
            return self.getTypedRuleContext(OParser.Argument_listContext,0)


        def getRuleIndex(self):
            return OParser.RULE_native_method_declaration

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterNative_method_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitNative_method_declaration(self)




    def native_method_declaration(self):

        localctx = OParser.Native_method_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_native_method_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 647
            _la = self._input.LA(1)
            if ((((_la - 46)) & ~0x3f) == 0 and ((1 << (_la - 46)) & ((1 << (OParser.BOOLEAN - 46)) | (1 << (OParser.CHARACTER - 46)) | (1 << (OParser.TEXT - 46)) | (1 << (OParser.INTEGER - 46)) | (1 << (OParser.DECIMAL - 46)) | (1 << (OParser.DATE - 46)) | (1 << (OParser.TIME - 46)) | (1 << (OParser.DATETIME - 46)) | (1 << (OParser.PERIOD - 46)) | (1 << (OParser.CODE - 46)) | (1 << (OParser.DOCUMENT - 46)) | (1 << (OParser.BLOB - 46)) | (1 << (OParser.IMAGE - 46)) | (1 << (OParser.UUID - 46)) | (1 << (OParser.ITERATOR - 46)) | (1 << (OParser.CURSOR - 46)) | (1 << (OParser.ANY - 46)))) != 0) or _la==OParser.TYPE_IDENTIFIER:
                self.state = 646
                localctx.typ = self.category_or_any_type()


            self.state = 650
            _la = self._input.LA(1)
            if _la==OParser.NATIVE:
                self.state = 649
                self.match(OParser.NATIVE)


            self.state = 652
            self.match(OParser.METHOD)
            self.state = 653
            localctx.name = self.method_identifier()
            self.state = 654
            self.match(OParser.LPAR)
            self.state = 656
            _la = self._input.LA(1)
            if ((((_la - 46)) & ~0x3f) == 0 and ((1 << (_la - 46)) & ((1 << (OParser.BOOLEAN - 46)) | (1 << (OParser.CHARACTER - 46)) | (1 << (OParser.TEXT - 46)) | (1 << (OParser.INTEGER - 46)) | (1 << (OParser.DECIMAL - 46)) | (1 << (OParser.DATE - 46)) | (1 << (OParser.TIME - 46)) | (1 << (OParser.DATETIME - 46)) | (1 << (OParser.PERIOD - 46)) | (1 << (OParser.CODE - 46)) | (1 << (OParser.DOCUMENT - 46)) | (1 << (OParser.BLOB - 46)) | (1 << (OParser.IMAGE - 46)) | (1 << (OParser.UUID - 46)) | (1 << (OParser.ITERATOR - 46)) | (1 << (OParser.CURSOR - 46)) | (1 << (OParser.ANY - 46)))) != 0) or ((((_la - 110)) & ~0x3f) == 0 and ((1 << (_la - 110)) & ((1 << (OParser.MUTABLE - 110)) | (1 << (OParser.TYPE_IDENTIFIER - 110)) | (1 << (OParser.VARIABLE_IDENTIFIER - 110)))) != 0):
                self.state = 655
                localctx.args = self.argument_list()


            self.state = 658
            self.match(OParser.RPAR)
            self.state = 659
            self.match(OParser.LCURL)
            self.state = 660
            localctx.stmts = self.native_statement_list()
            self.state = 661
            self.match(OParser.RCURL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Test_method_declarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # Token
            self.stmts = None # Statement_listContext
            self.exps = None # Assertion_listContext
            self.error = None # Symbol_identifierContext

        def TEST(self):
            return self.getToken(OParser.TEST, 0)

        def METHOD(self):
            return self.getToken(OParser.METHOD, 0)

        def LPAR(self):
            return self.getToken(OParser.LPAR, 0)

        def RPAR(self):
            return self.getToken(OParser.RPAR, 0)

        def LCURL(self, i:int=None):
            if i is None:
                return self.getTokens(OParser.LCURL)
            else:
                return self.getToken(OParser.LCURL, i)

        def RCURL(self, i:int=None):
            if i is None:
                return self.getTokens(OParser.RCURL)
            else:
                return self.getToken(OParser.RCURL, i)

        def VERIFYING(self):
            return self.getToken(OParser.VERIFYING, 0)

        def TEXT_LITERAL(self):
            return self.getToken(OParser.TEXT_LITERAL, 0)

        def statement_list(self):
            return self.getTypedRuleContext(OParser.Statement_listContext,0)


        def SEMI(self):
            return self.getToken(OParser.SEMI, 0)

        def assertion_list(self):
            return self.getTypedRuleContext(OParser.Assertion_listContext,0)


        def symbol_identifier(self):
            return self.getTypedRuleContext(OParser.Symbol_identifierContext,0)


        def getRuleIndex(self):
            return OParser.RULE_test_method_declaration

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterTest_method_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitTest_method_declaration(self)




    def test_method_declaration(self):

        localctx = OParser.Test_method_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_test_method_declaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 663
            self.match(OParser.TEST)
            self.state = 664
            self.match(OParser.METHOD)
            self.state = 665
            localctx.name = self.match(OParser.TEXT_LITERAL)
            self.state = 666
            self.match(OParser.LPAR)
            self.state = 667
            self.match(OParser.RPAR)
            self.state = 668
            self.match(OParser.LCURL)
            self.state = 669
            localctx.stmts = self.statement_list()
            self.state = 670
            self.match(OParser.RCURL)
            self.state = 671
            self.match(OParser.VERIFYING)
            self.state = 679
            token = self._input.LA(1)
            if token in [OParser.LCURL]:
                self.state = 672
                self.match(OParser.LCURL)
                self.state = 673
                localctx.exps = self.assertion_list()
                self.state = 674
                self.match(OParser.RCURL)

            elif token in [OParser.SYMBOL_IDENTIFIER]:
                self.state = 676
                localctx.error = self.symbol_identifier()
                self.state = 677
                self.match(OParser.SEMI)

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AssertionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.exp = None # ExpressionContext

        def SEMI(self):
            return self.getToken(OParser.SEMI, 0)

        def expression(self):
            return self.getTypedRuleContext(OParser.ExpressionContext,0)


        def getRuleIndex(self):
            return OParser.RULE_assertion

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterAssertion(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitAssertion(self)




    def assertion(self):

        localctx = OParser.AssertionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_assertion)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 681
            localctx.exp = self.expression(0)
            self.state = 682
            self.match(OParser.SEMI)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Typed_argumentContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.typ = None # Category_or_any_typeContext
            self.attrs = None # Attribute_identifier_listContext
            self.name = None # Variable_identifierContext
            self.value = None # Literal_expressionContext

        def category_or_any_type(self):
            return self.getTypedRuleContext(OParser.Category_or_any_typeContext,0)


        def variable_identifier(self):
            return self.getTypedRuleContext(OParser.Variable_identifierContext,0)


        def LPAR(self):
            return self.getToken(OParser.LPAR, 0)

        def RPAR(self):
            return self.getToken(OParser.RPAR, 0)

        def EQ(self):
            return self.getToken(OParser.EQ, 0)

        def attribute_identifier_list(self):
            return self.getTypedRuleContext(OParser.Attribute_identifier_listContext,0)


        def literal_expression(self):
            return self.getTypedRuleContext(OParser.Literal_expressionContext,0)


        def getRuleIndex(self):
            return OParser.RULE_typed_argument

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterTyped_argument(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitTyped_argument(self)




    def typed_argument(self):

        localctx = OParser.Typed_argumentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_typed_argument)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 684
            localctx.typ = self.category_or_any_type()
            self.state = 689
            _la = self._input.LA(1)
            if _la==OParser.LPAR:
                self.state = 685
                self.match(OParser.LPAR)
                self.state = 686
                localctx.attrs = self.attribute_identifier_list()
                self.state = 687
                self.match(OParser.RPAR)


            self.state = 691
            localctx.name = self.variable_identifier()
            self.state = 694
            _la = self._input.LA(1)
            if _la==OParser.EQ:
                self.state = 692
                self.match(OParser.EQ)
                self.state = 693
                localctx.value = self.literal_expression()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Statement_or_listContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return OParser.RULE_statement_or_list

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class CurlyStatementListContext(Statement_or_listContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Statement_or_listContext)
            super().__init__(parser)
            self.items = None # Statement_listContext
            self.copyFrom(ctx)

        def LCURL(self):
            return self.getToken(OParser.LCURL, 0)
        def RCURL(self):
            return self.getToken(OParser.RCURL, 0)
        def statement_list(self):
            return self.getTypedRuleContext(OParser.Statement_listContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterCurlyStatementList(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitCurlyStatementList(self)


    class SingleStatementContext(Statement_or_listContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Statement_or_listContext)
            super().__init__(parser)
            self.stmt = None # StatementContext
            self.copyFrom(ctx)

        def statement(self):
            return self.getTypedRuleContext(OParser.StatementContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterSingleStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitSingleStatement(self)



    def statement_or_list(self):

        localctx = OParser.Statement_or_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_statement_or_list)
        try:
            self.state = 703
            token = self._input.LA(1)
            if token in [OParser.COMMENT, OParser.BOOLEAN, OParser.CHARACTER, OParser.TEXT, OParser.INTEGER, OParser.DECIMAL, OParser.DATE, OParser.TIME, OParser.DATETIME, OParser.PERIOD, OParser.CODE, OParser.DOCUMENT, OParser.BLOB, OParser.IMAGE, OParser.UUID, OParser.ITERATOR, OParser.CURSOR, OParser.DELETE, OParser.DO, OParser.FOR, OParser.IF, OParser.METHOD, OParser.RETURN, OParser.STORE, OParser.SWITCH, OParser.THROW, OParser.TRY, OParser.WITH, OParser.WHILE, OParser.WRITE, OParser.SYMBOL_IDENTIFIER, OParser.TYPE_IDENTIFIER, OParser.VARIABLE_IDENTIFIER]:
                localctx = OParser.SingleStatementContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 696
                localctx.stmt = self.statement()

            elif token in [OParser.LCURL]:
                localctx = OParser.CurlyStatementListContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 697
                self.match(OParser.LCURL)
                self.state = 701
                la_ = self._interp.adaptivePredict(self._input,38,self._ctx)
                if la_ == 1:
                    self.state = 698
                    localctx.items = self.statement_list()
                    self.state = 699
                    self.match(OParser.RCURL)



            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class StatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return OParser.RULE_statement

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class CommentStatementContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.StatementContext)
            super().__init__(parser)
            self.decl = None # Comment_statementContext
            self.copyFrom(ctx)

        def comment_statement(self):
            return self.getTypedRuleContext(OParser.Comment_statementContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterCommentStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitCommentStatement(self)


    class StoreStatementContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.StatementContext)
            super().__init__(parser)
            self.stmt = None # Store_statementContext
            self.copyFrom(ctx)

        def store_statement(self):
            return self.getTypedRuleContext(OParser.Store_statementContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterStoreStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitStoreStatement(self)


    class WithSingletonStatementContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.StatementContext)
            super().__init__(parser)
            self.stmt = None # With_singleton_statementContext
            self.copyFrom(ctx)

        def with_singleton_statement(self):
            return self.getTypedRuleContext(OParser.With_singleton_statementContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterWithSingletonStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitWithSingletonStatement(self)


    class WriteStatementContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.StatementContext)
            super().__init__(parser)
            self.stmt = None # Write_statementContext
            self.copyFrom(ctx)

        def write_statement(self):
            return self.getTypedRuleContext(OParser.Write_statementContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterWriteStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitWriteStatement(self)


    class WhileStatementContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.StatementContext)
            super().__init__(parser)
            self.stmt = None # While_statementContext
            self.copyFrom(ctx)

        def while_statement(self):
            return self.getTypedRuleContext(OParser.While_statementContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterWhileStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitWhileStatement(self)


    class WithResourceStatementContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.StatementContext)
            super().__init__(parser)
            self.stmt = None # With_resource_statementContext
            self.copyFrom(ctx)

        def with_resource_statement(self):
            return self.getTypedRuleContext(OParser.With_resource_statementContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterWithResourceStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitWithResourceStatement(self)


    class RaiseStatementContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.StatementContext)
            super().__init__(parser)
            self.stmt = None # Raise_statementContext
            self.copyFrom(ctx)

        def raise_statement(self):
            return self.getTypedRuleContext(OParser.Raise_statementContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterRaiseStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitRaiseStatement(self)


    class AssignInstanceStatementContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.StatementContext)
            super().__init__(parser)
            self.stmt = None # Assign_instance_statementContext
            self.copyFrom(ctx)

        def assign_instance_statement(self):
            return self.getTypedRuleContext(OParser.Assign_instance_statementContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterAssignInstanceStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitAssignInstanceStatement(self)


    class IfStatementContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.StatementContext)
            super().__init__(parser)
            self.stmt = None # If_statementContext
            self.copyFrom(ctx)

        def if_statement(self):
            return self.getTypedRuleContext(OParser.If_statementContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterIfStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitIfStatement(self)


    class SwitchStatementContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.StatementContext)
            super().__init__(parser)
            self.stmt = None # Switch_statementContext
            self.copyFrom(ctx)

        def switch_statement(self):
            return self.getTypedRuleContext(OParser.Switch_statementContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterSwitchStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitSwitchStatement(self)


    class TryStatementContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.StatementContext)
            super().__init__(parser)
            self.stmt = None # Try_statementContext
            self.copyFrom(ctx)

        def try_statement(self):
            return self.getTypedRuleContext(OParser.Try_statementContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterTryStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitTryStatement(self)


    class MethodCallStatementContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.StatementContext)
            super().__init__(parser)
            self.stmt = None # Method_callContext
            self.copyFrom(ctx)

        def SEMI(self):
            return self.getToken(OParser.SEMI, 0)
        def method_call(self):
            return self.getTypedRuleContext(OParser.Method_callContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterMethodCallStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitMethodCallStatement(self)


    class ReturnStatementContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.StatementContext)
            super().__init__(parser)
            self.stmt = None # Return_statementContext
            self.copyFrom(ctx)

        def return_statement(self):
            return self.getTypedRuleContext(OParser.Return_statementContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterReturnStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitReturnStatement(self)


    class AssignTupleStatementContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.StatementContext)
            super().__init__(parser)
            self.stmt = None # Assign_tuple_statementContext
            self.copyFrom(ctx)

        def assign_tuple_statement(self):
            return self.getTypedRuleContext(OParser.Assign_tuple_statementContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterAssignTupleStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitAssignTupleStatement(self)


    class ClosureStatementContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.StatementContext)
            super().__init__(parser)
            self.decl = None # Concrete_method_declarationContext
            self.copyFrom(ctx)

        def concrete_method_declaration(self):
            return self.getTypedRuleContext(OParser.Concrete_method_declarationContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterClosureStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitClosureStatement(self)


    class DoWhileStatementContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.StatementContext)
            super().__init__(parser)
            self.stmt = None # Do_while_statementContext
            self.copyFrom(ctx)

        def do_while_statement(self):
            return self.getTypedRuleContext(OParser.Do_while_statementContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterDoWhileStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitDoWhileStatement(self)


    class ForEachStatementContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.StatementContext)
            super().__init__(parser)
            self.stmt = None # For_each_statementContext
            self.copyFrom(ctx)

        def for_each_statement(self):
            return self.getTypedRuleContext(OParser.For_each_statementContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterForEachStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitForEachStatement(self)



    def statement(self):

        localctx = OParser.StatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_statement)
        try:
            self.state = 724
            la_ = self._interp.adaptivePredict(self._input,40,self._ctx)
            if la_ == 1:
                localctx = OParser.MethodCallStatementContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 705
                localctx.stmt = self.method_call()
                self.state = 706
                self.match(OParser.SEMI)
                pass

            elif la_ == 2:
                localctx = OParser.AssignInstanceStatementContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 708
                localctx.stmt = self.assign_instance_statement()
                pass

            elif la_ == 3:
                localctx = OParser.AssignTupleStatementContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 709
                localctx.stmt = self.assign_tuple_statement()
                pass

            elif la_ == 4:
                localctx = OParser.StoreStatementContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 710
                localctx.stmt = self.store_statement()
                pass

            elif la_ == 5:
                localctx = OParser.ReturnStatementContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 711
                localctx.stmt = self.return_statement()
                pass

            elif la_ == 6:
                localctx = OParser.IfStatementContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 712
                localctx.stmt = self.if_statement()
                pass

            elif la_ == 7:
                localctx = OParser.SwitchStatementContext(self, localctx)
                self.enterOuterAlt(localctx, 7)
                self.state = 713
                localctx.stmt = self.switch_statement()
                pass

            elif la_ == 8:
                localctx = OParser.ForEachStatementContext(self, localctx)
                self.enterOuterAlt(localctx, 8)
                self.state = 714
                localctx.stmt = self.for_each_statement()
                pass

            elif la_ == 9:
                localctx = OParser.WhileStatementContext(self, localctx)
                self.enterOuterAlt(localctx, 9)
                self.state = 715
                localctx.stmt = self.while_statement()
                pass

            elif la_ == 10:
                localctx = OParser.DoWhileStatementContext(self, localctx)
                self.enterOuterAlt(localctx, 10)
                self.state = 716
                localctx.stmt = self.do_while_statement()
                pass

            elif la_ == 11:
                localctx = OParser.TryStatementContext(self, localctx)
                self.enterOuterAlt(localctx, 11)
                self.state = 717
                localctx.stmt = self.try_statement()
                pass

            elif la_ == 12:
                localctx = OParser.RaiseStatementContext(self, localctx)
                self.enterOuterAlt(localctx, 12)
                self.state = 718
                localctx.stmt = self.raise_statement()
                pass

            elif la_ == 13:
                localctx = OParser.WriteStatementContext(self, localctx)
                self.enterOuterAlt(localctx, 13)
                self.state = 719
                localctx.stmt = self.write_statement()
                pass

            elif la_ == 14:
                localctx = OParser.WithResourceStatementContext(self, localctx)
                self.enterOuterAlt(localctx, 14)
                self.state = 720
                localctx.stmt = self.with_resource_statement()
                pass

            elif la_ == 15:
                localctx = OParser.WithSingletonStatementContext(self, localctx)
                self.enterOuterAlt(localctx, 15)
                self.state = 721
                localctx.stmt = self.with_singleton_statement()
                pass

            elif la_ == 16:
                localctx = OParser.ClosureStatementContext(self, localctx)
                self.enterOuterAlt(localctx, 16)
                self.state = 722
                localctx.decl = self.concrete_method_declaration()
                pass

            elif la_ == 17:
                localctx = OParser.CommentStatementContext(self, localctx)
                self.enterOuterAlt(localctx, 17)
                self.state = 723
                localctx.decl = self.comment_statement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Store_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.to_del = None # Expression_listContext
            self.to_add = None # Expression_listContext

        def DELETE(self):
            return self.getToken(OParser.DELETE, 0)

        def LPAR(self, i:int=None):
            if i is None:
                return self.getTokens(OParser.LPAR)
            else:
                return self.getToken(OParser.LPAR, i)

        def RPAR(self, i:int=None):
            if i is None:
                return self.getTokens(OParser.RPAR)
            else:
                return self.getToken(OParser.RPAR, i)

        def SEMI(self):
            return self.getToken(OParser.SEMI, 0)

        def expression_list(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(OParser.Expression_listContext)
            else:
                return self.getTypedRuleContext(OParser.Expression_listContext,i)


        def STORE(self):
            return self.getToken(OParser.STORE, 0)

        def AND(self):
            return self.getToken(OParser.AND, 0)

        def getRuleIndex(self):
            return OParser.RULE_store_statement

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterStore_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitStore_statement(self)




    def store_statement(self):

        localctx = OParser.Store_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_store_statement)
        try:
            self.state = 749
            la_ = self._interp.adaptivePredict(self._input,41,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 726
                self.match(OParser.DELETE)
                self.state = 727
                self.match(OParser.LPAR)
                self.state = 728
                localctx.to_del = self.expression_list()
                self.state = 729
                self.match(OParser.RPAR)
                self.state = 730
                self.match(OParser.SEMI)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 732
                self.match(OParser.STORE)
                self.state = 733
                self.match(OParser.LPAR)
                self.state = 734
                localctx.to_add = self.expression_list()
                self.state = 735
                self.match(OParser.RPAR)
                self.state = 736
                self.match(OParser.SEMI)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 738
                self.match(OParser.DELETE)
                self.state = 739
                self.match(OParser.LPAR)
                self.state = 740
                localctx.to_del = self.expression_list()
                self.state = 741
                self.match(OParser.RPAR)
                self.state = 742
                self.match(OParser.AND)
                self.state = 743
                self.match(OParser.STORE)
                self.state = 744
                self.match(OParser.LPAR)
                self.state = 745
                localctx.to_add = self.expression_list()
                self.state = 746
                self.match(OParser.RPAR)
                self.state = 747
                self.match(OParser.SEMI)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class With_resource_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.stmt = None # Assign_variable_statementContext
            self.stmts = None # Statement_or_listContext

        def WITH(self):
            return self.getToken(OParser.WITH, 0)

        def LPAR(self):
            return self.getToken(OParser.LPAR, 0)

        def RPAR(self):
            return self.getToken(OParser.RPAR, 0)

        def assign_variable_statement(self):
            return self.getTypedRuleContext(OParser.Assign_variable_statementContext,0)


        def statement_or_list(self):
            return self.getTypedRuleContext(OParser.Statement_or_listContext,0)


        def getRuleIndex(self):
            return OParser.RULE_with_resource_statement

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterWith_resource_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitWith_resource_statement(self)




    def with_resource_statement(self):

        localctx = OParser.With_resource_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_with_resource_statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 751
            self.match(OParser.WITH)
            self.state = 752
            self.match(OParser.LPAR)
            self.state = 753
            localctx.stmt = self.assign_variable_statement()
            self.state = 754
            self.match(OParser.RPAR)
            self.state = 755
            localctx.stmts = self.statement_or_list()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class With_singleton_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.typ = None # Type_identifierContext
            self.stmts = None # Statement_or_listContext

        def WITH(self):
            return self.getToken(OParser.WITH, 0)

        def LPAR(self):
            return self.getToken(OParser.LPAR, 0)

        def RPAR(self):
            return self.getToken(OParser.RPAR, 0)

        def type_identifier(self):
            return self.getTypedRuleContext(OParser.Type_identifierContext,0)


        def statement_or_list(self):
            return self.getTypedRuleContext(OParser.Statement_or_listContext,0)


        def getRuleIndex(self):
            return OParser.RULE_with_singleton_statement

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterWith_singleton_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitWith_singleton_statement(self)




    def with_singleton_statement(self):

        localctx = OParser.With_singleton_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_with_singleton_statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 757
            self.match(OParser.WITH)
            self.state = 758
            self.match(OParser.LPAR)
            self.state = 759
            localctx.typ = self.type_identifier()
            self.state = 760
            self.match(OParser.RPAR)
            self.state = 761
            localctx.stmts = self.statement_or_list()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Switch_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.exp = None # ExpressionContext
            self.cases = None # Switch_case_statement_listContext
            self.stmts = None # Statement_listContext

        def SWITCH(self):
            return self.getToken(OParser.SWITCH, 0)

        def LPAR(self):
            return self.getToken(OParser.LPAR, 0)

        def RPAR(self):
            return self.getToken(OParser.RPAR, 0)

        def LCURL(self):
            return self.getToken(OParser.LCURL, 0)

        def RCURL(self):
            return self.getToken(OParser.RCURL, 0)

        def expression(self):
            return self.getTypedRuleContext(OParser.ExpressionContext,0)


        def switch_case_statement_list(self):
            return self.getTypedRuleContext(OParser.Switch_case_statement_listContext,0)


        def DEFAULT(self):
            return self.getToken(OParser.DEFAULT, 0)

        def COLON(self):
            return self.getToken(OParser.COLON, 0)

        def statement_list(self):
            return self.getTypedRuleContext(OParser.Statement_listContext,0)


        def getRuleIndex(self):
            return OParser.RULE_switch_statement

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterSwitch_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitSwitch_statement(self)




    def switch_statement(self):

        localctx = OParser.Switch_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_switch_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 763
            self.match(OParser.SWITCH)
            self.state = 764
            self.match(OParser.LPAR)
            self.state = 765
            localctx.exp = self.expression(0)
            self.state = 766
            self.match(OParser.RPAR)
            self.state = 767
            self.match(OParser.LCURL)
            self.state = 768
            localctx.cases = self.switch_case_statement_list()
            self.state = 774
            _la = self._input.LA(1)
            if _la==OParser.DEFAULT:
                self.state = 769
                self.match(OParser.DEFAULT)
                self.state = 770
                self.match(OParser.COLON)
                self.state = 772
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << OParser.COMMENT) | (1 << OParser.BOOLEAN) | (1 << OParser.CHARACTER) | (1 << OParser.TEXT) | (1 << OParser.INTEGER) | (1 << OParser.DECIMAL) | (1 << OParser.DATE) | (1 << OParser.TIME) | (1 << OParser.DATETIME) | (1 << OParser.PERIOD) | (1 << OParser.CODE) | (1 << OParser.DOCUMENT) | (1 << OParser.BLOB) | (1 << OParser.IMAGE) | (1 << OParser.UUID) | (1 << OParser.ITERATOR) | (1 << OParser.CURSOR))) != 0) or ((((_la - 84)) & ~0x3f) == 0 and ((1 << (_la - 84)) & ((1 << (OParser.DELETE - 84)) | (1 << (OParser.DO - 84)) | (1 << (OParser.FOR - 84)) | (1 << (OParser.IF - 84)) | (1 << (OParser.METHOD - 84)) | (1 << (OParser.RETURN - 84)) | (1 << (OParser.STORE - 84)) | (1 << (OParser.SWITCH - 84)) | (1 << (OParser.THROW - 84)) | (1 << (OParser.TRY - 84)) | (1 << (OParser.WITH - 84)) | (1 << (OParser.WHILE - 84)))) != 0) or ((((_la - 148)) & ~0x3f) == 0 and ((1 << (_la - 148)) & ((1 << (OParser.WRITE - 148)) | (1 << (OParser.SYMBOL_IDENTIFIER - 148)) | (1 << (OParser.TYPE_IDENTIFIER - 148)) | (1 << (OParser.VARIABLE_IDENTIFIER - 148)))) != 0):
                    self.state = 771
                    localctx.stmts = self.statement_list()




            self.state = 776
            self.match(OParser.RCURL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Switch_case_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return OParser.RULE_switch_case_statement

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class AtomicSwitchCaseContext(Switch_case_statementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Switch_case_statementContext)
            super().__init__(parser)
            self.exp = None # Atomic_literalContext
            self.stmts = None # Statement_listContext
            self.copyFrom(ctx)

        def CASE(self):
            return self.getToken(OParser.CASE, 0)
        def COLON(self):
            return self.getToken(OParser.COLON, 0)
        def atomic_literal(self):
            return self.getTypedRuleContext(OParser.Atomic_literalContext,0)

        def statement_list(self):
            return self.getTypedRuleContext(OParser.Statement_listContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterAtomicSwitchCase(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitAtomicSwitchCase(self)


    class CollectionSwitchCaseContext(Switch_case_statementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Switch_case_statementContext)
            super().__init__(parser)
            self.exp = None # Literal_collectionContext
            self.stmts = None # Statement_listContext
            self.copyFrom(ctx)

        def CASE(self):
            return self.getToken(OParser.CASE, 0)
        def IN(self):
            return self.getToken(OParser.IN, 0)
        def COLON(self):
            return self.getToken(OParser.COLON, 0)
        def literal_collection(self):
            return self.getTypedRuleContext(OParser.Literal_collectionContext,0)

        def statement_list(self):
            return self.getTypedRuleContext(OParser.Statement_listContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterCollectionSwitchCase(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitCollectionSwitchCase(self)



    def switch_case_statement(self):

        localctx = OParser.Switch_case_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_switch_case_statement)
        self._la = 0 # Token type
        try:
            self.state = 791
            la_ = self._interp.adaptivePredict(self._input,46,self._ctx)
            if la_ == 1:
                localctx = OParser.AtomicSwitchCaseContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 778
                self.match(OParser.CASE)
                self.state = 779
                localctx.exp = self.atomic_literal()
                self.state = 780
                self.match(OParser.COLON)
                self.state = 782
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << OParser.COMMENT) | (1 << OParser.BOOLEAN) | (1 << OParser.CHARACTER) | (1 << OParser.TEXT) | (1 << OParser.INTEGER) | (1 << OParser.DECIMAL) | (1 << OParser.DATE) | (1 << OParser.TIME) | (1 << OParser.DATETIME) | (1 << OParser.PERIOD) | (1 << OParser.CODE) | (1 << OParser.DOCUMENT) | (1 << OParser.BLOB) | (1 << OParser.IMAGE) | (1 << OParser.UUID) | (1 << OParser.ITERATOR) | (1 << OParser.CURSOR))) != 0) or ((((_la - 84)) & ~0x3f) == 0 and ((1 << (_la - 84)) & ((1 << (OParser.DELETE - 84)) | (1 << (OParser.DO - 84)) | (1 << (OParser.FOR - 84)) | (1 << (OParser.IF - 84)) | (1 << (OParser.METHOD - 84)) | (1 << (OParser.RETURN - 84)) | (1 << (OParser.STORE - 84)) | (1 << (OParser.SWITCH - 84)) | (1 << (OParser.THROW - 84)) | (1 << (OParser.TRY - 84)) | (1 << (OParser.WITH - 84)) | (1 << (OParser.WHILE - 84)))) != 0) or ((((_la - 148)) & ~0x3f) == 0 and ((1 << (_la - 148)) & ((1 << (OParser.WRITE - 148)) | (1 << (OParser.SYMBOL_IDENTIFIER - 148)) | (1 << (OParser.TYPE_IDENTIFIER - 148)) | (1 << (OParser.VARIABLE_IDENTIFIER - 148)))) != 0):
                    self.state = 781
                    localctx.stmts = self.statement_list()


                pass

            elif la_ == 2:
                localctx = OParser.CollectionSwitchCaseContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 784
                self.match(OParser.CASE)
                self.state = 785
                self.match(OParser.IN)
                self.state = 786
                localctx.exp = self.literal_collection()
                self.state = 787
                self.match(OParser.COLON)
                self.state = 789
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << OParser.COMMENT) | (1 << OParser.BOOLEAN) | (1 << OParser.CHARACTER) | (1 << OParser.TEXT) | (1 << OParser.INTEGER) | (1 << OParser.DECIMAL) | (1 << OParser.DATE) | (1 << OParser.TIME) | (1 << OParser.DATETIME) | (1 << OParser.PERIOD) | (1 << OParser.CODE) | (1 << OParser.DOCUMENT) | (1 << OParser.BLOB) | (1 << OParser.IMAGE) | (1 << OParser.UUID) | (1 << OParser.ITERATOR) | (1 << OParser.CURSOR))) != 0) or ((((_la - 84)) & ~0x3f) == 0 and ((1 << (_la - 84)) & ((1 << (OParser.DELETE - 84)) | (1 << (OParser.DO - 84)) | (1 << (OParser.FOR - 84)) | (1 << (OParser.IF - 84)) | (1 << (OParser.METHOD - 84)) | (1 << (OParser.RETURN - 84)) | (1 << (OParser.STORE - 84)) | (1 << (OParser.SWITCH - 84)) | (1 << (OParser.THROW - 84)) | (1 << (OParser.TRY - 84)) | (1 << (OParser.WITH - 84)) | (1 << (OParser.WHILE - 84)))) != 0) or ((((_la - 148)) & ~0x3f) == 0 and ((1 << (_la - 148)) & ((1 << (OParser.WRITE - 148)) | (1 << (OParser.SYMBOL_IDENTIFIER - 148)) | (1 << (OParser.TYPE_IDENTIFIER - 148)) | (1 << (OParser.VARIABLE_IDENTIFIER - 148)))) != 0):
                    self.state = 788
                    localctx.stmts = self.statement_list()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class For_each_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name1 = None # Variable_identifierContext
            self.name2 = None # Variable_identifierContext
            self.source = None # ExpressionContext
            self.stmts = None # Statement_or_listContext

        def FOR(self):
            return self.getToken(OParser.FOR, 0)

        def EACH(self):
            return self.getToken(OParser.EACH, 0)

        def LPAR(self):
            return self.getToken(OParser.LPAR, 0)

        def IN(self):
            return self.getToken(OParser.IN, 0)

        def RPAR(self):
            return self.getToken(OParser.RPAR, 0)

        def variable_identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(OParser.Variable_identifierContext)
            else:
                return self.getTypedRuleContext(OParser.Variable_identifierContext,i)


        def expression(self):
            return self.getTypedRuleContext(OParser.ExpressionContext,0)


        def statement_or_list(self):
            return self.getTypedRuleContext(OParser.Statement_or_listContext,0)


        def COMMA(self):
            return self.getToken(OParser.COMMA, 0)

        def getRuleIndex(self):
            return OParser.RULE_for_each_statement

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterFor_each_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitFor_each_statement(self)




    def for_each_statement(self):

        localctx = OParser.For_each_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_for_each_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 793
            self.match(OParser.FOR)
            self.state = 794
            self.match(OParser.EACH)
            self.state = 795
            self.match(OParser.LPAR)
            self.state = 796
            localctx.name1 = self.variable_identifier()
            self.state = 799
            _la = self._input.LA(1)
            if _la==OParser.COMMA:
                self.state = 797
                self.match(OParser.COMMA)
                self.state = 798
                localctx.name2 = self.variable_identifier()


            self.state = 801
            self.match(OParser.IN)
            self.state = 802
            localctx.source = self.expression(0)
            self.state = 803
            self.match(OParser.RPAR)
            self.state = 804
            localctx.stmts = self.statement_or_list()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Do_while_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.stmts = None # Statement_listContext
            self.exp = None # ExpressionContext

        def DO(self):
            return self.getToken(OParser.DO, 0)

        def LCURL(self):
            return self.getToken(OParser.LCURL, 0)

        def RCURL(self):
            return self.getToken(OParser.RCURL, 0)

        def WHILE(self):
            return self.getToken(OParser.WHILE, 0)

        def LPAR(self):
            return self.getToken(OParser.LPAR, 0)

        def RPAR(self):
            return self.getToken(OParser.RPAR, 0)

        def SEMI(self):
            return self.getToken(OParser.SEMI, 0)

        def expression(self):
            return self.getTypedRuleContext(OParser.ExpressionContext,0)


        def statement_list(self):
            return self.getTypedRuleContext(OParser.Statement_listContext,0)


        def getRuleIndex(self):
            return OParser.RULE_do_while_statement

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterDo_while_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitDo_while_statement(self)




    def do_while_statement(self):

        localctx = OParser.Do_while_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_do_while_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 806
            self.match(OParser.DO)
            self.state = 807
            self.match(OParser.LCURL)
            self.state = 809
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << OParser.COMMENT) | (1 << OParser.BOOLEAN) | (1 << OParser.CHARACTER) | (1 << OParser.TEXT) | (1 << OParser.INTEGER) | (1 << OParser.DECIMAL) | (1 << OParser.DATE) | (1 << OParser.TIME) | (1 << OParser.DATETIME) | (1 << OParser.PERIOD) | (1 << OParser.CODE) | (1 << OParser.DOCUMENT) | (1 << OParser.BLOB) | (1 << OParser.IMAGE) | (1 << OParser.UUID) | (1 << OParser.ITERATOR) | (1 << OParser.CURSOR))) != 0) or ((((_la - 84)) & ~0x3f) == 0 and ((1 << (_la - 84)) & ((1 << (OParser.DELETE - 84)) | (1 << (OParser.DO - 84)) | (1 << (OParser.FOR - 84)) | (1 << (OParser.IF - 84)) | (1 << (OParser.METHOD - 84)) | (1 << (OParser.RETURN - 84)) | (1 << (OParser.STORE - 84)) | (1 << (OParser.SWITCH - 84)) | (1 << (OParser.THROW - 84)) | (1 << (OParser.TRY - 84)) | (1 << (OParser.WITH - 84)) | (1 << (OParser.WHILE - 84)))) != 0) or ((((_la - 148)) & ~0x3f) == 0 and ((1 << (_la - 148)) & ((1 << (OParser.WRITE - 148)) | (1 << (OParser.SYMBOL_IDENTIFIER - 148)) | (1 << (OParser.TYPE_IDENTIFIER - 148)) | (1 << (OParser.VARIABLE_IDENTIFIER - 148)))) != 0):
                self.state = 808
                localctx.stmts = self.statement_list()


            self.state = 811
            self.match(OParser.RCURL)
            self.state = 812
            self.match(OParser.WHILE)
            self.state = 813
            self.match(OParser.LPAR)
            self.state = 814
            localctx.exp = self.expression(0)
            self.state = 815
            self.match(OParser.RPAR)
            self.state = 816
            self.match(OParser.SEMI)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class While_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.exp = None # ExpressionContext
            self.stmts = None # Statement_or_listContext

        def WHILE(self):
            return self.getToken(OParser.WHILE, 0)

        def LPAR(self):
            return self.getToken(OParser.LPAR, 0)

        def RPAR(self):
            return self.getToken(OParser.RPAR, 0)

        def expression(self):
            return self.getTypedRuleContext(OParser.ExpressionContext,0)


        def statement_or_list(self):
            return self.getTypedRuleContext(OParser.Statement_or_listContext,0)


        def getRuleIndex(self):
            return OParser.RULE_while_statement

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterWhile_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitWhile_statement(self)




    def while_statement(self):

        localctx = OParser.While_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_while_statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 818
            self.match(OParser.WHILE)
            self.state = 819
            self.match(OParser.LPAR)
            self.state = 820
            localctx.exp = self.expression(0)
            self.state = 821
            self.match(OParser.RPAR)
            self.state = 822
            localctx.stmts = self.statement_or_list()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class If_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.exp = None # ExpressionContext
            self.stmts = None # Statement_or_listContext
            self.elseIfs = None # Else_if_statement_listContext
            self.elseStmts = None # Statement_or_listContext

        def IF(self):
            return self.getToken(OParser.IF, 0)

        def LPAR(self):
            return self.getToken(OParser.LPAR, 0)

        def RPAR(self):
            return self.getToken(OParser.RPAR, 0)

        def expression(self):
            return self.getTypedRuleContext(OParser.ExpressionContext,0)


        def statement_or_list(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(OParser.Statement_or_listContext)
            else:
                return self.getTypedRuleContext(OParser.Statement_or_listContext,i)


        def ELSE(self):
            return self.getToken(OParser.ELSE, 0)

        def else_if_statement_list(self):
            return self.getTypedRuleContext(OParser.Else_if_statement_listContext,0)


        def getRuleIndex(self):
            return OParser.RULE_if_statement

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterIf_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitIf_statement(self)




    def if_statement(self):

        localctx = OParser.If_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_if_statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 824
            self.match(OParser.IF)
            self.state = 825
            self.match(OParser.LPAR)
            self.state = 826
            localctx.exp = self.expression(0)
            self.state = 827
            self.match(OParser.RPAR)
            self.state = 828
            localctx.stmts = self.statement_or_list()
            self.state = 830
            la_ = self._interp.adaptivePredict(self._input,49,self._ctx)
            if la_ == 1:
                self.state = 829
                localctx.elseIfs = self.else_if_statement_list(0)


            self.state = 834
            la_ = self._interp.adaptivePredict(self._input,50,self._ctx)
            if la_ == 1:
                self.state = 832
                self.match(OParser.ELSE)
                self.state = 833
                localctx.elseStmts = self.statement_or_list()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Else_if_statement_listContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return OParser.RULE_else_if_statement_list

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class ElseIfStatementListContext(Else_if_statement_listContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Else_if_statement_listContext)
            super().__init__(parser)
            self.exp = None # ExpressionContext
            self.stmts = None # Statement_or_listContext
            self.copyFrom(ctx)

        def ELSE(self):
            return self.getToken(OParser.ELSE, 0)
        def IF(self):
            return self.getToken(OParser.IF, 0)
        def LPAR(self):
            return self.getToken(OParser.LPAR, 0)
        def RPAR(self):
            return self.getToken(OParser.RPAR, 0)
        def expression(self):
            return self.getTypedRuleContext(OParser.ExpressionContext,0)

        def statement_or_list(self):
            return self.getTypedRuleContext(OParser.Statement_or_listContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterElseIfStatementList(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitElseIfStatementList(self)


    class ElseIfStatementListItemContext(Else_if_statement_listContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Else_if_statement_listContext)
            super().__init__(parser)
            self.items = None # Else_if_statement_listContext
            self.exp = None # ExpressionContext
            self.stmts = None # Statement_or_listContext
            self.copyFrom(ctx)

        def ELSE(self):
            return self.getToken(OParser.ELSE, 0)
        def IF(self):
            return self.getToken(OParser.IF, 0)
        def LPAR(self):
            return self.getToken(OParser.LPAR, 0)
        def RPAR(self):
            return self.getToken(OParser.RPAR, 0)
        def else_if_statement_list(self):
            return self.getTypedRuleContext(OParser.Else_if_statement_listContext,0)

        def expression(self):
            return self.getTypedRuleContext(OParser.ExpressionContext,0)

        def statement_or_list(self):
            return self.getTypedRuleContext(OParser.Statement_or_listContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterElseIfStatementListItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitElseIfStatementListItem(self)



    def else_if_statement_list(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = OParser.Else_if_statement_listContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 70
        self.enterRecursionRule(localctx, 70, self.RULE_else_if_statement_list, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            localctx = OParser.ElseIfStatementListContext(self, localctx)
            self._ctx = localctx
            _prevctx = localctx

            self.state = 837
            self.match(OParser.ELSE)
            self.state = 838
            self.match(OParser.IF)
            self.state = 839
            self.match(OParser.LPAR)
            self.state = 840
            localctx.exp = self.expression(0)
            self.state = 841
            self.match(OParser.RPAR)
            self.state = 842
            localctx.stmts = self.statement_or_list()
            self._ctx.stop = self._input.LT(-1)
            self.state = 854
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,51,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = OParser.ElseIfStatementListItemContext(self, OParser.Else_if_statement_listContext(self, _parentctx, _parentState))
                    localctx.items = _prevctx
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_else_if_statement_list)
                    self.state = 844
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 845
                    self.match(OParser.ELSE)
                    self.state = 846
                    self.match(OParser.IF)
                    self.state = 847
                    self.match(OParser.LPAR)
                    self.state = 848
                    localctx.exp = self.expression(0)
                    self.state = 849
                    self.match(OParser.RPAR)
                    self.state = 850
                    localctx.stmts = self.statement_or_list() 
                self.state = 856
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,51,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class Raise_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.exp = None # ExpressionContext

        def THROW(self):
            return self.getToken(OParser.THROW, 0)

        def SEMI(self):
            return self.getToken(OParser.SEMI, 0)

        def expression(self):
            return self.getTypedRuleContext(OParser.ExpressionContext,0)


        def getRuleIndex(self):
            return OParser.RULE_raise_statement

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterRaise_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitRaise_statement(self)




    def raise_statement(self):

        localctx = OParser.Raise_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_raise_statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 857
            self.match(OParser.THROW)
            self.state = 858
            localctx.exp = self.expression(0)
            self.state = 859
            self.match(OParser.SEMI)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Try_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # Variable_identifierContext
            self.stmts = None # Statement_listContext
            self.handlers = None # Catch_statement_listContext
            self.anyStmts = None # Statement_listContext
            self.finalStmts = None # Statement_listContext

        def TRY(self):
            return self.getToken(OParser.TRY, 0)

        def LPAR(self, i:int=None):
            if i is None:
                return self.getTokens(OParser.LPAR)
            else:
                return self.getToken(OParser.LPAR, i)

        def RPAR(self, i:int=None):
            if i is None:
                return self.getTokens(OParser.RPAR)
            else:
                return self.getToken(OParser.RPAR, i)

        def LCURL(self, i:int=None):
            if i is None:
                return self.getTokens(OParser.LCURL)
            else:
                return self.getToken(OParser.LCURL, i)

        def RCURL(self, i:int=None):
            if i is None:
                return self.getTokens(OParser.RCURL)
            else:
                return self.getToken(OParser.RCURL, i)

        def variable_identifier(self):
            return self.getTypedRuleContext(OParser.Variable_identifierContext,0)


        def CATCH(self):
            return self.getToken(OParser.CATCH, 0)

        def ANY(self):
            return self.getToken(OParser.ANY, 0)

        def FINALLY(self):
            return self.getToken(OParser.FINALLY, 0)

        def statement_list(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(OParser.Statement_listContext)
            else:
                return self.getTypedRuleContext(OParser.Statement_listContext,i)


        def catch_statement_list(self):
            return self.getTypedRuleContext(OParser.Catch_statement_listContext,0)


        def getRuleIndex(self):
            return OParser.RULE_try_statement

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterTry_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitTry_statement(self)




    def try_statement(self):

        localctx = OParser.Try_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_try_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 861
            self.match(OParser.TRY)
            self.state = 862
            self.match(OParser.LPAR)
            self.state = 863
            localctx.name = self.variable_identifier()
            self.state = 864
            self.match(OParser.RPAR)
            self.state = 865
            self.match(OParser.LCURL)
            self.state = 867
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << OParser.COMMENT) | (1 << OParser.BOOLEAN) | (1 << OParser.CHARACTER) | (1 << OParser.TEXT) | (1 << OParser.INTEGER) | (1 << OParser.DECIMAL) | (1 << OParser.DATE) | (1 << OParser.TIME) | (1 << OParser.DATETIME) | (1 << OParser.PERIOD) | (1 << OParser.CODE) | (1 << OParser.DOCUMENT) | (1 << OParser.BLOB) | (1 << OParser.IMAGE) | (1 << OParser.UUID) | (1 << OParser.ITERATOR) | (1 << OParser.CURSOR))) != 0) or ((((_la - 84)) & ~0x3f) == 0 and ((1 << (_la - 84)) & ((1 << (OParser.DELETE - 84)) | (1 << (OParser.DO - 84)) | (1 << (OParser.FOR - 84)) | (1 << (OParser.IF - 84)) | (1 << (OParser.METHOD - 84)) | (1 << (OParser.RETURN - 84)) | (1 << (OParser.STORE - 84)) | (1 << (OParser.SWITCH - 84)) | (1 << (OParser.THROW - 84)) | (1 << (OParser.TRY - 84)) | (1 << (OParser.WITH - 84)) | (1 << (OParser.WHILE - 84)))) != 0) or ((((_la - 148)) & ~0x3f) == 0 and ((1 << (_la - 148)) & ((1 << (OParser.WRITE - 148)) | (1 << (OParser.SYMBOL_IDENTIFIER - 148)) | (1 << (OParser.TYPE_IDENTIFIER - 148)) | (1 << (OParser.VARIABLE_IDENTIFIER - 148)))) != 0):
                self.state = 866
                localctx.stmts = self.statement_list()


            self.state = 869
            self.match(OParser.RCURL)
            self.state = 871
            la_ = self._interp.adaptivePredict(self._input,53,self._ctx)
            if la_ == 1:
                self.state = 870
                localctx.handlers = self.catch_statement_list()


            self.state = 882
            la_ = self._interp.adaptivePredict(self._input,55,self._ctx)
            if la_ == 1:
                self.state = 873
                self.match(OParser.CATCH)
                self.state = 874
                self.match(OParser.LPAR)
                self.state = 875
                self.match(OParser.ANY)
                self.state = 876
                self.match(OParser.RPAR)
                self.state = 877
                self.match(OParser.LCURL)
                self.state = 879
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << OParser.COMMENT) | (1 << OParser.BOOLEAN) | (1 << OParser.CHARACTER) | (1 << OParser.TEXT) | (1 << OParser.INTEGER) | (1 << OParser.DECIMAL) | (1 << OParser.DATE) | (1 << OParser.TIME) | (1 << OParser.DATETIME) | (1 << OParser.PERIOD) | (1 << OParser.CODE) | (1 << OParser.DOCUMENT) | (1 << OParser.BLOB) | (1 << OParser.IMAGE) | (1 << OParser.UUID) | (1 << OParser.ITERATOR) | (1 << OParser.CURSOR))) != 0) or ((((_la - 84)) & ~0x3f) == 0 and ((1 << (_la - 84)) & ((1 << (OParser.DELETE - 84)) | (1 << (OParser.DO - 84)) | (1 << (OParser.FOR - 84)) | (1 << (OParser.IF - 84)) | (1 << (OParser.METHOD - 84)) | (1 << (OParser.RETURN - 84)) | (1 << (OParser.STORE - 84)) | (1 << (OParser.SWITCH - 84)) | (1 << (OParser.THROW - 84)) | (1 << (OParser.TRY - 84)) | (1 << (OParser.WITH - 84)) | (1 << (OParser.WHILE - 84)))) != 0) or ((((_la - 148)) & ~0x3f) == 0 and ((1 << (_la - 148)) & ((1 << (OParser.WRITE - 148)) | (1 << (OParser.SYMBOL_IDENTIFIER - 148)) | (1 << (OParser.TYPE_IDENTIFIER - 148)) | (1 << (OParser.VARIABLE_IDENTIFIER - 148)))) != 0):
                    self.state = 878
                    localctx.anyStmts = self.statement_list()


                self.state = 881
                self.match(OParser.RCURL)


            self.state = 890
            la_ = self._interp.adaptivePredict(self._input,57,self._ctx)
            if la_ == 1:
                self.state = 884
                self.match(OParser.FINALLY)
                self.state = 885
                self.match(OParser.LCURL)
                self.state = 887
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << OParser.COMMENT) | (1 << OParser.BOOLEAN) | (1 << OParser.CHARACTER) | (1 << OParser.TEXT) | (1 << OParser.INTEGER) | (1 << OParser.DECIMAL) | (1 << OParser.DATE) | (1 << OParser.TIME) | (1 << OParser.DATETIME) | (1 << OParser.PERIOD) | (1 << OParser.CODE) | (1 << OParser.DOCUMENT) | (1 << OParser.BLOB) | (1 << OParser.IMAGE) | (1 << OParser.UUID) | (1 << OParser.ITERATOR) | (1 << OParser.CURSOR))) != 0) or ((((_la - 84)) & ~0x3f) == 0 and ((1 << (_la - 84)) & ((1 << (OParser.DELETE - 84)) | (1 << (OParser.DO - 84)) | (1 << (OParser.FOR - 84)) | (1 << (OParser.IF - 84)) | (1 << (OParser.METHOD - 84)) | (1 << (OParser.RETURN - 84)) | (1 << (OParser.STORE - 84)) | (1 << (OParser.SWITCH - 84)) | (1 << (OParser.THROW - 84)) | (1 << (OParser.TRY - 84)) | (1 << (OParser.WITH - 84)) | (1 << (OParser.WHILE - 84)))) != 0) or ((((_la - 148)) & ~0x3f) == 0 and ((1 << (_la - 148)) & ((1 << (OParser.WRITE - 148)) | (1 << (OParser.SYMBOL_IDENTIFIER - 148)) | (1 << (OParser.TYPE_IDENTIFIER - 148)) | (1 << (OParser.VARIABLE_IDENTIFIER - 148)))) != 0):
                    self.state = 886
                    localctx.finalStmts = self.statement_list()


                self.state = 889
                self.match(OParser.RCURL)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Catch_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return OParser.RULE_catch_statement

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class CatchAtomicStatementContext(Catch_statementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Catch_statementContext)
            super().__init__(parser)
            self.name = None # Symbol_identifierContext
            self.stmts = None # Statement_listContext
            self.copyFrom(ctx)

        def CATCH(self):
            return self.getToken(OParser.CATCH, 0)
        def LPAR(self):
            return self.getToken(OParser.LPAR, 0)
        def RPAR(self):
            return self.getToken(OParser.RPAR, 0)
        def LCURL(self):
            return self.getToken(OParser.LCURL, 0)
        def RCURL(self):
            return self.getToken(OParser.RCURL, 0)
        def symbol_identifier(self):
            return self.getTypedRuleContext(OParser.Symbol_identifierContext,0)

        def statement_list(self):
            return self.getTypedRuleContext(OParser.Statement_listContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterCatchAtomicStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitCatchAtomicStatement(self)


    class CatchCollectionStatementContext(Catch_statementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Catch_statementContext)
            super().__init__(parser)
            self.exp = None # Symbol_listContext
            self.stmts = None # Statement_listContext
            self.copyFrom(ctx)

        def CATCH(self):
            return self.getToken(OParser.CATCH, 0)
        def IN(self):
            return self.getToken(OParser.IN, 0)
        def LPAR(self):
            return self.getToken(OParser.LPAR, 0)
        def RPAR(self):
            return self.getToken(OParser.RPAR, 0)
        def LCURL(self):
            return self.getToken(OParser.LCURL, 0)
        def RCURL(self):
            return self.getToken(OParser.RCURL, 0)
        def symbol_list(self):
            return self.getTypedRuleContext(OParser.Symbol_listContext,0)

        def statement_list(self):
            return self.getTypedRuleContext(OParser.Statement_listContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterCatchCollectionStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitCatchCollectionStatement(self)



    def catch_statement(self):

        localctx = OParser.Catch_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_catch_statement)
        self._la = 0 # Token type
        try:
            self.state = 913
            la_ = self._interp.adaptivePredict(self._input,60,self._ctx)
            if la_ == 1:
                localctx = OParser.CatchAtomicStatementContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 892
                self.match(OParser.CATCH)
                self.state = 893
                self.match(OParser.LPAR)
                self.state = 894
                localctx.name = self.symbol_identifier()
                self.state = 895
                self.match(OParser.RPAR)
                self.state = 896
                self.match(OParser.LCURL)
                self.state = 898
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << OParser.COMMENT) | (1 << OParser.BOOLEAN) | (1 << OParser.CHARACTER) | (1 << OParser.TEXT) | (1 << OParser.INTEGER) | (1 << OParser.DECIMAL) | (1 << OParser.DATE) | (1 << OParser.TIME) | (1 << OParser.DATETIME) | (1 << OParser.PERIOD) | (1 << OParser.CODE) | (1 << OParser.DOCUMENT) | (1 << OParser.BLOB) | (1 << OParser.IMAGE) | (1 << OParser.UUID) | (1 << OParser.ITERATOR) | (1 << OParser.CURSOR))) != 0) or ((((_la - 84)) & ~0x3f) == 0 and ((1 << (_la - 84)) & ((1 << (OParser.DELETE - 84)) | (1 << (OParser.DO - 84)) | (1 << (OParser.FOR - 84)) | (1 << (OParser.IF - 84)) | (1 << (OParser.METHOD - 84)) | (1 << (OParser.RETURN - 84)) | (1 << (OParser.STORE - 84)) | (1 << (OParser.SWITCH - 84)) | (1 << (OParser.THROW - 84)) | (1 << (OParser.TRY - 84)) | (1 << (OParser.WITH - 84)) | (1 << (OParser.WHILE - 84)))) != 0) or ((((_la - 148)) & ~0x3f) == 0 and ((1 << (_la - 148)) & ((1 << (OParser.WRITE - 148)) | (1 << (OParser.SYMBOL_IDENTIFIER - 148)) | (1 << (OParser.TYPE_IDENTIFIER - 148)) | (1 << (OParser.VARIABLE_IDENTIFIER - 148)))) != 0):
                    self.state = 897
                    localctx.stmts = self.statement_list()


                self.state = 900
                self.match(OParser.RCURL)
                pass

            elif la_ == 2:
                localctx = OParser.CatchCollectionStatementContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 902
                self.match(OParser.CATCH)
                self.state = 903
                self.match(OParser.IN)
                self.state = 904
                self.match(OParser.LPAR)
                self.state = 905
                localctx.exp = self.symbol_list()
                self.state = 906
                self.match(OParser.RPAR)
                self.state = 907
                self.match(OParser.LCURL)
                self.state = 909
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << OParser.COMMENT) | (1 << OParser.BOOLEAN) | (1 << OParser.CHARACTER) | (1 << OParser.TEXT) | (1 << OParser.INTEGER) | (1 << OParser.DECIMAL) | (1 << OParser.DATE) | (1 << OParser.TIME) | (1 << OParser.DATETIME) | (1 << OParser.PERIOD) | (1 << OParser.CODE) | (1 << OParser.DOCUMENT) | (1 << OParser.BLOB) | (1 << OParser.IMAGE) | (1 << OParser.UUID) | (1 << OParser.ITERATOR) | (1 << OParser.CURSOR))) != 0) or ((((_la - 84)) & ~0x3f) == 0 and ((1 << (_la - 84)) & ((1 << (OParser.DELETE - 84)) | (1 << (OParser.DO - 84)) | (1 << (OParser.FOR - 84)) | (1 << (OParser.IF - 84)) | (1 << (OParser.METHOD - 84)) | (1 << (OParser.RETURN - 84)) | (1 << (OParser.STORE - 84)) | (1 << (OParser.SWITCH - 84)) | (1 << (OParser.THROW - 84)) | (1 << (OParser.TRY - 84)) | (1 << (OParser.WITH - 84)) | (1 << (OParser.WHILE - 84)))) != 0) or ((((_la - 148)) & ~0x3f) == 0 and ((1 << (_la - 148)) & ((1 << (OParser.WRITE - 148)) | (1 << (OParser.SYMBOL_IDENTIFIER - 148)) | (1 << (OParser.TYPE_IDENTIFIER - 148)) | (1 << (OParser.VARIABLE_IDENTIFIER - 148)))) != 0):
                    self.state = 908
                    localctx.stmts = self.statement_list()


                self.state = 911
                self.match(OParser.RCURL)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Return_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.exp = None # ExpressionContext

        def RETURN(self):
            return self.getToken(OParser.RETURN, 0)

        def SEMI(self):
            return self.getToken(OParser.SEMI, 0)

        def expression(self):
            return self.getTypedRuleContext(OParser.ExpressionContext,0)


        def getRuleIndex(self):
            return OParser.RULE_return_statement

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterReturn_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitReturn_statement(self)




    def return_statement(self):

        localctx = OParser.Return_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_return_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 915
            self.match(OParser.RETURN)
            self.state = 917
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << OParser.LPAR) | (1 << OParser.LBRAK) | (1 << OParser.LCURL) | (1 << OParser.XMARK) | (1 << OParser.MINUS) | (1 << OParser.LT) | (1 << OParser.CODE) | (1 << OParser.DOCUMENT) | (1 << OParser.BLOB))) != 0) or ((((_la - 93)) & ~0x3f) == 0 and ((1 << (_la - 93)) & ((1 << (OParser.EXECUTE - 93)) | (1 << (OParser.FETCH - 93)) | (1 << (OParser.MUTABLE - 93)) | (1 << (OParser.NULL - 93)) | (1 << (OParser.READ - 93)) | (1 << (OParser.SELF - 93)) | (1 << (OParser.SORTED - 93)) | (1 << (OParser.THIS - 93)) | (1 << (OParser.BOOLEAN_LITERAL - 93)) | (1 << (OParser.CHAR_LITERAL - 93)) | (1 << (OParser.MIN_INTEGER - 93)) | (1 << (OParser.MAX_INTEGER - 93)) | (1 << (OParser.SYMBOL_IDENTIFIER - 93)) | (1 << (OParser.TYPE_IDENTIFIER - 93)) | (1 << (OParser.VARIABLE_IDENTIFIER - 93)))) != 0) or ((((_la - 158)) & ~0x3f) == 0 and ((1 << (_la - 158)) & ((1 << (OParser.TEXT_LITERAL - 158)) | (1 << (OParser.INTEGER_LITERAL - 158)) | (1 << (OParser.HEXA_LITERAL - 158)) | (1 << (OParser.DECIMAL_LITERAL - 158)) | (1 << (OParser.DATETIME_LITERAL - 158)) | (1 << (OParser.TIME_LITERAL - 158)) | (1 << (OParser.DATE_LITERAL - 158)) | (1 << (OParser.PERIOD_LITERAL - 158)))) != 0):
                self.state = 916
                localctx.exp = self.expression(0)


            self.state = 919
            self.match(OParser.SEMI)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Method_callContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.method = None # Method_selectorContext
            self.args = None # Argument_assignment_listContext

        def LPAR(self):
            return self.getToken(OParser.LPAR, 0)

        def RPAR(self):
            return self.getToken(OParser.RPAR, 0)

        def method_selector(self):
            return self.getTypedRuleContext(OParser.Method_selectorContext,0)


        def argument_assignment_list(self):
            return self.getTypedRuleContext(OParser.Argument_assignment_listContext,0)


        def getRuleIndex(self):
            return OParser.RULE_method_call

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterMethod_call(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitMethod_call(self)




    def method_call(self):

        localctx = OParser.Method_callContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_method_call)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 921
            localctx.method = self.method_selector()
            self.state = 922
            self.match(OParser.LPAR)
            self.state = 924
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << OParser.LPAR) | (1 << OParser.LBRAK) | (1 << OParser.LCURL) | (1 << OParser.XMARK) | (1 << OParser.MINUS) | (1 << OParser.LT) | (1 << OParser.CODE) | (1 << OParser.DOCUMENT) | (1 << OParser.BLOB))) != 0) or ((((_la - 93)) & ~0x3f) == 0 and ((1 << (_la - 93)) & ((1 << (OParser.EXECUTE - 93)) | (1 << (OParser.FETCH - 93)) | (1 << (OParser.MUTABLE - 93)) | (1 << (OParser.NULL - 93)) | (1 << (OParser.READ - 93)) | (1 << (OParser.SELF - 93)) | (1 << (OParser.SORTED - 93)) | (1 << (OParser.THIS - 93)) | (1 << (OParser.BOOLEAN_LITERAL - 93)) | (1 << (OParser.CHAR_LITERAL - 93)) | (1 << (OParser.MIN_INTEGER - 93)) | (1 << (OParser.MAX_INTEGER - 93)) | (1 << (OParser.SYMBOL_IDENTIFIER - 93)) | (1 << (OParser.TYPE_IDENTIFIER - 93)) | (1 << (OParser.VARIABLE_IDENTIFIER - 93)))) != 0) or ((((_la - 158)) & ~0x3f) == 0 and ((1 << (_la - 158)) & ((1 << (OParser.TEXT_LITERAL - 158)) | (1 << (OParser.INTEGER_LITERAL - 158)) | (1 << (OParser.HEXA_LITERAL - 158)) | (1 << (OParser.DECIMAL_LITERAL - 158)) | (1 << (OParser.DATETIME_LITERAL - 158)) | (1 << (OParser.TIME_LITERAL - 158)) | (1 << (OParser.DATE_LITERAL - 158)) | (1 << (OParser.PERIOD_LITERAL - 158)))) != 0):
                self.state = 923
                localctx.args = self.argument_assignment_list(0)


            self.state = 926
            self.match(OParser.RPAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Method_selectorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return OParser.RULE_method_selector

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class MethodParentContext(Method_selectorContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Method_selectorContext)
            super().__init__(parser)
            self.parent = None # Callable_parentContext
            self.name = None # Method_identifierContext
            self.copyFrom(ctx)

        def DOT(self):
            return self.getToken(OParser.DOT, 0)
        def callable_parent(self):
            return self.getTypedRuleContext(OParser.Callable_parentContext,0)

        def method_identifier(self):
            return self.getTypedRuleContext(OParser.Method_identifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterMethodParent(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitMethodParent(self)


    class MethodNameContext(Method_selectorContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Method_selectorContext)
            super().__init__(parser)
            self.name = None # Method_identifierContext
            self.copyFrom(ctx)

        def method_identifier(self):
            return self.getTypedRuleContext(OParser.Method_identifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterMethodName(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitMethodName(self)



    def method_selector(self):

        localctx = OParser.Method_selectorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_method_selector)
        try:
            self.state = 933
            la_ = self._interp.adaptivePredict(self._input,63,self._ctx)
            if la_ == 1:
                localctx = OParser.MethodNameContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 928
                localctx.name = self.method_identifier()
                pass

            elif la_ == 2:
                localctx = OParser.MethodParentContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 929
                localctx.parent = self.callable_parent(0)
                self.state = 930
                self.match(OParser.DOT)
                self.state = 931
                localctx.name = self.method_identifier()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Callable_parentContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return OParser.RULE_callable_parent

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class CallableSelectorContext(Callable_parentContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Callable_parentContext)
            super().__init__(parser)
            self.parent = None # Callable_parentContext
            self.select = None # Callable_selectorContext
            self.copyFrom(ctx)

        def callable_parent(self):
            return self.getTypedRuleContext(OParser.Callable_parentContext,0)

        def callable_selector(self):
            return self.getTypedRuleContext(OParser.Callable_selectorContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterCallableSelector(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitCallableSelector(self)


    class CallableRootContext(Callable_parentContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Callable_parentContext)
            super().__init__(parser)
            self.name = None # IdentifierContext
            self.copyFrom(ctx)

        def identifier(self):
            return self.getTypedRuleContext(OParser.IdentifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterCallableRoot(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitCallableRoot(self)



    def callable_parent(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = OParser.Callable_parentContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 84
        self.enterRecursionRule(localctx, 84, self.RULE_callable_parent, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            localctx = OParser.CallableRootContext(self, localctx)
            self._ctx = localctx
            _prevctx = localctx

            self.state = 936
            localctx.name = self.identifier()
            self._ctx.stop = self._input.LT(-1)
            self.state = 942
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,64,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = OParser.CallableSelectorContext(self, OParser.Callable_parentContext(self, _parentctx, _parentState))
                    localctx.parent = _prevctx
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_callable_parent)
                    self.state = 938
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 939
                    localctx.select = self.callable_selector() 
                self.state = 944
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,64,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class Callable_selectorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return OParser.RULE_callable_selector

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class CallableItemSelectorContext(Callable_selectorContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Callable_selectorContext)
            super().__init__(parser)
            self.exp = None # ExpressionContext
            self.copyFrom(ctx)

        def LBRAK(self):
            return self.getToken(OParser.LBRAK, 0)
        def RBRAK(self):
            return self.getToken(OParser.RBRAK, 0)
        def expression(self):
            return self.getTypedRuleContext(OParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterCallableItemSelector(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitCallableItemSelector(self)


    class CallableMemberSelectorContext(Callable_selectorContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Callable_selectorContext)
            super().__init__(parser)
            self.name = None # Variable_identifierContext
            self.copyFrom(ctx)

        def DOT(self):
            return self.getToken(OParser.DOT, 0)
        def variable_identifier(self):
            return self.getTypedRuleContext(OParser.Variable_identifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterCallableMemberSelector(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitCallableMemberSelector(self)



    def callable_selector(self):

        localctx = OParser.Callable_selectorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_callable_selector)
        try:
            self.state = 951
            token = self._input.LA(1)
            if token in [OParser.DOT]:
                localctx = OParser.CallableMemberSelectorContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 945
                self.match(OParser.DOT)
                self.state = 946
                localctx.name = self.variable_identifier()

            elif token in [OParser.LBRAK]:
                localctx = OParser.CallableItemSelectorContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 947
                self.match(OParser.LBRAK)
                self.state = 948
                localctx.exp = self.expression(0)
                self.state = 949
                self.match(OParser.RBRAK)

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return OParser.RULE_expression

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class IntDivideExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.ExpressionContext)
            super().__init__(parser)
            self.left = None # ExpressionContext
            self.right = None # ExpressionContext
            self.copyFrom(ctx)

        def idivide(self):
            return self.getTypedRuleContext(OParser.IdivideContext,0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(OParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(OParser.ExpressionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterIntDivideExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitIntDivideExpression(self)


    class TernaryExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.ExpressionContext)
            super().__init__(parser)
            self.test = None # ExpressionContext
            self.ifTrue = None # ExpressionContext
            self.ifFalse = None # ExpressionContext
            self.copyFrom(ctx)

        def QMARK(self):
            return self.getToken(OParser.QMARK, 0)
        def COLON(self):
            return self.getToken(OParser.COLON, 0)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(OParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(OParser.ExpressionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterTernaryExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitTernaryExpression(self)


    class ContainsAllExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.ExpressionContext)
            super().__init__(parser)
            self.left = None # ExpressionContext
            self.right = None # ExpressionContext
            self.copyFrom(ctx)

        def CONTAINS(self):
            return self.getToken(OParser.CONTAINS, 0)
        def ALL(self):
            return self.getToken(OParser.ALL, 0)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(OParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(OParser.ExpressionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterContainsAllExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitContainsAllExpression(self)


    class NotEqualsExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.ExpressionContext)
            super().__init__(parser)
            self.left = None # ExpressionContext
            self.right = None # ExpressionContext
            self.copyFrom(ctx)

        def XEQ(self):
            return self.getToken(OParser.XEQ, 0)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(OParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(OParser.ExpressionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterNotEqualsExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitNotEqualsExpression(self)


    class InExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.ExpressionContext)
            super().__init__(parser)
            self.left = None # ExpressionContext
            self.right = None # ExpressionContext
            self.copyFrom(ctx)

        def IN(self):
            return self.getToken(OParser.IN, 0)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(OParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(OParser.ExpressionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterInExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitInExpression(self)


    class IsAnExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.ExpressionContext)
            super().__init__(parser)
            self.left = None # ExpressionContext
            self.right = None # An_expressionContext
            self.copyFrom(ctx)

        def IS(self):
            return self.getToken(OParser.IS, 0)
        def expression(self):
            return self.getTypedRuleContext(OParser.ExpressionContext,0)

        def an_expression(self):
            return self.getTypedRuleContext(OParser.An_expressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterIsAnExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitIsAnExpression(self)


    class NotExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.ExpressionContext)
            super().__init__(parser)
            self.exp = None # ExpressionContext
            self.copyFrom(ctx)

        def XMARK(self):
            return self.getToken(OParser.XMARK, 0)
        def expression(self):
            return self.getTypedRuleContext(OParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterNotExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitNotExpression(self)


    class GreaterThanExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.ExpressionContext)
            super().__init__(parser)
            self.left = None # ExpressionContext
            self.right = None # ExpressionContext
            self.copyFrom(ctx)

        def GT(self):
            return self.getToken(OParser.GT, 0)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(OParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(OParser.ExpressionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterGreaterThanExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitGreaterThanExpression(self)


    class OrExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.ExpressionContext)
            super().__init__(parser)
            self.left = None # ExpressionContext
            self.right = None # ExpressionContext
            self.copyFrom(ctx)

        def PIPE2(self):
            return self.getToken(OParser.PIPE2, 0)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(OParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(OParser.ExpressionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterOrExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitOrExpression(self)


    class CodeExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.ExpressionContext)
            super().__init__(parser)
            self.exp = None # ExpressionContext
            self.copyFrom(ctx)

        def CODE(self):
            return self.getToken(OParser.CODE, 0)
        def LPAR(self):
            return self.getToken(OParser.LPAR, 0)
        def RPAR(self):
            return self.getToken(OParser.RPAR, 0)
        def expression(self):
            return self.getTypedRuleContext(OParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterCodeExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitCodeExpression(self)


    class LessThanOrEqualExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.ExpressionContext)
            super().__init__(parser)
            self.left = None # ExpressionContext
            self.right = None # ExpressionContext
            self.copyFrom(ctx)

        def LTE(self):
            return self.getToken(OParser.LTE, 0)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(OParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(OParser.ExpressionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterLessThanOrEqualExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitLessThanOrEqualExpression(self)


    class AndExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.ExpressionContext)
            super().__init__(parser)
            self.left = None # ExpressionContext
            self.right = None # ExpressionContext
            self.copyFrom(ctx)

        def AMP2(self):
            return self.getToken(OParser.AMP2, 0)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(OParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(OParser.ExpressionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterAndExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitAndExpression(self)


    class ClosureExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.ExpressionContext)
            super().__init__(parser)
            self.exp = None # Closure_expressionContext
            self.copyFrom(ctx)

        def closure_expression(self):
            return self.getTypedRuleContext(OParser.Closure_expressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterClosureExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitClosureExpression(self)


    class NotContainsAnyExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.ExpressionContext)
            super().__init__(parser)
            self.left = None # ExpressionContext
            self.right = None # ExpressionContext
            self.copyFrom(ctx)

        def NOT(self):
            return self.getToken(OParser.NOT, 0)
        def CONTAINS(self):
            return self.getToken(OParser.CONTAINS, 0)
        def ANY(self):
            return self.getToken(OParser.ANY, 0)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(OParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(OParser.ExpressionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterNotContainsAnyExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitNotContainsAnyExpression(self)


    class ContainsExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.ExpressionContext)
            super().__init__(parser)
            self.left = None # ExpressionContext
            self.right = None # ExpressionContext
            self.copyFrom(ctx)

        def CONTAINS(self):
            return self.getToken(OParser.CONTAINS, 0)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(OParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(OParser.ExpressionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterContainsExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitContainsExpression(self)


    class NotContainsExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.ExpressionContext)
            super().__init__(parser)
            self.left = None # ExpressionContext
            self.right = None # ExpressionContext
            self.copyFrom(ctx)

        def NOT(self):
            return self.getToken(OParser.NOT, 0)
        def CONTAINS(self):
            return self.getToken(OParser.CONTAINS, 0)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(OParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(OParser.ExpressionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterNotContainsExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitNotContainsExpression(self)


    class MultiplyExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.ExpressionContext)
            super().__init__(parser)
            self.left = None # ExpressionContext
            self.right = None # ExpressionContext
            self.copyFrom(ctx)

        def multiply(self):
            return self.getTypedRuleContext(OParser.MultiplyContext,0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(OParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(OParser.ExpressionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterMultiplyExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitMultiplyExpression(self)


    class RoughlyEqualsExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.ExpressionContext)
            super().__init__(parser)
            self.left = None # ExpressionContext
            self.right = None # ExpressionContext
            self.copyFrom(ctx)

        def TEQ(self):
            return self.getToken(OParser.TEQ, 0)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(OParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(OParser.ExpressionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterRoughlyEqualsExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitRoughlyEqualsExpression(self)


    class IsNotAnExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.ExpressionContext)
            super().__init__(parser)
            self.left = None # ExpressionContext
            self.right = None # An_expressionContext
            self.copyFrom(ctx)

        def IS(self):
            return self.getToken(OParser.IS, 0)
        def NOT(self):
            return self.getToken(OParser.NOT, 0)
        def expression(self):
            return self.getTypedRuleContext(OParser.ExpressionContext,0)

        def an_expression(self):
            return self.getTypedRuleContext(OParser.An_expressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterIsNotAnExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitIsNotAnExpression(self)


    class ExecuteExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.ExpressionContext)
            super().__init__(parser)
            self.name = None # Variable_identifierContext
            self.copyFrom(ctx)

        def EXECUTE(self):
            return self.getToken(OParser.EXECUTE, 0)
        def LPAR(self):
            return self.getToken(OParser.LPAR, 0)
        def RPAR(self):
            return self.getToken(OParser.RPAR, 0)
        def variable_identifier(self):
            return self.getTypedRuleContext(OParser.Variable_identifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterExecuteExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitExecuteExpression(self)


    class MethodExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.ExpressionContext)
            super().__init__(parser)
            self.exp = None # Method_expressionContext
            self.copyFrom(ctx)

        def method_expression(self):
            return self.getTypedRuleContext(OParser.Method_expressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterMethodExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitMethodExpression(self)


    class GreaterThanOrEqualExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.ExpressionContext)
            super().__init__(parser)
            self.left = None # ExpressionContext
            self.right = None # ExpressionContext
            self.copyFrom(ctx)

        def GTE(self):
            return self.getToken(OParser.GTE, 0)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(OParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(OParser.ExpressionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterGreaterThanOrEqualExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitGreaterThanOrEqualExpression(self)


    class NotInExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.ExpressionContext)
            super().__init__(parser)
            self.left = None # ExpressionContext
            self.right = None # ExpressionContext
            self.copyFrom(ctx)

        def NOT(self):
            return self.getToken(OParser.NOT, 0)
        def IN(self):
            return self.getToken(OParser.IN, 0)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(OParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(OParser.ExpressionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterNotInExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitNotInExpression(self)


    class IteratorExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.ExpressionContext)
            super().__init__(parser)
            self.exp = None # ExpressionContext
            self.name = None # Variable_identifierContext
            self.source = None # ExpressionContext
            self.copyFrom(ctx)

        def FOR(self):
            return self.getToken(OParser.FOR, 0)
        def EACH(self):
            return self.getToken(OParser.EACH, 0)
        def LPAR(self):
            return self.getToken(OParser.LPAR, 0)
        def IN(self):
            return self.getToken(OParser.IN, 0)
        def RPAR(self):
            return self.getToken(OParser.RPAR, 0)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(OParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(OParser.ExpressionContext,i)

        def variable_identifier(self):
            return self.getTypedRuleContext(OParser.Variable_identifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterIteratorExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitIteratorExpression(self)


    class IsNotExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.ExpressionContext)
            super().__init__(parser)
            self.left = None # ExpressionContext
            self.right = None # ExpressionContext
            self.copyFrom(ctx)

        def IS(self):
            return self.getToken(OParser.IS, 0)
        def NOT(self):
            return self.getToken(OParser.NOT, 0)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(OParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(OParser.ExpressionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterIsNotExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitIsNotExpression(self)


    class DivideExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.ExpressionContext)
            super().__init__(parser)
            self.left = None # ExpressionContext
            self.right = None # ExpressionContext
            self.copyFrom(ctx)

        def divide(self):
            return self.getTypedRuleContext(OParser.DivideContext,0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(OParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(OParser.ExpressionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterDivideExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitDivideExpression(self)


    class IsExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.ExpressionContext)
            super().__init__(parser)
            self.left = None # ExpressionContext
            self.right = None # ExpressionContext
            self.copyFrom(ctx)

        def IS(self):
            return self.getToken(OParser.IS, 0)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(OParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(OParser.ExpressionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterIsExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitIsExpression(self)


    class MinusExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.ExpressionContext)
            super().__init__(parser)
            self.exp = None # ExpressionContext
            self.copyFrom(ctx)

        def MINUS(self):
            return self.getToken(OParser.MINUS, 0)
        def expression(self):
            return self.getTypedRuleContext(OParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterMinusExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitMinusExpression(self)


    class AddExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.ExpressionContext)
            super().__init__(parser)
            self.left = None # ExpressionContext
            self.op = None # Token
            self.right = None # ExpressionContext
            self.copyFrom(ctx)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(OParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(OParser.ExpressionContext,i)

        def PLUS(self):
            return self.getToken(OParser.PLUS, 0)
        def MINUS(self):
            return self.getToken(OParser.MINUS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterAddExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitAddExpression(self)


    class NotContainsAllExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.ExpressionContext)
            super().__init__(parser)
            self.left = None # ExpressionContext
            self.right = None # ExpressionContext
            self.copyFrom(ctx)

        def NOT(self):
            return self.getToken(OParser.NOT, 0)
        def CONTAINS(self):
            return self.getToken(OParser.CONTAINS, 0)
        def ALL(self):
            return self.getToken(OParser.ALL, 0)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(OParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(OParser.ExpressionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterNotContainsAllExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitNotContainsAllExpression(self)


    class InstanceExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.ExpressionContext)
            super().__init__(parser)
            self.exp = None # Instance_expressionContext
            self.copyFrom(ctx)

        def instance_expression(self):
            return self.getTypedRuleContext(OParser.Instance_expressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterInstanceExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitInstanceExpression(self)


    class CastExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.ExpressionContext)
            super().__init__(parser)
            self.right = None # Category_or_any_typeContext
            self.left = None # ExpressionContext
            self.copyFrom(ctx)

        def LPAR(self):
            return self.getToken(OParser.LPAR, 0)
        def RPAR(self):
            return self.getToken(OParser.RPAR, 0)
        def category_or_any_type(self):
            return self.getTypedRuleContext(OParser.Category_or_any_typeContext,0)

        def expression(self):
            return self.getTypedRuleContext(OParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterCastExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitCastExpression(self)


    class ContainsAnyExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.ExpressionContext)
            super().__init__(parser)
            self.left = None # ExpressionContext
            self.right = None # ExpressionContext
            self.copyFrom(ctx)

        def CONTAINS(self):
            return self.getToken(OParser.CONTAINS, 0)
        def ANY(self):
            return self.getToken(OParser.ANY, 0)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(OParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(OParser.ExpressionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterContainsAnyExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitContainsAnyExpression(self)


    class ModuloExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.ExpressionContext)
            super().__init__(parser)
            self.left = None # ExpressionContext
            self.right = None # ExpressionContext
            self.copyFrom(ctx)

        def modulo(self):
            return self.getTypedRuleContext(OParser.ModuloContext,0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(OParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(OParser.ExpressionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterModuloExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitModuloExpression(self)


    class LessThanExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.ExpressionContext)
            super().__init__(parser)
            self.left = None # ExpressionContext
            self.right = None # ExpressionContext
            self.copyFrom(ctx)

        def LT(self):
            return self.getToken(OParser.LT, 0)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(OParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(OParser.ExpressionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterLessThanExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitLessThanExpression(self)


    class EqualsExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.ExpressionContext)
            super().__init__(parser)
            self.left = None # ExpressionContext
            self.right = None # ExpressionContext
            self.copyFrom(ctx)

        def EQ2(self):
            return self.getToken(OParser.EQ2, 0)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(OParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(OParser.ExpressionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterEqualsExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitEqualsExpression(self)



    def expression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = OParser.ExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 88
        self.enterRecursionRule(localctx, 88, self.RULE_expression, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 976
            la_ = self._interp.adaptivePredict(self._input,66,self._ctx)
            if la_ == 1:
                localctx = OParser.MinusExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx

                self.state = 954
                self.match(OParser.MINUS)
                self.state = 955
                localctx.exp = self.expression(34)
                pass

            elif la_ == 2:
                localctx = OParser.NotExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 956
                self.match(OParser.XMARK)
                self.state = 957
                localctx.exp = self.expression(33)
                pass

            elif la_ == 3:
                localctx = OParser.CastExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 958
                self.match(OParser.LPAR)
                self.state = 959
                localctx.right = self.category_or_any_type()
                self.state = 960
                self.match(OParser.RPAR)
                self.state = 961
                localctx.left = self.expression(13)
                pass

            elif la_ == 4:
                localctx = OParser.InstanceExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 963
                localctx.exp = self.instance_expression(0)
                pass

            elif la_ == 5:
                localctx = OParser.MethodExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 964
                localctx.exp = self.method_expression()
                pass

            elif la_ == 6:
                localctx = OParser.CodeExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 965
                self.match(OParser.CODE)
                self.state = 966
                self.match(OParser.LPAR)
                self.state = 967
                localctx.exp = self.expression(0)
                self.state = 968
                self.match(OParser.RPAR)
                pass

            elif la_ == 7:
                localctx = OParser.ExecuteExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 970
                self.match(OParser.EXECUTE)
                self.state = 971
                self.match(OParser.LPAR)
                self.state = 972
                localctx.name = self.variable_identifier()
                self.state = 973
                self.match(OParser.RPAR)
                pass

            elif la_ == 8:
                localctx = OParser.ClosureExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 975
                localctx.exp = self.closure_expression()
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 1087
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,68,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 1085
                    la_ = self._interp.adaptivePredict(self._input,67,self._ctx)
                    if la_ == 1:
                        localctx = OParser.MultiplyExpressionContext(self, OParser.ExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 978
                        if not self.precpred(self._ctx, 32):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 32)")
                        self.state = 979
                        self.multiply()
                        self.state = 980
                        localctx.right = self.expression(33)
                        pass

                    elif la_ == 2:
                        localctx = OParser.DivideExpressionContext(self, OParser.ExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 982
                        if not self.precpred(self._ctx, 31):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 31)")
                        self.state = 983
                        self.divide()
                        self.state = 984
                        localctx.right = self.expression(32)
                        pass

                    elif la_ == 3:
                        localctx = OParser.ModuloExpressionContext(self, OParser.ExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 986
                        if not self.precpred(self._ctx, 30):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 30)")
                        self.state = 987
                        self.modulo()
                        self.state = 988
                        localctx.right = self.expression(31)
                        pass

                    elif la_ == 4:
                        localctx = OParser.IntDivideExpressionContext(self, OParser.ExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 990
                        if not self.precpred(self._ctx, 29):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 29)")
                        self.state = 991
                        self.idivide()
                        self.state = 992
                        localctx.right = self.expression(30)
                        pass

                    elif la_ == 5:
                        localctx = OParser.AddExpressionContext(self, OParser.ExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 994
                        if not self.precpred(self._ctx, 28):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 28)")
                        self.state = 995
                        localctx.op = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(_la==OParser.PLUS or _la==OParser.MINUS):
                            localctx.op = self._errHandler.recoverInline(self)
                        self.consume()
                        self.state = 996
                        localctx.right = self.expression(29)
                        pass

                    elif la_ == 6:
                        localctx = OParser.LessThanExpressionContext(self, OParser.ExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 997
                        if not self.precpred(self._ctx, 27):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 27)")
                        self.state = 998
                        self.match(OParser.LT)
                        self.state = 999
                        localctx.right = self.expression(28)
                        pass

                    elif la_ == 7:
                        localctx = OParser.LessThanOrEqualExpressionContext(self, OParser.ExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1000
                        if not self.precpred(self._ctx, 26):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 26)")
                        self.state = 1001
                        self.match(OParser.LTE)
                        self.state = 1002
                        localctx.right = self.expression(27)
                        pass

                    elif la_ == 8:
                        localctx = OParser.GreaterThanExpressionContext(self, OParser.ExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1003
                        if not self.precpred(self._ctx, 25):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 25)")
                        self.state = 1004
                        self.match(OParser.GT)
                        self.state = 1005
                        localctx.right = self.expression(26)
                        pass

                    elif la_ == 9:
                        localctx = OParser.GreaterThanOrEqualExpressionContext(self, OParser.ExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1006
                        if not self.precpred(self._ctx, 24):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 24)")
                        self.state = 1007
                        self.match(OParser.GTE)
                        self.state = 1008
                        localctx.right = self.expression(25)
                        pass

                    elif la_ == 10:
                        localctx = OParser.IsNotExpressionContext(self, OParser.ExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1009
                        if not self.precpred(self._ctx, 21):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 21)")
                        self.state = 1010
                        self.match(OParser.IS)
                        self.state = 1011
                        self.match(OParser.NOT)
                        self.state = 1012
                        localctx.right = self.expression(22)
                        pass

                    elif la_ == 11:
                        localctx = OParser.IsExpressionContext(self, OParser.ExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1013
                        if not self.precpred(self._ctx, 20):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 20)")
                        self.state = 1014
                        self.match(OParser.IS)
                        self.state = 1015
                        localctx.right = self.expression(21)
                        pass

                    elif la_ == 12:
                        localctx = OParser.EqualsExpressionContext(self, OParser.ExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1016
                        if not self.precpred(self._ctx, 19):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 19)")
                        self.state = 1017
                        self.match(OParser.EQ2)
                        self.state = 1018
                        localctx.right = self.expression(20)
                        pass

                    elif la_ == 13:
                        localctx = OParser.NotEqualsExpressionContext(self, OParser.ExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1019
                        if not self.precpred(self._ctx, 18):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 18)")
                        self.state = 1020
                        self.match(OParser.XEQ)
                        self.state = 1021
                        localctx.right = self.expression(19)
                        pass

                    elif la_ == 14:
                        localctx = OParser.RoughlyEqualsExpressionContext(self, OParser.ExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1022
                        if not self.precpred(self._ctx, 17):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 17)")
                        self.state = 1023
                        self.match(OParser.TEQ)
                        self.state = 1024
                        localctx.right = self.expression(18)
                        pass

                    elif la_ == 15:
                        localctx = OParser.OrExpressionContext(self, OParser.ExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1025
                        if not self.precpred(self._ctx, 16):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 16)")
                        self.state = 1026
                        self.match(OParser.PIPE2)
                        self.state = 1027
                        localctx.right = self.expression(17)
                        pass

                    elif la_ == 16:
                        localctx = OParser.AndExpressionContext(self, OParser.ExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1028
                        if not self.precpred(self._ctx, 15):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 15)")
                        self.state = 1029
                        self.match(OParser.AMP2)
                        self.state = 1030
                        localctx.right = self.expression(16)
                        pass

                    elif la_ == 17:
                        localctx = OParser.TernaryExpressionContext(self, OParser.ExpressionContext(self, _parentctx, _parentState))
                        localctx.test = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1031
                        if not self.precpred(self._ctx, 14):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 14)")
                        self.state = 1032
                        self.match(OParser.QMARK)
                        self.state = 1033
                        localctx.ifTrue = self.expression(0)
                        self.state = 1034
                        self.match(OParser.COLON)
                        self.state = 1035
                        localctx.ifFalse = self.expression(15)
                        pass

                    elif la_ == 18:
                        localctx = OParser.InExpressionContext(self, OParser.ExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1037
                        if not self.precpred(self._ctx, 12):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 12)")
                        self.state = 1038
                        self.match(OParser.IN)
                        self.state = 1039
                        localctx.right = self.expression(13)
                        pass

                    elif la_ == 19:
                        localctx = OParser.ContainsExpressionContext(self, OParser.ExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1040
                        if not self.precpred(self._ctx, 11):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 11)")
                        self.state = 1041
                        self.match(OParser.CONTAINS)
                        self.state = 1042
                        localctx.right = self.expression(12)
                        pass

                    elif la_ == 20:
                        localctx = OParser.ContainsAllExpressionContext(self, OParser.ExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1043
                        if not self.precpred(self._ctx, 10):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 10)")
                        self.state = 1044
                        self.match(OParser.CONTAINS)
                        self.state = 1045
                        self.match(OParser.ALL)
                        self.state = 1046
                        localctx.right = self.expression(11)
                        pass

                    elif la_ == 21:
                        localctx = OParser.ContainsAnyExpressionContext(self, OParser.ExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1047
                        if not self.precpred(self._ctx, 9):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 9)")
                        self.state = 1048
                        self.match(OParser.CONTAINS)
                        self.state = 1049
                        self.match(OParser.ANY)
                        self.state = 1050
                        localctx.right = self.expression(10)
                        pass

                    elif la_ == 22:
                        localctx = OParser.NotInExpressionContext(self, OParser.ExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1051
                        if not self.precpred(self._ctx, 8):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 8)")
                        self.state = 1052
                        self.match(OParser.NOT)
                        self.state = 1053
                        self.match(OParser.IN)
                        self.state = 1054
                        localctx.right = self.expression(9)
                        pass

                    elif la_ == 23:
                        localctx = OParser.NotContainsExpressionContext(self, OParser.ExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1055
                        if not self.precpred(self._ctx, 7):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 7)")
                        self.state = 1056
                        self.match(OParser.NOT)
                        self.state = 1057
                        self.match(OParser.CONTAINS)
                        self.state = 1058
                        localctx.right = self.expression(8)
                        pass

                    elif la_ == 24:
                        localctx = OParser.NotContainsAllExpressionContext(self, OParser.ExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1059
                        if not self.precpred(self._ctx, 6):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 6)")
                        self.state = 1060
                        self.match(OParser.NOT)
                        self.state = 1061
                        self.match(OParser.CONTAINS)
                        self.state = 1062
                        self.match(OParser.ALL)
                        self.state = 1063
                        localctx.right = self.expression(7)
                        pass

                    elif la_ == 25:
                        localctx = OParser.NotContainsAnyExpressionContext(self, OParser.ExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1064
                        if not self.precpred(self._ctx, 5):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 5)")
                        self.state = 1065
                        self.match(OParser.NOT)
                        self.state = 1066
                        self.match(OParser.CONTAINS)
                        self.state = 1067
                        self.match(OParser.ANY)
                        self.state = 1068
                        localctx.right = self.expression(6)
                        pass

                    elif la_ == 26:
                        localctx = OParser.IsNotAnExpressionContext(self, OParser.ExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1069
                        if not self.precpred(self._ctx, 23):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 23)")
                        self.state = 1070
                        self.match(OParser.IS)
                        self.state = 1071
                        self.match(OParser.NOT)
                        self.state = 1072
                        localctx.right = self.an_expression()
                        pass

                    elif la_ == 27:
                        localctx = OParser.IsAnExpressionContext(self, OParser.ExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1073
                        if not self.precpred(self._ctx, 22):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 22)")
                        self.state = 1074
                        self.match(OParser.IS)
                        self.state = 1075
                        localctx.right = self.an_expression()
                        pass

                    elif la_ == 28:
                        localctx = OParser.IteratorExpressionContext(self, OParser.ExpressionContext(self, _parentctx, _parentState))
                        localctx.exp = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1076
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 1077
                        self.match(OParser.FOR)
                        self.state = 1078
                        self.match(OParser.EACH)
                        self.state = 1079
                        self.match(OParser.LPAR)
                        self.state = 1080
                        localctx.name = self.variable_identifier()
                        self.state = 1081
                        self.match(OParser.IN)
                        self.state = 1082
                        localctx.source = self.expression(0)
                        self.state = 1083
                        self.match(OParser.RPAR)
                        pass

             
                self.state = 1089
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,68,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class An_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.typ = None # Category_or_any_typeContext

        def VARIABLE_IDENTIFIER(self):
            return self.getToken(OParser.VARIABLE_IDENTIFIER, 0)

        def category_or_any_type(self):
            return self.getTypedRuleContext(OParser.Category_or_any_typeContext,0)


        def getRuleIndex(self):
            return OParser.RULE_an_expression

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterAn_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitAn_expression(self)




    def an_expression(self):

        localctx = OParser.An_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_an_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1090
            if not self.willBeAOrAn():
                from antlr4.error.Errors import FailedPredicateException
                raise FailedPredicateException(self, "$parser.willBeAOrAn()")
            self.state = 1091
            self.match(OParser.VARIABLE_IDENTIFIER)
            self.state = 1092
            localctx.typ = self.category_or_any_type()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Closure_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # Type_identifierContext

        def type_identifier(self):
            return self.getTypedRuleContext(OParser.Type_identifierContext,0)


        def getRuleIndex(self):
            return OParser.RULE_closure_expression

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterClosure_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitClosure_expression(self)




    def closure_expression(self):

        localctx = OParser.Closure_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_closure_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1094
            localctx.name = self.type_identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Instance_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return OParser.RULE_instance_expression

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class SelectorExpressionContext(Instance_expressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Instance_expressionContext)
            super().__init__(parser)
            self.parent = None # Instance_expressionContext
            self.selector = None # Selector_expressionContext
            self.copyFrom(ctx)

        def instance_expression(self):
            return self.getTypedRuleContext(OParser.Instance_expressionContext,0)

        def selector_expression(self):
            return self.getTypedRuleContext(OParser.Selector_expressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterSelectorExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitSelectorExpression(self)


    class SelectableExpressionContext(Instance_expressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Instance_expressionContext)
            super().__init__(parser)
            self.parent = None # Selectable_expressionContext
            self.copyFrom(ctx)

        def selectable_expression(self):
            return self.getTypedRuleContext(OParser.Selectable_expressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterSelectableExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitSelectableExpression(self)



    def instance_expression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = OParser.Instance_expressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 94
        self.enterRecursionRule(localctx, 94, self.RULE_instance_expression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            localctx = OParser.SelectableExpressionContext(self, localctx)
            self._ctx = localctx
            _prevctx = localctx

            self.state = 1097
            localctx.parent = self.selectable_expression()
            self._ctx.stop = self._input.LT(-1)
            self.state = 1103
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,69,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = OParser.SelectorExpressionContext(self, OParser.Instance_expressionContext(self, _parentctx, _parentState))
                    localctx.parent = _prevctx
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_instance_expression)
                    self.state = 1099
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 1100
                    localctx.selector = self.selector_expression() 
                self.state = 1105
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,69,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class Method_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def blob_expression(self):
            return self.getTypedRuleContext(OParser.Blob_expressionContext,0)


        def document_expression(self):
            return self.getTypedRuleContext(OParser.Document_expressionContext,0)


        def fetch_list_expression(self):
            return self.getTypedRuleContext(OParser.Fetch_list_expressionContext,0)


        def fetch_store_expression(self):
            return self.getTypedRuleContext(OParser.Fetch_store_expressionContext,0)


        def read_expression(self):
            return self.getTypedRuleContext(OParser.Read_expressionContext,0)


        def sorted_expression(self):
            return self.getTypedRuleContext(OParser.Sorted_expressionContext,0)


        def method_call(self):
            return self.getTypedRuleContext(OParser.Method_callContext,0)


        def constructor_expression(self):
            return self.getTypedRuleContext(OParser.Constructor_expressionContext,0)


        def getRuleIndex(self):
            return OParser.RULE_method_expression

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterMethod_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitMethod_expression(self)




    def method_expression(self):

        localctx = OParser.Method_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_method_expression)
        try:
            self.state = 1114
            la_ = self._interp.adaptivePredict(self._input,70,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1106
                self.blob_expression()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1107
                self.document_expression()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1108
                self.fetch_list_expression()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1109
                self.fetch_store_expression()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1110
                self.read_expression()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1111
                self.sorted_expression()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1112
                self.method_call()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 1113
                self.constructor_expression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Blob_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BLOB(self):
            return self.getToken(OParser.BLOB, 0)

        def LPAR(self):
            return self.getToken(OParser.LPAR, 0)

        def expression(self):
            return self.getTypedRuleContext(OParser.ExpressionContext,0)


        def RPAR(self):
            return self.getToken(OParser.RPAR, 0)

        def getRuleIndex(self):
            return OParser.RULE_blob_expression

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterBlob_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitBlob_expression(self)




    def blob_expression(self):

        localctx = OParser.Blob_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_blob_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1116
            self.match(OParser.BLOB)
            self.state = 1117
            self.match(OParser.LPAR)
            self.state = 1118
            self.expression(0)
            self.state = 1119
            self.match(OParser.RPAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Document_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DOCUMENT(self):
            return self.getToken(OParser.DOCUMENT, 0)

        def LPAR(self):
            return self.getToken(OParser.LPAR, 0)

        def RPAR(self):
            return self.getToken(OParser.RPAR, 0)

        def expression(self):
            return self.getTypedRuleContext(OParser.ExpressionContext,0)


        def getRuleIndex(self):
            return OParser.RULE_document_expression

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterDocument_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitDocument_expression(self)




    def document_expression(self):

        localctx = OParser.Document_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_document_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1121
            self.match(OParser.DOCUMENT)
            self.state = 1122
            self.match(OParser.LPAR)
            self.state = 1124
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << OParser.LPAR) | (1 << OParser.LBRAK) | (1 << OParser.LCURL) | (1 << OParser.XMARK) | (1 << OParser.MINUS) | (1 << OParser.LT) | (1 << OParser.CODE) | (1 << OParser.DOCUMENT) | (1 << OParser.BLOB))) != 0) or ((((_la - 93)) & ~0x3f) == 0 and ((1 << (_la - 93)) & ((1 << (OParser.EXECUTE - 93)) | (1 << (OParser.FETCH - 93)) | (1 << (OParser.MUTABLE - 93)) | (1 << (OParser.NULL - 93)) | (1 << (OParser.READ - 93)) | (1 << (OParser.SELF - 93)) | (1 << (OParser.SORTED - 93)) | (1 << (OParser.THIS - 93)) | (1 << (OParser.BOOLEAN_LITERAL - 93)) | (1 << (OParser.CHAR_LITERAL - 93)) | (1 << (OParser.MIN_INTEGER - 93)) | (1 << (OParser.MAX_INTEGER - 93)) | (1 << (OParser.SYMBOL_IDENTIFIER - 93)) | (1 << (OParser.TYPE_IDENTIFIER - 93)) | (1 << (OParser.VARIABLE_IDENTIFIER - 93)))) != 0) or ((((_la - 158)) & ~0x3f) == 0 and ((1 << (_la - 158)) & ((1 << (OParser.TEXT_LITERAL - 158)) | (1 << (OParser.INTEGER_LITERAL - 158)) | (1 << (OParser.HEXA_LITERAL - 158)) | (1 << (OParser.DECIMAL_LITERAL - 158)) | (1 << (OParser.DATETIME_LITERAL - 158)) | (1 << (OParser.TIME_LITERAL - 158)) | (1 << (OParser.DATE_LITERAL - 158)) | (1 << (OParser.PERIOD_LITERAL - 158)))) != 0):
                self.state = 1123
                self.expression(0)


            self.state = 1126
            self.match(OParser.RPAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Read_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.source = None # ExpressionContext

        def READ(self):
            return self.getToken(OParser.READ, 0)

        def FROM(self):
            return self.getToken(OParser.FROM, 0)

        def expression(self):
            return self.getTypedRuleContext(OParser.ExpressionContext,0)


        def getRuleIndex(self):
            return OParser.RULE_read_expression

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterRead_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitRead_expression(self)




    def read_expression(self):

        localctx = OParser.Read_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_read_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1128
            self.match(OParser.READ)
            self.state = 1129
            self.match(OParser.FROM)
            self.state = 1130
            localctx.source = self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Write_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.what = None # ExpressionContext
            self.target = None # ExpressionContext

        def WRITE(self):
            return self.getToken(OParser.WRITE, 0)

        def LPAR(self):
            return self.getToken(OParser.LPAR, 0)

        def RPAR(self):
            return self.getToken(OParser.RPAR, 0)

        def TO(self):
            return self.getToken(OParser.TO, 0)

        def SEMI(self):
            return self.getToken(OParser.SEMI, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(OParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(OParser.ExpressionContext,i)


        def getRuleIndex(self):
            return OParser.RULE_write_statement

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterWrite_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitWrite_statement(self)




    def write_statement(self):

        localctx = OParser.Write_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_write_statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1132
            self.match(OParser.WRITE)
            self.state = 1133
            self.match(OParser.LPAR)
            self.state = 1134
            localctx.what = self.expression(0)
            self.state = 1135
            self.match(OParser.RPAR)
            self.state = 1136
            self.match(OParser.TO)
            self.state = 1137
            localctx.target = self.expression(0)
            self.state = 1138
            self.match(OParser.SEMI)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Fetch_list_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # Variable_identifierContext
            self.source = None # ExpressionContext
            self.predicate = None # ExpressionContext

        def FETCH(self):
            return self.getToken(OParser.FETCH, 0)

        def LPAR(self):
            return self.getToken(OParser.LPAR, 0)

        def RPAR(self):
            return self.getToken(OParser.RPAR, 0)

        def FROM(self):
            return self.getToken(OParser.FROM, 0)

        def WHERE(self):
            return self.getToken(OParser.WHERE, 0)

        def variable_identifier(self):
            return self.getTypedRuleContext(OParser.Variable_identifierContext,0)


        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(OParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(OParser.ExpressionContext,i)


        def getRuleIndex(self):
            return OParser.RULE_fetch_list_expression

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterFetch_list_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitFetch_list_expression(self)




    def fetch_list_expression(self):

        localctx = OParser.Fetch_list_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_fetch_list_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1140
            self.match(OParser.FETCH)
            self.state = 1141
            self.match(OParser.LPAR)
            self.state = 1142
            localctx.name = self.variable_identifier()
            self.state = 1143
            self.match(OParser.RPAR)
            self.state = 1144
            self.match(OParser.FROM)
            self.state = 1145
            localctx.source = self.expression(0)
            self.state = 1146
            self.match(OParser.WHERE)
            self.state = 1147
            localctx.predicate = self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Fetch_store_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return OParser.RULE_fetch_store_expression

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class FetchOneContext(Fetch_store_expressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Fetch_store_expressionContext)
            super().__init__(parser)
            self.typ = None # Mutable_category_typeContext
            self.predicate = None # ExpressionContext
            self.copyFrom(ctx)

        def FETCH(self):
            return self.getToken(OParser.FETCH, 0)
        def ONE(self):
            return self.getToken(OParser.ONE, 0)
        def LPAR(self, i:int=None):
            if i is None:
                return self.getTokens(OParser.LPAR)
            else:
                return self.getToken(OParser.LPAR, i)
        def RPAR(self, i:int=None):
            if i is None:
                return self.getTokens(OParser.RPAR)
            else:
                return self.getToken(OParser.RPAR, i)
        def WHERE(self):
            return self.getToken(OParser.WHERE, 0)
        def expression(self):
            return self.getTypedRuleContext(OParser.ExpressionContext,0)

        def mutable_category_type(self):
            return self.getTypedRuleContext(OParser.Mutable_category_typeContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterFetchOne(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitFetchOne(self)


    class FetchManyContext(Fetch_store_expressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Fetch_store_expressionContext)
            super().__init__(parser)
            self.typ = None # Mutable_category_typeContext
            self.xstart = None # ExpressionContext
            self.xstop = None # ExpressionContext
            self.predicate = None # ExpressionContext
            self.orderby = None # Order_by_listContext
            self.copyFrom(ctx)

        def FETCH(self):
            return self.getToken(OParser.FETCH, 0)
        def WHERE(self):
            return self.getToken(OParser.WHERE, 0)
        def LPAR(self, i:int=None):
            if i is None:
                return self.getTokens(OParser.LPAR)
            else:
                return self.getToken(OParser.LPAR, i)
        def RPAR(self, i:int=None):
            if i is None:
                return self.getTokens(OParser.RPAR)
            else:
                return self.getToken(OParser.RPAR, i)
        def ORDER(self):
            return self.getToken(OParser.ORDER, 0)
        def BY(self):
            return self.getToken(OParser.BY, 0)
        def ALL(self):
            return self.getToken(OParser.ALL, 0)
        def ROWS(self):
            return self.getToken(OParser.ROWS, 0)
        def TO(self):
            return self.getToken(OParser.TO, 0)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(OParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(OParser.ExpressionContext,i)

        def order_by_list(self):
            return self.getTypedRuleContext(OParser.Order_by_listContext,0)

        def mutable_category_type(self):
            return self.getTypedRuleContext(OParser.Mutable_category_typeContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterFetchMany(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitFetchMany(self)



    def fetch_store_expression(self):

        localctx = OParser.Fetch_store_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_fetch_store_expression)
        self._la = 0 # Token type
        try:
            self.state = 1197
            la_ = self._interp.adaptivePredict(self._input,78,self._ctx)
            if la_ == 1:
                localctx = OParser.FetchOneContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1149
                self.match(OParser.FETCH)
                self.state = 1150
                self.match(OParser.ONE)
                self.state = 1151
                self.match(OParser.LPAR)
                self.state = 1153
                _la = self._input.LA(1)
                if _la==OParser.MUTABLE or _la==OParser.TYPE_IDENTIFIER:
                    self.state = 1152
                    localctx.typ = self.mutable_category_type()


                self.state = 1155
                self.match(OParser.RPAR)
                self.state = 1156
                self.match(OParser.WHERE)
                self.state = 1157
                self.match(OParser.LPAR)
                self.state = 1158
                localctx.predicate = self.expression(0)
                self.state = 1159
                self.match(OParser.RPAR)
                pass

            elif la_ == 2:
                localctx = OParser.FetchManyContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1161
                self.match(OParser.FETCH)
                self.state = 1180
                token = self._input.LA(1)
                if token in [OParser.ALL]:
                    self.state = 1162
                    self.match(OParser.ALL)
                    self.state = 1163
                    self.match(OParser.LPAR)
                    self.state = 1165
                    _la = self._input.LA(1)
                    if _la==OParser.MUTABLE or _la==OParser.TYPE_IDENTIFIER:
                        self.state = 1164
                        localctx.typ = self.mutable_category_type()


                    self.state = 1167
                    self.match(OParser.RPAR)

                elif token in [OParser.LPAR]:
                    self.state = 1168
                    self.match(OParser.LPAR)
                    self.state = 1170
                    _la = self._input.LA(1)
                    if _la==OParser.MUTABLE or _la==OParser.TYPE_IDENTIFIER:
                        self.state = 1169
                        localctx.typ = self.mutable_category_type()


                    self.state = 1172
                    self.match(OParser.RPAR)
                    self.state = 1173
                    self.match(OParser.ROWS)
                    self.state = 1174
                    self.match(OParser.LPAR)
                    self.state = 1175
                    localctx.xstart = self.expression(0)
                    self.state = 1176
                    self.match(OParser.TO)
                    self.state = 1177
                    localctx.xstop = self.expression(0)
                    self.state = 1178
                    self.match(OParser.RPAR)

                else:
                    raise NoViableAltException(self)

                self.state = 1187
                la_ = self._interp.adaptivePredict(self._input,76,self._ctx)
                if la_ == 1:
                    self.state = 1182
                    self.match(OParser.WHERE)
                    self.state = 1183
                    self.match(OParser.LPAR)
                    self.state = 1184
                    localctx.predicate = self.expression(0)
                    self.state = 1185
                    self.match(OParser.RPAR)


                self.state = 1195
                la_ = self._interp.adaptivePredict(self._input,77,self._ctx)
                if la_ == 1:
                    self.state = 1189
                    self.match(OParser.ORDER)
                    self.state = 1190
                    self.match(OParser.BY)
                    self.state = 1191
                    self.match(OParser.LPAR)
                    self.state = 1192
                    localctx.orderby = self.order_by_list()
                    self.state = 1193
                    self.match(OParser.RPAR)


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Sorted_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.source = None # Instance_expressionContext
            self.key = None # Instance_expressionContext

        def SORTED(self):
            return self.getToken(OParser.SORTED, 0)

        def LPAR(self):
            return self.getToken(OParser.LPAR, 0)

        def RPAR(self):
            return self.getToken(OParser.RPAR, 0)

        def instance_expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(OParser.Instance_expressionContext)
            else:
                return self.getTypedRuleContext(OParser.Instance_expressionContext,i)


        def COMMA(self):
            return self.getToken(OParser.COMMA, 0)

        def key_token(self):
            return self.getTypedRuleContext(OParser.Key_tokenContext,0)


        def EQ(self):
            return self.getToken(OParser.EQ, 0)

        def getRuleIndex(self):
            return OParser.RULE_sorted_expression

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterSorted_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitSorted_expression(self)




    def sorted_expression(self):

        localctx = OParser.Sorted_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_sorted_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1199
            self.match(OParser.SORTED)
            self.state = 1200
            self.match(OParser.LPAR)
            self.state = 1201
            localctx.source = self.instance_expression(0)
            self.state = 1207
            _la = self._input.LA(1)
            if _la==OParser.COMMA:
                self.state = 1202
                self.match(OParser.COMMA)
                self.state = 1203
                self.key_token()
                self.state = 1204
                self.match(OParser.EQ)
                self.state = 1205
                localctx.key = self.instance_expression(0)


            self.state = 1209
            self.match(OParser.RPAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Selector_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return OParser.RULE_selector_expression

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class SliceSelectorContext(Selector_expressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Selector_expressionContext)
            super().__init__(parser)
            self.xslice = None # Slice_argumentsContext
            self.copyFrom(ctx)

        def LBRAK(self):
            return self.getToken(OParser.LBRAK, 0)
        def RBRAK(self):
            return self.getToken(OParser.RBRAK, 0)
        def slice_arguments(self):
            return self.getTypedRuleContext(OParser.Slice_argumentsContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterSliceSelector(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitSliceSelector(self)


    class MemberSelectorContext(Selector_expressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Selector_expressionContext)
            super().__init__(parser)
            self.name = None # Variable_identifierContext
            self.copyFrom(ctx)

        def DOT(self):
            return self.getToken(OParser.DOT, 0)
        def variable_identifier(self):
            return self.getTypedRuleContext(OParser.Variable_identifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterMemberSelector(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitMemberSelector(self)


    class ItemSelectorContext(Selector_expressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Selector_expressionContext)
            super().__init__(parser)
            self.exp = None # ExpressionContext
            self.copyFrom(ctx)

        def LBRAK(self):
            return self.getToken(OParser.LBRAK, 0)
        def RBRAK(self):
            return self.getToken(OParser.RBRAK, 0)
        def expression(self):
            return self.getTypedRuleContext(OParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterItemSelector(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitItemSelector(self)



    def selector_expression(self):

        localctx = OParser.Selector_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_selector_expression)
        try:
            self.state = 1221
            la_ = self._interp.adaptivePredict(self._input,80,self._ctx)
            if la_ == 1:
                localctx = OParser.MemberSelectorContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1211
                self.match(OParser.DOT)
                self.state = 1212
                localctx.name = self.variable_identifier()
                pass

            elif la_ == 2:
                localctx = OParser.ItemSelectorContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1213
                self.match(OParser.LBRAK)
                self.state = 1214
                localctx.exp = self.expression(0)
                self.state = 1215
                self.match(OParser.RBRAK)
                pass

            elif la_ == 3:
                localctx = OParser.SliceSelectorContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 1217
                self.match(OParser.LBRAK)
                self.state = 1218
                localctx.xslice = self.slice_arguments()
                self.state = 1219
                self.match(OParser.RBRAK)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Constructor_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.typ = None # Mutable_category_typeContext
            self.args = None # Argument_assignment_listContext

        def LPAR(self):
            return self.getToken(OParser.LPAR, 0)

        def RPAR(self):
            return self.getToken(OParser.RPAR, 0)

        def mutable_category_type(self):
            return self.getTypedRuleContext(OParser.Mutable_category_typeContext,0)


        def argument_assignment_list(self):
            return self.getTypedRuleContext(OParser.Argument_assignment_listContext,0)


        def getRuleIndex(self):
            return OParser.RULE_constructor_expression

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterConstructor_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitConstructor_expression(self)




    def constructor_expression(self):

        localctx = OParser.Constructor_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_constructor_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1223
            localctx.typ = self.mutable_category_type()
            self.state = 1224
            self.match(OParser.LPAR)
            self.state = 1226
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << OParser.LPAR) | (1 << OParser.LBRAK) | (1 << OParser.LCURL) | (1 << OParser.XMARK) | (1 << OParser.MINUS) | (1 << OParser.LT) | (1 << OParser.CODE) | (1 << OParser.DOCUMENT) | (1 << OParser.BLOB))) != 0) or ((((_la - 93)) & ~0x3f) == 0 and ((1 << (_la - 93)) & ((1 << (OParser.EXECUTE - 93)) | (1 << (OParser.FETCH - 93)) | (1 << (OParser.MUTABLE - 93)) | (1 << (OParser.NULL - 93)) | (1 << (OParser.READ - 93)) | (1 << (OParser.SELF - 93)) | (1 << (OParser.SORTED - 93)) | (1 << (OParser.THIS - 93)) | (1 << (OParser.BOOLEAN_LITERAL - 93)) | (1 << (OParser.CHAR_LITERAL - 93)) | (1 << (OParser.MIN_INTEGER - 93)) | (1 << (OParser.MAX_INTEGER - 93)) | (1 << (OParser.SYMBOL_IDENTIFIER - 93)) | (1 << (OParser.TYPE_IDENTIFIER - 93)) | (1 << (OParser.VARIABLE_IDENTIFIER - 93)))) != 0) or ((((_la - 158)) & ~0x3f) == 0 and ((1 << (_la - 158)) & ((1 << (OParser.TEXT_LITERAL - 158)) | (1 << (OParser.INTEGER_LITERAL - 158)) | (1 << (OParser.HEXA_LITERAL - 158)) | (1 << (OParser.DECIMAL_LITERAL - 158)) | (1 << (OParser.DATETIME_LITERAL - 158)) | (1 << (OParser.TIME_LITERAL - 158)) | (1 << (OParser.DATE_LITERAL - 158)) | (1 << (OParser.PERIOD_LITERAL - 158)))) != 0):
                self.state = 1225
                localctx.args = self.argument_assignment_list(0)


            self.state = 1228
            self.match(OParser.RPAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Argument_assignment_listContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return OParser.RULE_argument_assignment_list

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class ExpressionAssignmentListContext(Argument_assignment_listContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Argument_assignment_listContext)
            super().__init__(parser)
            self.exp = None # ExpressionContext
            self.copyFrom(ctx)

        def expression(self):
            return self.getTypedRuleContext(OParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterExpressionAssignmentList(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitExpressionAssignmentList(self)


    class ArgumentAssignmentListContext(Argument_assignment_listContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Argument_assignment_listContext)
            super().__init__(parser)
            self.item = None # Argument_assignmentContext
            self.copyFrom(ctx)

        def argument_assignment(self):
            return self.getTypedRuleContext(OParser.Argument_assignmentContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterArgumentAssignmentList(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitArgumentAssignmentList(self)


    class ArgumentAssignmentListItemContext(Argument_assignment_listContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Argument_assignment_listContext)
            super().__init__(parser)
            self.items = None # Argument_assignment_listContext
            self.item = None # Argument_assignmentContext
            self.copyFrom(ctx)

        def COMMA(self):
            return self.getToken(OParser.COMMA, 0)
        def argument_assignment_list(self):
            return self.getTypedRuleContext(OParser.Argument_assignment_listContext,0)

        def argument_assignment(self):
            return self.getTypedRuleContext(OParser.Argument_assignmentContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterArgumentAssignmentListItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitArgumentAssignmentListItem(self)



    def argument_assignment_list(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = OParser.Argument_assignment_listContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 116
        self.enterRecursionRule(localctx, 116, self.RULE_argument_assignment_list, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1235
            la_ = self._interp.adaptivePredict(self._input,82,self._ctx)
            if la_ == 1:
                localctx = OParser.ExpressionAssignmentListContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx

                self.state = 1231
                localctx.exp = self.expression(0)
                self.state = 1232
                if not self.willNotBe(self.equalToken()):
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "$parser.willNotBe($parser.equalToken())")
                pass

            elif la_ == 2:
                localctx = OParser.ArgumentAssignmentListContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1234
                localctx.item = self.argument_assignment()
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 1242
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,83,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = OParser.ArgumentAssignmentListItemContext(self, OParser.Argument_assignment_listContext(self, _parentctx, _parentState))
                    localctx.items = _prevctx
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_argument_assignment_list)
                    self.state = 1237
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 1238
                    self.match(OParser.COMMA)
                    self.state = 1239
                    localctx.item = self.argument_assignment() 
                self.state = 1244
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,83,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class Argument_assignmentContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # Variable_identifierContext
            self.exp = None # ExpressionContext

        def assign(self):
            return self.getTypedRuleContext(OParser.AssignContext,0)


        def variable_identifier(self):
            return self.getTypedRuleContext(OParser.Variable_identifierContext,0)


        def expression(self):
            return self.getTypedRuleContext(OParser.ExpressionContext,0)


        def getRuleIndex(self):
            return OParser.RULE_argument_assignment

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterArgument_assignment(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitArgument_assignment(self)




    def argument_assignment(self):

        localctx = OParser.Argument_assignmentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_argument_assignment)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1245
            localctx.name = self.variable_identifier()
            self.state = 1246
            self.assign()
            self.state = 1247
            localctx.exp = self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Assign_instance_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.inst = None # Assignable_instanceContext
            self.exp = None # ExpressionContext

        def assign(self):
            return self.getTypedRuleContext(OParser.AssignContext,0)


        def SEMI(self):
            return self.getToken(OParser.SEMI, 0)

        def assignable_instance(self):
            return self.getTypedRuleContext(OParser.Assignable_instanceContext,0)


        def expression(self):
            return self.getTypedRuleContext(OParser.ExpressionContext,0)


        def getRuleIndex(self):
            return OParser.RULE_assign_instance_statement

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterAssign_instance_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitAssign_instance_statement(self)




    def assign_instance_statement(self):

        localctx = OParser.Assign_instance_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_assign_instance_statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1249
            localctx.inst = self.assignable_instance(0)
            self.state = 1250
            self.assign()
            self.state = 1251
            localctx.exp = self.expression(0)
            self.state = 1252
            self.match(OParser.SEMI)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Child_instanceContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return OParser.RULE_child_instance

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class MemberInstanceContext(Child_instanceContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Child_instanceContext)
            super().__init__(parser)
            self.name = None # Variable_identifierContext
            self.copyFrom(ctx)

        def DOT(self):
            return self.getToken(OParser.DOT, 0)
        def variable_identifier(self):
            return self.getTypedRuleContext(OParser.Variable_identifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterMemberInstance(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitMemberInstance(self)


    class ItemInstanceContext(Child_instanceContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Child_instanceContext)
            super().__init__(parser)
            self.exp = None # ExpressionContext
            self.copyFrom(ctx)

        def LBRAK(self):
            return self.getToken(OParser.LBRAK, 0)
        def RBRAK(self):
            return self.getToken(OParser.RBRAK, 0)
        def expression(self):
            return self.getTypedRuleContext(OParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterItemInstance(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitItemInstance(self)



    def child_instance(self):

        localctx = OParser.Child_instanceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_child_instance)
        try:
            self.state = 1260
            token = self._input.LA(1)
            if token in [OParser.DOT]:
                localctx = OParser.MemberInstanceContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1254
                self.match(OParser.DOT)
                self.state = 1255
                localctx.name = self.variable_identifier()

            elif token in [OParser.LBRAK]:
                localctx = OParser.ItemInstanceContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1256
                self.match(OParser.LBRAK)
                self.state = 1257
                localctx.exp = self.expression(0)
                self.state = 1258
                self.match(OParser.RBRAK)

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Assign_tuple_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.items = None # Variable_identifier_listContext
            self.exp = None # ExpressionContext

        def assign(self):
            return self.getTypedRuleContext(OParser.AssignContext,0)


        def SEMI(self):
            return self.getToken(OParser.SEMI, 0)

        def variable_identifier_list(self):
            return self.getTypedRuleContext(OParser.Variable_identifier_listContext,0)


        def expression(self):
            return self.getTypedRuleContext(OParser.ExpressionContext,0)


        def getRuleIndex(self):
            return OParser.RULE_assign_tuple_statement

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterAssign_tuple_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitAssign_tuple_statement(self)




    def assign_tuple_statement(self):

        localctx = OParser.Assign_tuple_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_assign_tuple_statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1262
            localctx.items = self.variable_identifier_list()
            self.state = 1263
            self.assign()
            self.state = 1264
            localctx.exp = self.expression(0)
            self.state = 1265
            self.match(OParser.SEMI)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Null_literalContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NULL(self):
            return self.getToken(OParser.NULL, 0)

        def getRuleIndex(self):
            return OParser.RULE_null_literal

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterNull_literal(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitNull_literal(self)




    def null_literal(self):

        localctx = OParser.Null_literalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_null_literal)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1267
            self.match(OParser.NULL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Declaration_listContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return OParser.RULE_declaration_list

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class FullDeclarationListContext(Declaration_listContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Declaration_listContext)
            super().__init__(parser)
            self.copyFrom(ctx)

        def lfs(self):
            return self.getTypedRuleContext(OParser.LfsContext,0)

        def EOF(self):
            return self.getToken(OParser.EOF, 0)
        def declarations(self):
            return self.getTypedRuleContext(OParser.DeclarationsContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterFullDeclarationList(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitFullDeclarationList(self)



    def declaration_list(self):

        localctx = OParser.Declaration_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_declaration_list)
        self._la = 0 # Token type
        try:
            localctx = OParser.FullDeclarationListContext(self, localctx)
            self.enterOuterAlt(localctx, 1)
            self.state = 1270
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << OParser.COMMENT) | (1 << OParser.BOOLEAN) | (1 << OParser.CHARACTER) | (1 << OParser.TEXT) | (1 << OParser.INTEGER) | (1 << OParser.DECIMAL) | (1 << OParser.DATE) | (1 << OParser.TIME) | (1 << OParser.DATETIME) | (1 << OParser.PERIOD) | (1 << OParser.CODE) | (1 << OParser.DOCUMENT) | (1 << OParser.BLOB) | (1 << OParser.IMAGE) | (1 << OParser.UUID) | (1 << OParser.ITERATOR) | (1 << OParser.CURSOR) | (1 << OParser.ABSTRACT))) != 0) or ((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & ((1 << (OParser.ANY - 67)) | (1 << (OParser.ATTRIBUTE - 67)) | (1 << (OParser.CATEGORY - 67)) | (1 << (OParser.ENUMERATED - 67)) | (1 << (OParser.METHOD - 67)) | (1 << (OParser.NATIVE - 67)))) != 0) or ((((_la - 133)) & ~0x3f) == 0 and ((1 << (_la - 133)) & ((1 << (OParser.SINGLETON - 133)) | (1 << (OParser.STORABLE - 133)) | (1 << (OParser.TEST - 133)) | (1 << (OParser.TYPE_IDENTIFIER - 133)))) != 0):
                self.state = 1269
                self.declarations()


            self.state = 1272
            self.lfs()
            self.state = 1273
            self.match(OParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DeclarationsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(OParser.DeclarationContext)
            else:
                return self.getTypedRuleContext(OParser.DeclarationContext,i)


        def lfp(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(OParser.LfpContext)
            else:
                return self.getTypedRuleContext(OParser.LfpContext,i)


        def getRuleIndex(self):
            return OParser.RULE_declarations

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterDeclarations(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitDeclarations(self)




    def declarations(self):

        localctx = OParser.DeclarationsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_declarations)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1275
            self.declaration()
            self.state = 1281
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << OParser.COMMENT) | (1 << OParser.BOOLEAN) | (1 << OParser.CHARACTER) | (1 << OParser.TEXT) | (1 << OParser.INTEGER) | (1 << OParser.DECIMAL) | (1 << OParser.DATE) | (1 << OParser.TIME) | (1 << OParser.DATETIME) | (1 << OParser.PERIOD) | (1 << OParser.CODE) | (1 << OParser.DOCUMENT) | (1 << OParser.BLOB) | (1 << OParser.IMAGE) | (1 << OParser.UUID) | (1 << OParser.ITERATOR) | (1 << OParser.CURSOR) | (1 << OParser.ABSTRACT))) != 0) or ((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & ((1 << (OParser.ANY - 67)) | (1 << (OParser.ATTRIBUTE - 67)) | (1 << (OParser.CATEGORY - 67)) | (1 << (OParser.ENUMERATED - 67)) | (1 << (OParser.METHOD - 67)) | (1 << (OParser.NATIVE - 67)))) != 0) or ((((_la - 133)) & ~0x3f) == 0 and ((1 << (_la - 133)) & ((1 << (OParser.SINGLETON - 133)) | (1 << (OParser.STORABLE - 133)) | (1 << (OParser.TEST - 133)) | (1 << (OParser.TYPE_IDENTIFIER - 133)))) != 0):
                self.state = 1276
                self.lfp()
                self.state = 1277
                self.declaration()
                self.state = 1283
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def attribute_declaration(self):
            return self.getTypedRuleContext(OParser.Attribute_declarationContext,0)


        def category_declaration(self):
            return self.getTypedRuleContext(OParser.Category_declarationContext,0)


        def resource_declaration(self):
            return self.getTypedRuleContext(OParser.Resource_declarationContext,0)


        def enum_declaration(self):
            return self.getTypedRuleContext(OParser.Enum_declarationContext,0)


        def method_declaration(self):
            return self.getTypedRuleContext(OParser.Method_declarationContext,0)


        def comment_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(OParser.Comment_statementContext)
            else:
                return self.getTypedRuleContext(OParser.Comment_statementContext,i)


        def lfp(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(OParser.LfpContext)
            else:
                return self.getTypedRuleContext(OParser.LfpContext,i)


        def getRuleIndex(self):
            return OParser.RULE_declaration

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitDeclaration(self)




    def declaration(self):

        localctx = OParser.DeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1289
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==OParser.COMMENT:
                self.state = 1284
                self.comment_statement()
                self.state = 1285
                self.lfp()
                self.state = 1291
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1297
            la_ = self._interp.adaptivePredict(self._input,88,self._ctx)
            if la_ == 1:
                self.state = 1292
                self.attribute_declaration()
                pass

            elif la_ == 2:
                self.state = 1293
                self.category_declaration()
                pass

            elif la_ == 3:
                self.state = 1294
                self.resource_declaration()
                pass

            elif la_ == 4:
                self.state = 1295
                self.enum_declaration()
                pass

            elif la_ == 5:
                self.state = 1296
                self.method_declaration()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Resource_declarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def native_resource_declaration(self):
            return self.getTypedRuleContext(OParser.Native_resource_declarationContext,0)


        def getRuleIndex(self):
            return OParser.RULE_resource_declaration

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterResource_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitResource_declaration(self)




    def resource_declaration(self):

        localctx = OParser.Resource_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_resource_declaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1299
            self.native_resource_declaration()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Enum_declarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def enum_category_declaration(self):
            return self.getTypedRuleContext(OParser.Enum_category_declarationContext,0)


        def enum_native_declaration(self):
            return self.getTypedRuleContext(OParser.Enum_native_declarationContext,0)


        def getRuleIndex(self):
            return OParser.RULE_enum_declaration

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterEnum_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitEnum_declaration(self)




    def enum_declaration(self):

        localctx = OParser.Enum_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_enum_declaration)
        try:
            self.state = 1303
            la_ = self._interp.adaptivePredict(self._input,89,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1301
                self.enum_category_declaration()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1302
                self.enum_native_declaration()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Native_symbol_listContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def native_symbol(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(OParser.Native_symbolContext)
            else:
                return self.getTypedRuleContext(OParser.Native_symbolContext,i)


        def lfp(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(OParser.LfpContext)
            else:
                return self.getTypedRuleContext(OParser.LfpContext,i)


        def getRuleIndex(self):
            return OParser.RULE_native_symbol_list

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterNative_symbol_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitNative_symbol_list(self)




    def native_symbol_list(self):

        localctx = OParser.Native_symbol_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_native_symbol_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1305
            self.native_symbol()
            self.state = 1311
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==OParser.SYMBOL_IDENTIFIER:
                self.state = 1306
                self.lfp()
                self.state = 1307
                self.native_symbol()
                self.state = 1313
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Category_symbol_listContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def category_symbol(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(OParser.Category_symbolContext)
            else:
                return self.getTypedRuleContext(OParser.Category_symbolContext,i)


        def lfp(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(OParser.LfpContext)
            else:
                return self.getTypedRuleContext(OParser.LfpContext,i)


        def getRuleIndex(self):
            return OParser.RULE_category_symbol_list

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterCategory_symbol_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitCategory_symbol_list(self)




    def category_symbol_list(self):

        localctx = OParser.Category_symbol_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_category_symbol_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1314
            self.category_symbol()
            self.state = 1320
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==OParser.SYMBOL_IDENTIFIER:
                self.state = 1315
                self.lfp()
                self.state = 1316
                self.category_symbol()
                self.state = 1322
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Symbol_listContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def symbol_identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(OParser.Symbol_identifierContext)
            else:
                return self.getTypedRuleContext(OParser.Symbol_identifierContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(OParser.COMMA)
            else:
                return self.getToken(OParser.COMMA, i)

        def getRuleIndex(self):
            return OParser.RULE_symbol_list

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterSymbol_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitSymbol_list(self)




    def symbol_list(self):

        localctx = OParser.Symbol_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_symbol_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1323
            self.symbol_identifier()
            self.state = 1328
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==OParser.COMMA:
                self.state = 1324
                self.match(OParser.COMMA)
                self.state = 1325
                self.symbol_identifier()
                self.state = 1330
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Attribute_constraintContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return OParser.RULE_attribute_constraint

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class MatchingSetContext(Attribute_constraintContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Attribute_constraintContext)
            super().__init__(parser)
            self.source = None # Set_literalContext
            self.copyFrom(ctx)

        def IN(self):
            return self.getToken(OParser.IN, 0)
        def set_literal(self):
            return self.getTypedRuleContext(OParser.Set_literalContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterMatchingSet(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitMatchingSet(self)


    class MatchingPatternContext(Attribute_constraintContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Attribute_constraintContext)
            super().__init__(parser)
            self.text = None # Token
            self.copyFrom(ctx)

        def MATCHING(self):
            return self.getToken(OParser.MATCHING, 0)
        def TEXT_LITERAL(self):
            return self.getToken(OParser.TEXT_LITERAL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterMatchingPattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitMatchingPattern(self)


    class MatchingListContext(Attribute_constraintContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Attribute_constraintContext)
            super().__init__(parser)
            self.source = None # List_literalContext
            self.copyFrom(ctx)

        def IN(self):
            return self.getToken(OParser.IN, 0)
        def list_literal(self):
            return self.getTypedRuleContext(OParser.List_literalContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterMatchingList(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitMatchingList(self)


    class MatchingRangeContext(Attribute_constraintContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Attribute_constraintContext)
            super().__init__(parser)
            self.source = None # Range_literalContext
            self.copyFrom(ctx)

        def IN(self):
            return self.getToken(OParser.IN, 0)
        def range_literal(self):
            return self.getTypedRuleContext(OParser.Range_literalContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterMatchingRange(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitMatchingRange(self)


    class MatchingExpressionContext(Attribute_constraintContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Attribute_constraintContext)
            super().__init__(parser)
            self.exp = None # ExpressionContext
            self.copyFrom(ctx)

        def MATCHING(self):
            return self.getToken(OParser.MATCHING, 0)
        def expression(self):
            return self.getTypedRuleContext(OParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterMatchingExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitMatchingExpression(self)



    def attribute_constraint(self):

        localctx = OParser.Attribute_constraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_attribute_constraint)
        try:
            self.state = 1341
            la_ = self._interp.adaptivePredict(self._input,93,self._ctx)
            if la_ == 1:
                localctx = OParser.MatchingListContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1331
                self.match(OParser.IN)
                self.state = 1332
                localctx.source = self.list_literal()
                pass

            elif la_ == 2:
                localctx = OParser.MatchingSetContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1333
                self.match(OParser.IN)
                self.state = 1334
                localctx.source = self.set_literal()
                pass

            elif la_ == 3:
                localctx = OParser.MatchingRangeContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 1335
                self.match(OParser.IN)
                self.state = 1336
                localctx.source = self.range_literal()
                pass

            elif la_ == 4:
                localctx = OParser.MatchingPatternContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 1337
                self.match(OParser.MATCHING)
                self.state = 1338
                localctx.text = self.match(OParser.TEXT_LITERAL)
                pass

            elif la_ == 5:
                localctx = OParser.MatchingExpressionContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 1339
                self.match(OParser.MATCHING)
                self.state = 1340
                localctx.exp = self.expression(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class List_literalContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRAK(self):
            return self.getToken(OParser.LBRAK, 0)

        def RBRAK(self):
            return self.getToken(OParser.RBRAK, 0)

        def MUTABLE(self):
            return self.getToken(OParser.MUTABLE, 0)

        def expression_list(self):
            return self.getTypedRuleContext(OParser.Expression_listContext,0)


        def getRuleIndex(self):
            return OParser.RULE_list_literal

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterList_literal(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitList_literal(self)




    def list_literal(self):

        localctx = OParser.List_literalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_list_literal)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1344
            _la = self._input.LA(1)
            if _la==OParser.MUTABLE:
                self.state = 1343
                self.match(OParser.MUTABLE)


            self.state = 1346
            self.match(OParser.LBRAK)
            self.state = 1348
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << OParser.LPAR) | (1 << OParser.LBRAK) | (1 << OParser.LCURL) | (1 << OParser.XMARK) | (1 << OParser.MINUS) | (1 << OParser.LT) | (1 << OParser.CODE) | (1 << OParser.DOCUMENT) | (1 << OParser.BLOB))) != 0) or ((((_la - 93)) & ~0x3f) == 0 and ((1 << (_la - 93)) & ((1 << (OParser.EXECUTE - 93)) | (1 << (OParser.FETCH - 93)) | (1 << (OParser.MUTABLE - 93)) | (1 << (OParser.NULL - 93)) | (1 << (OParser.READ - 93)) | (1 << (OParser.SELF - 93)) | (1 << (OParser.SORTED - 93)) | (1 << (OParser.THIS - 93)) | (1 << (OParser.BOOLEAN_LITERAL - 93)) | (1 << (OParser.CHAR_LITERAL - 93)) | (1 << (OParser.MIN_INTEGER - 93)) | (1 << (OParser.MAX_INTEGER - 93)) | (1 << (OParser.SYMBOL_IDENTIFIER - 93)) | (1 << (OParser.TYPE_IDENTIFIER - 93)) | (1 << (OParser.VARIABLE_IDENTIFIER - 93)))) != 0) or ((((_la - 158)) & ~0x3f) == 0 and ((1 << (_la - 158)) & ((1 << (OParser.TEXT_LITERAL - 158)) | (1 << (OParser.INTEGER_LITERAL - 158)) | (1 << (OParser.HEXA_LITERAL - 158)) | (1 << (OParser.DECIMAL_LITERAL - 158)) | (1 << (OParser.DATETIME_LITERAL - 158)) | (1 << (OParser.TIME_LITERAL - 158)) | (1 << (OParser.DATE_LITERAL - 158)) | (1 << (OParser.PERIOD_LITERAL - 158)))) != 0):
                self.state = 1347
                self.expression_list()


            self.state = 1350
            self.match(OParser.RBRAK)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Set_literalContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LT(self):
            return self.getToken(OParser.LT, 0)

        def GT(self):
            return self.getToken(OParser.GT, 0)

        def MUTABLE(self):
            return self.getToken(OParser.MUTABLE, 0)

        def expression_list(self):
            return self.getTypedRuleContext(OParser.Expression_listContext,0)


        def getRuleIndex(self):
            return OParser.RULE_set_literal

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterSet_literal(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitSet_literal(self)




    def set_literal(self):

        localctx = OParser.Set_literalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_set_literal)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1353
            _la = self._input.LA(1)
            if _la==OParser.MUTABLE:
                self.state = 1352
                self.match(OParser.MUTABLE)


            self.state = 1355
            self.match(OParser.LT)
            self.state = 1357
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << OParser.LPAR) | (1 << OParser.LBRAK) | (1 << OParser.LCURL) | (1 << OParser.XMARK) | (1 << OParser.MINUS) | (1 << OParser.LT) | (1 << OParser.CODE) | (1 << OParser.DOCUMENT) | (1 << OParser.BLOB))) != 0) or ((((_la - 93)) & ~0x3f) == 0 and ((1 << (_la - 93)) & ((1 << (OParser.EXECUTE - 93)) | (1 << (OParser.FETCH - 93)) | (1 << (OParser.MUTABLE - 93)) | (1 << (OParser.NULL - 93)) | (1 << (OParser.READ - 93)) | (1 << (OParser.SELF - 93)) | (1 << (OParser.SORTED - 93)) | (1 << (OParser.THIS - 93)) | (1 << (OParser.BOOLEAN_LITERAL - 93)) | (1 << (OParser.CHAR_LITERAL - 93)) | (1 << (OParser.MIN_INTEGER - 93)) | (1 << (OParser.MAX_INTEGER - 93)) | (1 << (OParser.SYMBOL_IDENTIFIER - 93)) | (1 << (OParser.TYPE_IDENTIFIER - 93)) | (1 << (OParser.VARIABLE_IDENTIFIER - 93)))) != 0) or ((((_la - 158)) & ~0x3f) == 0 and ((1 << (_la - 158)) & ((1 << (OParser.TEXT_LITERAL - 158)) | (1 << (OParser.INTEGER_LITERAL - 158)) | (1 << (OParser.HEXA_LITERAL - 158)) | (1 << (OParser.DECIMAL_LITERAL - 158)) | (1 << (OParser.DATETIME_LITERAL - 158)) | (1 << (OParser.TIME_LITERAL - 158)) | (1 << (OParser.DATE_LITERAL - 158)) | (1 << (OParser.PERIOD_LITERAL - 158)))) != 0):
                self.state = 1356
                self.expression_list()


            self.state = 1359
            self.match(OParser.GT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Expression_listContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(OParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(OParser.ExpressionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(OParser.COMMA)
            else:
                return self.getToken(OParser.COMMA, i)

        def getRuleIndex(self):
            return OParser.RULE_expression_list

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterExpression_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitExpression_list(self)




    def expression_list(self):

        localctx = OParser.Expression_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_expression_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1361
            self.expression(0)
            self.state = 1366
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==OParser.COMMA:
                self.state = 1362
                self.match(OParser.COMMA)
                self.state = 1363
                self.expression(0)
                self.state = 1368
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Range_literalContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.low = None # ExpressionContext
            self.high = None # ExpressionContext

        def LBRAK(self):
            return self.getToken(OParser.LBRAK, 0)

        def RANGE(self):
            return self.getToken(OParser.RANGE, 0)

        def RBRAK(self):
            return self.getToken(OParser.RBRAK, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(OParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(OParser.ExpressionContext,i)


        def getRuleIndex(self):
            return OParser.RULE_range_literal

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterRange_literal(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitRange_literal(self)




    def range_literal(self):

        localctx = OParser.Range_literalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_range_literal)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1369
            self.match(OParser.LBRAK)
            self.state = 1370
            localctx.low = self.expression(0)
            self.state = 1371
            self.match(OParser.RANGE)
            self.state = 1372
            localctx.high = self.expression(0)
            self.state = 1373
            self.match(OParser.RBRAK)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TypedefContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return OParser.RULE_typedef

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class IteratorTypeContext(TypedefContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.TypedefContext)
            super().__init__(parser)
            self.i = None # TypedefContext
            self.copyFrom(ctx)

        def ITERATOR(self):
            return self.getToken(OParser.ITERATOR, 0)
        def LT(self):
            return self.getToken(OParser.LT, 0)
        def GT(self):
            return self.getToken(OParser.GT, 0)
        def typedef(self):
            return self.getTypedRuleContext(OParser.TypedefContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterIteratorType(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitIteratorType(self)


    class SetTypeContext(TypedefContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.TypedefContext)
            super().__init__(parser)
            self.s = None # TypedefContext
            self.copyFrom(ctx)

        def LTGT(self):
            return self.getToken(OParser.LTGT, 0)
        def typedef(self):
            return self.getTypedRuleContext(OParser.TypedefContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterSetType(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitSetType(self)


    class ListTypeContext(TypedefContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.TypedefContext)
            super().__init__(parser)
            self.l = None # TypedefContext
            self.copyFrom(ctx)

        def LBRAK(self):
            return self.getToken(OParser.LBRAK, 0)
        def RBRAK(self):
            return self.getToken(OParser.RBRAK, 0)
        def typedef(self):
            return self.getTypedRuleContext(OParser.TypedefContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterListType(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitListType(self)


    class DictTypeContext(TypedefContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.TypedefContext)
            super().__init__(parser)
            self.d = None # TypedefContext
            self.copyFrom(ctx)

        def LCURL(self):
            return self.getToken(OParser.LCURL, 0)
        def RCURL(self):
            return self.getToken(OParser.RCURL, 0)
        def typedef(self):
            return self.getTypedRuleContext(OParser.TypedefContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterDictType(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitDictType(self)


    class CursorTypeContext(TypedefContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.TypedefContext)
            super().__init__(parser)
            self.c = None # TypedefContext
            self.copyFrom(ctx)

        def CURSOR(self):
            return self.getToken(OParser.CURSOR, 0)
        def LT(self):
            return self.getToken(OParser.LT, 0)
        def GT(self):
            return self.getToken(OParser.GT, 0)
        def typedef(self):
            return self.getTypedRuleContext(OParser.TypedefContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterCursorType(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitCursorType(self)


    class PrimaryTypeContext(TypedefContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.TypedefContext)
            super().__init__(parser)
            self.p = None # Primary_typeContext
            self.copyFrom(ctx)

        def primary_type(self):
            return self.getTypedRuleContext(OParser.Primary_typeContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterPrimaryType(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitPrimaryType(self)



    def typedef(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = OParser.TypedefContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 154
        self.enterRecursionRule(localctx, 154, self.RULE_typedef, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1387
            token = self._input.LA(1)
            if token in [OParser.BOOLEAN, OParser.CHARACTER, OParser.TEXT, OParser.INTEGER, OParser.DECIMAL, OParser.DATE, OParser.TIME, OParser.DATETIME, OParser.PERIOD, OParser.CODE, OParser.DOCUMENT, OParser.BLOB, OParser.IMAGE, OParser.UUID, OParser.TYPE_IDENTIFIER]:
                localctx = OParser.PrimaryTypeContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx

                self.state = 1376
                localctx.p = self.primary_type()

            elif token in [OParser.CURSOR]:
                localctx = OParser.CursorTypeContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1377
                self.match(OParser.CURSOR)
                self.state = 1378
                self.match(OParser.LT)
                self.state = 1379
                localctx.c = self.typedef(0)
                self.state = 1380
                self.match(OParser.GT)

            elif token in [OParser.ITERATOR]:
                localctx = OParser.IteratorTypeContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1382
                self.match(OParser.ITERATOR)
                self.state = 1383
                self.match(OParser.LT)
                self.state = 1384
                localctx.i = self.typedef(0)
                self.state = 1385
                self.match(OParser.GT)

            else:
                raise NoViableAltException(self)

            self._ctx.stop = self._input.LT(-1)
            self.state = 1399
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,101,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 1397
                    la_ = self._interp.adaptivePredict(self._input,100,self._ctx)
                    if la_ == 1:
                        localctx = OParser.SetTypeContext(self, OParser.TypedefContext(self, _parentctx, _parentState))
                        localctx.s = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_typedef)
                        self.state = 1389
                        if not self.precpred(self._ctx, 5):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 5)")
                        self.state = 1390
                        self.match(OParser.LTGT)
                        pass

                    elif la_ == 2:
                        localctx = OParser.ListTypeContext(self, OParser.TypedefContext(self, _parentctx, _parentState))
                        localctx.l = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_typedef)
                        self.state = 1391
                        if not self.precpred(self._ctx, 4):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 4)")
                        self.state = 1392
                        self.match(OParser.LBRAK)
                        self.state = 1393
                        self.match(OParser.RBRAK)
                        pass

                    elif la_ == 3:
                        localctx = OParser.DictTypeContext(self, OParser.TypedefContext(self, _parentctx, _parentState))
                        localctx.d = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_typedef)
                        self.state = 1394
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 1395
                        self.match(OParser.LCURL)
                        self.state = 1396
                        self.match(OParser.RCURL)
                        pass

             
                self.state = 1401
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,101,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class Primary_typeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return OParser.RULE_primary_type

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class NativeTypeContext(Primary_typeContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Primary_typeContext)
            super().__init__(parser)
            self.n = None # Native_typeContext
            self.copyFrom(ctx)

        def native_type(self):
            return self.getTypedRuleContext(OParser.Native_typeContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterNativeType(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitNativeType(self)


    class CategoryTypeContext(Primary_typeContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Primary_typeContext)
            super().__init__(parser)
            self.c = None # Category_typeContext
            self.copyFrom(ctx)

        def category_type(self):
            return self.getTypedRuleContext(OParser.Category_typeContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterCategoryType(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitCategoryType(self)



    def primary_type(self):

        localctx = OParser.Primary_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_primary_type)
        try:
            self.state = 1404
            token = self._input.LA(1)
            if token in [OParser.BOOLEAN, OParser.CHARACTER, OParser.TEXT, OParser.INTEGER, OParser.DECIMAL, OParser.DATE, OParser.TIME, OParser.DATETIME, OParser.PERIOD, OParser.CODE, OParser.DOCUMENT, OParser.BLOB, OParser.IMAGE, OParser.UUID]:
                localctx = OParser.NativeTypeContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1402
                localctx.n = self.native_type()

            elif token in [OParser.TYPE_IDENTIFIER]:
                localctx = OParser.CategoryTypeContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1403
                localctx.c = self.category_type()

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Native_typeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return OParser.RULE_native_type

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class PeriodTypeContext(Native_typeContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Native_typeContext)
            super().__init__(parser)
            self.copyFrom(ctx)

        def PERIOD(self):
            return self.getToken(OParser.PERIOD, 0)

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterPeriodType(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitPeriodType(self)


    class BooleanTypeContext(Native_typeContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Native_typeContext)
            super().__init__(parser)
            self.copyFrom(ctx)

        def BOOLEAN(self):
            return self.getToken(OParser.BOOLEAN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterBooleanType(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitBooleanType(self)


    class DocumentTypeContext(Native_typeContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Native_typeContext)
            super().__init__(parser)
            self.copyFrom(ctx)

        def DOCUMENT(self):
            return self.getToken(OParser.DOCUMENT, 0)

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterDocumentType(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitDocumentType(self)


    class CharacterTypeContext(Native_typeContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Native_typeContext)
            super().__init__(parser)
            self.copyFrom(ctx)

        def CHARACTER(self):
            return self.getToken(OParser.CHARACTER, 0)

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterCharacterType(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitCharacterType(self)


    class TextTypeContext(Native_typeContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Native_typeContext)
            super().__init__(parser)
            self.copyFrom(ctx)

        def TEXT(self):
            return self.getToken(OParser.TEXT, 0)

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterTextType(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitTextType(self)


    class ImageTypeContext(Native_typeContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Native_typeContext)
            super().__init__(parser)
            self.copyFrom(ctx)

        def IMAGE(self):
            return self.getToken(OParser.IMAGE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterImageType(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitImageType(self)


    class TimeTypeContext(Native_typeContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Native_typeContext)
            super().__init__(parser)
            self.copyFrom(ctx)

        def TIME(self):
            return self.getToken(OParser.TIME, 0)

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterTimeType(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitTimeType(self)


    class IntegerTypeContext(Native_typeContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Native_typeContext)
            super().__init__(parser)
            self.copyFrom(ctx)

        def INTEGER(self):
            return self.getToken(OParser.INTEGER, 0)

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterIntegerType(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitIntegerType(self)


    class DateTimeTypeContext(Native_typeContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Native_typeContext)
            super().__init__(parser)
            self.copyFrom(ctx)

        def DATETIME(self):
            return self.getToken(OParser.DATETIME, 0)

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterDateTimeType(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitDateTimeType(self)


    class BlobTypeContext(Native_typeContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Native_typeContext)
            super().__init__(parser)
            self.copyFrom(ctx)

        def BLOB(self):
            return self.getToken(OParser.BLOB, 0)

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterBlobType(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitBlobType(self)


    class UUIDTypeContext(Native_typeContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Native_typeContext)
            super().__init__(parser)
            self.copyFrom(ctx)

        def UUID(self):
            return self.getToken(OParser.UUID, 0)

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterUUIDType(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitUUIDType(self)


    class DecimalTypeContext(Native_typeContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Native_typeContext)
            super().__init__(parser)
            self.copyFrom(ctx)

        def DECIMAL(self):
            return self.getToken(OParser.DECIMAL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterDecimalType(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitDecimalType(self)


    class CodeTypeContext(Native_typeContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Native_typeContext)
            super().__init__(parser)
            self.copyFrom(ctx)

        def CODE(self):
            return self.getToken(OParser.CODE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterCodeType(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitCodeType(self)


    class DateTypeContext(Native_typeContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Native_typeContext)
            super().__init__(parser)
            self.copyFrom(ctx)

        def DATE(self):
            return self.getToken(OParser.DATE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterDateType(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitDateType(self)



    def native_type(self):

        localctx = OParser.Native_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_native_type)
        try:
            self.state = 1420
            token = self._input.LA(1)
            if token in [OParser.BOOLEAN]:
                localctx = OParser.BooleanTypeContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1406
                self.match(OParser.BOOLEAN)

            elif token in [OParser.CHARACTER]:
                localctx = OParser.CharacterTypeContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1407
                self.match(OParser.CHARACTER)

            elif token in [OParser.TEXT]:
                localctx = OParser.TextTypeContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 1408
                self.match(OParser.TEXT)

            elif token in [OParser.IMAGE]:
                localctx = OParser.ImageTypeContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 1409
                self.match(OParser.IMAGE)

            elif token in [OParser.INTEGER]:
                localctx = OParser.IntegerTypeContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 1410
                self.match(OParser.INTEGER)

            elif token in [OParser.DECIMAL]:
                localctx = OParser.DecimalTypeContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 1411
                self.match(OParser.DECIMAL)

            elif token in [OParser.DOCUMENT]:
                localctx = OParser.DocumentTypeContext(self, localctx)
                self.enterOuterAlt(localctx, 7)
                self.state = 1412
                self.match(OParser.DOCUMENT)

            elif token in [OParser.DATE]:
                localctx = OParser.DateTypeContext(self, localctx)
                self.enterOuterAlt(localctx, 8)
                self.state = 1413
                self.match(OParser.DATE)

            elif token in [OParser.DATETIME]:
                localctx = OParser.DateTimeTypeContext(self, localctx)
                self.enterOuterAlt(localctx, 9)
                self.state = 1414
                self.match(OParser.DATETIME)

            elif token in [OParser.TIME]:
                localctx = OParser.TimeTypeContext(self, localctx)
                self.enterOuterAlt(localctx, 10)
                self.state = 1415
                self.match(OParser.TIME)

            elif token in [OParser.PERIOD]:
                localctx = OParser.PeriodTypeContext(self, localctx)
                self.enterOuterAlt(localctx, 11)
                self.state = 1416
                self.match(OParser.PERIOD)

            elif token in [OParser.CODE]:
                localctx = OParser.CodeTypeContext(self, localctx)
                self.enterOuterAlt(localctx, 12)
                self.state = 1417
                self.match(OParser.CODE)

            elif token in [OParser.BLOB]:
                localctx = OParser.BlobTypeContext(self, localctx)
                self.enterOuterAlt(localctx, 13)
                self.state = 1418
                self.match(OParser.BLOB)

            elif token in [OParser.UUID]:
                localctx = OParser.UUIDTypeContext(self, localctx)
                self.enterOuterAlt(localctx, 14)
                self.state = 1419
                self.match(OParser.UUID)

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Category_typeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.t1 = None # Token

        def TYPE_IDENTIFIER(self):
            return self.getToken(OParser.TYPE_IDENTIFIER, 0)

        def getRuleIndex(self):
            return OParser.RULE_category_type

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterCategory_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitCategory_type(self)




    def category_type(self):

        localctx = OParser.Category_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_category_type)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1422
            localctx.t1 = self.match(OParser.TYPE_IDENTIFIER)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Mutable_category_typeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def category_type(self):
            return self.getTypedRuleContext(OParser.Category_typeContext,0)


        def MUTABLE(self):
            return self.getToken(OParser.MUTABLE, 0)

        def getRuleIndex(self):
            return OParser.RULE_mutable_category_type

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterMutable_category_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitMutable_category_type(self)




    def mutable_category_type(self):

        localctx = OParser.Mutable_category_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_mutable_category_type)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1425
            _la = self._input.LA(1)
            if _la==OParser.MUTABLE:
                self.state = 1424
                self.match(OParser.MUTABLE)


            self.state = 1427
            self.category_type()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Code_typeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.t1 = None # Token

        def CODE(self):
            return self.getToken(OParser.CODE, 0)

        def getRuleIndex(self):
            return OParser.RULE_code_type

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterCode_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitCode_type(self)




    def code_type(self):

        localctx = OParser.Code_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_code_type)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1429
            localctx.t1 = self.match(OParser.CODE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Category_declarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return OParser.RULE_category_declaration

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class ConcreteCategoryDeclarationContext(Category_declarationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Category_declarationContext)
            super().__init__(parser)
            self.decl = None # Concrete_category_declarationContext
            self.copyFrom(ctx)

        def concrete_category_declaration(self):
            return self.getTypedRuleContext(OParser.Concrete_category_declarationContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterConcreteCategoryDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitConcreteCategoryDeclaration(self)


    class NativeCategoryDeclarationContext(Category_declarationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Category_declarationContext)
            super().__init__(parser)
            self.decl = None # Native_category_declarationContext
            self.copyFrom(ctx)

        def native_category_declaration(self):
            return self.getTypedRuleContext(OParser.Native_category_declarationContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterNativeCategoryDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitNativeCategoryDeclaration(self)


    class SingletonCategoryDeclarationContext(Category_declarationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Category_declarationContext)
            super().__init__(parser)
            self.decl = None # Singleton_category_declarationContext
            self.copyFrom(ctx)

        def singleton_category_declaration(self):
            return self.getTypedRuleContext(OParser.Singleton_category_declarationContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterSingletonCategoryDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitSingletonCategoryDeclaration(self)



    def category_declaration(self):

        localctx = OParser.Category_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_category_declaration)
        try:
            self.state = 1434
            la_ = self._interp.adaptivePredict(self._input,105,self._ctx)
            if la_ == 1:
                localctx = OParser.ConcreteCategoryDeclarationContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1431
                localctx.decl = self.concrete_category_declaration()
                pass

            elif la_ == 2:
                localctx = OParser.NativeCategoryDeclarationContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1432
                localctx.decl = self.native_category_declaration()
                pass

            elif la_ == 3:
                localctx = OParser.SingletonCategoryDeclarationContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 1433
                localctx.decl = self.singleton_category_declaration()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Type_identifier_listContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def type_identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(OParser.Type_identifierContext)
            else:
                return self.getTypedRuleContext(OParser.Type_identifierContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(OParser.COMMA)
            else:
                return self.getToken(OParser.COMMA, i)

        def getRuleIndex(self):
            return OParser.RULE_type_identifier_list

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterType_identifier_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitType_identifier_list(self)




    def type_identifier_list(self):

        localctx = OParser.Type_identifier_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_type_identifier_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1436
            self.type_identifier()
            self.state = 1441
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==OParser.COMMA:
                self.state = 1437
                self.match(OParser.COMMA)
                self.state = 1438
                self.type_identifier()
                self.state = 1443
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Method_identifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variable_identifier(self):
            return self.getTypedRuleContext(OParser.Variable_identifierContext,0)


        def type_identifier(self):
            return self.getTypedRuleContext(OParser.Type_identifierContext,0)


        def getRuleIndex(self):
            return OParser.RULE_method_identifier

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterMethod_identifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitMethod_identifier(self)




    def method_identifier(self):

        localctx = OParser.Method_identifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_method_identifier)
        try:
            self.state = 1446
            token = self._input.LA(1)
            if token in [OParser.VARIABLE_IDENTIFIER]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1444
                self.variable_identifier()

            elif token in [OParser.TYPE_IDENTIFIER]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1445
                self.type_identifier()

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class IdentifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return OParser.RULE_identifier

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class TypeIdentifierContext(IdentifierContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.IdentifierContext)
            super().__init__(parser)
            self.copyFrom(ctx)

        def type_identifier(self):
            return self.getTypedRuleContext(OParser.Type_identifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterTypeIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitTypeIdentifier(self)


    class SymbolIdentifierContext(IdentifierContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.IdentifierContext)
            super().__init__(parser)
            self.copyFrom(ctx)

        def symbol_identifier(self):
            return self.getTypedRuleContext(OParser.Symbol_identifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterSymbolIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitSymbolIdentifier(self)


    class VariableIdentifierContext(IdentifierContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.IdentifierContext)
            super().__init__(parser)
            self.copyFrom(ctx)

        def variable_identifier(self):
            return self.getTypedRuleContext(OParser.Variable_identifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterVariableIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitVariableIdentifier(self)



    def identifier(self):

        localctx = OParser.IdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_identifier)
        try:
            self.state = 1451
            token = self._input.LA(1)
            if token in [OParser.VARIABLE_IDENTIFIER]:
                localctx = OParser.VariableIdentifierContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1448
                self.variable_identifier()

            elif token in [OParser.TYPE_IDENTIFIER]:
                localctx = OParser.TypeIdentifierContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1449
                self.type_identifier()

            elif token in [OParser.SYMBOL_IDENTIFIER]:
                localctx = OParser.SymbolIdentifierContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 1450
                self.symbol_identifier()

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Variable_identifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VARIABLE_IDENTIFIER(self):
            return self.getToken(OParser.VARIABLE_IDENTIFIER, 0)

        def getRuleIndex(self):
            return OParser.RULE_variable_identifier

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterVariable_identifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitVariable_identifier(self)




    def variable_identifier(self):

        localctx = OParser.Variable_identifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_variable_identifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1453
            self.match(OParser.VARIABLE_IDENTIFIER)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Attribute_identifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VARIABLE_IDENTIFIER(self):
            return self.getToken(OParser.VARIABLE_IDENTIFIER, 0)

        def STORABLE(self):
            return self.getToken(OParser.STORABLE, 0)

        def getRuleIndex(self):
            return OParser.RULE_attribute_identifier

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterAttribute_identifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitAttribute_identifier(self)




    def attribute_identifier(self):

        localctx = OParser.Attribute_identifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_attribute_identifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1455
            _la = self._input.LA(1)
            if not(_la==OParser.STORABLE or _la==OParser.VARIABLE_IDENTIFIER):
                self._errHandler.recoverInline(self)
            self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Type_identifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TYPE_IDENTIFIER(self):
            return self.getToken(OParser.TYPE_IDENTIFIER, 0)

        def getRuleIndex(self):
            return OParser.RULE_type_identifier

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterType_identifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitType_identifier(self)




    def type_identifier(self):

        localctx = OParser.Type_identifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_type_identifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1457
            self.match(OParser.TYPE_IDENTIFIER)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Symbol_identifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SYMBOL_IDENTIFIER(self):
            return self.getToken(OParser.SYMBOL_IDENTIFIER, 0)

        def getRuleIndex(self):
            return OParser.RULE_symbol_identifier

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterSymbol_identifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitSymbol_identifier(self)




    def symbol_identifier(self):

        localctx = OParser.Symbol_identifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_symbol_identifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1459
            self.match(OParser.SYMBOL_IDENTIFIER)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Argument_listContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def argument(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(OParser.ArgumentContext)
            else:
                return self.getTypedRuleContext(OParser.ArgumentContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(OParser.COMMA)
            else:
                return self.getToken(OParser.COMMA, i)

        def getRuleIndex(self):
            return OParser.RULE_argument_list

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterArgument_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitArgument_list(self)




    def argument_list(self):

        localctx = OParser.Argument_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_argument_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1461
            self.argument()
            self.state = 1466
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==OParser.COMMA:
                self.state = 1462
                self.match(OParser.COMMA)
                self.state = 1463
                self.argument()
                self.state = 1468
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ArgumentContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return OParser.RULE_argument

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class OperatorArgumentContext(ArgumentContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.ArgumentContext)
            super().__init__(parser)
            self.arg = None # Operator_argumentContext
            self.copyFrom(ctx)

        def operator_argument(self):
            return self.getTypedRuleContext(OParser.Operator_argumentContext,0)

        def MUTABLE(self):
            return self.getToken(OParser.MUTABLE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterOperatorArgument(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitOperatorArgument(self)


    class CodeArgumentContext(ArgumentContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.ArgumentContext)
            super().__init__(parser)
            self.arg = None # Code_argumentContext
            self.copyFrom(ctx)

        def code_argument(self):
            return self.getTypedRuleContext(OParser.Code_argumentContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterCodeArgument(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitCodeArgument(self)



    def argument(self):

        localctx = OParser.ArgumentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_argument)
        self._la = 0 # Token type
        try:
            self.state = 1474
            la_ = self._interp.adaptivePredict(self._input,111,self._ctx)
            if la_ == 1:
                localctx = OParser.CodeArgumentContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1469
                localctx.arg = self.code_argument()
                pass

            elif la_ == 2:
                localctx = OParser.OperatorArgumentContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1471
                _la = self._input.LA(1)
                if _la==OParser.MUTABLE:
                    self.state = 1470
                    self.match(OParser.MUTABLE)


                self.state = 1473
                localctx.arg = self.operator_argument()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Operator_argumentContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def named_argument(self):
            return self.getTypedRuleContext(OParser.Named_argumentContext,0)


        def typed_argument(self):
            return self.getTypedRuleContext(OParser.Typed_argumentContext,0)


        def getRuleIndex(self):
            return OParser.RULE_operator_argument

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterOperator_argument(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitOperator_argument(self)




    def operator_argument(self):

        localctx = OParser.Operator_argumentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 186, self.RULE_operator_argument)
        try:
            self.state = 1478
            token = self._input.LA(1)
            if token in [OParser.VARIABLE_IDENTIFIER]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1476
                self.named_argument()

            elif token in [OParser.BOOLEAN, OParser.CHARACTER, OParser.TEXT, OParser.INTEGER, OParser.DECIMAL, OParser.DATE, OParser.TIME, OParser.DATETIME, OParser.PERIOD, OParser.CODE, OParser.DOCUMENT, OParser.BLOB, OParser.IMAGE, OParser.UUID, OParser.ITERATOR, OParser.CURSOR, OParser.ANY, OParser.TYPE_IDENTIFIER]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1477
                self.typed_argument()

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Named_argumentContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variable_identifier(self):
            return self.getTypedRuleContext(OParser.Variable_identifierContext,0)


        def EQ(self):
            return self.getToken(OParser.EQ, 0)

        def literal_expression(self):
            return self.getTypedRuleContext(OParser.Literal_expressionContext,0)


        def getRuleIndex(self):
            return OParser.RULE_named_argument

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterNamed_argument(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitNamed_argument(self)




    def named_argument(self):

        localctx = OParser.Named_argumentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 188, self.RULE_named_argument)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1480
            self.variable_identifier()
            self.state = 1483
            _la = self._input.LA(1)
            if _la==OParser.EQ:
                self.state = 1481
                self.match(OParser.EQ)
                self.state = 1482
                self.literal_expression()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Code_argumentContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # Variable_identifierContext

        def code_type(self):
            return self.getTypedRuleContext(OParser.Code_typeContext,0)


        def variable_identifier(self):
            return self.getTypedRuleContext(OParser.Variable_identifierContext,0)


        def getRuleIndex(self):
            return OParser.RULE_code_argument

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterCode_argument(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitCode_argument(self)




    def code_argument(self):

        localctx = OParser.Code_argumentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 190, self.RULE_code_argument)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1485
            self.code_type()
            self.state = 1486
            localctx.name = self.variable_identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Category_or_any_typeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typedef(self):
            return self.getTypedRuleContext(OParser.TypedefContext,0)


        def any_type(self):
            return self.getTypedRuleContext(OParser.Any_typeContext,0)


        def getRuleIndex(self):
            return OParser.RULE_category_or_any_type

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterCategory_or_any_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitCategory_or_any_type(self)




    def category_or_any_type(self):

        localctx = OParser.Category_or_any_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 192, self.RULE_category_or_any_type)
        try:
            self.state = 1490
            token = self._input.LA(1)
            if token in [OParser.BOOLEAN, OParser.CHARACTER, OParser.TEXT, OParser.INTEGER, OParser.DECIMAL, OParser.DATE, OParser.TIME, OParser.DATETIME, OParser.PERIOD, OParser.CODE, OParser.DOCUMENT, OParser.BLOB, OParser.IMAGE, OParser.UUID, OParser.ITERATOR, OParser.CURSOR, OParser.TYPE_IDENTIFIER]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1488
                self.typedef(0)

            elif token in [OParser.ANY]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1489
                self.any_type(0)

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Any_typeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return OParser.RULE_any_type

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class AnyListTypeContext(Any_typeContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Any_typeContext)
            super().__init__(parser)
            self.copyFrom(ctx)

        def any_type(self):
            return self.getTypedRuleContext(OParser.Any_typeContext,0)

        def LBRAK(self):
            return self.getToken(OParser.LBRAK, 0)
        def RBRAK(self):
            return self.getToken(OParser.RBRAK, 0)

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterAnyListType(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitAnyListType(self)


    class AnyTypeContext(Any_typeContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Any_typeContext)
            super().__init__(parser)
            self.copyFrom(ctx)

        def ANY(self):
            return self.getToken(OParser.ANY, 0)

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterAnyType(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitAnyType(self)


    class AnyDictTypeContext(Any_typeContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Any_typeContext)
            super().__init__(parser)
            self.copyFrom(ctx)

        def any_type(self):
            return self.getTypedRuleContext(OParser.Any_typeContext,0)

        def LCURL(self):
            return self.getToken(OParser.LCURL, 0)
        def RCURL(self):
            return self.getToken(OParser.RCURL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterAnyDictType(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitAnyDictType(self)



    def any_type(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = OParser.Any_typeContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 194
        self.enterRecursionRule(localctx, 194, self.RULE_any_type, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            localctx = OParser.AnyTypeContext(self, localctx)
            self._ctx = localctx
            _prevctx = localctx

            self.state = 1493
            self.match(OParser.ANY)
            self._ctx.stop = self._input.LT(-1)
            self.state = 1503
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,116,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 1501
                    la_ = self._interp.adaptivePredict(self._input,115,self._ctx)
                    if la_ == 1:
                        localctx = OParser.AnyListTypeContext(self, OParser.Any_typeContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_any_type)
                        self.state = 1495
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 1496
                        self.match(OParser.LBRAK)
                        self.state = 1497
                        self.match(OParser.RBRAK)
                        pass

                    elif la_ == 2:
                        localctx = OParser.AnyDictTypeContext(self, OParser.Any_typeContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_any_type)
                        self.state = 1498
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 1499
                        self.match(OParser.LCURL)
                        self.state = 1500
                        self.match(OParser.RCURL)
                        pass

             
                self.state = 1505
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,116,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class Member_method_declaration_listContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def member_method_declaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(OParser.Member_method_declarationContext)
            else:
                return self.getTypedRuleContext(OParser.Member_method_declarationContext,i)


        def lfp(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(OParser.LfpContext)
            else:
                return self.getTypedRuleContext(OParser.LfpContext,i)


        def getRuleIndex(self):
            return OParser.RULE_member_method_declaration_list

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterMember_method_declaration_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitMember_method_declaration_list(self)




    def member_method_declaration_list(self):

        localctx = OParser.Member_method_declaration_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 196, self.RULE_member_method_declaration_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1506
            self.member_method_declaration()
            self.state = 1512
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << OParser.BOOLEAN) | (1 << OParser.CHARACTER) | (1 << OParser.TEXT) | (1 << OParser.INTEGER) | (1 << OParser.DECIMAL) | (1 << OParser.DATE) | (1 << OParser.TIME) | (1 << OParser.DATETIME) | (1 << OParser.PERIOD) | (1 << OParser.CODE) | (1 << OParser.DOCUMENT) | (1 << OParser.BLOB) | (1 << OParser.IMAGE) | (1 << OParser.UUID) | (1 << OParser.ITERATOR) | (1 << OParser.CURSOR) | (1 << OParser.ABSTRACT))) != 0) or ((((_la - 100)) & ~0x3f) == 0 and ((1 << (_la - 100)) & ((1 << (OParser.GETTER - 100)) | (1 << (OParser.METHOD - 100)) | (1 << (OParser.OPERATOR - 100)) | (1 << (OParser.SETTER - 100)) | (1 << (OParser.TYPE_IDENTIFIER - 100)))) != 0):
                self.state = 1507
                self.lfp()
                self.state = 1508
                self.member_method_declaration()
                self.state = 1514
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Member_method_declarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def setter_method_declaration(self):
            return self.getTypedRuleContext(OParser.Setter_method_declarationContext,0)


        def getter_method_declaration(self):
            return self.getTypedRuleContext(OParser.Getter_method_declarationContext,0)


        def concrete_method_declaration(self):
            return self.getTypedRuleContext(OParser.Concrete_method_declarationContext,0)


        def abstract_method_declaration(self):
            return self.getTypedRuleContext(OParser.Abstract_method_declarationContext,0)


        def operator_method_declaration(self):
            return self.getTypedRuleContext(OParser.Operator_method_declarationContext,0)


        def getRuleIndex(self):
            return OParser.RULE_member_method_declaration

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterMember_method_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitMember_method_declaration(self)




    def member_method_declaration(self):

        localctx = OParser.Member_method_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 198, self.RULE_member_method_declaration)
        try:
            self.state = 1520
            la_ = self._interp.adaptivePredict(self._input,118,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1515
                self.setter_method_declaration()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1516
                self.getter_method_declaration()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1517
                self.concrete_method_declaration()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1518
                self.abstract_method_declaration()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1519
                self.operator_method_declaration()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Native_member_method_declaration_listContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def native_member_method_declaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(OParser.Native_member_method_declarationContext)
            else:
                return self.getTypedRuleContext(OParser.Native_member_method_declarationContext,i)


        def lfp(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(OParser.LfpContext)
            else:
                return self.getTypedRuleContext(OParser.LfpContext,i)


        def getRuleIndex(self):
            return OParser.RULE_native_member_method_declaration_list

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterNative_member_method_declaration_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitNative_member_method_declaration_list(self)




    def native_member_method_declaration_list(self):

        localctx = OParser.Native_member_method_declaration_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 200, self.RULE_native_member_method_declaration_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1522
            self.native_member_method_declaration()
            self.state = 1528
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 46)) & ~0x3f) == 0 and ((1 << (_la - 46)) & ((1 << (OParser.BOOLEAN - 46)) | (1 << (OParser.CHARACTER - 46)) | (1 << (OParser.TEXT - 46)) | (1 << (OParser.INTEGER - 46)) | (1 << (OParser.DECIMAL - 46)) | (1 << (OParser.DATE - 46)) | (1 << (OParser.TIME - 46)) | (1 << (OParser.DATETIME - 46)) | (1 << (OParser.PERIOD - 46)) | (1 << (OParser.CODE - 46)) | (1 << (OParser.DOCUMENT - 46)) | (1 << (OParser.BLOB - 46)) | (1 << (OParser.IMAGE - 46)) | (1 << (OParser.UUID - 46)) | (1 << (OParser.ITERATOR - 46)) | (1 << (OParser.CURSOR - 46)) | (1 << (OParser.ANY - 46)) | (1 << (OParser.GETTER - 46)) | (1 << (OParser.METHOD - 46)))) != 0) or ((((_la - 111)) & ~0x3f) == 0 and ((1 << (_la - 111)) & ((1 << (OParser.NATIVE - 111)) | (1 << (OParser.SETTER - 111)) | (1 << (OParser.TYPE_IDENTIFIER - 111)))) != 0):
                self.state = 1523
                self.lfp()
                self.state = 1524
                self.native_member_method_declaration()
                self.state = 1530
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Native_member_method_declarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def native_getter_declaration(self):
            return self.getTypedRuleContext(OParser.Native_getter_declarationContext,0)


        def native_setter_declaration(self):
            return self.getTypedRuleContext(OParser.Native_setter_declarationContext,0)


        def native_method_declaration(self):
            return self.getTypedRuleContext(OParser.Native_method_declarationContext,0)


        def getRuleIndex(self):
            return OParser.RULE_native_member_method_declaration

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterNative_member_method_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitNative_member_method_declaration(self)




    def native_member_method_declaration(self):

        localctx = OParser.Native_member_method_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 202, self.RULE_native_member_method_declaration)
        try:
            self.state = 1534
            la_ = self._interp.adaptivePredict(self._input,120,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1531
                self.native_getter_declaration()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1532
                self.native_setter_declaration()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1533
                self.native_method_declaration()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Native_category_bindingContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return OParser.RULE_native_category_binding

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Python2CategoryBindingContext(Native_category_bindingContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Native_category_bindingContext)
            super().__init__(parser)
            self.binding = None # Python_category_bindingContext
            self.copyFrom(ctx)

        def PYTHON2(self):
            return self.getToken(OParser.PYTHON2, 0)
        def python_category_binding(self):
            return self.getTypedRuleContext(OParser.Python_category_bindingContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterPython2CategoryBinding(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitPython2CategoryBinding(self)


    class Python3CategoryBindingContext(Native_category_bindingContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Native_category_bindingContext)
            super().__init__(parser)
            self.binding = None # Python_category_bindingContext
            self.copyFrom(ctx)

        def PYTHON3(self):
            return self.getToken(OParser.PYTHON3, 0)
        def python_category_binding(self):
            return self.getTypedRuleContext(OParser.Python_category_bindingContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterPython3CategoryBinding(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitPython3CategoryBinding(self)


    class JavaCategoryBindingContext(Native_category_bindingContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Native_category_bindingContext)
            super().__init__(parser)
            self.binding = None # Java_class_identifier_expressionContext
            self.copyFrom(ctx)

        def JAVA(self):
            return self.getToken(OParser.JAVA, 0)
        def java_class_identifier_expression(self):
            return self.getTypedRuleContext(OParser.Java_class_identifier_expressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterJavaCategoryBinding(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitJavaCategoryBinding(self)


    class CSharpCategoryBindingContext(Native_category_bindingContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Native_category_bindingContext)
            super().__init__(parser)
            self.binding = None # Csharp_identifier_expressionContext
            self.copyFrom(ctx)

        def CSHARP(self):
            return self.getToken(OParser.CSHARP, 0)
        def csharp_identifier_expression(self):
            return self.getTypedRuleContext(OParser.Csharp_identifier_expressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterCSharpCategoryBinding(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitCSharpCategoryBinding(self)


    class JavaScriptCategoryBindingContext(Native_category_bindingContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Native_category_bindingContext)
            super().__init__(parser)
            self.binding = None # Javascript_category_bindingContext
            self.copyFrom(ctx)

        def JAVASCRIPT(self):
            return self.getToken(OParser.JAVASCRIPT, 0)
        def javascript_category_binding(self):
            return self.getTypedRuleContext(OParser.Javascript_category_bindingContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterJavaScriptCategoryBinding(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitJavaScriptCategoryBinding(self)



    def native_category_binding(self):

        localctx = OParser.Native_category_bindingContext(self, self._ctx, self.state)
        self.enterRule(localctx, 204, self.RULE_native_category_binding)
        try:
            self.state = 1546
            token = self._input.LA(1)
            if token in [OParser.JAVA]:
                localctx = OParser.JavaCategoryBindingContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1536
                self.match(OParser.JAVA)
                self.state = 1537
                localctx.binding = self.java_class_identifier_expression(0)

            elif token in [OParser.CSHARP]:
                localctx = OParser.CSharpCategoryBindingContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1538
                self.match(OParser.CSHARP)
                self.state = 1539
                localctx.binding = self.csharp_identifier_expression(0)

            elif token in [OParser.PYTHON2]:
                localctx = OParser.Python2CategoryBindingContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 1540
                self.match(OParser.PYTHON2)
                self.state = 1541
                localctx.binding = self.python_category_binding()

            elif token in [OParser.PYTHON3]:
                localctx = OParser.Python3CategoryBindingContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 1542
                self.match(OParser.PYTHON3)
                self.state = 1543
                localctx.binding = self.python_category_binding()

            elif token in [OParser.JAVASCRIPT]:
                localctx = OParser.JavaScriptCategoryBindingContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 1544
                self.match(OParser.JAVASCRIPT)
                self.state = 1545
                localctx.binding = self.javascript_category_binding()

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Python_category_bindingContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(OParser.IdentifierContext,0)


        def python_module(self):
            return self.getTypedRuleContext(OParser.Python_moduleContext,0)


        def getRuleIndex(self):
            return OParser.RULE_python_category_binding

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterPython_category_binding(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitPython_category_binding(self)




    def python_category_binding(self):

        localctx = OParser.Python_category_bindingContext(self, self._ctx, self.state)
        self.enterRule(localctx, 206, self.RULE_python_category_binding)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1548
            self.identifier()
            self.state = 1550
            _la = self._input.LA(1)
            if _la==OParser.FROM:
                self.state = 1549
                self.python_module()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Python_moduleContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FROM(self):
            return self.getToken(OParser.FROM, 0)

        def module_token(self):
            return self.getTypedRuleContext(OParser.Module_tokenContext,0)


        def COLON(self):
            return self.getToken(OParser.COLON, 0)

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(OParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(OParser.IdentifierContext,i)


        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(OParser.DOT)
            else:
                return self.getToken(OParser.DOT, i)

        def getRuleIndex(self):
            return OParser.RULE_python_module

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterPython_module(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitPython_module(self)




    def python_module(self):

        localctx = OParser.Python_moduleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 208, self.RULE_python_module)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1552
            self.match(OParser.FROM)
            self.state = 1553
            self.module_token()
            self.state = 1554
            self.match(OParser.COLON)
            self.state = 1555
            self.identifier()
            self.state = 1560
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==OParser.DOT:
                self.state = 1556
                self.match(OParser.DOT)
                self.state = 1557
                self.identifier()
                self.state = 1562
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Javascript_category_bindingContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(OParser.IdentifierContext,0)


        def javascript_module(self):
            return self.getTypedRuleContext(OParser.Javascript_moduleContext,0)


        def getRuleIndex(self):
            return OParser.RULE_javascript_category_binding

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterJavascript_category_binding(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitJavascript_category_binding(self)




    def javascript_category_binding(self):

        localctx = OParser.Javascript_category_bindingContext(self, self._ctx, self.state)
        self.enterRule(localctx, 210, self.RULE_javascript_category_binding)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1563
            self.identifier()
            self.state = 1565
            _la = self._input.LA(1)
            if _la==OParser.FROM:
                self.state = 1564
                self.javascript_module()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Javascript_moduleContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FROM(self):
            return self.getToken(OParser.FROM, 0)

        def module_token(self):
            return self.getTypedRuleContext(OParser.Module_tokenContext,0)


        def COLON(self):
            return self.getToken(OParser.COLON, 0)

        def javascript_identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(OParser.Javascript_identifierContext)
            else:
                return self.getTypedRuleContext(OParser.Javascript_identifierContext,i)


        def SLASH(self, i:int=None):
            if i is None:
                return self.getTokens(OParser.SLASH)
            else:
                return self.getToken(OParser.SLASH, i)

        def DOT(self):
            return self.getToken(OParser.DOT, 0)

        def getRuleIndex(self):
            return OParser.RULE_javascript_module

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterJavascript_module(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitJavascript_module(self)




    def javascript_module(self):

        localctx = OParser.Javascript_moduleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 212, self.RULE_javascript_module)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1567
            self.match(OParser.FROM)
            self.state = 1568
            self.module_token()
            self.state = 1569
            self.match(OParser.COLON)
            self.state = 1571
            _la = self._input.LA(1)
            if _la==OParser.SLASH:
                self.state = 1570
                self.match(OParser.SLASH)


            self.state = 1573
            self.javascript_identifier()
            self.state = 1578
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==OParser.SLASH:
                self.state = 1574
                self.match(OParser.SLASH)
                self.state = 1575
                self.javascript_identifier()
                self.state = 1580
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1583
            _la = self._input.LA(1)
            if _la==OParser.DOT:
                self.state = 1581
                self.match(OParser.DOT)
                self.state = 1582
                self.javascript_identifier()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Variable_identifier_listContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variable_identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(OParser.Variable_identifierContext)
            else:
                return self.getTypedRuleContext(OParser.Variable_identifierContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(OParser.COMMA)
            else:
                return self.getToken(OParser.COMMA, i)

        def getRuleIndex(self):
            return OParser.RULE_variable_identifier_list

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterVariable_identifier_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitVariable_identifier_list(self)




    def variable_identifier_list(self):

        localctx = OParser.Variable_identifier_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 214, self.RULE_variable_identifier_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1585
            self.variable_identifier()
            self.state = 1590
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==OParser.COMMA:
                self.state = 1586
                self.match(OParser.COMMA)
                self.state = 1587
                self.variable_identifier()
                self.state = 1592
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Attribute_identifier_listContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def attribute_identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(OParser.Attribute_identifierContext)
            else:
                return self.getTypedRuleContext(OParser.Attribute_identifierContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(OParser.COMMA)
            else:
                return self.getToken(OParser.COMMA, i)

        def getRuleIndex(self):
            return OParser.RULE_attribute_identifier_list

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterAttribute_identifier_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitAttribute_identifier_list(self)




    def attribute_identifier_list(self):

        localctx = OParser.Attribute_identifier_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 216, self.RULE_attribute_identifier_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1593
            self.attribute_identifier()
            self.state = 1598
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==OParser.COMMA:
                self.state = 1594
                self.match(OParser.COMMA)
                self.state = 1595
                self.attribute_identifier()
                self.state = 1600
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Method_declarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def abstract_method_declaration(self):
            return self.getTypedRuleContext(OParser.Abstract_method_declarationContext,0)


        def concrete_method_declaration(self):
            return self.getTypedRuleContext(OParser.Concrete_method_declarationContext,0)


        def native_method_declaration(self):
            return self.getTypedRuleContext(OParser.Native_method_declarationContext,0)


        def test_method_declaration(self):
            return self.getTypedRuleContext(OParser.Test_method_declarationContext,0)


        def getRuleIndex(self):
            return OParser.RULE_method_declaration

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterMethod_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitMethod_declaration(self)




    def method_declaration(self):

        localctx = OParser.Method_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 218, self.RULE_method_declaration)
        try:
            self.state = 1605
            la_ = self._interp.adaptivePredict(self._input,130,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1601
                self.abstract_method_declaration()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1602
                self.concrete_method_declaration()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1603
                self.native_method_declaration()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1604
                self.test_method_declaration()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Comment_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COMMENT(self):
            return self.getToken(OParser.COMMENT, 0)

        def getRuleIndex(self):
            return OParser.RULE_comment_statement

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterComment_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitComment_statement(self)




    def comment_statement(self):

        localctx = OParser.Comment_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 220, self.RULE_comment_statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1607
            self.match(OParser.COMMENT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Native_statement_listContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def native_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(OParser.Native_statementContext)
            else:
                return self.getTypedRuleContext(OParser.Native_statementContext,i)


        def lfp(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(OParser.LfpContext)
            else:
                return self.getTypedRuleContext(OParser.LfpContext,i)


        def getRuleIndex(self):
            return OParser.RULE_native_statement_list

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterNative_statement_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitNative_statement_list(self)




    def native_statement_list(self):

        localctx = OParser.Native_statement_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 222, self.RULE_native_statement_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1609
            self.native_statement()
            self.state = 1615
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << OParser.JAVA) | (1 << OParser.CSHARP) | (1 << OParser.PYTHON2) | (1 << OParser.PYTHON3) | (1 << OParser.JAVASCRIPT))) != 0):
                self.state = 1610
                self.lfp()
                self.state = 1611
                self.native_statement()
                self.state = 1617
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Native_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return OParser.RULE_native_statement

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class CSharpNativeStatementContext(Native_statementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Native_statementContext)
            super().__init__(parser)
            self.copyFrom(ctx)

        def CSHARP(self):
            return self.getToken(OParser.CSHARP, 0)
        def csharp_statement(self):
            return self.getTypedRuleContext(OParser.Csharp_statementContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterCSharpNativeStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitCSharpNativeStatement(self)


    class JavaNativeStatementContext(Native_statementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Native_statementContext)
            super().__init__(parser)
            self.copyFrom(ctx)

        def JAVA(self):
            return self.getToken(OParser.JAVA, 0)
        def java_statement(self):
            return self.getTypedRuleContext(OParser.Java_statementContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterJavaNativeStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitJavaNativeStatement(self)


    class JavaScriptNativeStatementContext(Native_statementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Native_statementContext)
            super().__init__(parser)
            self.copyFrom(ctx)

        def JAVASCRIPT(self):
            return self.getToken(OParser.JAVASCRIPT, 0)
        def javascript_native_statement(self):
            return self.getTypedRuleContext(OParser.Javascript_native_statementContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterJavaScriptNativeStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitJavaScriptNativeStatement(self)


    class Python2NativeStatementContext(Native_statementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Native_statementContext)
            super().__init__(parser)
            self.copyFrom(ctx)

        def PYTHON2(self):
            return self.getToken(OParser.PYTHON2, 0)
        def python_native_statement(self):
            return self.getTypedRuleContext(OParser.Python_native_statementContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterPython2NativeStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitPython2NativeStatement(self)


    class Python3NativeStatementContext(Native_statementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Native_statementContext)
            super().__init__(parser)
            self.copyFrom(ctx)

        def PYTHON3(self):
            return self.getToken(OParser.PYTHON3, 0)
        def python_native_statement(self):
            return self.getTypedRuleContext(OParser.Python_native_statementContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterPython3NativeStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitPython3NativeStatement(self)



    def native_statement(self):

        localctx = OParser.Native_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 224, self.RULE_native_statement)
        try:
            self.state = 1628
            token = self._input.LA(1)
            if token in [OParser.JAVA]:
                localctx = OParser.JavaNativeStatementContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1618
                self.match(OParser.JAVA)
                self.state = 1619
                self.java_statement()

            elif token in [OParser.CSHARP]:
                localctx = OParser.CSharpNativeStatementContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1620
                self.match(OParser.CSHARP)
                self.state = 1621
                self.csharp_statement()

            elif token in [OParser.PYTHON2]:
                localctx = OParser.Python2NativeStatementContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 1622
                self.match(OParser.PYTHON2)
                self.state = 1623
                self.python_native_statement()

            elif token in [OParser.PYTHON3]:
                localctx = OParser.Python3NativeStatementContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 1624
                self.match(OParser.PYTHON3)
                self.state = 1625
                self.python_native_statement()

            elif token in [OParser.JAVASCRIPT]:
                localctx = OParser.JavaScriptNativeStatementContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 1626
                self.match(OParser.JAVASCRIPT)
                self.state = 1627
                self.javascript_native_statement()

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Python_native_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def python_statement(self):
            return self.getTypedRuleContext(OParser.Python_statementContext,0)


        def SEMI(self):
            return self.getToken(OParser.SEMI, 0)

        def python_module(self):
            return self.getTypedRuleContext(OParser.Python_moduleContext,0)


        def getRuleIndex(self):
            return OParser.RULE_python_native_statement

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterPython_native_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitPython_native_statement(self)




    def python_native_statement(self):

        localctx = OParser.Python_native_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 226, self.RULE_python_native_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1630
            self.python_statement()
            self.state = 1632
            _la = self._input.LA(1)
            if _la==OParser.SEMI:
                self.state = 1631
                self.match(OParser.SEMI)


            self.state = 1635
            _la = self._input.LA(1)
            if _la==OParser.FROM:
                self.state = 1634
                self.python_module()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Javascript_native_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def javascript_statement(self):
            return self.getTypedRuleContext(OParser.Javascript_statementContext,0)


        def SEMI(self):
            return self.getToken(OParser.SEMI, 0)

        def javascript_module(self):
            return self.getTypedRuleContext(OParser.Javascript_moduleContext,0)


        def getRuleIndex(self):
            return OParser.RULE_javascript_native_statement

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterJavascript_native_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitJavascript_native_statement(self)




    def javascript_native_statement(self):

        localctx = OParser.Javascript_native_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 228, self.RULE_javascript_native_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1637
            self.javascript_statement()
            self.state = 1639
            _la = self._input.LA(1)
            if _la==OParser.SEMI:
                self.state = 1638
                self.match(OParser.SEMI)


            self.state = 1642
            _la = self._input.LA(1)
            if _la==OParser.FROM:
                self.state = 1641
                self.javascript_module()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Statement_listContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(OParser.StatementContext)
            else:
                return self.getTypedRuleContext(OParser.StatementContext,i)


        def lfp(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(OParser.LfpContext)
            else:
                return self.getTypedRuleContext(OParser.LfpContext,i)


        def getRuleIndex(self):
            return OParser.RULE_statement_list

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterStatement_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitStatement_list(self)




    def statement_list(self):

        localctx = OParser.Statement_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 230, self.RULE_statement_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1644
            self.statement()
            self.state = 1650
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << OParser.COMMENT) | (1 << OParser.BOOLEAN) | (1 << OParser.CHARACTER) | (1 << OParser.TEXT) | (1 << OParser.INTEGER) | (1 << OParser.DECIMAL) | (1 << OParser.DATE) | (1 << OParser.TIME) | (1 << OParser.DATETIME) | (1 << OParser.PERIOD) | (1 << OParser.CODE) | (1 << OParser.DOCUMENT) | (1 << OParser.BLOB) | (1 << OParser.IMAGE) | (1 << OParser.UUID) | (1 << OParser.ITERATOR) | (1 << OParser.CURSOR))) != 0) or ((((_la - 84)) & ~0x3f) == 0 and ((1 << (_la - 84)) & ((1 << (OParser.DELETE - 84)) | (1 << (OParser.DO - 84)) | (1 << (OParser.FOR - 84)) | (1 << (OParser.IF - 84)) | (1 << (OParser.METHOD - 84)) | (1 << (OParser.RETURN - 84)) | (1 << (OParser.STORE - 84)) | (1 << (OParser.SWITCH - 84)) | (1 << (OParser.THROW - 84)) | (1 << (OParser.TRY - 84)) | (1 << (OParser.WITH - 84)) | (1 << (OParser.WHILE - 84)))) != 0) or ((((_la - 148)) & ~0x3f) == 0 and ((1 << (_la - 148)) & ((1 << (OParser.WRITE - 148)) | (1 << (OParser.SYMBOL_IDENTIFIER - 148)) | (1 << (OParser.TYPE_IDENTIFIER - 148)) | (1 << (OParser.VARIABLE_IDENTIFIER - 148)))) != 0):
                self.state = 1645
                self.lfp()
                self.state = 1646
                self.statement()
                self.state = 1652
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Assertion_listContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assertion(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(OParser.AssertionContext)
            else:
                return self.getTypedRuleContext(OParser.AssertionContext,i)


        def lfp(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(OParser.LfpContext)
            else:
                return self.getTypedRuleContext(OParser.LfpContext,i)


        def getRuleIndex(self):
            return OParser.RULE_assertion_list

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterAssertion_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitAssertion_list(self)




    def assertion_list(self):

        localctx = OParser.Assertion_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 232, self.RULE_assertion_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1653
            self.assertion()
            self.state = 1659
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << OParser.LPAR) | (1 << OParser.LBRAK) | (1 << OParser.LCURL) | (1 << OParser.XMARK) | (1 << OParser.MINUS) | (1 << OParser.LT) | (1 << OParser.CODE) | (1 << OParser.DOCUMENT) | (1 << OParser.BLOB))) != 0) or ((((_la - 93)) & ~0x3f) == 0 and ((1 << (_la - 93)) & ((1 << (OParser.EXECUTE - 93)) | (1 << (OParser.FETCH - 93)) | (1 << (OParser.MUTABLE - 93)) | (1 << (OParser.NULL - 93)) | (1 << (OParser.READ - 93)) | (1 << (OParser.SELF - 93)) | (1 << (OParser.SORTED - 93)) | (1 << (OParser.THIS - 93)) | (1 << (OParser.BOOLEAN_LITERAL - 93)) | (1 << (OParser.CHAR_LITERAL - 93)) | (1 << (OParser.MIN_INTEGER - 93)) | (1 << (OParser.MAX_INTEGER - 93)) | (1 << (OParser.SYMBOL_IDENTIFIER - 93)) | (1 << (OParser.TYPE_IDENTIFIER - 93)) | (1 << (OParser.VARIABLE_IDENTIFIER - 93)))) != 0) or ((((_la - 158)) & ~0x3f) == 0 and ((1 << (_la - 158)) & ((1 << (OParser.TEXT_LITERAL - 158)) | (1 << (OParser.INTEGER_LITERAL - 158)) | (1 << (OParser.HEXA_LITERAL - 158)) | (1 << (OParser.DECIMAL_LITERAL - 158)) | (1 << (OParser.DATETIME_LITERAL - 158)) | (1 << (OParser.TIME_LITERAL - 158)) | (1 << (OParser.DATE_LITERAL - 158)) | (1 << (OParser.PERIOD_LITERAL - 158)))) != 0):
                self.state = 1654
                self.lfp()
                self.state = 1655
                self.assertion()
                self.state = 1661
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Switch_case_statement_listContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def switch_case_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(OParser.Switch_case_statementContext)
            else:
                return self.getTypedRuleContext(OParser.Switch_case_statementContext,i)


        def lfp(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(OParser.LfpContext)
            else:
                return self.getTypedRuleContext(OParser.LfpContext,i)


        def getRuleIndex(self):
            return OParser.RULE_switch_case_statement_list

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterSwitch_case_statement_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitSwitch_case_statement_list(self)




    def switch_case_statement_list(self):

        localctx = OParser.Switch_case_statement_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 234, self.RULE_switch_case_statement_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1662
            self.switch_case_statement()
            self.state = 1668
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==OParser.CASE:
                self.state = 1663
                self.lfp()
                self.state = 1664
                self.switch_case_statement()
                self.state = 1670
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Catch_statement_listContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def catch_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(OParser.Catch_statementContext)
            else:
                return self.getTypedRuleContext(OParser.Catch_statementContext,i)


        def lfp(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(OParser.LfpContext)
            else:
                return self.getTypedRuleContext(OParser.LfpContext,i)


        def getRuleIndex(self):
            return OParser.RULE_catch_statement_list

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterCatch_statement_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitCatch_statement_list(self)




    def catch_statement_list(self):

        localctx = OParser.Catch_statement_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 236, self.RULE_catch_statement_list)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1671
            self.catch_statement()
            self.state = 1677
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,140,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1672
                    self.lfp()
                    self.state = 1673
                    self.catch_statement() 
                self.state = 1679
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,140,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Literal_collectionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return OParser.RULE_literal_collection

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class LiteralListLiteralContext(Literal_collectionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Literal_collectionContext)
            super().__init__(parser)
            self.copyFrom(ctx)

        def LBRAK(self):
            return self.getToken(OParser.LBRAK, 0)
        def literal_list_literal(self):
            return self.getTypedRuleContext(OParser.Literal_list_literalContext,0)

        def RBRAK(self):
            return self.getToken(OParser.RBRAK, 0)

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterLiteralListLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitLiteralListLiteral(self)


    class LiteralRangeLiteralContext(Literal_collectionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Literal_collectionContext)
            super().__init__(parser)
            self.low = None # Atomic_literalContext
            self.high = None # Atomic_literalContext
            self.copyFrom(ctx)

        def LBRAK(self):
            return self.getToken(OParser.LBRAK, 0)
        def RANGE(self):
            return self.getToken(OParser.RANGE, 0)
        def RBRAK(self):
            return self.getToken(OParser.RBRAK, 0)
        def atomic_literal(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(OParser.Atomic_literalContext)
            else:
                return self.getTypedRuleContext(OParser.Atomic_literalContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterLiteralRangeLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitLiteralRangeLiteral(self)


    class LiteralSetLiteralContext(Literal_collectionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Literal_collectionContext)
            super().__init__(parser)
            self.copyFrom(ctx)

        def LT(self):
            return self.getToken(OParser.LT, 0)
        def literal_list_literal(self):
            return self.getTypedRuleContext(OParser.Literal_list_literalContext,0)

        def GT(self):
            return self.getToken(OParser.GT, 0)

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterLiteralSetLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitLiteralSetLiteral(self)



    def literal_collection(self):

        localctx = OParser.Literal_collectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 238, self.RULE_literal_collection)
        try:
            self.state = 1694
            la_ = self._interp.adaptivePredict(self._input,141,self._ctx)
            if la_ == 1:
                localctx = OParser.LiteralRangeLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1680
                self.match(OParser.LBRAK)
                self.state = 1681
                localctx.low = self.atomic_literal()
                self.state = 1682
                self.match(OParser.RANGE)
                self.state = 1683
                localctx.high = self.atomic_literal()
                self.state = 1684
                self.match(OParser.RBRAK)
                pass

            elif la_ == 2:
                localctx = OParser.LiteralListLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1686
                self.match(OParser.LBRAK)
                self.state = 1687
                self.literal_list_literal()
                self.state = 1688
                self.match(OParser.RBRAK)
                pass

            elif la_ == 3:
                localctx = OParser.LiteralSetLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 1690
                self.match(OParser.LT)
                self.state = 1691
                self.literal_list_literal()
                self.state = 1692
                self.match(OParser.GT)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Atomic_literalContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return OParser.RULE_atomic_literal

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class MinIntegerLiteralContext(Atomic_literalContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Atomic_literalContext)
            super().__init__(parser)
            self.t = None # Token
            self.copyFrom(ctx)

        def MIN_INTEGER(self):
            return self.getToken(OParser.MIN_INTEGER, 0)

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterMinIntegerLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitMinIntegerLiteral(self)


    class DateLiteralContext(Atomic_literalContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Atomic_literalContext)
            super().__init__(parser)
            self.t = None # Token
            self.copyFrom(ctx)

        def DATE_LITERAL(self):
            return self.getToken(OParser.DATE_LITERAL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterDateLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitDateLiteral(self)


    class BooleanLiteralContext(Atomic_literalContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Atomic_literalContext)
            super().__init__(parser)
            self.t = None # Token
            self.copyFrom(ctx)

        def BOOLEAN_LITERAL(self):
            return self.getToken(OParser.BOOLEAN_LITERAL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterBooleanLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitBooleanLiteral(self)


    class HexadecimalLiteralContext(Atomic_literalContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Atomic_literalContext)
            super().__init__(parser)
            self.t = None # Token
            self.copyFrom(ctx)

        def HEXA_LITERAL(self):
            return self.getToken(OParser.HEXA_LITERAL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterHexadecimalLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitHexadecimalLiteral(self)


    class MaxIntegerLiteralContext(Atomic_literalContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Atomic_literalContext)
            super().__init__(parser)
            self.t = None # Token
            self.copyFrom(ctx)

        def MAX_INTEGER(self):
            return self.getToken(OParser.MAX_INTEGER, 0)

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterMaxIntegerLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitMaxIntegerLiteral(self)


    class DateTimeLiteralContext(Atomic_literalContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Atomic_literalContext)
            super().__init__(parser)
            self.t = None # Token
            self.copyFrom(ctx)

        def DATETIME_LITERAL(self):
            return self.getToken(OParser.DATETIME_LITERAL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterDateTimeLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitDateTimeLiteral(self)


    class PeriodLiteralContext(Atomic_literalContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Atomic_literalContext)
            super().__init__(parser)
            self.t = None # Token
            self.copyFrom(ctx)

        def PERIOD_LITERAL(self):
            return self.getToken(OParser.PERIOD_LITERAL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterPeriodLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitPeriodLiteral(self)


    class DecimalLiteralContext(Atomic_literalContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Atomic_literalContext)
            super().__init__(parser)
            self.t = None # Token
            self.copyFrom(ctx)

        def DECIMAL_LITERAL(self):
            return self.getToken(OParser.DECIMAL_LITERAL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterDecimalLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitDecimalLiteral(self)


    class TextLiteralContext(Atomic_literalContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Atomic_literalContext)
            super().__init__(parser)
            self.t = None # Token
            self.copyFrom(ctx)

        def TEXT_LITERAL(self):
            return self.getToken(OParser.TEXT_LITERAL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterTextLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitTextLiteral(self)


    class NullLiteralContext(Atomic_literalContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Atomic_literalContext)
            super().__init__(parser)
            self.n = None # Null_literalContext
            self.copyFrom(ctx)

        def null_literal(self):
            return self.getTypedRuleContext(OParser.Null_literalContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterNullLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitNullLiteral(self)


    class IntegerLiteralContext(Atomic_literalContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Atomic_literalContext)
            super().__init__(parser)
            self.t = None # Token
            self.copyFrom(ctx)

        def INTEGER_LITERAL(self):
            return self.getToken(OParser.INTEGER_LITERAL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterIntegerLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitIntegerLiteral(self)


    class TimeLiteralContext(Atomic_literalContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Atomic_literalContext)
            super().__init__(parser)
            self.t = None # Token
            self.copyFrom(ctx)

        def TIME_LITERAL(self):
            return self.getToken(OParser.TIME_LITERAL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterTimeLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitTimeLiteral(self)


    class CharacterLiteralContext(Atomic_literalContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Atomic_literalContext)
            super().__init__(parser)
            self.t = None # Token
            self.copyFrom(ctx)

        def CHAR_LITERAL(self):
            return self.getToken(OParser.CHAR_LITERAL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterCharacterLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitCharacterLiteral(self)



    def atomic_literal(self):

        localctx = OParser.Atomic_literalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 240, self.RULE_atomic_literal)
        try:
            self.state = 1709
            token = self._input.LA(1)
            if token in [OParser.MIN_INTEGER]:
                localctx = OParser.MinIntegerLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1696
                localctx.t = self.match(OParser.MIN_INTEGER)

            elif token in [OParser.MAX_INTEGER]:
                localctx = OParser.MaxIntegerLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1697
                localctx.t = self.match(OParser.MAX_INTEGER)

            elif token in [OParser.INTEGER_LITERAL]:
                localctx = OParser.IntegerLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 1698
                localctx.t = self.match(OParser.INTEGER_LITERAL)

            elif token in [OParser.HEXA_LITERAL]:
                localctx = OParser.HexadecimalLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 1699
                localctx.t = self.match(OParser.HEXA_LITERAL)

            elif token in [OParser.CHAR_LITERAL]:
                localctx = OParser.CharacterLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 1700
                localctx.t = self.match(OParser.CHAR_LITERAL)

            elif token in [OParser.DATE_LITERAL]:
                localctx = OParser.DateLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 1701
                localctx.t = self.match(OParser.DATE_LITERAL)

            elif token in [OParser.TIME_LITERAL]:
                localctx = OParser.TimeLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 7)
                self.state = 1702
                localctx.t = self.match(OParser.TIME_LITERAL)

            elif token in [OParser.TEXT_LITERAL]:
                localctx = OParser.TextLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 8)
                self.state = 1703
                localctx.t = self.match(OParser.TEXT_LITERAL)

            elif token in [OParser.DECIMAL_LITERAL]:
                localctx = OParser.DecimalLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 9)
                self.state = 1704
                localctx.t = self.match(OParser.DECIMAL_LITERAL)

            elif token in [OParser.DATETIME_LITERAL]:
                localctx = OParser.DateTimeLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 10)
                self.state = 1705
                localctx.t = self.match(OParser.DATETIME_LITERAL)

            elif token in [OParser.BOOLEAN_LITERAL]:
                localctx = OParser.BooleanLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 11)
                self.state = 1706
                localctx.t = self.match(OParser.BOOLEAN_LITERAL)

            elif token in [OParser.PERIOD_LITERAL]:
                localctx = OParser.PeriodLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 12)
                self.state = 1707
                localctx.t = self.match(OParser.PERIOD_LITERAL)

            elif token in [OParser.NULL]:
                localctx = OParser.NullLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 13)
                self.state = 1708
                localctx.n = self.null_literal()

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Literal_list_literalContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def atomic_literal(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(OParser.Atomic_literalContext)
            else:
                return self.getTypedRuleContext(OParser.Atomic_literalContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(OParser.COMMA)
            else:
                return self.getToken(OParser.COMMA, i)

        def getRuleIndex(self):
            return OParser.RULE_literal_list_literal

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterLiteral_list_literal(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitLiteral_list_literal(self)




    def literal_list_literal(self):

        localctx = OParser.Literal_list_literalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 242, self.RULE_literal_list_literal)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1711
            self.atomic_literal()
            self.state = 1716
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==OParser.COMMA:
                self.state = 1712
                self.match(OParser.COMMA)
                self.state = 1713
                self.atomic_literal()
                self.state = 1718
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Selectable_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return OParser.RULE_selectable_expression

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class ThisExpressionContext(Selectable_expressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Selectable_expressionContext)
            super().__init__(parser)
            self.exp = None # This_expressionContext
            self.copyFrom(ctx)

        def this_expression(self):
            return self.getTypedRuleContext(OParser.This_expressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterThisExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitThisExpression(self)


    class ParenthesisExpressionContext(Selectable_expressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Selectable_expressionContext)
            super().__init__(parser)
            self.exp = None # Parenthesis_expressionContext
            self.copyFrom(ctx)

        def parenthesis_expression(self):
            return self.getTypedRuleContext(OParser.Parenthesis_expressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterParenthesisExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitParenthesisExpression(self)


    class LiteralExpressionContext(Selectable_expressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Selectable_expressionContext)
            super().__init__(parser)
            self.exp = None # Literal_expressionContext
            self.copyFrom(ctx)

        def literal_expression(self):
            return self.getTypedRuleContext(OParser.Literal_expressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterLiteralExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitLiteralExpression(self)


    class IdentifierExpressionContext(Selectable_expressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Selectable_expressionContext)
            super().__init__(parser)
            self.exp = None # IdentifierContext
            self.copyFrom(ctx)

        def identifier(self):
            return self.getTypedRuleContext(OParser.IdentifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterIdentifierExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitIdentifierExpression(self)



    def selectable_expression(self):

        localctx = OParser.Selectable_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 244, self.RULE_selectable_expression)
        try:
            self.state = 1723
            la_ = self._interp.adaptivePredict(self._input,144,self._ctx)
            if la_ == 1:
                localctx = OParser.ParenthesisExpressionContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1719
                localctx.exp = self.parenthesis_expression()
                pass

            elif la_ == 2:
                localctx = OParser.LiteralExpressionContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1720
                localctx.exp = self.literal_expression()
                pass

            elif la_ == 3:
                localctx = OParser.IdentifierExpressionContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 1721
                localctx.exp = self.identifier()
                pass

            elif la_ == 4:
                localctx = OParser.ThisExpressionContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 1722
                localctx.exp = self.this_expression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class This_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SELF(self):
            return self.getToken(OParser.SELF, 0)

        def THIS(self):
            return self.getToken(OParser.THIS, 0)

        def getRuleIndex(self):
            return OParser.RULE_this_expression

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterThis_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitThis_expression(self)




    def this_expression(self):

        localctx = OParser.This_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 246, self.RULE_this_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1725
            _la = self._input.LA(1)
            if not(_la==OParser.SELF or _la==OParser.THIS):
                self._errHandler.recoverInline(self)
            self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Parenthesis_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAR(self):
            return self.getToken(OParser.LPAR, 0)

        def expression(self):
            return self.getTypedRuleContext(OParser.ExpressionContext,0)


        def RPAR(self):
            return self.getToken(OParser.RPAR, 0)

        def getRuleIndex(self):
            return OParser.RULE_parenthesis_expression

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterParenthesis_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitParenthesis_expression(self)




    def parenthesis_expression(self):

        localctx = OParser.Parenthesis_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 248, self.RULE_parenthesis_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1727
            self.match(OParser.LPAR)
            self.state = 1728
            self.expression(0)
            self.state = 1729
            self.match(OParser.RPAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Literal_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def atomic_literal(self):
            return self.getTypedRuleContext(OParser.Atomic_literalContext,0)


        def collection_literal(self):
            return self.getTypedRuleContext(OParser.Collection_literalContext,0)


        def getRuleIndex(self):
            return OParser.RULE_literal_expression

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterLiteral_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitLiteral_expression(self)




    def literal_expression(self):

        localctx = OParser.Literal_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 250, self.RULE_literal_expression)
        try:
            self.state = 1733
            token = self._input.LA(1)
            if token in [OParser.NULL, OParser.BOOLEAN_LITERAL, OParser.CHAR_LITERAL, OParser.MIN_INTEGER, OParser.MAX_INTEGER, OParser.TEXT_LITERAL, OParser.INTEGER_LITERAL, OParser.HEXA_LITERAL, OParser.DECIMAL_LITERAL, OParser.DATETIME_LITERAL, OParser.TIME_LITERAL, OParser.DATE_LITERAL, OParser.PERIOD_LITERAL]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1731
                self.atomic_literal()

            elif token in [OParser.LPAR, OParser.LBRAK, OParser.LCURL, OParser.LT, OParser.MUTABLE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1732
                self.collection_literal()

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Collection_literalContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def range_literal(self):
            return self.getTypedRuleContext(OParser.Range_literalContext,0)


        def list_literal(self):
            return self.getTypedRuleContext(OParser.List_literalContext,0)


        def set_literal(self):
            return self.getTypedRuleContext(OParser.Set_literalContext,0)


        def dict_literal(self):
            return self.getTypedRuleContext(OParser.Dict_literalContext,0)


        def tuple_literal(self):
            return self.getTypedRuleContext(OParser.Tuple_literalContext,0)


        def getRuleIndex(self):
            return OParser.RULE_collection_literal

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterCollection_literal(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitCollection_literal(self)




    def collection_literal(self):

        localctx = OParser.Collection_literalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 252, self.RULE_collection_literal)
        try:
            self.state = 1740
            la_ = self._interp.adaptivePredict(self._input,146,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1735
                self.range_literal()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1736
                self.list_literal()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1737
                self.set_literal()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1738
                self.dict_literal()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1739
                self.tuple_literal()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Tuple_literalContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAR(self):
            return self.getToken(OParser.LPAR, 0)

        def RPAR(self):
            return self.getToken(OParser.RPAR, 0)

        def MUTABLE(self):
            return self.getToken(OParser.MUTABLE, 0)

        def expression_tuple(self):
            return self.getTypedRuleContext(OParser.Expression_tupleContext,0)


        def getRuleIndex(self):
            return OParser.RULE_tuple_literal

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterTuple_literal(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitTuple_literal(self)




    def tuple_literal(self):

        localctx = OParser.Tuple_literalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 254, self.RULE_tuple_literal)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1743
            _la = self._input.LA(1)
            if _la==OParser.MUTABLE:
                self.state = 1742
                self.match(OParser.MUTABLE)


            self.state = 1745
            self.match(OParser.LPAR)
            self.state = 1747
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << OParser.LPAR) | (1 << OParser.LBRAK) | (1 << OParser.LCURL) | (1 << OParser.XMARK) | (1 << OParser.MINUS) | (1 << OParser.LT) | (1 << OParser.CODE) | (1 << OParser.DOCUMENT) | (1 << OParser.BLOB))) != 0) or ((((_la - 93)) & ~0x3f) == 0 and ((1 << (_la - 93)) & ((1 << (OParser.EXECUTE - 93)) | (1 << (OParser.FETCH - 93)) | (1 << (OParser.MUTABLE - 93)) | (1 << (OParser.NULL - 93)) | (1 << (OParser.READ - 93)) | (1 << (OParser.SELF - 93)) | (1 << (OParser.SORTED - 93)) | (1 << (OParser.THIS - 93)) | (1 << (OParser.BOOLEAN_LITERAL - 93)) | (1 << (OParser.CHAR_LITERAL - 93)) | (1 << (OParser.MIN_INTEGER - 93)) | (1 << (OParser.MAX_INTEGER - 93)) | (1 << (OParser.SYMBOL_IDENTIFIER - 93)) | (1 << (OParser.TYPE_IDENTIFIER - 93)) | (1 << (OParser.VARIABLE_IDENTIFIER - 93)))) != 0) or ((((_la - 158)) & ~0x3f) == 0 and ((1 << (_la - 158)) & ((1 << (OParser.TEXT_LITERAL - 158)) | (1 << (OParser.INTEGER_LITERAL - 158)) | (1 << (OParser.HEXA_LITERAL - 158)) | (1 << (OParser.DECIMAL_LITERAL - 158)) | (1 << (OParser.DATETIME_LITERAL - 158)) | (1 << (OParser.TIME_LITERAL - 158)) | (1 << (OParser.DATE_LITERAL - 158)) | (1 << (OParser.PERIOD_LITERAL - 158)))) != 0):
                self.state = 1746
                self.expression_tuple()


            self.state = 1749
            self.match(OParser.RPAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Dict_literalContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LCURL(self):
            return self.getToken(OParser.LCURL, 0)

        def RCURL(self):
            return self.getToken(OParser.RCURL, 0)

        def MUTABLE(self):
            return self.getToken(OParser.MUTABLE, 0)

        def dict_entry_list(self):
            return self.getTypedRuleContext(OParser.Dict_entry_listContext,0)


        def getRuleIndex(self):
            return OParser.RULE_dict_literal

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterDict_literal(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitDict_literal(self)




    def dict_literal(self):

        localctx = OParser.Dict_literalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 256, self.RULE_dict_literal)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1752
            _la = self._input.LA(1)
            if _la==OParser.MUTABLE:
                self.state = 1751
                self.match(OParser.MUTABLE)


            self.state = 1754
            self.match(OParser.LCURL)
            self.state = 1756
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << OParser.LPAR) | (1 << OParser.LBRAK) | (1 << OParser.LCURL) | (1 << OParser.XMARK) | (1 << OParser.MINUS) | (1 << OParser.LT) | (1 << OParser.CODE) | (1 << OParser.DOCUMENT) | (1 << OParser.BLOB))) != 0) or ((((_la - 93)) & ~0x3f) == 0 and ((1 << (_la - 93)) & ((1 << (OParser.EXECUTE - 93)) | (1 << (OParser.FETCH - 93)) | (1 << (OParser.MUTABLE - 93)) | (1 << (OParser.NULL - 93)) | (1 << (OParser.READ - 93)) | (1 << (OParser.SELF - 93)) | (1 << (OParser.SORTED - 93)) | (1 << (OParser.THIS - 93)) | (1 << (OParser.BOOLEAN_LITERAL - 93)) | (1 << (OParser.CHAR_LITERAL - 93)) | (1 << (OParser.MIN_INTEGER - 93)) | (1 << (OParser.MAX_INTEGER - 93)) | (1 << (OParser.SYMBOL_IDENTIFIER - 93)) | (1 << (OParser.TYPE_IDENTIFIER - 93)) | (1 << (OParser.VARIABLE_IDENTIFIER - 93)))) != 0) or ((((_la - 158)) & ~0x3f) == 0 and ((1 << (_la - 158)) & ((1 << (OParser.TEXT_LITERAL - 158)) | (1 << (OParser.INTEGER_LITERAL - 158)) | (1 << (OParser.HEXA_LITERAL - 158)) | (1 << (OParser.DECIMAL_LITERAL - 158)) | (1 << (OParser.DATETIME_LITERAL - 158)) | (1 << (OParser.TIME_LITERAL - 158)) | (1 << (OParser.DATE_LITERAL - 158)) | (1 << (OParser.PERIOD_LITERAL - 158)))) != 0):
                self.state = 1755
                self.dict_entry_list()


            self.state = 1758
            self.match(OParser.RCURL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Expression_tupleContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(OParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(OParser.ExpressionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(OParser.COMMA)
            else:
                return self.getToken(OParser.COMMA, i)

        def getRuleIndex(self):
            return OParser.RULE_expression_tuple

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterExpression_tuple(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitExpression_tuple(self)




    def expression_tuple(self):

        localctx = OParser.Expression_tupleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 258, self.RULE_expression_tuple)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1760
            self.expression(0)
            self.state = 1761
            self.match(OParser.COMMA)
            self.state = 1770
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << OParser.LPAR) | (1 << OParser.LBRAK) | (1 << OParser.LCURL) | (1 << OParser.XMARK) | (1 << OParser.MINUS) | (1 << OParser.LT) | (1 << OParser.CODE) | (1 << OParser.DOCUMENT) | (1 << OParser.BLOB))) != 0) or ((((_la - 93)) & ~0x3f) == 0 and ((1 << (_la - 93)) & ((1 << (OParser.EXECUTE - 93)) | (1 << (OParser.FETCH - 93)) | (1 << (OParser.MUTABLE - 93)) | (1 << (OParser.NULL - 93)) | (1 << (OParser.READ - 93)) | (1 << (OParser.SELF - 93)) | (1 << (OParser.SORTED - 93)) | (1 << (OParser.THIS - 93)) | (1 << (OParser.BOOLEAN_LITERAL - 93)) | (1 << (OParser.CHAR_LITERAL - 93)) | (1 << (OParser.MIN_INTEGER - 93)) | (1 << (OParser.MAX_INTEGER - 93)) | (1 << (OParser.SYMBOL_IDENTIFIER - 93)) | (1 << (OParser.TYPE_IDENTIFIER - 93)) | (1 << (OParser.VARIABLE_IDENTIFIER - 93)))) != 0) or ((((_la - 158)) & ~0x3f) == 0 and ((1 << (_la - 158)) & ((1 << (OParser.TEXT_LITERAL - 158)) | (1 << (OParser.INTEGER_LITERAL - 158)) | (1 << (OParser.HEXA_LITERAL - 158)) | (1 << (OParser.DECIMAL_LITERAL - 158)) | (1 << (OParser.DATETIME_LITERAL - 158)) | (1 << (OParser.TIME_LITERAL - 158)) | (1 << (OParser.DATE_LITERAL - 158)) | (1 << (OParser.PERIOD_LITERAL - 158)))) != 0):
                self.state = 1762
                self.expression(0)
                self.state = 1767
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==OParser.COMMA:
                    self.state = 1763
                    self.match(OParser.COMMA)
                    self.state = 1764
                    self.expression(0)
                    self.state = 1769
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Dict_entry_listContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dict_entry(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(OParser.Dict_entryContext)
            else:
                return self.getTypedRuleContext(OParser.Dict_entryContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(OParser.COMMA)
            else:
                return self.getToken(OParser.COMMA, i)

        def getRuleIndex(self):
            return OParser.RULE_dict_entry_list

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterDict_entry_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitDict_entry_list(self)




    def dict_entry_list(self):

        localctx = OParser.Dict_entry_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 260, self.RULE_dict_entry_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1772
            self.dict_entry()
            self.state = 1777
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==OParser.COMMA:
                self.state = 1773
                self.match(OParser.COMMA)
                self.state = 1774
                self.dict_entry()
                self.state = 1779
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Dict_entryContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.key = None # ExpressionContext
            self.value = None # ExpressionContext

        def COLON(self):
            return self.getToken(OParser.COLON, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(OParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(OParser.ExpressionContext,i)


        def getRuleIndex(self):
            return OParser.RULE_dict_entry

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterDict_entry(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitDict_entry(self)




    def dict_entry(self):

        localctx = OParser.Dict_entryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 262, self.RULE_dict_entry)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1780
            localctx.key = self.expression(0)
            self.state = 1781
            self.match(OParser.COLON)
            self.state = 1782
            localctx.value = self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Slice_argumentsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return OParser.RULE_slice_arguments

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class SliceFirstAndLastContext(Slice_argumentsContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Slice_argumentsContext)
            super().__init__(parser)
            self.first = None # ExpressionContext
            self.last = None # ExpressionContext
            self.copyFrom(ctx)

        def COLON(self):
            return self.getToken(OParser.COLON, 0)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(OParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(OParser.ExpressionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterSliceFirstAndLast(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitSliceFirstAndLast(self)


    class SliceLastOnlyContext(Slice_argumentsContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Slice_argumentsContext)
            super().__init__(parser)
            self.last = None # ExpressionContext
            self.copyFrom(ctx)

        def COLON(self):
            return self.getToken(OParser.COLON, 0)
        def expression(self):
            return self.getTypedRuleContext(OParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterSliceLastOnly(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitSliceLastOnly(self)


    class SliceFirstOnlyContext(Slice_argumentsContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Slice_argumentsContext)
            super().__init__(parser)
            self.first = None # ExpressionContext
            self.copyFrom(ctx)

        def COLON(self):
            return self.getToken(OParser.COLON, 0)
        def expression(self):
            return self.getTypedRuleContext(OParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterSliceFirstOnly(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitSliceFirstOnly(self)



    def slice_arguments(self):

        localctx = OParser.Slice_argumentsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 264, self.RULE_slice_arguments)
        try:
            self.state = 1793
            la_ = self._interp.adaptivePredict(self._input,154,self._ctx)
            if la_ == 1:
                localctx = OParser.SliceFirstAndLastContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1784
                localctx.first = self.expression(0)
                self.state = 1785
                self.match(OParser.COLON)
                self.state = 1786
                localctx.last = self.expression(0)
                pass

            elif la_ == 2:
                localctx = OParser.SliceFirstOnlyContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1788
                localctx.first = self.expression(0)
                self.state = 1789
                self.match(OParser.COLON)
                pass

            elif la_ == 3:
                localctx = OParser.SliceLastOnlyContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 1791
                self.match(OParser.COLON)
                self.state = 1792
                localctx.last = self.expression(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Assign_variable_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variable_identifier(self):
            return self.getTypedRuleContext(OParser.Variable_identifierContext,0)


        def assign(self):
            return self.getTypedRuleContext(OParser.AssignContext,0)


        def expression(self):
            return self.getTypedRuleContext(OParser.ExpressionContext,0)


        def getRuleIndex(self):
            return OParser.RULE_assign_variable_statement

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterAssign_variable_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitAssign_variable_statement(self)




    def assign_variable_statement(self):

        localctx = OParser.Assign_variable_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 266, self.RULE_assign_variable_statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1795
            self.variable_identifier()
            self.state = 1796
            self.assign()
            self.state = 1797
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Assignable_instanceContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return OParser.RULE_assignable_instance

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class ChildInstanceContext(Assignable_instanceContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Assignable_instanceContext)
            super().__init__(parser)
            self.copyFrom(ctx)

        def assignable_instance(self):
            return self.getTypedRuleContext(OParser.Assignable_instanceContext,0)

        def child_instance(self):
            return self.getTypedRuleContext(OParser.Child_instanceContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterChildInstance(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitChildInstance(self)


    class RootInstanceContext(Assignable_instanceContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Assignable_instanceContext)
            super().__init__(parser)
            self.copyFrom(ctx)

        def variable_identifier(self):
            return self.getTypedRuleContext(OParser.Variable_identifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterRootInstance(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitRootInstance(self)



    def assignable_instance(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = OParser.Assignable_instanceContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 268
        self.enterRecursionRule(localctx, 268, self.RULE_assignable_instance, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            localctx = OParser.RootInstanceContext(self, localctx)
            self._ctx = localctx
            _prevctx = localctx

            self.state = 1800
            self.variable_identifier()
            self._ctx.stop = self._input.LT(-1)
            self.state = 1806
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,155,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = OParser.ChildInstanceContext(self, OParser.Assignable_instanceContext(self, _parentctx, _parentState))
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_assignable_instance)
                    self.state = 1802
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 1803
                    self.child_instance() 
                self.state = 1808
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,155,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class Is_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return OParser.RULE_is_expression

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class IsATypeExpressionContext(Is_expressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Is_expressionContext)
            super().__init__(parser)
            self.copyFrom(ctx)

        def VARIABLE_IDENTIFIER(self):
            return self.getToken(OParser.VARIABLE_IDENTIFIER, 0)
        def category_or_any_type(self):
            return self.getTypedRuleContext(OParser.Category_or_any_typeContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterIsATypeExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitIsATypeExpression(self)


    class IsOtherExpressionContext(Is_expressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Is_expressionContext)
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self):
            return self.getTypedRuleContext(OParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterIsOtherExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitIsOtherExpression(self)



    def is_expression(self):

        localctx = OParser.Is_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 270, self.RULE_is_expression)
        try:
            self.state = 1813
            la_ = self._interp.adaptivePredict(self._input,156,self._ctx)
            if la_ == 1:
                localctx = OParser.IsATypeExpressionContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1809
                if not self.willBeAOrAn():
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "$parser.willBeAOrAn()")
                self.state = 1810
                self.match(OParser.VARIABLE_IDENTIFIER)
                self.state = 1811
                self.category_or_any_type()
                pass

            elif la_ == 2:
                localctx = OParser.IsOtherExpressionContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1812
                self.expression(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Order_by_listContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def order_by(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(OParser.Order_byContext)
            else:
                return self.getTypedRuleContext(OParser.Order_byContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(OParser.COMMA)
            else:
                return self.getToken(OParser.COMMA, i)

        def getRuleIndex(self):
            return OParser.RULE_order_by_list

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterOrder_by_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitOrder_by_list(self)




    def order_by_list(self):

        localctx = OParser.Order_by_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 272, self.RULE_order_by_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1815
            self.order_by()
            self.state = 1820
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==OParser.COMMA:
                self.state = 1816
                self.match(OParser.COMMA)
                self.state = 1817
                self.order_by()
                self.state = 1822
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Order_byContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variable_identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(OParser.Variable_identifierContext)
            else:
                return self.getTypedRuleContext(OParser.Variable_identifierContext,i)


        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(OParser.DOT)
            else:
                return self.getToken(OParser.DOT, i)

        def ASC(self):
            return self.getToken(OParser.ASC, 0)

        def DESC(self):
            return self.getToken(OParser.DESC, 0)

        def getRuleIndex(self):
            return OParser.RULE_order_by

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterOrder_by(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitOrder_by(self)




    def order_by(self):

        localctx = OParser.Order_byContext(self, self._ctx, self.state)
        self.enterRule(localctx, 274, self.RULE_order_by)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1823
            self.variable_identifier()
            self.state = 1828
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==OParser.DOT:
                self.state = 1824
                self.match(OParser.DOT)
                self.state = 1825
                self.variable_identifier()
                self.state = 1830
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1832
            _la = self._input.LA(1)
            if _la==OParser.ASC or _la==OParser.DESC:
                self.state = 1831
                _la = self._input.LA(1)
                if not(_la==OParser.ASC or _la==OParser.DESC):
                    self._errHandler.recoverInline(self)
                self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class OperatorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return OParser.RULE_operator

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class OperatorPlusContext(OperatorContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.OperatorContext)
            super().__init__(parser)
            self.copyFrom(ctx)

        def PLUS(self):
            return self.getToken(OParser.PLUS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterOperatorPlus(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitOperatorPlus(self)


    class OperatorDivideContext(OperatorContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.OperatorContext)
            super().__init__(parser)
            self.copyFrom(ctx)

        def divide(self):
            return self.getTypedRuleContext(OParser.DivideContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterOperatorDivide(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitOperatorDivide(self)


    class OperatorIDivideContext(OperatorContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.OperatorContext)
            super().__init__(parser)
            self.copyFrom(ctx)

        def idivide(self):
            return self.getTypedRuleContext(OParser.IdivideContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterOperatorIDivide(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitOperatorIDivide(self)


    class OperatorMultiplyContext(OperatorContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.OperatorContext)
            super().__init__(parser)
            self.copyFrom(ctx)

        def multiply(self):
            return self.getTypedRuleContext(OParser.MultiplyContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterOperatorMultiply(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitOperatorMultiply(self)


    class OperatorMinusContext(OperatorContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.OperatorContext)
            super().__init__(parser)
            self.copyFrom(ctx)

        def MINUS(self):
            return self.getToken(OParser.MINUS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterOperatorMinus(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitOperatorMinus(self)


    class OperatorModuloContext(OperatorContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.OperatorContext)
            super().__init__(parser)
            self.copyFrom(ctx)

        def modulo(self):
            return self.getTypedRuleContext(OParser.ModuloContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterOperatorModulo(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitOperatorModulo(self)



    def operator(self):

        localctx = OParser.OperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 276, self.RULE_operator)
        try:
            self.state = 1840
            token = self._input.LA(1)
            if token in [OParser.PLUS]:
                localctx = OParser.OperatorPlusContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1834
                self.match(OParser.PLUS)

            elif token in [OParser.MINUS]:
                localctx = OParser.OperatorMinusContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1835
                self.match(OParser.MINUS)

            elif token in [OParser.STAR]:
                localctx = OParser.OperatorMultiplyContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 1836
                self.multiply()

            elif token in [OParser.SLASH]:
                localctx = OParser.OperatorDivideContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 1837
                self.divide()

            elif token in [OParser.BSLASH]:
                localctx = OParser.OperatorIDivideContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 1838
                self.idivide()

            elif token in [OParser.PERCENT, OParser.MODULO]:
                localctx = OParser.OperatorModuloContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 1839
                self.modulo()

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class New_tokenContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.i1 = None # Token

        def VARIABLE_IDENTIFIER(self):
            return self.getToken(OParser.VARIABLE_IDENTIFIER, 0)

        def getRuleIndex(self):
            return OParser.RULE_new_token

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterNew_token(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitNew_token(self)




    def new_token(self):

        localctx = OParser.New_tokenContext(self, self._ctx, self.state)
        self.enterRule(localctx, 278, self.RULE_new_token)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1842
            localctx.i1 = self.match(OParser.VARIABLE_IDENTIFIER)
            self.state = 1843
            if not self.isText(localctx.i1,"new"):
                from antlr4.error.Errors import FailedPredicateException
                raise FailedPredicateException(self, "$parser.isText($i1,\"new\")")
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Key_tokenContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.i1 = None # Token

        def VARIABLE_IDENTIFIER(self):
            return self.getToken(OParser.VARIABLE_IDENTIFIER, 0)

        def getRuleIndex(self):
            return OParser.RULE_key_token

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterKey_token(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitKey_token(self)




    def key_token(self):

        localctx = OParser.Key_tokenContext(self, self._ctx, self.state)
        self.enterRule(localctx, 280, self.RULE_key_token)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1845
            localctx.i1 = self.match(OParser.VARIABLE_IDENTIFIER)
            self.state = 1846
            if not self.isText(localctx.i1,"key"):
                from antlr4.error.Errors import FailedPredicateException
                raise FailedPredicateException(self, "$parser.isText($i1,\"key\")")
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Module_tokenContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.i1 = None # Token

        def VARIABLE_IDENTIFIER(self):
            return self.getToken(OParser.VARIABLE_IDENTIFIER, 0)

        def getRuleIndex(self):
            return OParser.RULE_module_token

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterModule_token(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitModule_token(self)




    def module_token(self):

        localctx = OParser.Module_tokenContext(self, self._ctx, self.state)
        self.enterRule(localctx, 282, self.RULE_module_token)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1848
            localctx.i1 = self.match(OParser.VARIABLE_IDENTIFIER)
            self.state = 1849
            if not self.isText(localctx.i1,"module"):
                from antlr4.error.Errors import FailedPredicateException
                raise FailedPredicateException(self, "$parser.isText($i1,\"module\")")
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Value_tokenContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.i1 = None # Token

        def VARIABLE_IDENTIFIER(self):
            return self.getToken(OParser.VARIABLE_IDENTIFIER, 0)

        def getRuleIndex(self):
            return OParser.RULE_value_token

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterValue_token(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitValue_token(self)




    def value_token(self):

        localctx = OParser.Value_tokenContext(self, self._ctx, self.state)
        self.enterRule(localctx, 284, self.RULE_value_token)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1851
            localctx.i1 = self.match(OParser.VARIABLE_IDENTIFIER)
            self.state = 1852
            if not self.isText(localctx.i1,"value"):
                from antlr4.error.Errors import FailedPredicateException
                raise FailedPredicateException(self, "$parser.isText($i1,\"value\")")
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Symbols_tokenContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.i1 = None # Token

        def VARIABLE_IDENTIFIER(self):
            return self.getToken(OParser.VARIABLE_IDENTIFIER, 0)

        def getRuleIndex(self):
            return OParser.RULE_symbols_token

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterSymbols_token(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitSymbols_token(self)




    def symbols_token(self):

        localctx = OParser.Symbols_tokenContext(self, self._ctx, self.state)
        self.enterRule(localctx, 286, self.RULE_symbols_token)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1854
            localctx.i1 = self.match(OParser.VARIABLE_IDENTIFIER)
            self.state = 1855
            if not self.isText(localctx.i1,"symbols"):
                from antlr4.error.Errors import FailedPredicateException
                raise FailedPredicateException(self, "$parser.isText($i1,\"symbols\")")
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AssignContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EQ(self):
            return self.getToken(OParser.EQ, 0)

        def getRuleIndex(self):
            return OParser.RULE_assign

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterAssign(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitAssign(self)




    def assign(self):

        localctx = OParser.AssignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 288, self.RULE_assign)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1857
            self.match(OParser.EQ)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class MultiplyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STAR(self):
            return self.getToken(OParser.STAR, 0)

        def getRuleIndex(self):
            return OParser.RULE_multiply

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterMultiply(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitMultiply(self)




    def multiply(self):

        localctx = OParser.MultiplyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 290, self.RULE_multiply)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1859
            self.match(OParser.STAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DivideContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SLASH(self):
            return self.getToken(OParser.SLASH, 0)

        def getRuleIndex(self):
            return OParser.RULE_divide

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterDivide(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitDivide(self)




    def divide(self):

        localctx = OParser.DivideContext(self, self._ctx, self.state)
        self.enterRule(localctx, 292, self.RULE_divide)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1861
            self.match(OParser.SLASH)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class IdivideContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BSLASH(self):
            return self.getToken(OParser.BSLASH, 0)

        def getRuleIndex(self):
            return OParser.RULE_idivide

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterIdivide(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitIdivide(self)




    def idivide(self):

        localctx = OParser.IdivideContext(self, self._ctx, self.state)
        self.enterRule(localctx, 294, self.RULE_idivide)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1863
            self.match(OParser.BSLASH)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ModuloContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PERCENT(self):
            return self.getToken(OParser.PERCENT, 0)

        def MODULO(self):
            return self.getToken(OParser.MODULO, 0)

        def getRuleIndex(self):
            return OParser.RULE_modulo

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterModulo(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitModulo(self)




    def modulo(self):

        localctx = OParser.ModuloContext(self, self._ctx, self.state)
        self.enterRule(localctx, 296, self.RULE_modulo)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1865
            _la = self._input.LA(1)
            if not(_la==OParser.PERCENT or _la==OParser.MODULO):
                self._errHandler.recoverInline(self)
            self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class LfsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return OParser.RULE_lfs

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterLfs(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitLfs(self)




    def lfs(self):

        localctx = OParser.LfsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 298, self.RULE_lfs)
        try:
            self.enterOuterAlt(localctx, 1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class LfpContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return OParser.RULE_lfp

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterLfp(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitLfp(self)




    def lfp(self):

        localctx = OParser.LfpContext(self, self._ctx, self.state)
        self.enterRule(localctx, 300, self.RULE_lfp)
        try:
            self.enterOuterAlt(localctx, 1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Javascript_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return OParser.RULE_javascript_statement

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class JavascriptStatementContext(Javascript_statementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Javascript_statementContext)
            super().__init__(parser)
            self.exp = None # Javascript_expressionContext
            self.copyFrom(ctx)

        def SEMI(self):
            return self.getToken(OParser.SEMI, 0)
        def javascript_expression(self):
            return self.getTypedRuleContext(OParser.Javascript_expressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterJavascriptStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitJavascriptStatement(self)


    class JavascriptReturnStatementContext(Javascript_statementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Javascript_statementContext)
            super().__init__(parser)
            self.exp = None # Javascript_expressionContext
            self.copyFrom(ctx)

        def RETURN(self):
            return self.getToken(OParser.RETURN, 0)
        def SEMI(self):
            return self.getToken(OParser.SEMI, 0)
        def javascript_expression(self):
            return self.getTypedRuleContext(OParser.Javascript_expressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterJavascriptReturnStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitJavascriptReturnStatement(self)



    def javascript_statement(self):

        localctx = OParser.Javascript_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 302, self.RULE_javascript_statement)
        try:
            self.state = 1878
            token = self._input.LA(1)
            if token in [OParser.RETURN]:
                localctx = OParser.JavascriptReturnStatementContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1871
                self.match(OParser.RETURN)
                self.state = 1872
                localctx.exp = self.javascript_expression(0)
                self.state = 1873
                self.match(OParser.SEMI)

            elif token in [OParser.LPAR, OParser.LBRAK, OParser.BOOLEAN, OParser.CHARACTER, OParser.TEXT, OParser.INTEGER, OParser.DECIMAL, OParser.DATE, OParser.TIME, OParser.DATETIME, OParser.PERIOD, OParser.READ, OParser.SELF, OParser.TEST, OParser.THIS, OParser.WRITE, OParser.BOOLEAN_LITERAL, OParser.CHAR_LITERAL, OParser.SYMBOL_IDENTIFIER, OParser.TYPE_IDENTIFIER, OParser.VARIABLE_IDENTIFIER, OParser.DOLLAR_IDENTIFIER, OParser.TEXT_LITERAL, OParser.INTEGER_LITERAL, OParser.DECIMAL_LITERAL]:
                localctx = OParser.JavascriptStatementContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1875
                localctx.exp = self.javascript_expression(0)
                self.state = 1876
                self.match(OParser.SEMI)

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Javascript_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return OParser.RULE_javascript_expression

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class JavascriptSelectorExpressionContext(Javascript_expressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Javascript_expressionContext)
            super().__init__(parser)
            self.parent = None # Javascript_expressionContext
            self.child = None # Javascript_selector_expressionContext
            self.copyFrom(ctx)

        def javascript_expression(self):
            return self.getTypedRuleContext(OParser.Javascript_expressionContext,0)

        def javascript_selector_expression(self):
            return self.getTypedRuleContext(OParser.Javascript_selector_expressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterJavascriptSelectorExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitJavascriptSelectorExpression(self)


    class JavascriptPrimaryExpressionContext(Javascript_expressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Javascript_expressionContext)
            super().__init__(parser)
            self.exp = None # Javascript_primary_expressionContext
            self.copyFrom(ctx)

        def javascript_primary_expression(self):
            return self.getTypedRuleContext(OParser.Javascript_primary_expressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterJavascriptPrimaryExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitJavascriptPrimaryExpression(self)



    def javascript_expression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = OParser.Javascript_expressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 304
        self.enterRecursionRule(localctx, 304, self.RULE_javascript_expression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            localctx = OParser.JavascriptPrimaryExpressionContext(self, localctx)
            self._ctx = localctx
            _prevctx = localctx

            self.state = 1881
            localctx.exp = self.javascript_primary_expression()
            self._ctx.stop = self._input.LT(-1)
            self.state = 1887
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,162,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = OParser.JavascriptSelectorExpressionContext(self, OParser.Javascript_expressionContext(self, _parentctx, _parentState))
                    localctx.parent = _prevctx
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_javascript_expression)
                    self.state = 1883
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 1884
                    localctx.child = self.javascript_selector_expression() 
                self.state = 1889
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,162,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class Javascript_primary_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def javascript_this_expression(self):
            return self.getTypedRuleContext(OParser.Javascript_this_expressionContext,0)


        def javascript_new_expression(self):
            return self.getTypedRuleContext(OParser.Javascript_new_expressionContext,0)


        def javascript_parenthesis_expression(self):
            return self.getTypedRuleContext(OParser.Javascript_parenthesis_expressionContext,0)


        def javascript_identifier_expression(self):
            return self.getTypedRuleContext(OParser.Javascript_identifier_expressionContext,0)


        def javascript_literal_expression(self):
            return self.getTypedRuleContext(OParser.Javascript_literal_expressionContext,0)


        def javascript_method_expression(self):
            return self.getTypedRuleContext(OParser.Javascript_method_expressionContext,0)


        def javascript_item_expression(self):
            return self.getTypedRuleContext(OParser.Javascript_item_expressionContext,0)


        def getRuleIndex(self):
            return OParser.RULE_javascript_primary_expression

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterJavascript_primary_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitJavascript_primary_expression(self)




    def javascript_primary_expression(self):

        localctx = OParser.Javascript_primary_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 306, self.RULE_javascript_primary_expression)
        try:
            self.state = 1897
            la_ = self._interp.adaptivePredict(self._input,163,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1890
                self.javascript_this_expression()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1891
                self.javascript_new_expression()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1892
                self.javascript_parenthesis_expression()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1893
                self.javascript_identifier_expression()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1894
                self.javascript_literal_expression()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1895
                self.javascript_method_expression()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1896
                self.javascript_item_expression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Javascript_this_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def this_expression(self):
            return self.getTypedRuleContext(OParser.This_expressionContext,0)


        def getRuleIndex(self):
            return OParser.RULE_javascript_this_expression

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterJavascript_this_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitJavascript_this_expression(self)




    def javascript_this_expression(self):

        localctx = OParser.Javascript_this_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 308, self.RULE_javascript_this_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1899
            self.this_expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Javascript_new_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def new_token(self):
            return self.getTypedRuleContext(OParser.New_tokenContext,0)


        def javascript_method_expression(self):
            return self.getTypedRuleContext(OParser.Javascript_method_expressionContext,0)


        def getRuleIndex(self):
            return OParser.RULE_javascript_new_expression

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterJavascript_new_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitJavascript_new_expression(self)




    def javascript_new_expression(self):

        localctx = OParser.Javascript_new_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 310, self.RULE_javascript_new_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1901
            self.new_token()
            self.state = 1902
            self.javascript_method_expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Javascript_selector_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return OParser.RULE_javascript_selector_expression

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class JavaScriptMemberExpressionContext(Javascript_selector_expressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Javascript_selector_expressionContext)
            super().__init__(parser)
            self.name = None # Javascript_identifierContext
            self.copyFrom(ctx)

        def DOT(self):
            return self.getToken(OParser.DOT, 0)
        def javascript_identifier(self):
            return self.getTypedRuleContext(OParser.Javascript_identifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterJavaScriptMemberExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitJavaScriptMemberExpression(self)


    class JavaScriptItemExpressionContext(Javascript_selector_expressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Javascript_selector_expressionContext)
            super().__init__(parser)
            self.exp = None # Javascript_item_expressionContext
            self.copyFrom(ctx)

        def javascript_item_expression(self):
            return self.getTypedRuleContext(OParser.Javascript_item_expressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterJavaScriptItemExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitJavaScriptItemExpression(self)


    class JavaScriptMethodExpressionContext(Javascript_selector_expressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Javascript_selector_expressionContext)
            super().__init__(parser)
            self.method = None # Javascript_method_expressionContext
            self.copyFrom(ctx)

        def DOT(self):
            return self.getToken(OParser.DOT, 0)
        def javascript_method_expression(self):
            return self.getTypedRuleContext(OParser.Javascript_method_expressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterJavaScriptMethodExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitJavaScriptMethodExpression(self)



    def javascript_selector_expression(self):

        localctx = OParser.Javascript_selector_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 312, self.RULE_javascript_selector_expression)
        try:
            self.state = 1909
            la_ = self._interp.adaptivePredict(self._input,164,self._ctx)
            if la_ == 1:
                localctx = OParser.JavaScriptMethodExpressionContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1904
                self.match(OParser.DOT)
                self.state = 1905
                localctx.method = self.javascript_method_expression()
                pass

            elif la_ == 2:
                localctx = OParser.JavaScriptMemberExpressionContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1906
                self.match(OParser.DOT)
                self.state = 1907
                localctx.name = self.javascript_identifier()
                pass

            elif la_ == 3:
                localctx = OParser.JavaScriptItemExpressionContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 1908
                localctx.exp = self.javascript_item_expression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Javascript_method_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # Javascript_identifierContext
            self.args = None # Javascript_argumentsContext

        def LPAR(self):
            return self.getToken(OParser.LPAR, 0)

        def RPAR(self):
            return self.getToken(OParser.RPAR, 0)

        def javascript_identifier(self):
            return self.getTypedRuleContext(OParser.Javascript_identifierContext,0)


        def javascript_arguments(self):
            return self.getTypedRuleContext(OParser.Javascript_argumentsContext,0)


        def getRuleIndex(self):
            return OParser.RULE_javascript_method_expression

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterJavascript_method_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitJavascript_method_expression(self)




    def javascript_method_expression(self):

        localctx = OParser.Javascript_method_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 314, self.RULE_javascript_method_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1911
            localctx.name = self.javascript_identifier()
            self.state = 1912
            self.match(OParser.LPAR)
            self.state = 1914
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << OParser.LPAR) | (1 << OParser.LBRAK) | (1 << OParser.BOOLEAN) | (1 << OParser.CHARACTER) | (1 << OParser.TEXT) | (1 << OParser.INTEGER) | (1 << OParser.DECIMAL) | (1 << OParser.DATE) | (1 << OParser.TIME) | (1 << OParser.DATETIME) | (1 << OParser.PERIOD))) != 0) or ((((_la - 125)) & ~0x3f) == 0 and ((1 << (_la - 125)) & ((1 << (OParser.READ - 125)) | (1 << (OParser.SELF - 125)) | (1 << (OParser.TEST - 125)) | (1 << (OParser.THIS - 125)) | (1 << (OParser.WRITE - 125)) | (1 << (OParser.BOOLEAN_LITERAL - 125)) | (1 << (OParser.CHAR_LITERAL - 125)) | (1 << (OParser.SYMBOL_IDENTIFIER - 125)) | (1 << (OParser.TYPE_IDENTIFIER - 125)) | (1 << (OParser.VARIABLE_IDENTIFIER - 125)) | (1 << (OParser.DOLLAR_IDENTIFIER - 125)) | (1 << (OParser.TEXT_LITERAL - 125)) | (1 << (OParser.INTEGER_LITERAL - 125)) | (1 << (OParser.DECIMAL_LITERAL - 125)))) != 0):
                self.state = 1913
                localctx.args = self.javascript_arguments(0)


            self.state = 1916
            self.match(OParser.RPAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Javascript_argumentsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return OParser.RULE_javascript_arguments

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class JavascriptArgumentListContext(Javascript_argumentsContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Javascript_argumentsContext)
            super().__init__(parser)
            self.item = None # Javascript_expressionContext
            self.copyFrom(ctx)

        def javascript_expression(self):
            return self.getTypedRuleContext(OParser.Javascript_expressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterJavascriptArgumentList(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitJavascriptArgumentList(self)


    class JavascriptArgumentListItemContext(Javascript_argumentsContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Javascript_argumentsContext)
            super().__init__(parser)
            self.items = None # Javascript_argumentsContext
            self.item = None # Javascript_expressionContext
            self.copyFrom(ctx)

        def COMMA(self):
            return self.getToken(OParser.COMMA, 0)
        def javascript_arguments(self):
            return self.getTypedRuleContext(OParser.Javascript_argumentsContext,0)

        def javascript_expression(self):
            return self.getTypedRuleContext(OParser.Javascript_expressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterJavascriptArgumentListItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitJavascriptArgumentListItem(self)



    def javascript_arguments(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = OParser.Javascript_argumentsContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 316
        self.enterRecursionRule(localctx, 316, self.RULE_javascript_arguments, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            localctx = OParser.JavascriptArgumentListContext(self, localctx)
            self._ctx = localctx
            _prevctx = localctx

            self.state = 1919
            localctx.item = self.javascript_expression(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 1926
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,166,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = OParser.JavascriptArgumentListItemContext(self, OParser.Javascript_argumentsContext(self, _parentctx, _parentState))
                    localctx.items = _prevctx
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_javascript_arguments)
                    self.state = 1921
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 1922
                    self.match(OParser.COMMA)
                    self.state = 1923
                    localctx.item = self.javascript_expression(0) 
                self.state = 1928
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,166,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class Javascript_item_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.exp = None # Javascript_expressionContext

        def LBRAK(self):
            return self.getToken(OParser.LBRAK, 0)

        def RBRAK(self):
            return self.getToken(OParser.RBRAK, 0)

        def javascript_expression(self):
            return self.getTypedRuleContext(OParser.Javascript_expressionContext,0)


        def getRuleIndex(self):
            return OParser.RULE_javascript_item_expression

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterJavascript_item_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitJavascript_item_expression(self)




    def javascript_item_expression(self):

        localctx = OParser.Javascript_item_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 318, self.RULE_javascript_item_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1929
            self.match(OParser.LBRAK)
            self.state = 1930
            localctx.exp = self.javascript_expression(0)
            self.state = 1931
            self.match(OParser.RBRAK)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Javascript_parenthesis_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.exp = None # Javascript_expressionContext

        def LPAR(self):
            return self.getToken(OParser.LPAR, 0)

        def RPAR(self):
            return self.getToken(OParser.RPAR, 0)

        def javascript_expression(self):
            return self.getTypedRuleContext(OParser.Javascript_expressionContext,0)


        def getRuleIndex(self):
            return OParser.RULE_javascript_parenthesis_expression

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterJavascript_parenthesis_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitJavascript_parenthesis_expression(self)




    def javascript_parenthesis_expression(self):

        localctx = OParser.Javascript_parenthesis_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 320, self.RULE_javascript_parenthesis_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1933
            self.match(OParser.LPAR)
            self.state = 1934
            localctx.exp = self.javascript_expression(0)
            self.state = 1935
            self.match(OParser.RPAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Javascript_identifier_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # Javascript_identifierContext

        def javascript_identifier(self):
            return self.getTypedRuleContext(OParser.Javascript_identifierContext,0)


        def getRuleIndex(self):
            return OParser.RULE_javascript_identifier_expression

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterJavascript_identifier_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitJavascript_identifier_expression(self)




    def javascript_identifier_expression(self):

        localctx = OParser.Javascript_identifier_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 322, self.RULE_javascript_identifier_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1937
            localctx.name = self.javascript_identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Javascript_literal_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return OParser.RULE_javascript_literal_expression

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class JavascriptIntegerLiteralContext(Javascript_literal_expressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Javascript_literal_expressionContext)
            super().__init__(parser)
            self.t = None # Token
            self.copyFrom(ctx)

        def INTEGER_LITERAL(self):
            return self.getToken(OParser.INTEGER_LITERAL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterJavascriptIntegerLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitJavascriptIntegerLiteral(self)


    class JavascriptBooleanLiteralContext(Javascript_literal_expressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Javascript_literal_expressionContext)
            super().__init__(parser)
            self.t = None # Token
            self.copyFrom(ctx)

        def BOOLEAN_LITERAL(self):
            return self.getToken(OParser.BOOLEAN_LITERAL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterJavascriptBooleanLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitJavascriptBooleanLiteral(self)


    class JavascriptCharacterLiteralContext(Javascript_literal_expressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Javascript_literal_expressionContext)
            super().__init__(parser)
            self.t = None # Token
            self.copyFrom(ctx)

        def CHAR_LITERAL(self):
            return self.getToken(OParser.CHAR_LITERAL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterJavascriptCharacterLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitJavascriptCharacterLiteral(self)


    class JavascriptTextLiteralContext(Javascript_literal_expressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Javascript_literal_expressionContext)
            super().__init__(parser)
            self.t = None # Token
            self.copyFrom(ctx)

        def TEXT_LITERAL(self):
            return self.getToken(OParser.TEXT_LITERAL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterJavascriptTextLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitJavascriptTextLiteral(self)


    class JavascriptDecimalLiteralContext(Javascript_literal_expressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Javascript_literal_expressionContext)
            super().__init__(parser)
            self.t = None # Token
            self.copyFrom(ctx)

        def DECIMAL_LITERAL(self):
            return self.getToken(OParser.DECIMAL_LITERAL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterJavascriptDecimalLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitJavascriptDecimalLiteral(self)



    def javascript_literal_expression(self):

        localctx = OParser.Javascript_literal_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 324, self.RULE_javascript_literal_expression)
        try:
            self.state = 1944
            token = self._input.LA(1)
            if token in [OParser.INTEGER_LITERAL]:
                localctx = OParser.JavascriptIntegerLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1939
                localctx.t = self.match(OParser.INTEGER_LITERAL)

            elif token in [OParser.DECIMAL_LITERAL]:
                localctx = OParser.JavascriptDecimalLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1940
                localctx.t = self.match(OParser.DECIMAL_LITERAL)

            elif token in [OParser.TEXT_LITERAL]:
                localctx = OParser.JavascriptTextLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 1941
                localctx.t = self.match(OParser.TEXT_LITERAL)

            elif token in [OParser.BOOLEAN_LITERAL]:
                localctx = OParser.JavascriptBooleanLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 1942
                localctx.t = self.match(OParser.BOOLEAN_LITERAL)

            elif token in [OParser.CHAR_LITERAL]:
                localctx = OParser.JavascriptCharacterLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 1943
                localctx.t = self.match(OParser.CHAR_LITERAL)

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Javascript_identifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VARIABLE_IDENTIFIER(self):
            return self.getToken(OParser.VARIABLE_IDENTIFIER, 0)

        def SYMBOL_IDENTIFIER(self):
            return self.getToken(OParser.SYMBOL_IDENTIFIER, 0)

        def DOLLAR_IDENTIFIER(self):
            return self.getToken(OParser.DOLLAR_IDENTIFIER, 0)

        def TYPE_IDENTIFIER(self):
            return self.getToken(OParser.TYPE_IDENTIFIER, 0)

        def BOOLEAN(self):
            return self.getToken(OParser.BOOLEAN, 0)

        def CHARACTER(self):
            return self.getToken(OParser.CHARACTER, 0)

        def TEXT(self):
            return self.getToken(OParser.TEXT, 0)

        def INTEGER(self):
            return self.getToken(OParser.INTEGER, 0)

        def DECIMAL(self):
            return self.getToken(OParser.DECIMAL, 0)

        def DATE(self):
            return self.getToken(OParser.DATE, 0)

        def TIME(self):
            return self.getToken(OParser.TIME, 0)

        def DATETIME(self):
            return self.getToken(OParser.DATETIME, 0)

        def PERIOD(self):
            return self.getToken(OParser.PERIOD, 0)

        def READ(self):
            return self.getToken(OParser.READ, 0)

        def WRITE(self):
            return self.getToken(OParser.WRITE, 0)

        def TEST(self):
            return self.getToken(OParser.TEST, 0)

        def getRuleIndex(self):
            return OParser.RULE_javascript_identifier

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterJavascript_identifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitJavascript_identifier(self)




    def javascript_identifier(self):

        localctx = OParser.Javascript_identifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 326, self.RULE_javascript_identifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1946
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << OParser.BOOLEAN) | (1 << OParser.CHARACTER) | (1 << OParser.TEXT) | (1 << OParser.INTEGER) | (1 << OParser.DECIMAL) | (1 << OParser.DATE) | (1 << OParser.TIME) | (1 << OParser.DATETIME) | (1 << OParser.PERIOD))) != 0) or ((((_la - 125)) & ~0x3f) == 0 and ((1 << (_la - 125)) & ((1 << (OParser.READ - 125)) | (1 << (OParser.TEST - 125)) | (1 << (OParser.WRITE - 125)) | (1 << (OParser.SYMBOL_IDENTIFIER - 125)) | (1 << (OParser.TYPE_IDENTIFIER - 125)) | (1 << (OParser.VARIABLE_IDENTIFIER - 125)) | (1 << (OParser.DOLLAR_IDENTIFIER - 125)))) != 0)):
                self._errHandler.recoverInline(self)
            self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Python_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return OParser.RULE_python_statement

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class PythonStatementContext(Python_statementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Python_statementContext)
            super().__init__(parser)
            self.exp = None # Python_expressionContext
            self.copyFrom(ctx)

        def python_expression(self):
            return self.getTypedRuleContext(OParser.Python_expressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterPythonStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitPythonStatement(self)


    class PythonReturnStatementContext(Python_statementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Python_statementContext)
            super().__init__(parser)
            self.exp = None # Python_expressionContext
            self.copyFrom(ctx)

        def RETURN(self):
            return self.getToken(OParser.RETURN, 0)
        def python_expression(self):
            return self.getTypedRuleContext(OParser.Python_expressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterPythonReturnStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitPythonReturnStatement(self)



    def python_statement(self):

        localctx = OParser.Python_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 328, self.RULE_python_statement)
        try:
            self.state = 1951
            token = self._input.LA(1)
            if token in [OParser.RETURN]:
                localctx = OParser.PythonReturnStatementContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1948
                self.match(OParser.RETURN)
                self.state = 1949
                localctx.exp = self.python_expression(0)

            elif token in [OParser.LPAR, OParser.BOOLEAN, OParser.CHARACTER, OParser.TEXT, OParser.INTEGER, OParser.DECIMAL, OParser.DATE, OParser.TIME, OParser.DATETIME, OParser.PERIOD, OParser.READ, OParser.SELF, OParser.TEST, OParser.THIS, OParser.WRITE, OParser.BOOLEAN_LITERAL, OParser.CHAR_LITERAL, OParser.SYMBOL_IDENTIFIER, OParser.TYPE_IDENTIFIER, OParser.VARIABLE_IDENTIFIER, OParser.DOLLAR_IDENTIFIER, OParser.TEXT_LITERAL, OParser.INTEGER_LITERAL, OParser.DECIMAL_LITERAL]:
                localctx = OParser.PythonStatementContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1950
                localctx.exp = self.python_expression(0)

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Python_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return OParser.RULE_python_expression

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class PythonSelectorExpressionContext(Python_expressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Python_expressionContext)
            super().__init__(parser)
            self.parent = None # Python_expressionContext
            self.child = None # Python_selector_expressionContext
            self.copyFrom(ctx)

        def python_expression(self):
            return self.getTypedRuleContext(OParser.Python_expressionContext,0)

        def python_selector_expression(self):
            return self.getTypedRuleContext(OParser.Python_selector_expressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterPythonSelectorExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitPythonSelectorExpression(self)


    class PythonPrimaryExpressionContext(Python_expressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Python_expressionContext)
            super().__init__(parser)
            self.exp = None # Python_primary_expressionContext
            self.copyFrom(ctx)

        def python_primary_expression(self):
            return self.getTypedRuleContext(OParser.Python_primary_expressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterPythonPrimaryExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitPythonPrimaryExpression(self)



    def python_expression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = OParser.Python_expressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 330
        self.enterRecursionRule(localctx, 330, self.RULE_python_expression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            localctx = OParser.PythonPrimaryExpressionContext(self, localctx)
            self._ctx = localctx
            _prevctx = localctx

            self.state = 1954
            localctx.exp = self.python_primary_expression()
            self._ctx.stop = self._input.LT(-1)
            self.state = 1960
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,169,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = OParser.PythonSelectorExpressionContext(self, OParser.Python_expressionContext(self, _parentctx, _parentState))
                    localctx.parent = _prevctx
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_python_expression)
                    self.state = 1956
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 1957
                    localctx.child = self.python_selector_expression() 
                self.state = 1962
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,169,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class Python_primary_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return OParser.RULE_python_primary_expression

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class PythonParenthesisExpressionContext(Python_primary_expressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Python_primary_expressionContext)
            super().__init__(parser)
            self.exp = None # Python_parenthesis_expressionContext
            self.copyFrom(ctx)

        def python_parenthesis_expression(self):
            return self.getTypedRuleContext(OParser.Python_parenthesis_expressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterPythonParenthesisExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitPythonParenthesisExpression(self)


    class PythonIdentifierExpressionContext(Python_primary_expressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Python_primary_expressionContext)
            super().__init__(parser)
            self.exp = None # Python_identifier_expressionContext
            self.copyFrom(ctx)

        def python_identifier_expression(self):
            return self.getTypedRuleContext(OParser.Python_identifier_expressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterPythonIdentifierExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitPythonIdentifierExpression(self)


    class PythonLiteralExpressionContext(Python_primary_expressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Python_primary_expressionContext)
            super().__init__(parser)
            self.exp = None # Python_literal_expressionContext
            self.copyFrom(ctx)

        def python_literal_expression(self):
            return self.getTypedRuleContext(OParser.Python_literal_expressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterPythonLiteralExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitPythonLiteralExpression(self)


    class PythonGlobalMethodExpressionContext(Python_primary_expressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Python_primary_expressionContext)
            super().__init__(parser)
            self.exp = None # Python_method_expressionContext
            self.copyFrom(ctx)

        def python_method_expression(self):
            return self.getTypedRuleContext(OParser.Python_method_expressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterPythonGlobalMethodExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitPythonGlobalMethodExpression(self)



    def python_primary_expression(self):

        localctx = OParser.Python_primary_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 332, self.RULE_python_primary_expression)
        try:
            self.state = 1967
            la_ = self._interp.adaptivePredict(self._input,170,self._ctx)
            if la_ == 1:
                localctx = OParser.PythonParenthesisExpressionContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1963
                localctx.exp = self.python_parenthesis_expression()
                pass

            elif la_ == 2:
                localctx = OParser.PythonIdentifierExpressionContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1964
                localctx.exp = self.python_identifier_expression(0)
                pass

            elif la_ == 3:
                localctx = OParser.PythonLiteralExpressionContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 1965
                localctx.exp = self.python_literal_expression()
                pass

            elif la_ == 4:
                localctx = OParser.PythonGlobalMethodExpressionContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 1966
                localctx.exp = self.python_method_expression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Python_selector_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return OParser.RULE_python_selector_expression

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class PythonMethodExpressionContext(Python_selector_expressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Python_selector_expressionContext)
            super().__init__(parser)
            self.exp = None # Python_method_expressionContext
            self.copyFrom(ctx)

        def DOT(self):
            return self.getToken(OParser.DOT, 0)
        def python_method_expression(self):
            return self.getTypedRuleContext(OParser.Python_method_expressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterPythonMethodExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitPythonMethodExpression(self)


    class PythonItemExpressionContext(Python_selector_expressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Python_selector_expressionContext)
            super().__init__(parser)
            self.exp = None # Python_expressionContext
            self.copyFrom(ctx)

        def LBRAK(self):
            return self.getToken(OParser.LBRAK, 0)
        def RBRAK(self):
            return self.getToken(OParser.RBRAK, 0)
        def python_expression(self):
            return self.getTypedRuleContext(OParser.Python_expressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterPythonItemExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitPythonItemExpression(self)



    def python_selector_expression(self):

        localctx = OParser.Python_selector_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 334, self.RULE_python_selector_expression)
        try:
            self.state = 1975
            token = self._input.LA(1)
            if token in [OParser.DOT]:
                localctx = OParser.PythonMethodExpressionContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1969
                self.match(OParser.DOT)
                self.state = 1970
                localctx.exp = self.python_method_expression()

            elif token in [OParser.LBRAK]:
                localctx = OParser.PythonItemExpressionContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1971
                self.match(OParser.LBRAK)
                self.state = 1972
                localctx.exp = self.python_expression(0)
                self.state = 1973
                self.match(OParser.RBRAK)

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Python_method_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # Python_identifierContext
            self.args = None # Python_argument_listContext

        def LPAR(self):
            return self.getToken(OParser.LPAR, 0)

        def RPAR(self):
            return self.getToken(OParser.RPAR, 0)

        def python_identifier(self):
            return self.getTypedRuleContext(OParser.Python_identifierContext,0)


        def python_argument_list(self):
            return self.getTypedRuleContext(OParser.Python_argument_listContext,0)


        def getRuleIndex(self):
            return OParser.RULE_python_method_expression

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterPython_method_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitPython_method_expression(self)




    def python_method_expression(self):

        localctx = OParser.Python_method_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 336, self.RULE_python_method_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1977
            localctx.name = self.python_identifier()
            self.state = 1978
            self.match(OParser.LPAR)
            self.state = 1980
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << OParser.LPAR) | (1 << OParser.BOOLEAN) | (1 << OParser.CHARACTER) | (1 << OParser.TEXT) | (1 << OParser.INTEGER) | (1 << OParser.DECIMAL) | (1 << OParser.DATE) | (1 << OParser.TIME) | (1 << OParser.DATETIME) | (1 << OParser.PERIOD))) != 0) or ((((_la - 125)) & ~0x3f) == 0 and ((1 << (_la - 125)) & ((1 << (OParser.READ - 125)) | (1 << (OParser.SELF - 125)) | (1 << (OParser.TEST - 125)) | (1 << (OParser.THIS - 125)) | (1 << (OParser.WRITE - 125)) | (1 << (OParser.BOOLEAN_LITERAL - 125)) | (1 << (OParser.CHAR_LITERAL - 125)) | (1 << (OParser.SYMBOL_IDENTIFIER - 125)) | (1 << (OParser.TYPE_IDENTIFIER - 125)) | (1 << (OParser.VARIABLE_IDENTIFIER - 125)) | (1 << (OParser.DOLLAR_IDENTIFIER - 125)) | (1 << (OParser.TEXT_LITERAL - 125)) | (1 << (OParser.INTEGER_LITERAL - 125)) | (1 << (OParser.DECIMAL_LITERAL - 125)))) != 0):
                self.state = 1979
                localctx.args = self.python_argument_list()


            self.state = 1982
            self.match(OParser.RPAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Python_argument_listContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return OParser.RULE_python_argument_list

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class PythonOrdinalOnlyArgumentListContext(Python_argument_listContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Python_argument_listContext)
            super().__init__(parser)
            self.ordinal = None # Python_ordinal_argument_listContext
            self.copyFrom(ctx)

        def python_ordinal_argument_list(self):
            return self.getTypedRuleContext(OParser.Python_ordinal_argument_listContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterPythonOrdinalOnlyArgumentList(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitPythonOrdinalOnlyArgumentList(self)


    class PythonNamedOnlyArgumentListContext(Python_argument_listContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Python_argument_listContext)
            super().__init__(parser)
            self.named = None # Python_named_argument_listContext
            self.copyFrom(ctx)

        def python_named_argument_list(self):
            return self.getTypedRuleContext(OParser.Python_named_argument_listContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterPythonNamedOnlyArgumentList(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitPythonNamedOnlyArgumentList(self)


    class PythonArgumentListContext(Python_argument_listContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Python_argument_listContext)
            super().__init__(parser)
            self.ordinal = None # Python_ordinal_argument_listContext
            self.named = None # Python_named_argument_listContext
            self.copyFrom(ctx)

        def COMMA(self):
            return self.getToken(OParser.COMMA, 0)
        def python_ordinal_argument_list(self):
            return self.getTypedRuleContext(OParser.Python_ordinal_argument_listContext,0)

        def python_named_argument_list(self):
            return self.getTypedRuleContext(OParser.Python_named_argument_listContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterPythonArgumentList(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitPythonArgumentList(self)



    def python_argument_list(self):

        localctx = OParser.Python_argument_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 338, self.RULE_python_argument_list)
        try:
            self.state = 1990
            la_ = self._interp.adaptivePredict(self._input,173,self._ctx)
            if la_ == 1:
                localctx = OParser.PythonOrdinalOnlyArgumentListContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1984
                localctx.ordinal = self.python_ordinal_argument_list(0)
                pass

            elif la_ == 2:
                localctx = OParser.PythonNamedOnlyArgumentListContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1985
                localctx.named = self.python_named_argument_list(0)
                pass

            elif la_ == 3:
                localctx = OParser.PythonArgumentListContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 1986
                localctx.ordinal = self.python_ordinal_argument_list(0)
                self.state = 1987
                self.match(OParser.COMMA)
                self.state = 1988
                localctx.named = self.python_named_argument_list(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Python_ordinal_argument_listContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return OParser.RULE_python_ordinal_argument_list

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class PythonOrdinalArgumentListContext(Python_ordinal_argument_listContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Python_ordinal_argument_listContext)
            super().__init__(parser)
            self.item = None # Python_expressionContext
            self.copyFrom(ctx)

        def python_expression(self):
            return self.getTypedRuleContext(OParser.Python_expressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterPythonOrdinalArgumentList(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitPythonOrdinalArgumentList(self)


    class PythonOrdinalArgumentListItemContext(Python_ordinal_argument_listContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Python_ordinal_argument_listContext)
            super().__init__(parser)
            self.items = None # Python_ordinal_argument_listContext
            self.item = None # Python_expressionContext
            self.copyFrom(ctx)

        def COMMA(self):
            return self.getToken(OParser.COMMA, 0)
        def python_ordinal_argument_list(self):
            return self.getTypedRuleContext(OParser.Python_ordinal_argument_listContext,0)

        def python_expression(self):
            return self.getTypedRuleContext(OParser.Python_expressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterPythonOrdinalArgumentListItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitPythonOrdinalArgumentListItem(self)



    def python_ordinal_argument_list(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = OParser.Python_ordinal_argument_listContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 340
        self.enterRecursionRule(localctx, 340, self.RULE_python_ordinal_argument_list, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            localctx = OParser.PythonOrdinalArgumentListContext(self, localctx)
            self._ctx = localctx
            _prevctx = localctx

            self.state = 1993
            localctx.item = self.python_expression(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 2000
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,174,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = OParser.PythonOrdinalArgumentListItemContext(self, OParser.Python_ordinal_argument_listContext(self, _parentctx, _parentState))
                    localctx.items = _prevctx
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_python_ordinal_argument_list)
                    self.state = 1995
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 1996
                    self.match(OParser.COMMA)
                    self.state = 1997
                    localctx.item = self.python_expression(0) 
                self.state = 2002
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,174,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class Python_named_argument_listContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return OParser.RULE_python_named_argument_list

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class PythonNamedArgumentListContext(Python_named_argument_listContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Python_named_argument_listContext)
            super().__init__(parser)
            self.name = None # Python_identifierContext
            self.exp = None # Python_expressionContext
            self.copyFrom(ctx)

        def EQ(self):
            return self.getToken(OParser.EQ, 0)
        def python_identifier(self):
            return self.getTypedRuleContext(OParser.Python_identifierContext,0)

        def python_expression(self):
            return self.getTypedRuleContext(OParser.Python_expressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterPythonNamedArgumentList(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitPythonNamedArgumentList(self)


    class PythonNamedArgumentListItemContext(Python_named_argument_listContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Python_named_argument_listContext)
            super().__init__(parser)
            self.items = None # Python_named_argument_listContext
            self.name = None # Python_identifierContext
            self.exp = None # Python_expressionContext
            self.copyFrom(ctx)

        def COMMA(self):
            return self.getToken(OParser.COMMA, 0)
        def EQ(self):
            return self.getToken(OParser.EQ, 0)
        def python_named_argument_list(self):
            return self.getTypedRuleContext(OParser.Python_named_argument_listContext,0)

        def python_identifier(self):
            return self.getTypedRuleContext(OParser.Python_identifierContext,0)

        def python_expression(self):
            return self.getTypedRuleContext(OParser.Python_expressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterPythonNamedArgumentListItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitPythonNamedArgumentListItem(self)



    def python_named_argument_list(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = OParser.Python_named_argument_listContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 342
        self.enterRecursionRule(localctx, 342, self.RULE_python_named_argument_list, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            localctx = OParser.PythonNamedArgumentListContext(self, localctx)
            self._ctx = localctx
            _prevctx = localctx

            self.state = 2004
            localctx.name = self.python_identifier()
            self.state = 2005
            self.match(OParser.EQ)
            self.state = 2006
            localctx.exp = self.python_expression(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 2016
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,175,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = OParser.PythonNamedArgumentListItemContext(self, OParser.Python_named_argument_listContext(self, _parentctx, _parentState))
                    localctx.items = _prevctx
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_python_named_argument_list)
                    self.state = 2008
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 2009
                    self.match(OParser.COMMA)
                    self.state = 2010
                    localctx.name = self.python_identifier()
                    self.state = 2011
                    self.match(OParser.EQ)
                    self.state = 2012
                    localctx.exp = self.python_expression(0) 
                self.state = 2018
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,175,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class Python_parenthesis_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.exp = None # Python_expressionContext

        def LPAR(self):
            return self.getToken(OParser.LPAR, 0)

        def RPAR(self):
            return self.getToken(OParser.RPAR, 0)

        def python_expression(self):
            return self.getTypedRuleContext(OParser.Python_expressionContext,0)


        def getRuleIndex(self):
            return OParser.RULE_python_parenthesis_expression

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterPython_parenthesis_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitPython_parenthesis_expression(self)




    def python_parenthesis_expression(self):

        localctx = OParser.Python_parenthesis_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 344, self.RULE_python_parenthesis_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2019
            self.match(OParser.LPAR)
            self.state = 2020
            localctx.exp = self.python_expression(0)
            self.state = 2021
            self.match(OParser.RPAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Python_identifier_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return OParser.RULE_python_identifier_expression

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class PythonChildIdentifierContext(Python_identifier_expressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Python_identifier_expressionContext)
            super().__init__(parser)
            self.parent = None # Python_identifier_expressionContext
            self.name = None # Python_identifierContext
            self.copyFrom(ctx)

        def DOT(self):
            return self.getToken(OParser.DOT, 0)
        def python_identifier_expression(self):
            return self.getTypedRuleContext(OParser.Python_identifier_expressionContext,0)

        def python_identifier(self):
            return self.getTypedRuleContext(OParser.Python_identifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterPythonChildIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitPythonChildIdentifier(self)


    class PythonPromptoIdentifierContext(Python_identifier_expressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Python_identifier_expressionContext)
            super().__init__(parser)
            self.copyFrom(ctx)

        def DOLLAR_IDENTIFIER(self):
            return self.getToken(OParser.DOLLAR_IDENTIFIER, 0)

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterPythonPromptoIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitPythonPromptoIdentifier(self)


    class PythonIdentifierContext(Python_identifier_expressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Python_identifier_expressionContext)
            super().__init__(parser)
            self.name = None # Python_identifierContext
            self.copyFrom(ctx)

        def python_identifier(self):
            return self.getTypedRuleContext(OParser.Python_identifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterPythonIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitPythonIdentifier(self)



    def python_identifier_expression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = OParser.Python_identifier_expressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 346
        self.enterRecursionRule(localctx, 346, self.RULE_python_identifier_expression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2026
            token = self._input.LA(1)
            if token in [OParser.DOLLAR_IDENTIFIER]:
                localctx = OParser.PythonPromptoIdentifierContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx

                self.state = 2024
                self.match(OParser.DOLLAR_IDENTIFIER)

            elif token in [OParser.BOOLEAN, OParser.CHARACTER, OParser.TEXT, OParser.INTEGER, OParser.DECIMAL, OParser.DATE, OParser.TIME, OParser.DATETIME, OParser.PERIOD, OParser.READ, OParser.SELF, OParser.TEST, OParser.THIS, OParser.WRITE, OParser.SYMBOL_IDENTIFIER, OParser.TYPE_IDENTIFIER, OParser.VARIABLE_IDENTIFIER]:
                localctx = OParser.PythonIdentifierContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2025
                localctx.name = self.python_identifier()

            else:
                raise NoViableAltException(self)

            self._ctx.stop = self._input.LT(-1)
            self.state = 2033
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,177,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = OParser.PythonChildIdentifierContext(self, OParser.Python_identifier_expressionContext(self, _parentctx, _parentState))
                    localctx.parent = _prevctx
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_python_identifier_expression)
                    self.state = 2028
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 2029
                    self.match(OParser.DOT)
                    self.state = 2030
                    localctx.name = self.python_identifier() 
                self.state = 2035
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,177,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class Python_literal_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return OParser.RULE_python_literal_expression

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class PythonIntegerLiteralContext(Python_literal_expressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Python_literal_expressionContext)
            super().__init__(parser)
            self.t = None # Token
            self.copyFrom(ctx)

        def INTEGER_LITERAL(self):
            return self.getToken(OParser.INTEGER_LITERAL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterPythonIntegerLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitPythonIntegerLiteral(self)


    class PythonBooleanLiteralContext(Python_literal_expressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Python_literal_expressionContext)
            super().__init__(parser)
            self.t = None # Token
            self.copyFrom(ctx)

        def BOOLEAN_LITERAL(self):
            return self.getToken(OParser.BOOLEAN_LITERAL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterPythonBooleanLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitPythonBooleanLiteral(self)


    class PythonCharacterLiteralContext(Python_literal_expressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Python_literal_expressionContext)
            super().__init__(parser)
            self.t = None # Token
            self.copyFrom(ctx)

        def CHAR_LITERAL(self):
            return self.getToken(OParser.CHAR_LITERAL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterPythonCharacterLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitPythonCharacterLiteral(self)


    class PythonTextLiteralContext(Python_literal_expressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Python_literal_expressionContext)
            super().__init__(parser)
            self.t = None # Token
            self.copyFrom(ctx)

        def TEXT_LITERAL(self):
            return self.getToken(OParser.TEXT_LITERAL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterPythonTextLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitPythonTextLiteral(self)


    class PythonDecimalLiteralContext(Python_literal_expressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Python_literal_expressionContext)
            super().__init__(parser)
            self.t = None # Token
            self.copyFrom(ctx)

        def DECIMAL_LITERAL(self):
            return self.getToken(OParser.DECIMAL_LITERAL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterPythonDecimalLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitPythonDecimalLiteral(self)



    def python_literal_expression(self):

        localctx = OParser.Python_literal_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 348, self.RULE_python_literal_expression)
        try:
            self.state = 2041
            token = self._input.LA(1)
            if token in [OParser.INTEGER_LITERAL]:
                localctx = OParser.PythonIntegerLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2036
                localctx.t = self.match(OParser.INTEGER_LITERAL)

            elif token in [OParser.DECIMAL_LITERAL]:
                localctx = OParser.PythonDecimalLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2037
                localctx.t = self.match(OParser.DECIMAL_LITERAL)

            elif token in [OParser.TEXT_LITERAL]:
                localctx = OParser.PythonTextLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 2038
                localctx.t = self.match(OParser.TEXT_LITERAL)

            elif token in [OParser.BOOLEAN_LITERAL]:
                localctx = OParser.PythonBooleanLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 2039
                localctx.t = self.match(OParser.BOOLEAN_LITERAL)

            elif token in [OParser.CHAR_LITERAL]:
                localctx = OParser.PythonCharacterLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 2040
                localctx.t = self.match(OParser.CHAR_LITERAL)

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Python_identifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VARIABLE_IDENTIFIER(self):
            return self.getToken(OParser.VARIABLE_IDENTIFIER, 0)

        def SYMBOL_IDENTIFIER(self):
            return self.getToken(OParser.SYMBOL_IDENTIFIER, 0)

        def TYPE_IDENTIFIER(self):
            return self.getToken(OParser.TYPE_IDENTIFIER, 0)

        def BOOLEAN(self):
            return self.getToken(OParser.BOOLEAN, 0)

        def CHARACTER(self):
            return self.getToken(OParser.CHARACTER, 0)

        def TEXT(self):
            return self.getToken(OParser.TEXT, 0)

        def INTEGER(self):
            return self.getToken(OParser.INTEGER, 0)

        def DECIMAL(self):
            return self.getToken(OParser.DECIMAL, 0)

        def DATE(self):
            return self.getToken(OParser.DATE, 0)

        def TIME(self):
            return self.getToken(OParser.TIME, 0)

        def DATETIME(self):
            return self.getToken(OParser.DATETIME, 0)

        def PERIOD(self):
            return self.getToken(OParser.PERIOD, 0)

        def READ(self):
            return self.getToken(OParser.READ, 0)

        def WRITE(self):
            return self.getToken(OParser.WRITE, 0)

        def TEST(self):
            return self.getToken(OParser.TEST, 0)

        def SELF(self):
            return self.getToken(OParser.SELF, 0)

        def THIS(self):
            return self.getToken(OParser.THIS, 0)

        def getRuleIndex(self):
            return OParser.RULE_python_identifier

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterPython_identifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitPython_identifier(self)




    def python_identifier(self):

        localctx = OParser.Python_identifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 350, self.RULE_python_identifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2043
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << OParser.BOOLEAN) | (1 << OParser.CHARACTER) | (1 << OParser.TEXT) | (1 << OParser.INTEGER) | (1 << OParser.DECIMAL) | (1 << OParser.DATE) | (1 << OParser.TIME) | (1 << OParser.DATETIME) | (1 << OParser.PERIOD))) != 0) or ((((_la - 125)) & ~0x3f) == 0 and ((1 << (_la - 125)) & ((1 << (OParser.READ - 125)) | (1 << (OParser.SELF - 125)) | (1 << (OParser.TEST - 125)) | (1 << (OParser.THIS - 125)) | (1 << (OParser.WRITE - 125)) | (1 << (OParser.SYMBOL_IDENTIFIER - 125)) | (1 << (OParser.TYPE_IDENTIFIER - 125)) | (1 << (OParser.VARIABLE_IDENTIFIER - 125)))) != 0)):
                self._errHandler.recoverInline(self)
            self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Java_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return OParser.RULE_java_statement

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class JavaReturnStatementContext(Java_statementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Java_statementContext)
            super().__init__(parser)
            self.exp = None # Java_expressionContext
            self.copyFrom(ctx)

        def RETURN(self):
            return self.getToken(OParser.RETURN, 0)
        def SEMI(self):
            return self.getToken(OParser.SEMI, 0)
        def java_expression(self):
            return self.getTypedRuleContext(OParser.Java_expressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterJavaReturnStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitJavaReturnStatement(self)


    class JavaStatementContext(Java_statementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Java_statementContext)
            super().__init__(parser)
            self.exp = None # Java_expressionContext
            self.copyFrom(ctx)

        def SEMI(self):
            return self.getToken(OParser.SEMI, 0)
        def java_expression(self):
            return self.getTypedRuleContext(OParser.Java_expressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterJavaStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitJavaStatement(self)



    def java_statement(self):

        localctx = OParser.Java_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 352, self.RULE_java_statement)
        try:
            self.state = 2052
            token = self._input.LA(1)
            if token in [OParser.RETURN]:
                localctx = OParser.JavaReturnStatementContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2045
                self.match(OParser.RETURN)
                self.state = 2046
                localctx.exp = self.java_expression(0)
                self.state = 2047
                self.match(OParser.SEMI)

            elif token in [OParser.LPAR, OParser.BOOLEAN, OParser.CHARACTER, OParser.TEXT, OParser.INTEGER, OParser.DECIMAL, OParser.DATE, OParser.TIME, OParser.DATETIME, OParser.PERIOD, OParser.READ, OParser.SELF, OParser.TEST, OParser.THIS, OParser.WRITE, OParser.BOOLEAN_LITERAL, OParser.CHAR_LITERAL, OParser.SYMBOL_IDENTIFIER, OParser.TYPE_IDENTIFIER, OParser.VARIABLE_IDENTIFIER, OParser.NATIVE_IDENTIFIER, OParser.DOLLAR_IDENTIFIER, OParser.TEXT_LITERAL, OParser.INTEGER_LITERAL, OParser.DECIMAL_LITERAL]:
                localctx = OParser.JavaStatementContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2049
                localctx.exp = self.java_expression(0)
                self.state = 2050
                self.match(OParser.SEMI)

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Java_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return OParser.RULE_java_expression

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class JavaSelectorExpressionContext(Java_expressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Java_expressionContext)
            super().__init__(parser)
            self.parent = None # Java_expressionContext
            self.child = None # Java_selector_expressionContext
            self.copyFrom(ctx)

        def java_expression(self):
            return self.getTypedRuleContext(OParser.Java_expressionContext,0)

        def java_selector_expression(self):
            return self.getTypedRuleContext(OParser.Java_selector_expressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterJavaSelectorExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitJavaSelectorExpression(self)


    class JavaPrimaryExpressionContext(Java_expressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Java_expressionContext)
            super().__init__(parser)
            self.exp = None # Java_primary_expressionContext
            self.copyFrom(ctx)

        def java_primary_expression(self):
            return self.getTypedRuleContext(OParser.Java_primary_expressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterJavaPrimaryExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitJavaPrimaryExpression(self)



    def java_expression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = OParser.Java_expressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 354
        self.enterRecursionRule(localctx, 354, self.RULE_java_expression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            localctx = OParser.JavaPrimaryExpressionContext(self, localctx)
            self._ctx = localctx
            _prevctx = localctx

            self.state = 2055
            localctx.exp = self.java_primary_expression()
            self._ctx.stop = self._input.LT(-1)
            self.state = 2061
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,180,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = OParser.JavaSelectorExpressionContext(self, OParser.Java_expressionContext(self, _parentctx, _parentState))
                    localctx.parent = _prevctx
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_java_expression)
                    self.state = 2057
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 2058
                    localctx.child = self.java_selector_expression() 
                self.state = 2063
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,180,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class Java_primary_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def java_this_expression(self):
            return self.getTypedRuleContext(OParser.Java_this_expressionContext,0)


        def java_new_expression(self):
            return self.getTypedRuleContext(OParser.Java_new_expressionContext,0)


        def java_parenthesis_expression(self):
            return self.getTypedRuleContext(OParser.Java_parenthesis_expressionContext,0)


        def java_identifier_expression(self):
            return self.getTypedRuleContext(OParser.Java_identifier_expressionContext,0)


        def java_literal_expression(self):
            return self.getTypedRuleContext(OParser.Java_literal_expressionContext,0)


        def getRuleIndex(self):
            return OParser.RULE_java_primary_expression

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterJava_primary_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitJava_primary_expression(self)




    def java_primary_expression(self):

        localctx = OParser.Java_primary_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 356, self.RULE_java_primary_expression)
        try:
            self.state = 2069
            la_ = self._interp.adaptivePredict(self._input,181,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2064
                self.java_this_expression()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2065
                self.java_new_expression()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2066
                self.java_parenthesis_expression()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2067
                self.java_identifier_expression(0)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 2068
                self.java_literal_expression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Java_this_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def this_expression(self):
            return self.getTypedRuleContext(OParser.This_expressionContext,0)


        def getRuleIndex(self):
            return OParser.RULE_java_this_expression

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterJava_this_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitJava_this_expression(self)




    def java_this_expression(self):

        localctx = OParser.Java_this_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 358, self.RULE_java_this_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2071
            self.this_expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Java_new_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def new_token(self):
            return self.getTypedRuleContext(OParser.New_tokenContext,0)


        def java_method_expression(self):
            return self.getTypedRuleContext(OParser.Java_method_expressionContext,0)


        def getRuleIndex(self):
            return OParser.RULE_java_new_expression

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterJava_new_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitJava_new_expression(self)




    def java_new_expression(self):

        localctx = OParser.Java_new_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 360, self.RULE_java_new_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2073
            self.new_token()
            self.state = 2074
            self.java_method_expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Java_selector_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return OParser.RULE_java_selector_expression

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class JavaItemExpressionContext(Java_selector_expressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Java_selector_expressionContext)
            super().__init__(parser)
            self.exp = None # Java_item_expressionContext
            self.copyFrom(ctx)

        def java_item_expression(self):
            return self.getTypedRuleContext(OParser.Java_item_expressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterJavaItemExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitJavaItemExpression(self)


    class JavaMethodExpressionContext(Java_selector_expressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Java_selector_expressionContext)
            super().__init__(parser)
            self.exp = None # Java_method_expressionContext
            self.copyFrom(ctx)

        def DOT(self):
            return self.getToken(OParser.DOT, 0)
        def java_method_expression(self):
            return self.getTypedRuleContext(OParser.Java_method_expressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterJavaMethodExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitJavaMethodExpression(self)



    def java_selector_expression(self):

        localctx = OParser.Java_selector_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 362, self.RULE_java_selector_expression)
        try:
            self.state = 2079
            token = self._input.LA(1)
            if token in [OParser.DOT]:
                localctx = OParser.JavaMethodExpressionContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2076
                self.match(OParser.DOT)
                self.state = 2077
                localctx.exp = self.java_method_expression()

            elif token in [OParser.LBRAK]:
                localctx = OParser.JavaItemExpressionContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2078
                localctx.exp = self.java_item_expression()

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Java_method_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # Java_identifierContext
            self.args = None # Java_argumentsContext

        def LPAR(self):
            return self.getToken(OParser.LPAR, 0)

        def RPAR(self):
            return self.getToken(OParser.RPAR, 0)

        def java_identifier(self):
            return self.getTypedRuleContext(OParser.Java_identifierContext,0)


        def java_arguments(self):
            return self.getTypedRuleContext(OParser.Java_argumentsContext,0)


        def getRuleIndex(self):
            return OParser.RULE_java_method_expression

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterJava_method_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitJava_method_expression(self)




    def java_method_expression(self):

        localctx = OParser.Java_method_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 364, self.RULE_java_method_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2081
            localctx.name = self.java_identifier()
            self.state = 2082
            self.match(OParser.LPAR)
            self.state = 2084
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << OParser.LPAR) | (1 << OParser.BOOLEAN) | (1 << OParser.CHARACTER) | (1 << OParser.TEXT) | (1 << OParser.INTEGER) | (1 << OParser.DECIMAL) | (1 << OParser.DATE) | (1 << OParser.TIME) | (1 << OParser.DATETIME) | (1 << OParser.PERIOD))) != 0) or ((((_la - 125)) & ~0x3f) == 0 and ((1 << (_la - 125)) & ((1 << (OParser.READ - 125)) | (1 << (OParser.SELF - 125)) | (1 << (OParser.TEST - 125)) | (1 << (OParser.THIS - 125)) | (1 << (OParser.WRITE - 125)) | (1 << (OParser.BOOLEAN_LITERAL - 125)) | (1 << (OParser.CHAR_LITERAL - 125)) | (1 << (OParser.SYMBOL_IDENTIFIER - 125)) | (1 << (OParser.TYPE_IDENTIFIER - 125)) | (1 << (OParser.VARIABLE_IDENTIFIER - 125)) | (1 << (OParser.NATIVE_IDENTIFIER - 125)) | (1 << (OParser.DOLLAR_IDENTIFIER - 125)) | (1 << (OParser.TEXT_LITERAL - 125)) | (1 << (OParser.INTEGER_LITERAL - 125)) | (1 << (OParser.DECIMAL_LITERAL - 125)))) != 0):
                self.state = 2083
                localctx.args = self.java_arguments(0)


            self.state = 2086
            self.match(OParser.RPAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Java_argumentsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return OParser.RULE_java_arguments

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class JavaArgumentListItemContext(Java_argumentsContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Java_argumentsContext)
            super().__init__(parser)
            self.items = None # Java_argumentsContext
            self.item = None # Java_expressionContext
            self.copyFrom(ctx)

        def COMMA(self):
            return self.getToken(OParser.COMMA, 0)
        def java_arguments(self):
            return self.getTypedRuleContext(OParser.Java_argumentsContext,0)

        def java_expression(self):
            return self.getTypedRuleContext(OParser.Java_expressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterJavaArgumentListItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitJavaArgumentListItem(self)


    class JavaArgumentListContext(Java_argumentsContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Java_argumentsContext)
            super().__init__(parser)
            self.item = None # Java_expressionContext
            self.copyFrom(ctx)

        def java_expression(self):
            return self.getTypedRuleContext(OParser.Java_expressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterJavaArgumentList(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitJavaArgumentList(self)



    def java_arguments(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = OParser.Java_argumentsContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 366
        self.enterRecursionRule(localctx, 366, self.RULE_java_arguments, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            localctx = OParser.JavaArgumentListContext(self, localctx)
            self._ctx = localctx
            _prevctx = localctx

            self.state = 2089
            localctx.item = self.java_expression(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 2096
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,184,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = OParser.JavaArgumentListItemContext(self, OParser.Java_argumentsContext(self, _parentctx, _parentState))
                    localctx.items = _prevctx
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_java_arguments)
                    self.state = 2091
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 2092
                    self.match(OParser.COMMA)
                    self.state = 2093
                    localctx.item = self.java_expression(0) 
                self.state = 2098
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,184,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class Java_item_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.exp = None # Java_expressionContext

        def LBRAK(self):
            return self.getToken(OParser.LBRAK, 0)

        def RBRAK(self):
            return self.getToken(OParser.RBRAK, 0)

        def java_expression(self):
            return self.getTypedRuleContext(OParser.Java_expressionContext,0)


        def getRuleIndex(self):
            return OParser.RULE_java_item_expression

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterJava_item_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitJava_item_expression(self)




    def java_item_expression(self):

        localctx = OParser.Java_item_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 368, self.RULE_java_item_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2099
            self.match(OParser.LBRAK)
            self.state = 2100
            localctx.exp = self.java_expression(0)
            self.state = 2101
            self.match(OParser.RBRAK)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Java_parenthesis_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.exp = None # Java_expressionContext

        def LPAR(self):
            return self.getToken(OParser.LPAR, 0)

        def RPAR(self):
            return self.getToken(OParser.RPAR, 0)

        def java_expression(self):
            return self.getTypedRuleContext(OParser.Java_expressionContext,0)


        def getRuleIndex(self):
            return OParser.RULE_java_parenthesis_expression

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterJava_parenthesis_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitJava_parenthesis_expression(self)




    def java_parenthesis_expression(self):

        localctx = OParser.Java_parenthesis_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 370, self.RULE_java_parenthesis_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2103
            self.match(OParser.LPAR)
            self.state = 2104
            localctx.exp = self.java_expression(0)
            self.state = 2105
            self.match(OParser.RPAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Java_identifier_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return OParser.RULE_java_identifier_expression

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class JavaIdentifierContext(Java_identifier_expressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Java_identifier_expressionContext)
            super().__init__(parser)
            self.name = None # Java_identifierContext
            self.copyFrom(ctx)

        def java_identifier(self):
            return self.getTypedRuleContext(OParser.Java_identifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterJavaIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitJavaIdentifier(self)


    class JavaChildIdentifierContext(Java_identifier_expressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Java_identifier_expressionContext)
            super().__init__(parser)
            self.parent = None # Java_identifier_expressionContext
            self.name = None # Java_identifierContext
            self.copyFrom(ctx)

        def DOT(self):
            return self.getToken(OParser.DOT, 0)
        def java_identifier_expression(self):
            return self.getTypedRuleContext(OParser.Java_identifier_expressionContext,0)

        def java_identifier(self):
            return self.getTypedRuleContext(OParser.Java_identifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterJavaChildIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitJavaChildIdentifier(self)



    def java_identifier_expression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = OParser.Java_identifier_expressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 372
        self.enterRecursionRule(localctx, 372, self.RULE_java_identifier_expression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            localctx = OParser.JavaIdentifierContext(self, localctx)
            self._ctx = localctx
            _prevctx = localctx

            self.state = 2108
            localctx.name = self.java_identifier()
            self._ctx.stop = self._input.LT(-1)
            self.state = 2115
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,185,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = OParser.JavaChildIdentifierContext(self, OParser.Java_identifier_expressionContext(self, _parentctx, _parentState))
                    localctx.parent = _prevctx
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_java_identifier_expression)
                    self.state = 2110
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 2111
                    self.match(OParser.DOT)
                    self.state = 2112
                    localctx.name = self.java_identifier() 
                self.state = 2117
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,185,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class Java_class_identifier_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return OParser.RULE_java_class_identifier_expression

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class JavaClassIdentifierContext(Java_class_identifier_expressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Java_class_identifier_expressionContext)
            super().__init__(parser)
            self.klass = None # Java_identifier_expressionContext
            self.copyFrom(ctx)

        def java_identifier_expression(self):
            return self.getTypedRuleContext(OParser.Java_identifier_expressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterJavaClassIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitJavaClassIdentifier(self)


    class JavaChildClassIdentifierContext(Java_class_identifier_expressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Java_class_identifier_expressionContext)
            super().__init__(parser)
            self.parent = None # Java_class_identifier_expressionContext
            self.name = None # Token
            self.copyFrom(ctx)

        def java_class_identifier_expression(self):
            return self.getTypedRuleContext(OParser.Java_class_identifier_expressionContext,0)

        def DOLLAR_IDENTIFIER(self):
            return self.getToken(OParser.DOLLAR_IDENTIFIER, 0)

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterJavaChildClassIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitJavaChildClassIdentifier(self)



    def java_class_identifier_expression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = OParser.Java_class_identifier_expressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 374
        self.enterRecursionRule(localctx, 374, self.RULE_java_class_identifier_expression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            localctx = OParser.JavaClassIdentifierContext(self, localctx)
            self._ctx = localctx
            _prevctx = localctx

            self.state = 2119
            localctx.klass = self.java_identifier_expression(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 2125
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,186,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = OParser.JavaChildClassIdentifierContext(self, OParser.Java_class_identifier_expressionContext(self, _parentctx, _parentState))
                    localctx.parent = _prevctx
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_java_class_identifier_expression)
                    self.state = 2121
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 2122
                    localctx.name = self.match(OParser.DOLLAR_IDENTIFIER) 
                self.state = 2127
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,186,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class Java_literal_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return OParser.RULE_java_literal_expression

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class JavaBooleanLiteralContext(Java_literal_expressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Java_literal_expressionContext)
            super().__init__(parser)
            self.t = None # Token
            self.copyFrom(ctx)

        def BOOLEAN_LITERAL(self):
            return self.getToken(OParser.BOOLEAN_LITERAL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterJavaBooleanLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitJavaBooleanLiteral(self)


    class JavaCharacterLiteralContext(Java_literal_expressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Java_literal_expressionContext)
            super().__init__(parser)
            self.t = None # Token
            self.copyFrom(ctx)

        def CHAR_LITERAL(self):
            return self.getToken(OParser.CHAR_LITERAL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterJavaCharacterLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitJavaCharacterLiteral(self)


    class JavaIntegerLiteralContext(Java_literal_expressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Java_literal_expressionContext)
            super().__init__(parser)
            self.t = None # Token
            self.copyFrom(ctx)

        def INTEGER_LITERAL(self):
            return self.getToken(OParser.INTEGER_LITERAL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterJavaIntegerLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitJavaIntegerLiteral(self)


    class JavaTextLiteralContext(Java_literal_expressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Java_literal_expressionContext)
            super().__init__(parser)
            self.t = None # Token
            self.copyFrom(ctx)

        def TEXT_LITERAL(self):
            return self.getToken(OParser.TEXT_LITERAL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterJavaTextLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitJavaTextLiteral(self)


    class JavaDecimalLiteralContext(Java_literal_expressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Java_literal_expressionContext)
            super().__init__(parser)
            self.t = None # Token
            self.copyFrom(ctx)

        def DECIMAL_LITERAL(self):
            return self.getToken(OParser.DECIMAL_LITERAL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterJavaDecimalLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitJavaDecimalLiteral(self)



    def java_literal_expression(self):

        localctx = OParser.Java_literal_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 376, self.RULE_java_literal_expression)
        try:
            self.state = 2133
            token = self._input.LA(1)
            if token in [OParser.INTEGER_LITERAL]:
                localctx = OParser.JavaIntegerLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2128
                localctx.t = self.match(OParser.INTEGER_LITERAL)

            elif token in [OParser.DECIMAL_LITERAL]:
                localctx = OParser.JavaDecimalLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2129
                localctx.t = self.match(OParser.DECIMAL_LITERAL)

            elif token in [OParser.TEXT_LITERAL]:
                localctx = OParser.JavaTextLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 2130
                localctx.t = self.match(OParser.TEXT_LITERAL)

            elif token in [OParser.BOOLEAN_LITERAL]:
                localctx = OParser.JavaBooleanLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 2131
                localctx.t = self.match(OParser.BOOLEAN_LITERAL)

            elif token in [OParser.CHAR_LITERAL]:
                localctx = OParser.JavaCharacterLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 2132
                localctx.t = self.match(OParser.CHAR_LITERAL)

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Java_identifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VARIABLE_IDENTIFIER(self):
            return self.getToken(OParser.VARIABLE_IDENTIFIER, 0)

        def SYMBOL_IDENTIFIER(self):
            return self.getToken(OParser.SYMBOL_IDENTIFIER, 0)

        def NATIVE_IDENTIFIER(self):
            return self.getToken(OParser.NATIVE_IDENTIFIER, 0)

        def DOLLAR_IDENTIFIER(self):
            return self.getToken(OParser.DOLLAR_IDENTIFIER, 0)

        def TYPE_IDENTIFIER(self):
            return self.getToken(OParser.TYPE_IDENTIFIER, 0)

        def BOOLEAN(self):
            return self.getToken(OParser.BOOLEAN, 0)

        def CHARACTER(self):
            return self.getToken(OParser.CHARACTER, 0)

        def TEXT(self):
            return self.getToken(OParser.TEXT, 0)

        def INTEGER(self):
            return self.getToken(OParser.INTEGER, 0)

        def DECIMAL(self):
            return self.getToken(OParser.DECIMAL, 0)

        def DATE(self):
            return self.getToken(OParser.DATE, 0)

        def TIME(self):
            return self.getToken(OParser.TIME, 0)

        def DATETIME(self):
            return self.getToken(OParser.DATETIME, 0)

        def PERIOD(self):
            return self.getToken(OParser.PERIOD, 0)

        def READ(self):
            return self.getToken(OParser.READ, 0)

        def WRITE(self):
            return self.getToken(OParser.WRITE, 0)

        def TEST(self):
            return self.getToken(OParser.TEST, 0)

        def getRuleIndex(self):
            return OParser.RULE_java_identifier

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterJava_identifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitJava_identifier(self)




    def java_identifier(self):

        localctx = OParser.Java_identifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 378, self.RULE_java_identifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2135
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << OParser.BOOLEAN) | (1 << OParser.CHARACTER) | (1 << OParser.TEXT) | (1 << OParser.INTEGER) | (1 << OParser.DECIMAL) | (1 << OParser.DATE) | (1 << OParser.TIME) | (1 << OParser.DATETIME) | (1 << OParser.PERIOD))) != 0) or ((((_la - 125)) & ~0x3f) == 0 and ((1 << (_la - 125)) & ((1 << (OParser.READ - 125)) | (1 << (OParser.TEST - 125)) | (1 << (OParser.WRITE - 125)) | (1 << (OParser.SYMBOL_IDENTIFIER - 125)) | (1 << (OParser.TYPE_IDENTIFIER - 125)) | (1 << (OParser.VARIABLE_IDENTIFIER - 125)) | (1 << (OParser.NATIVE_IDENTIFIER - 125)) | (1 << (OParser.DOLLAR_IDENTIFIER - 125)))) != 0)):
                self._errHandler.recoverInline(self)
            self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Csharp_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return OParser.RULE_csharp_statement

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class CSharpReturnStatementContext(Csharp_statementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Csharp_statementContext)
            super().__init__(parser)
            self.exp = None # Csharp_expressionContext
            self.copyFrom(ctx)

        def RETURN(self):
            return self.getToken(OParser.RETURN, 0)
        def SEMI(self):
            return self.getToken(OParser.SEMI, 0)
        def csharp_expression(self):
            return self.getTypedRuleContext(OParser.Csharp_expressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterCSharpReturnStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitCSharpReturnStatement(self)


    class CSharpStatementContext(Csharp_statementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Csharp_statementContext)
            super().__init__(parser)
            self.exp = None # Csharp_expressionContext
            self.copyFrom(ctx)

        def SEMI(self):
            return self.getToken(OParser.SEMI, 0)
        def csharp_expression(self):
            return self.getTypedRuleContext(OParser.Csharp_expressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterCSharpStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitCSharpStatement(self)



    def csharp_statement(self):

        localctx = OParser.Csharp_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 380, self.RULE_csharp_statement)
        try:
            self.state = 2144
            token = self._input.LA(1)
            if token in [OParser.RETURN]:
                localctx = OParser.CSharpReturnStatementContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2137
                self.match(OParser.RETURN)
                self.state = 2138
                localctx.exp = self.csharp_expression(0)
                self.state = 2139
                self.match(OParser.SEMI)

            elif token in [OParser.LPAR, OParser.BOOLEAN, OParser.CHARACTER, OParser.TEXT, OParser.INTEGER, OParser.DECIMAL, OParser.DATE, OParser.TIME, OParser.DATETIME, OParser.PERIOD, OParser.READ, OParser.SELF, OParser.TEST, OParser.THIS, OParser.WRITE, OParser.BOOLEAN_LITERAL, OParser.CHAR_LITERAL, OParser.SYMBOL_IDENTIFIER, OParser.TYPE_IDENTIFIER, OParser.VARIABLE_IDENTIFIER, OParser.DOLLAR_IDENTIFIER, OParser.TEXT_LITERAL, OParser.INTEGER_LITERAL, OParser.DECIMAL_LITERAL]:
                localctx = OParser.CSharpStatementContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2141
                localctx.exp = self.csharp_expression(0)
                self.state = 2142
                self.match(OParser.SEMI)

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Csharp_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return OParser.RULE_csharp_expression

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class CSharpSelectorExpressionContext(Csharp_expressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Csharp_expressionContext)
            super().__init__(parser)
            self.parent = None # Csharp_expressionContext
            self.child = None # Csharp_selector_expressionContext
            self.copyFrom(ctx)

        def csharp_expression(self):
            return self.getTypedRuleContext(OParser.Csharp_expressionContext,0)

        def csharp_selector_expression(self):
            return self.getTypedRuleContext(OParser.Csharp_selector_expressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterCSharpSelectorExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitCSharpSelectorExpression(self)


    class CSharpPrimaryExpressionContext(Csharp_expressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Csharp_expressionContext)
            super().__init__(parser)
            self.exp = None # Csharp_primary_expressionContext
            self.copyFrom(ctx)

        def csharp_primary_expression(self):
            return self.getTypedRuleContext(OParser.Csharp_primary_expressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterCSharpPrimaryExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitCSharpPrimaryExpression(self)



    def csharp_expression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = OParser.Csharp_expressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 382
        self.enterRecursionRule(localctx, 382, self.RULE_csharp_expression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            localctx = OParser.CSharpPrimaryExpressionContext(self, localctx)
            self._ctx = localctx
            _prevctx = localctx

            self.state = 2147
            localctx.exp = self.csharp_primary_expression()
            self._ctx.stop = self._input.LT(-1)
            self.state = 2153
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,189,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = OParser.CSharpSelectorExpressionContext(self, OParser.Csharp_expressionContext(self, _parentctx, _parentState))
                    localctx.parent = _prevctx
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_csharp_expression)
                    self.state = 2149
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 2150
                    localctx.child = self.csharp_selector_expression() 
                self.state = 2155
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,189,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class Csharp_primary_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def csharp_this_expression(self):
            return self.getTypedRuleContext(OParser.Csharp_this_expressionContext,0)


        def csharp_new_expression(self):
            return self.getTypedRuleContext(OParser.Csharp_new_expressionContext,0)


        def csharp_parenthesis_expression(self):
            return self.getTypedRuleContext(OParser.Csharp_parenthesis_expressionContext,0)


        def csharp_identifier_expression(self):
            return self.getTypedRuleContext(OParser.Csharp_identifier_expressionContext,0)


        def csharp_literal_expression(self):
            return self.getTypedRuleContext(OParser.Csharp_literal_expressionContext,0)


        def getRuleIndex(self):
            return OParser.RULE_csharp_primary_expression

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterCsharp_primary_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitCsharp_primary_expression(self)




    def csharp_primary_expression(self):

        localctx = OParser.Csharp_primary_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 384, self.RULE_csharp_primary_expression)
        try:
            self.state = 2161
            la_ = self._interp.adaptivePredict(self._input,190,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2156
                self.csharp_this_expression()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2157
                self.csharp_new_expression()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2158
                self.csharp_parenthesis_expression()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2159
                self.csharp_identifier_expression(0)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 2160
                self.csharp_literal_expression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Csharp_this_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def this_expression(self):
            return self.getTypedRuleContext(OParser.This_expressionContext,0)


        def getRuleIndex(self):
            return OParser.RULE_csharp_this_expression

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterCsharp_this_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitCsharp_this_expression(self)




    def csharp_this_expression(self):

        localctx = OParser.Csharp_this_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 386, self.RULE_csharp_this_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2163
            self.this_expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Csharp_new_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def new_token(self):
            return self.getTypedRuleContext(OParser.New_tokenContext,0)


        def csharp_method_expression(self):
            return self.getTypedRuleContext(OParser.Csharp_method_expressionContext,0)


        def getRuleIndex(self):
            return OParser.RULE_csharp_new_expression

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterCsharp_new_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitCsharp_new_expression(self)




    def csharp_new_expression(self):

        localctx = OParser.Csharp_new_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 388, self.RULE_csharp_new_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2165
            self.new_token()
            self.state = 2166
            self.csharp_method_expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Csharp_selector_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return OParser.RULE_csharp_selector_expression

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class CSharpMethodExpressionContext(Csharp_selector_expressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Csharp_selector_expressionContext)
            super().__init__(parser)
            self.exp = None # Csharp_method_expressionContext
            self.copyFrom(ctx)

        def DOT(self):
            return self.getToken(OParser.DOT, 0)
        def csharp_method_expression(self):
            return self.getTypedRuleContext(OParser.Csharp_method_expressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterCSharpMethodExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitCSharpMethodExpression(self)


    class CSharpItemExpressionContext(Csharp_selector_expressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Csharp_selector_expressionContext)
            super().__init__(parser)
            self.exp = None # Csharp_item_expressionContext
            self.copyFrom(ctx)

        def csharp_item_expression(self):
            return self.getTypedRuleContext(OParser.Csharp_item_expressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterCSharpItemExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitCSharpItemExpression(self)



    def csharp_selector_expression(self):

        localctx = OParser.Csharp_selector_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 390, self.RULE_csharp_selector_expression)
        try:
            self.state = 2171
            token = self._input.LA(1)
            if token in [OParser.DOT]:
                localctx = OParser.CSharpMethodExpressionContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2168
                self.match(OParser.DOT)
                self.state = 2169
                localctx.exp = self.csharp_method_expression()

            elif token in [OParser.LBRAK]:
                localctx = OParser.CSharpItemExpressionContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2170
                localctx.exp = self.csharp_item_expression()

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Csharp_method_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # Csharp_identifierContext
            self.args = None # Csharp_argumentsContext

        def LPAR(self):
            return self.getToken(OParser.LPAR, 0)

        def RPAR(self):
            return self.getToken(OParser.RPAR, 0)

        def csharp_identifier(self):
            return self.getTypedRuleContext(OParser.Csharp_identifierContext,0)


        def csharp_arguments(self):
            return self.getTypedRuleContext(OParser.Csharp_argumentsContext,0)


        def getRuleIndex(self):
            return OParser.RULE_csharp_method_expression

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterCsharp_method_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitCsharp_method_expression(self)




    def csharp_method_expression(self):

        localctx = OParser.Csharp_method_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 392, self.RULE_csharp_method_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2173
            localctx.name = self.csharp_identifier()
            self.state = 2174
            self.match(OParser.LPAR)
            self.state = 2176
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << OParser.LPAR) | (1 << OParser.BOOLEAN) | (1 << OParser.CHARACTER) | (1 << OParser.TEXT) | (1 << OParser.INTEGER) | (1 << OParser.DECIMAL) | (1 << OParser.DATE) | (1 << OParser.TIME) | (1 << OParser.DATETIME) | (1 << OParser.PERIOD))) != 0) or ((((_la - 125)) & ~0x3f) == 0 and ((1 << (_la - 125)) & ((1 << (OParser.READ - 125)) | (1 << (OParser.SELF - 125)) | (1 << (OParser.TEST - 125)) | (1 << (OParser.THIS - 125)) | (1 << (OParser.WRITE - 125)) | (1 << (OParser.BOOLEAN_LITERAL - 125)) | (1 << (OParser.CHAR_LITERAL - 125)) | (1 << (OParser.SYMBOL_IDENTIFIER - 125)) | (1 << (OParser.TYPE_IDENTIFIER - 125)) | (1 << (OParser.VARIABLE_IDENTIFIER - 125)) | (1 << (OParser.DOLLAR_IDENTIFIER - 125)) | (1 << (OParser.TEXT_LITERAL - 125)) | (1 << (OParser.INTEGER_LITERAL - 125)) | (1 << (OParser.DECIMAL_LITERAL - 125)))) != 0):
                self.state = 2175
                localctx.args = self.csharp_arguments(0)


            self.state = 2178
            self.match(OParser.RPAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Csharp_argumentsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return OParser.RULE_csharp_arguments

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class CSharpArgumentListContext(Csharp_argumentsContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Csharp_argumentsContext)
            super().__init__(parser)
            self.item = None # Csharp_expressionContext
            self.copyFrom(ctx)

        def csharp_expression(self):
            return self.getTypedRuleContext(OParser.Csharp_expressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterCSharpArgumentList(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitCSharpArgumentList(self)


    class CSharpArgumentListItemContext(Csharp_argumentsContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Csharp_argumentsContext)
            super().__init__(parser)
            self.items = None # Csharp_argumentsContext
            self.item = None # Csharp_expressionContext
            self.copyFrom(ctx)

        def COMMA(self):
            return self.getToken(OParser.COMMA, 0)
        def csharp_arguments(self):
            return self.getTypedRuleContext(OParser.Csharp_argumentsContext,0)

        def csharp_expression(self):
            return self.getTypedRuleContext(OParser.Csharp_expressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterCSharpArgumentListItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitCSharpArgumentListItem(self)



    def csharp_arguments(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = OParser.Csharp_argumentsContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 394
        self.enterRecursionRule(localctx, 394, self.RULE_csharp_arguments, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            localctx = OParser.CSharpArgumentListContext(self, localctx)
            self._ctx = localctx
            _prevctx = localctx

            self.state = 2181
            localctx.item = self.csharp_expression(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 2188
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,193,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = OParser.CSharpArgumentListItemContext(self, OParser.Csharp_argumentsContext(self, _parentctx, _parentState))
                    localctx.items = _prevctx
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_csharp_arguments)
                    self.state = 2183
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 2184
                    self.match(OParser.COMMA)
                    self.state = 2185
                    localctx.item = self.csharp_expression(0) 
                self.state = 2190
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,193,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class Csharp_item_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.exp = None # Csharp_expressionContext

        def LBRAK(self):
            return self.getToken(OParser.LBRAK, 0)

        def RBRAK(self):
            return self.getToken(OParser.RBRAK, 0)

        def csharp_expression(self):
            return self.getTypedRuleContext(OParser.Csharp_expressionContext,0)


        def getRuleIndex(self):
            return OParser.RULE_csharp_item_expression

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterCsharp_item_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitCsharp_item_expression(self)




    def csharp_item_expression(self):

        localctx = OParser.Csharp_item_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 396, self.RULE_csharp_item_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2191
            self.match(OParser.LBRAK)
            self.state = 2192
            localctx.exp = self.csharp_expression(0)
            self.state = 2193
            self.match(OParser.RBRAK)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Csharp_parenthesis_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.exp = None # Csharp_expressionContext

        def LPAR(self):
            return self.getToken(OParser.LPAR, 0)

        def RPAR(self):
            return self.getToken(OParser.RPAR, 0)

        def csharp_expression(self):
            return self.getTypedRuleContext(OParser.Csharp_expressionContext,0)


        def getRuleIndex(self):
            return OParser.RULE_csharp_parenthesis_expression

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterCsharp_parenthesis_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitCsharp_parenthesis_expression(self)




    def csharp_parenthesis_expression(self):

        localctx = OParser.Csharp_parenthesis_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 398, self.RULE_csharp_parenthesis_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2195
            self.match(OParser.LPAR)
            self.state = 2196
            localctx.exp = self.csharp_expression(0)
            self.state = 2197
            self.match(OParser.RPAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Csharp_identifier_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return OParser.RULE_csharp_identifier_expression

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class CSharpIdentifierContext(Csharp_identifier_expressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Csharp_identifier_expressionContext)
            super().__init__(parser)
            self.name = None # Csharp_identifierContext
            self.copyFrom(ctx)

        def csharp_identifier(self):
            return self.getTypedRuleContext(OParser.Csharp_identifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterCSharpIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitCSharpIdentifier(self)


    class CSharpChildIdentifierContext(Csharp_identifier_expressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Csharp_identifier_expressionContext)
            super().__init__(parser)
            self.parent = None # Csharp_identifier_expressionContext
            self.name = None # Csharp_identifierContext
            self.copyFrom(ctx)

        def DOT(self):
            return self.getToken(OParser.DOT, 0)
        def csharp_identifier_expression(self):
            return self.getTypedRuleContext(OParser.Csharp_identifier_expressionContext,0)

        def csharp_identifier(self):
            return self.getTypedRuleContext(OParser.Csharp_identifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterCSharpChildIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitCSharpChildIdentifier(self)


    class CSharpPromptoIdentifierContext(Csharp_identifier_expressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Csharp_identifier_expressionContext)
            super().__init__(parser)
            self.copyFrom(ctx)

        def DOLLAR_IDENTIFIER(self):
            return self.getToken(OParser.DOLLAR_IDENTIFIER, 0)

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterCSharpPromptoIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitCSharpPromptoIdentifier(self)



    def csharp_identifier_expression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = OParser.Csharp_identifier_expressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 400
        self.enterRecursionRule(localctx, 400, self.RULE_csharp_identifier_expression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2202
            token = self._input.LA(1)
            if token in [OParser.DOLLAR_IDENTIFIER]:
                localctx = OParser.CSharpPromptoIdentifierContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx

                self.state = 2200
                self.match(OParser.DOLLAR_IDENTIFIER)

            elif token in [OParser.BOOLEAN, OParser.CHARACTER, OParser.TEXT, OParser.INTEGER, OParser.DECIMAL, OParser.DATE, OParser.TIME, OParser.DATETIME, OParser.PERIOD, OParser.READ, OParser.TEST, OParser.WRITE, OParser.SYMBOL_IDENTIFIER, OParser.TYPE_IDENTIFIER, OParser.VARIABLE_IDENTIFIER]:
                localctx = OParser.CSharpIdentifierContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2201
                localctx.name = self.csharp_identifier()

            else:
                raise NoViableAltException(self)

            self._ctx.stop = self._input.LT(-1)
            self.state = 2209
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,195,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = OParser.CSharpChildIdentifierContext(self, OParser.Csharp_identifier_expressionContext(self, _parentctx, _parentState))
                    localctx.parent = _prevctx
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_csharp_identifier_expression)
                    self.state = 2204
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 2205
                    self.match(OParser.DOT)
                    self.state = 2206
                    localctx.name = self.csharp_identifier() 
                self.state = 2211
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,195,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class Csharp_literal_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return OParser.RULE_csharp_literal_expression

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class CSharpBooleanLiteralContext(Csharp_literal_expressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Csharp_literal_expressionContext)
            super().__init__(parser)
            self.copyFrom(ctx)

        def BOOLEAN_LITERAL(self):
            return self.getToken(OParser.BOOLEAN_LITERAL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterCSharpBooleanLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitCSharpBooleanLiteral(self)


    class CSharpIntegerLiteralContext(Csharp_literal_expressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Csharp_literal_expressionContext)
            super().__init__(parser)
            self.copyFrom(ctx)

        def INTEGER_LITERAL(self):
            return self.getToken(OParser.INTEGER_LITERAL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterCSharpIntegerLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitCSharpIntegerLiteral(self)


    class CSharpDecimalLiteralContext(Csharp_literal_expressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Csharp_literal_expressionContext)
            super().__init__(parser)
            self.copyFrom(ctx)

        def DECIMAL_LITERAL(self):
            return self.getToken(OParser.DECIMAL_LITERAL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterCSharpDecimalLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitCSharpDecimalLiteral(self)


    class CSharpCharacterLiteralContext(Csharp_literal_expressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Csharp_literal_expressionContext)
            super().__init__(parser)
            self.copyFrom(ctx)

        def CHAR_LITERAL(self):
            return self.getToken(OParser.CHAR_LITERAL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterCSharpCharacterLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitCSharpCharacterLiteral(self)


    class CSharpTextLiteralContext(Csharp_literal_expressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OParser.Csharp_literal_expressionContext)
            super().__init__(parser)
            self.copyFrom(ctx)

        def TEXT_LITERAL(self):
            return self.getToken(OParser.TEXT_LITERAL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterCSharpTextLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitCSharpTextLiteral(self)



    def csharp_literal_expression(self):

        localctx = OParser.Csharp_literal_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 402, self.RULE_csharp_literal_expression)
        try:
            self.state = 2217
            token = self._input.LA(1)
            if token in [OParser.INTEGER_LITERAL]:
                localctx = OParser.CSharpIntegerLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2212
                self.match(OParser.INTEGER_LITERAL)

            elif token in [OParser.DECIMAL_LITERAL]:
                localctx = OParser.CSharpDecimalLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2213
                self.match(OParser.DECIMAL_LITERAL)

            elif token in [OParser.TEXT_LITERAL]:
                localctx = OParser.CSharpTextLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 2214
                self.match(OParser.TEXT_LITERAL)

            elif token in [OParser.BOOLEAN_LITERAL]:
                localctx = OParser.CSharpBooleanLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 2215
                self.match(OParser.BOOLEAN_LITERAL)

            elif token in [OParser.CHAR_LITERAL]:
                localctx = OParser.CSharpCharacterLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 2216
                self.match(OParser.CHAR_LITERAL)

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Csharp_identifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VARIABLE_IDENTIFIER(self):
            return self.getToken(OParser.VARIABLE_IDENTIFIER, 0)

        def SYMBOL_IDENTIFIER(self):
            return self.getToken(OParser.SYMBOL_IDENTIFIER, 0)

        def TYPE_IDENTIFIER(self):
            return self.getToken(OParser.TYPE_IDENTIFIER, 0)

        def BOOLEAN(self):
            return self.getToken(OParser.BOOLEAN, 0)

        def CHARACTER(self):
            return self.getToken(OParser.CHARACTER, 0)

        def TEXT(self):
            return self.getToken(OParser.TEXT, 0)

        def INTEGER(self):
            return self.getToken(OParser.INTEGER, 0)

        def DECIMAL(self):
            return self.getToken(OParser.DECIMAL, 0)

        def DATE(self):
            return self.getToken(OParser.DATE, 0)

        def TIME(self):
            return self.getToken(OParser.TIME, 0)

        def DATETIME(self):
            return self.getToken(OParser.DATETIME, 0)

        def PERIOD(self):
            return self.getToken(OParser.PERIOD, 0)

        def READ(self):
            return self.getToken(OParser.READ, 0)

        def WRITE(self):
            return self.getToken(OParser.WRITE, 0)

        def TEST(self):
            return self.getToken(OParser.TEST, 0)

        def getRuleIndex(self):
            return OParser.RULE_csharp_identifier

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.enterCsharp_identifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, OParserListener ):
                listener.exitCsharp_identifier(self)




    def csharp_identifier(self):

        localctx = OParser.Csharp_identifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 404, self.RULE_csharp_identifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2219
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << OParser.BOOLEAN) | (1 << OParser.CHARACTER) | (1 << OParser.TEXT) | (1 << OParser.INTEGER) | (1 << OParser.DECIMAL) | (1 << OParser.DATE) | (1 << OParser.TIME) | (1 << OParser.DATETIME) | (1 << OParser.PERIOD))) != 0) or ((((_la - 125)) & ~0x3f) == 0 and ((1 << (_la - 125)) & ((1 << (OParser.READ - 125)) | (1 << (OParser.TEST - 125)) | (1 << (OParser.WRITE - 125)) | (1 << (OParser.SYMBOL_IDENTIFIER - 125)) | (1 << (OParser.TYPE_IDENTIFIER - 125)) | (1 << (OParser.VARIABLE_IDENTIFIER - 125)))) != 0)):
                self._errHandler.recoverInline(self)
            self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[7] = self.derived_list_sempred
        self._predicates[17] = self.native_category_binding_list_sempred
        self._predicates[35] = self.else_if_statement_list_sempred
        self._predicates[42] = self.callable_parent_sempred
        self._predicates[44] = self.expression_sempred
        self._predicates[45] = self.an_expression_sempred
        self._predicates[47] = self.instance_expression_sempred
        self._predicates[58] = self.argument_assignment_list_sempred
        self._predicates[77] = self.typedef_sempred
        self._predicates[97] = self.any_type_sempred
        self._predicates[134] = self.assignable_instance_sempred
        self._predicates[135] = self.is_expression_sempred
        self._predicates[139] = self.new_token_sempred
        self._predicates[140] = self.key_token_sempred
        self._predicates[141] = self.module_token_sempred
        self._predicates[142] = self.value_token_sempred
        self._predicates[143] = self.symbols_token_sempred
        self._predicates[152] = self.javascript_expression_sempred
        self._predicates[158] = self.javascript_arguments_sempred
        self._predicates[165] = self.python_expression_sempred
        self._predicates[170] = self.python_ordinal_argument_list_sempred
        self._predicates[171] = self.python_named_argument_list_sempred
        self._predicates[173] = self.python_identifier_expression_sempred
        self._predicates[177] = self.java_expression_sempred
        self._predicates[183] = self.java_arguments_sempred
        self._predicates[186] = self.java_identifier_expression_sempred
        self._predicates[187] = self.java_class_identifier_expression_sempred
        self._predicates[191] = self.csharp_expression_sempred
        self._predicates[197] = self.csharp_arguments_sempred
        self._predicates[200] = self.csharp_identifier_expression_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def derived_list_sempred(self, localctx:Derived_listContext, predIndex:int):
            if predIndex == 0:
                return self.precpred(self._ctx, 1)
         

    def native_category_binding_list_sempred(self, localctx:Native_category_binding_listContext, predIndex:int):
            if predIndex == 1:
                return self.precpred(self._ctx, 1)
         

    def else_if_statement_list_sempred(self, localctx:Else_if_statement_listContext, predIndex:int):
            if predIndex == 2:
                return self.precpred(self._ctx, 1)
         

    def callable_parent_sempred(self, localctx:Callable_parentContext, predIndex:int):
            if predIndex == 3:
                return self.precpred(self._ctx, 1)
         

    def expression_sempred(self, localctx:ExpressionContext, predIndex:int):
            if predIndex == 4:
                return self.precpred(self._ctx, 32)
         

            if predIndex == 5:
                return self.precpred(self._ctx, 31)
         

            if predIndex == 6:
                return self.precpred(self._ctx, 30)
         

            if predIndex == 7:
                return self.precpred(self._ctx, 29)
         

            if predIndex == 8:
                return self.precpred(self._ctx, 28)
         

            if predIndex == 9:
                return self.precpred(self._ctx, 27)
         

            if predIndex == 10:
                return self.precpred(self._ctx, 26)
         

            if predIndex == 11:
                return self.precpred(self._ctx, 25)
         

            if predIndex == 12:
                return self.precpred(self._ctx, 24)
         

            if predIndex == 13:
                return self.precpred(self._ctx, 21)
         

            if predIndex == 14:
                return self.precpred(self._ctx, 20)
         

            if predIndex == 15:
                return self.precpred(self._ctx, 19)
         

            if predIndex == 16:
                return self.precpred(self._ctx, 18)
         

            if predIndex == 17:
                return self.precpred(self._ctx, 17)
         

            if predIndex == 18:
                return self.precpred(self._ctx, 16)
         

            if predIndex == 19:
                return self.precpred(self._ctx, 15)
         

            if predIndex == 20:
                return self.precpred(self._ctx, 14)
         

            if predIndex == 21:
                return self.precpred(self._ctx, 12)
         

            if predIndex == 22:
                return self.precpred(self._ctx, 11)
         

            if predIndex == 23:
                return self.precpred(self._ctx, 10)
         

            if predIndex == 24:
                return self.precpred(self._ctx, 9)
         

            if predIndex == 25:
                return self.precpred(self._ctx, 8)
         

            if predIndex == 26:
                return self.precpred(self._ctx, 7)
         

            if predIndex == 27:
                return self.precpred(self._ctx, 6)
         

            if predIndex == 28:
                return self.precpred(self._ctx, 5)
         

            if predIndex == 29:
                return self.precpred(self._ctx, 23)
         

            if predIndex == 30:
                return self.precpred(self._ctx, 22)
         

            if predIndex == 31:
                return self.precpred(self._ctx, 1)
         

    def an_expression_sempred(self, localctx:An_expressionContext, predIndex:int):
            if predIndex == 32:
                return self.willBeAOrAn()
         

    def instance_expression_sempred(self, localctx:Instance_expressionContext, predIndex:int):
            if predIndex == 33:
                return self.precpred(self._ctx, 1)
         

    def argument_assignment_list_sempred(self, localctx:Argument_assignment_listContext, predIndex:int):
            if predIndex == 34:
                return self.willNotBe(self.equalToken())
         

            if predIndex == 35:
                return self.precpred(self._ctx, 1)
         

    def typedef_sempred(self, localctx:TypedefContext, predIndex:int):
            if predIndex == 36:
                return self.precpred(self._ctx, 5)
         

            if predIndex == 37:
                return self.precpred(self._ctx, 4)
         

            if predIndex == 38:
                return self.precpred(self._ctx, 3)
         

    def any_type_sempred(self, localctx:Any_typeContext, predIndex:int):
            if predIndex == 39:
                return self.precpred(self._ctx, 2)
         

            if predIndex == 40:
                return self.precpred(self._ctx, 1)
         

    def assignable_instance_sempred(self, localctx:Assignable_instanceContext, predIndex:int):
            if predIndex == 41:
                return self.precpred(self._ctx, 1)
         

    def is_expression_sempred(self, localctx:Is_expressionContext, predIndex:int):
            if predIndex == 42:
                return self.willBeAOrAn()
         

    def new_token_sempred(self, localctx:New_tokenContext, predIndex:int):
            if predIndex == 43:
                return self.isText(localctx.i1,"new")
         

    def key_token_sempred(self, localctx:Key_tokenContext, predIndex:int):
            if predIndex == 44:
                return self.isText(localctx.i1,"key")
         

    def module_token_sempred(self, localctx:Module_tokenContext, predIndex:int):
            if predIndex == 45:
                return self.isText(localctx.i1,"module")
         

    def value_token_sempred(self, localctx:Value_tokenContext, predIndex:int):
            if predIndex == 46:
                return self.isText(localctx.i1,"value")
         

    def symbols_token_sempred(self, localctx:Symbols_tokenContext, predIndex:int):
            if predIndex == 47:
                return self.isText(localctx.i1,"symbols")
         

    def javascript_expression_sempred(self, localctx:Javascript_expressionContext, predIndex:int):
            if predIndex == 48:
                return self.precpred(self._ctx, 1)
         

    def javascript_arguments_sempred(self, localctx:Javascript_argumentsContext, predIndex:int):
            if predIndex == 49:
                return self.precpred(self._ctx, 1)
         

    def python_expression_sempred(self, localctx:Python_expressionContext, predIndex:int):
            if predIndex == 50:
                return self.precpred(self._ctx, 1)
         

    def python_ordinal_argument_list_sempred(self, localctx:Python_ordinal_argument_listContext, predIndex:int):
            if predIndex == 51:
                return self.precpred(self._ctx, 1)
         

    def python_named_argument_list_sempred(self, localctx:Python_named_argument_listContext, predIndex:int):
            if predIndex == 52:
                return self.precpred(self._ctx, 1)
         

    def python_identifier_expression_sempred(self, localctx:Python_identifier_expressionContext, predIndex:int):
            if predIndex == 53:
                return self.precpred(self._ctx, 1)
         

    def java_expression_sempred(self, localctx:Java_expressionContext, predIndex:int):
            if predIndex == 54:
                return self.precpred(self._ctx, 1)
         

    def java_arguments_sempred(self, localctx:Java_argumentsContext, predIndex:int):
            if predIndex == 55:
                return self.precpred(self._ctx, 1)
         

    def java_identifier_expression_sempred(self, localctx:Java_identifier_expressionContext, predIndex:int):
            if predIndex == 56:
                return self.precpred(self._ctx, 1)
         

    def java_class_identifier_expression_sempred(self, localctx:Java_class_identifier_expressionContext, predIndex:int):
            if predIndex == 57:
                return self.precpred(self._ctx, 1)
         

    def csharp_expression_sempred(self, localctx:Csharp_expressionContext, predIndex:int):
            if predIndex == 58:
                return self.precpred(self._ctx, 1)
         

    def csharp_arguments_sempred(self, localctx:Csharp_argumentsContext, predIndex:int):
            if predIndex == 59:
                return self.precpred(self._ctx, 1)
         

    def csharp_identifier_expression_sempred(self, localctx:Csharp_identifier_expressionContext, predIndex:int):
            if predIndex == 60:
                return self.precpred(self._ctx, 1)
         



