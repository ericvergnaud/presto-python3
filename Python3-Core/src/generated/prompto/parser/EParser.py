# Generated from EParser.g4 by ANTLR 4.7.1
# encoding: utf-8
from antlr4 import *
from io import StringIO
from typing.io import TextIO
import sys

from .AbstractParser import AbstractParser

def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\3\u00b9")
        buf.write("\u0b30\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7")
        buf.write("\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r\4\16")
        buf.write("\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23\t\23")
        buf.write("\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31")
        buf.write("\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36")
        buf.write("\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t")
        buf.write("&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t,\4-\t-\4.\t.\4")
        buf.write("/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64\t\64")
        buf.write("\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\49\t9\4:\t:\4;\t")
        buf.write(";\4<\t<\4=\t=\4>\t>\4?\t?\4@\t@\4A\tA\4B\tB\4C\tC\4D\t")
        buf.write("D\4E\tE\4F\tF\4G\tG\4H\tH\4I\tI\4J\tJ\4K\tK\4L\tL\4M\t")
        buf.write("M\4N\tN\4O\tO\4P\tP\4Q\tQ\4R\tR\4S\tS\4T\tT\4U\tU\4V\t")
        buf.write("V\4W\tW\4X\tX\4Y\tY\4Z\tZ\4[\t[\4\\\t\\\4]\t]\4^\t^\4")
        buf.write("_\t_\4`\t`\4a\ta\4b\tb\4c\tc\4d\td\4e\te\4f\tf\4g\tg\4")
        buf.write("h\th\4i\ti\4j\tj\4k\tk\4l\tl\4m\tm\4n\tn\4o\to\4p\tp\4")
        buf.write("q\tq\4r\tr\4s\ts\4t\tt\4u\tu\4v\tv\4w\tw\4x\tx\4y\ty\4")
        buf.write("z\tz\4{\t{\4|\t|\4}\t}\4~\t~\4\177\t\177\4\u0080\t\u0080")
        buf.write("\4\u0081\t\u0081\4\u0082\t\u0082\4\u0083\t\u0083\4\u0084")
        buf.write("\t\u0084\4\u0085\t\u0085\4\u0086\t\u0086\4\u0087\t\u0087")
        buf.write("\4\u0088\t\u0088\4\u0089\t\u0089\4\u008a\t\u008a\4\u008b")
        buf.write("\t\u008b\4\u008c\t\u008c\4\u008d\t\u008d\4\u008e\t\u008e")
        buf.write("\4\u008f\t\u008f\4\u0090\t\u0090\4\u0091\t\u0091\4\u0092")
        buf.write("\t\u0092\4\u0093\t\u0093\4\u0094\t\u0094\4\u0095\t\u0095")
        buf.write("\4\u0096\t\u0096\4\u0097\t\u0097\4\u0098\t\u0098\4\u0099")
        buf.write("\t\u0099\4\u009a\t\u009a\4\u009b\t\u009b\4\u009c\t\u009c")
        buf.write("\4\u009d\t\u009d\4\u009e\t\u009e\4\u009f\t\u009f\4\u00a0")
        buf.write("\t\u00a0\4\u00a1\t\u00a1\4\u00a2\t\u00a2\4\u00a3\t\u00a3")
        buf.write("\4\u00a4\t\u00a4\4\u00a5\t\u00a5\4\u00a6\t\u00a6\4\u00a7")
        buf.write("\t\u00a7\4\u00a8\t\u00a8\4\u00a9\t\u00a9\4\u00aa\t\u00aa")
        buf.write("\4\u00ab\t\u00ab\4\u00ac\t\u00ac\4\u00ad\t\u00ad\4\u00ae")
        buf.write("\t\u00ae\4\u00af\t\u00af\4\u00b0\t\u00b0\4\u00b1\t\u00b1")
        buf.write("\4\u00b2\t\u00b2\4\u00b3\t\u00b3\4\u00b4\t\u00b4\4\u00b5")
        buf.write("\t\u00b5\4\u00b6\t\u00b6\4\u00b7\t\u00b7\4\u00b8\t\u00b8")
        buf.write("\4\u00b9\t\u00b9\4\u00ba\t\u00ba\4\u00bb\t\u00bb\4\u00bc")
        buf.write("\t\u00bc\4\u00bd\t\u00bd\4\u00be\t\u00be\4\u00bf\t\u00bf")
        buf.write("\4\u00c0\t\u00c0\4\u00c1\t\u00c1\4\u00c2\t\u00c2\4\u00c3")
        buf.write("\t\u00c3\4\u00c4\t\u00c4\4\u00c5\t\u00c5\4\u00c6\t\u00c6")
        buf.write("\4\u00c7\t\u00c7\4\u00c8\t\u00c8\4\u00c9\t\u00c9\4\u00ca")
        buf.write("\t\u00ca\4\u00cb\t\u00cb\4\u00cc\t\u00cc\4\u00cd\t\u00cd")
        buf.write("\4\u00ce\t\u00ce\4\u00cf\t\u00cf\4\u00d0\t\u00d0\4\u00d1")
        buf.write("\t\u00d1\4\u00d2\t\u00d2\4\u00d3\t\u00d3\4\u00d4\t\u00d4")
        buf.write("\4\u00d5\t\u00d5\4\u00d6\t\u00d6\4\u00d7\t\u00d7\4\u00d8")
        buf.write("\t\u00d8\4\u00d9\t\u00d9\4\u00da\t\u00da\4\u00db\t\u00db")
        buf.write("\4\u00dc\t\u00dc\4\u00dd\t\u00dd\4\u00de\t\u00de\4\u00df")
        buf.write("\t\u00df\4\u00e0\t\u00e0\4\u00e1\t\u00e1\4\u00e2\t\u00e2")
        buf.write("\4\u00e3\t\u00e3\4\u00e4\t\u00e4\4\u00e5\t\u00e5\4\u00e6")
        buf.write("\t\u00e6\4\u00e7\t\u00e7\4\u00e8\t\u00e8\4\u00e9\t\u00e9")
        buf.write("\4\u00ea\t\u00ea\4\u00eb\t\u00eb\4\u00ec\t\u00ec\4\u00ed")
        buf.write("\t\u00ed\4\u00ee\t\u00ee\4\u00ef\t\u00ef\4\u00f0\t\u00f0")
        buf.write("\4\u00f1\t\u00f1\4\u00f2\t\u00f2\4\u00f3\t\u00f3\4\u00f4")
        buf.write("\t\u00f4\4\u00f5\t\u00f5\4\u00f6\t\u00f6\4\u00f7\t\u00f7")
        buf.write("\4\u00f8\t\u00f8\4\u00f9\t\u00f9\4\u00fa\t\u00fa\4\u00fb")
        buf.write("\t\u00fb\4\u00fc\t\u00fc\4\u00fd\t\u00fd\4\u00fe\t\u00fe")
        buf.write("\3\2\3\2\3\2\3\2\3\2\3\2\5\2\u0203\n\2\3\2\3\2\3\2\3\2")
        buf.write("\3\2\5\2\u020a\n\2\3\2\3\2\3\2\3\2\3\2\3\2\3\3\3\3\3\3")
        buf.write("\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\4\3\4\3\4\3\4\3")
        buf.write("\4\3\4\3\5\3\5\3\5\3\5\5\5\u0228\n\5\3\6\3\6\3\6\3\6\5")
        buf.write("\6\u022e\n\6\3\6\3\6\3\6\5\6\u0233\n\6\3\6\3\6\3\6\3\6")
        buf.write("\5\6\u0239\n\6\5\6\u023b\n\6\3\6\5\6\u023e\n\6\3\7\3\7")
        buf.write("\3\7\3\7\3\7\5\7\u0245\n\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7")
        buf.write("\5\7\u024e\n\7\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b")
        buf.write("\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\t\3\t\3\t\3\t\5")
        buf.write("\t\u0267\n\t\3\t\3\t\5\t\u026b\n\t\3\t\3\t\3\t\3\t\3\t")
        buf.write("\3\t\3\t\3\t\3\t\5\t\u0276\n\t\3\t\3\t\3\t\3\t\3\t\3\t")
        buf.write("\3\t\5\t\u027f\n\t\3\n\3\n\3\n\3\n\3\n\3\n\3\n\3\n\3\n")
        buf.write("\3\n\3\n\3\n\3\n\5\n\u028e\n\n\3\n\3\n\3\n\3\n\3\n\3\n")
        buf.write("\3\n\5\n\u0297\n\n\3\13\3\13\3\13\3\13\3\13\5\13\u029e")
        buf.write("\n\13\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\5\f\u02a8\n\f\3")
        buf.write("\f\3\f\3\f\3\f\3\f\3\f\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r")
        buf.write("\3\r\3\r\3\16\3\16\3\16\3\16\5\16\u02be\n\16\3\16\3\16")
        buf.write("\3\16\3\16\3\16\3\16\3\16\3\17\3\17\3\17\3\17\3\17\3\17")
        buf.write("\3\17\3\17\3\17\3\17\3\20\3\20\3\20\3\20\5\20\u02d5\n")
        buf.write("\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\21\3\21\3\21")
        buf.write("\3\21\5\21\u02e2\n\21\3\21\3\21\3\21\3\21\3\21\3\21\3")
        buf.write("\21\3\21\3\21\5\21\u02ed\n\21\3\21\3\21\3\21\3\21\3\21")
        buf.write("\3\21\3\21\3\21\3\21\3\21\3\21\3\21\5\21\u02fb\n\21\3")
        buf.write("\22\3\22\3\22\3\22\5\22\u0301\n\22\3\22\3\22\3\22\3\22")
        buf.write("\3\22\3\22\3\22\3\22\3\22\5\22\u030c\n\22\3\22\3\22\3")
        buf.write("\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22\5\22")
        buf.write("\u031a\n\22\3\23\3\23\3\23\3\23\3\23\3\23\3\23\3\23\3")
        buf.write("\23\3\24\3\24\3\24\3\24\3\24\3\24\3\24\7\24\u032c\n\24")
        buf.write("\f\24\16\24\u032f\13\24\3\25\3\25\3\25\3\25\3\25\3\25")
        buf.write("\3\25\3\25\5\25\u0339\n\25\5\25\u033b\n\25\3\26\3\26\3")
        buf.write("\26\3\26\3\26\3\26\3\26\5\26\u0344\n\26\3\26\3\26\5\26")
        buf.write("\u0348\n\26\3\27\3\27\3\27\3\27\3\27\3\27\5\27\u0350\n")
        buf.write("\27\3\27\3\27\5\27\u0354\n\27\3\27\3\27\3\27\3\27\3\27")
        buf.write("\5\27\u035b\n\27\3\27\3\27\3\30\3\30\3\30\3\30\5\30\u0363")
        buf.write("\n\30\3\30\3\30\3\30\5\30\u0368\n\30\3\30\3\30\5\30\u036c")
        buf.write("\n\30\3\30\3\30\3\30\3\30\3\30\3\30\3\31\3\31\3\31\3\31")
        buf.write("\3\31\3\31\3\31\3\31\3\31\3\31\3\31\3\31\3\31\3\31\3\31")
        buf.write("\3\31\3\31\3\31\3\31\5\31\u0387\n\31\3\32\3\32\3\33\3")
        buf.write("\33\3\33\5\33\u038e\n\33\3\34\3\34\3\34\5\34\u0393\n\34")
        buf.write("\3\34\3\34\5\34\u0397\n\34\3\35\3\35\3\35\3\35\3\35\3")
        buf.write("\35\3\35\3\35\3\35\3\35\3\35\3\35\3\35\3\35\3\35\3\35")
        buf.write("\3\35\3\35\3\35\3\35\5\35\u03ad\n\35\3\36\3\36\3\37\3")
        buf.write("\37\3\37\3\37\3\37\5\37\u03b6\n\37\3\37\3\37\5\37\u03ba")
        buf.write("\n\37\3\37\3\37\3\37\3\37\3\37\3\37\5\37\u03c2\n\37\3")
        buf.write(" \3 \5 \u03c6\n \3 \3 \3 \5 \u03cb\n \3 \3 \3 \3 \3 \5")
        buf.write(" \u03d2\n \3 \5 \u03d5\n \3!\3!\3!\3!\3!\3!\3!\3!\3!\3")
        buf.write("\"\3\"\3\"\3\"\3\"\3\"\3\"\3\"\3\"\3#\3#\3#\3#\3#\3#\3")
        buf.write("#\3#\3#\3#\3#\3#\3#\5#\u03f6\n#\3#\3#\3$\3$\3$\3$\3$\3")
        buf.write("$\3$\3$\3$\3$\3$\3$\3$\3$\3$\5$\u0409\n$\3%\3%\3%\3%\3")
        buf.write("%\5%\u0410\n%\3%\3%\3%\3%\3%\3%\3%\3&\3&\3&\3&\3&\3&\3")
        buf.write("&\3&\3&\3\'\3\'\3\'\3\'\3\'\3\'\3\'\3(\3(\3(\3(\3(\3(")
        buf.write("\3(\3(\3(\5(\u0432\n(\3(\3(\3(\3(\3(\3(\3(\5(\u043b\n")
        buf.write("(\3)\3)\3)\3)\3)\3)\3)\3)\3)\3)\3)\3)\3)\3)\3)\3)\3)\3")
        buf.write(")\3)\7)\u0450\n)\f)\16)\u0453\13)\3*\3*\3*\3+\3+\3+\3")
        buf.write("+\3+\3+\3+\3+\3+\3+\5+\u0462\n+\3+\3+\3+\5+\u0467\n+\3")
        buf.write("+\3+\3+\3+\3+\3+\5+\u046f\n+\3+\3+\3+\3+\3+\3+\3+\5+\u0478")
        buf.write("\n+\3+\3+\3,\3,\3,\3,\3,\3,\3,\3,\3,\3,\3,\3,\3,\3,\3")
        buf.write(",\3,\3,\3,\3,\5,\u048f\n,\3-\3-\3.\3.\5.\u0495\n.\3/\3")
        buf.write("/\3/\3/\3/\3/\3/\3/\5/\u049f\n/\3/\3/\3/\3/\3/\3/\3/\3")
        buf.write("/\3/\3/\3/\3/\3/\3/\3/\3/\3/\3/\3/\3/\3/\3/\3/\3/\5/\u04b9")
        buf.write("\n/\3/\3/\3/\3/\3/\3/\3/\3/\3/\3/\3/\3/\3/\3/\3/\3/\3")
        buf.write("/\3/\3/\3/\3/\3/\3/\3/\3/\3/\3/\3/\3/\3/\3/\3/\3/\3/\3")
        buf.write("/\3/\3/\3/\3/\3/\3/\3/\3/\3/\3/\3/\3/\3/\3/\3/\3/\3/\3")
        buf.write("/\3/\3/\3/\3/\3/\3/\3/\3/\3/\3/\3/\3/\3/\3/\3/\3/\3/\3")
        buf.write("/\3/\3/\3/\3/\3/\3/\3/\3/\3/\3/\3/\3/\3/\3/\3/\3/\3/\3")
        buf.write("/\3/\3/\3/\3/\3/\3/\3/\3/\3/\3/\3/\3/\3/\3/\3/\3/\3/\3")
        buf.write("/\3/\3/\3/\7/\u0529\n/\f/\16/\u052c\13/\3\60\3\60\3\60")
        buf.write("\3\60\3\60\7\60\u0533\n\60\f\60\16\60\u0536\13\60\3\61")
        buf.write("\3\61\3\61\3\61\3\62\3\62\3\62\3\62\3\63\3\63\3\64\3\64")
        buf.write("\3\64\3\64\5\64\u0546\n\64\3\65\3\65\3\65\3\65\3\65\7")
        buf.write("\65\u054d\n\65\f\65\16\65\u0550\13\65\3\66\3\66\3\66\3")
        buf.write("\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66\5\66")
        buf.write("\u055f\n\66\3\67\3\67\3\67\3\67\3\67\3\67\7\67\u0567\n")
        buf.write("\67\f\67\16\67\u056a\13\67\38\38\38\58\u056f\n8\39\39")
        buf.write("\39\39\3:\3:\3:\3:\5:\u0579\n:\3:\3:\3:\5:\u057e\n:\5")
        buf.write(":\u0580\n:\3:\3:\3:\3:\5:\u0586\n:\5:\u0588\n:\5:\u058a")
        buf.write("\n:\3;\3;\3;\3;\3;\3<\3<\3<\3<\3=\3=\3=\5=\u0598\n=\3")
        buf.write("=\3=\3=\3>\3>\3>\5>\u05a0\n>\3>\3>\3>\3>\3>\5>\u05a7\n")
        buf.write(">\3>\3>\5>\u05ab\n>\3>\3>\3>\3>\3>\3>\3>\3>\3>\5>\u05b6")
        buf.write("\n>\3>\3>\5>\u05ba\n>\3>\3>\3>\5>\u05bf\n>\5>\u05c1\n")
        buf.write(">\3?\3?\3?\5?\u05c6\n?\3?\3?\3?\3?\3?\3?\3?\3?\3?\3?\3")
        buf.write("?\3?\3?\5?\u05d5\n?\3?\3?\5?\u05d9\n?\3?\3?\3?\3?\3?\3")
        buf.write("?\3?\3?\3?\5?\u05e4\n?\3?\3?\5?\u05e8\n?\3?\3?\3?\5?\u05ed")
        buf.write("\n?\3?\3?\3?\3?\3?\3?\3?\3?\5?\u05f7\n?\3@\3@\5@\u05fb")
        buf.write("\n@\3@\3@\3@\3@\3@\3@\5@\u0603\n@\3A\3A\3A\3A\3A\5A\u060a")
        buf.write("\nA\5A\u060c\nA\3A\3A\3A\5A\u0611\nA\5A\u0613\nA\3B\3")
        buf.write("B\3B\3B\3B\3B\3B\7B\u061c\nB\fB\16B\u061f\13B\3C\3C\3")
        buf.write("C\5C\u0624\nC\3C\3C\3D\3D\3D\3D\3E\3E\3E\3E\3E\3E\3E\3")
        buf.write("E\5E\u0634\nE\3F\3F\3F\3F\3G\7G\u063b\nG\fG\16G\u063e")
        buf.write("\13G\3H\6H\u0641\nH\rH\16H\u0642\3I\7I\u0646\nI\fI\16")
        buf.write("I\u0649\13I\3J\6J\u064c\nJ\rJ\16J\u064d\3J\3J\3K\7K\u0653")
        buf.write("\nK\fK\16K\u0656\13K\3K\3K\3L\3L\3L\3L\3M\3M\3N\3N\3N")
        buf.write("\5N\u0663\nN\3O\5O\u0666\nO\3O\3O\3O\3P\3P\3P\3P\7P\u066f")
        buf.write("\nP\fP\16P\u0672\13P\3Q\3Q\3Q\7Q\u0677\nQ\fQ\16Q\u067a")
        buf.write("\13Q\3Q\3Q\3Q\7Q\u067f\nQ\fQ\16Q\u0682\13Q\3Q\3Q\3Q\3")
        buf.write("Q\3Q\3Q\5Q\u068a\nQ\3R\3R\3R\3R\3R\3R\7R\u0692\nR\fR\16")
        buf.write("R\u0695\13R\5R\u0697\nR\3R\3R\5R\u069b\nR\3S\3S\3T\3T")
        buf.write("\3T\3T\3U\3U\3V\3V\5V\u06a7\nV\3W\3W\3X\3X\5X\u06ad\n")
        buf.write("X\3Y\3Y\3Y\3Y\7Y\u06b3\nY\fY\16Y\u06b6\13Y\3Z\3Z\3Z\3")
        buf.write("Z\7Z\u06bc\nZ\fZ\16Z\u06bf\13Z\3[\3[\3[\7[\u06c4\n[\f")
        buf.write("[\16[\u06c7\13[\3\\\3\\\3\\\3\\\3\\\3\\\3\\\3\\\3\\\3")
        buf.write("\\\5\\\u06d3\n\\\3]\5]\u06d6\n]\3]\3]\5]\u06da\n]\3]\3")
        buf.write("]\3^\5^\u06df\n^\3^\3^\5^\u06e3\n^\3^\3^\3_\3_\3_\7_\u06ea")
        buf.write("\n_\f_\16_\u06ed\13_\3`\3`\3`\3`\3`\3`\3a\3a\3a\3a\3a")
        buf.write("\3a\3a\3a\3a\3a\3a\3a\5a\u0701\na\3a\3a\3a\3a\3a\3a\3")
        buf.write("a\7a\u070a\na\fa\16a\u070d\13a\3b\3b\5b\u0711\nb\3c\3")
        buf.write("c\3c\3c\3c\3c\3c\3c\3c\3c\3c\3c\3c\3c\3c\3c\5c\u0723\n")
        buf.write("c\3d\3d\3e\5e\u0728\ne\3e\3e\3f\3f\3g\3g\3g\5g\u0731\n")
        buf.write("g\3h\3h\5h\u0735\nh\3i\3i\3i\7i\u073a\ni\fi\16i\u073d")
        buf.write("\13i\3j\3j\5j\u0741\nj\3k\3k\5k\u0745\nk\3l\3l\3l\3l\3")
        buf.write("m\3m\3m\3n\3n\3n\5n\u0751\nn\3o\3o\3p\3p\3q\3q\3r\3r\3")
        buf.write("s\3s\3t\3t\3t\7t\u0760\nt\ft\16t\u0763\13t\3u\3u\5u\u0767")
        buf.write("\nu\3u\5u\u076a\nu\3v\3v\5v\u076e\nv\3w\3w\3w\5w\u0773")
        buf.write("\nw\3x\3x\3x\3y\3y\5y\u077a\ny\3z\3z\3z\3z\3z\3z\3z\3")
        buf.write("z\3z\7z\u0785\nz\fz\16z\u0788\13z\3{\3{\3{\3{\7{\u078e")
        buf.write("\n{\f{\16{\u0791\13{\3|\3|\3|\7|\u0796\n|\f|\16|\u0799")
        buf.write("\13|\3|\3|\3|\7|\u079e\n|\f|\16|\u07a1\13|\3|\3|\3|\3")
        buf.write("|\3|\5|\u07a8\n|\3}\3}\3}\3}\7}\u07ae\n}\f}\16}\u07b1")
        buf.write("\13}\3~\3~\3~\5~\u07b6\n~\3\177\3\177\3\177\3\177\3\177")
        buf.write("\3\177\3\177\3\177\3\177\3\177\5\177\u07c2\n\177\3\u0080")
        buf.write("\3\u0080\5\u0080\u07c6\n\u0080\3\u0081\3\u0081\3\u0081")
        buf.write("\3\u0081\3\u0081\3\u0081\7\u0081\u07ce\n\u0081\f\u0081")
        buf.write("\16\u0081\u07d1\13\u0081\3\u0082\3\u0082\3\u0082\7\u0082")
        buf.write("\u07d6\n\u0082\f\u0082\16\u0082\u07d9\13\u0082\3\u0082")
        buf.write("\5\u0082\u07dc\n\u0082\3\u0083\3\u0083\3\u0083\3\u0083")
        buf.write("\5\u0083\u07e2\n\u0083\3\u0083\3\u0083\3\u0083\7\u0083")
        buf.write("\u07e7\n\u0083\f\u0083\16\u0083\u07ea\13\u0083\3\u0083")
        buf.write("\3\u0083\5\u0083\u07ee\n\u0083\3\u0084\3\u0084\3\u0084")
        buf.write("\7\u0084\u07f3\n\u0084\f\u0084\16\u0084\u07f6\13\u0084")
        buf.write("\3\u0085\3\u0085\3\u0085\7\u0085\u07fb\n\u0085\f\u0085")
        buf.write("\16\u0085\u07fe\13\u0085\3\u0086\3\u0086\3\u0086\3\u0086")
        buf.write("\5\u0086\u0804\n\u0086\3\u0087\3\u0087\3\u0088\3\u0088")
        buf.write("\3\u0088\3\u0088\7\u0088\u080c\n\u0088\f\u0088\16\u0088")
        buf.write("\u080f\13\u0088\3\u0089\3\u0089\3\u0089\3\u0089\3\u0089")
        buf.write("\3\u0089\3\u0089\3\u0089\3\u0089\3\u0089\5\u0089\u081b")
        buf.write("\n\u0089\3\u008a\3\u008a\5\u008a\u081f\n\u008a\3\u008a")
        buf.write("\5\u008a\u0822\n\u008a\3\u008b\3\u008b\5\u008b\u0826\n")
        buf.write("\u008b\3\u008b\5\u008b\u0829\n\u008b\3\u008c\3\u008c\3")
        buf.write("\u008c\3\u008c\7\u008c\u082f\n\u008c\f\u008c\16\u008c")
        buf.write("\u0832\13\u008c\3\u008d\3\u008d\3\u008d\3\u008d\7\u008d")
        buf.write("\u0838\n\u008d\f\u008d\16\u008d\u083b\13\u008d\3\u008e")
        buf.write("\3\u008e\3\u008e\3\u008e\7\u008e\u0841\n\u008e\f\u008e")
        buf.write("\16\u008e\u0844\13\u008e\3\u008f\3\u008f\3\u008f\3\u008f")
        buf.write("\7\u008f\u084a\n\u008f\f\u008f\16\u008f\u084d\13\u008f")
        buf.write("\3\u0090\3\u0090\3\u0090\3\u0090\3\u0090\3\u0090\3\u0090")
        buf.write("\3\u0090\3\u0090\3\u0090\3\u0090\3\u0090\3\u0090\3\u0090")
        buf.write("\5\u0090\u085d\n\u0090\3\u0091\3\u0091\3\u0091\3\u0091")
        buf.write("\3\u0091\3\u0091\3\u0091\3\u0091\3\u0091\3\u0091\3\u0091")
        buf.write("\3\u0091\3\u0091\3\u0091\3\u0091\3\u0091\5\u0091\u086f")
        buf.write("\n\u0091\3\u0092\3\u0092\3\u0092\7\u0092\u0874\n\u0092")
        buf.write("\f\u0092\16\u0092\u0877\13\u0092\3\u0093\3\u0093\3\u0094")
        buf.write("\3\u0094\3\u0094\3\u0094\3\u0095\3\u0095\5\u0095\u0881")
        buf.write("\n\u0095\3\u0096\3\u0096\3\u0096\3\u0096\3\u0096\3\u0096")
        buf.write("\5\u0096\u0889\n\u0096\3\u0097\5\u0097\u088c\n\u0097\3")
        buf.write("\u0097\3\u0097\5\u0097\u0890\n\u0097\3\u0097\3\u0097\3")
        buf.write("\u0098\5\u0098\u0895\n\u0098\3\u0098\3\u0098\3\u0098\3")
        buf.write("\u0098\3\u0098\3\u0098\3\u0098\3\u0098\5\u0098\u089f\n")
        buf.write("\u0098\3\u0099\3\u0099\5\u0099\u08a3\n\u0099\3\u0099\3")
        buf.write("\u0099\3\u009a\3\u009a\3\u009a\3\u009a\3\u009a\7\u009a")
        buf.write("\u08ac\n\u009a\f\u009a\16\u009a\u08af\13\u009a\5\u009a")
        buf.write("\u08b1\n\u009a\3\u009b\3\u009b\3\u009b\7\u009b\u08b6\n")
        buf.write("\u009b\f\u009b\16\u009b\u08b9\13\u009b\3\u009c\3\u009c")
        buf.write("\3\u009c\3\u009c\3\u009d\3\u009d\5\u009d\u08c1\n\u009d")
        buf.write("\3\u009e\3\u009e\3\u009e\3\u009e\3\u009e\3\u009e\3\u009e")
        buf.write("\3\u009e\3\u009e\5\u009e\u08cc\n\u009e\3\u009f\3\u009f")
        buf.write("\3\u009f\3\u009f\3\u00a0\3\u00a0\3\u00a0\3\u00a0\3\u00a0")
        buf.write("\7\u00a0\u08d7\n\u00a0\f\u00a0\16\u00a0\u08da\13\u00a0")
        buf.write("\3\u00a1\3\u00a1\3\u00a1\3\u00a1\5\u00a1\u08e0\n\u00a1")
        buf.write("\3\u00a2\3\u00a2\3\u00a2\3\u00a2\3\u00a2\3\u00a2\3\u00a2")
        buf.write("\3\u00a2\5\u00a2\u08ea\n\u00a2\3\u00a3\3\u00a3\3\u00a3")
        buf.write("\3\u00a3\3\u00a3\3\u00a4\3\u00a4\3\u00a4\5\u00a4\u08f4")
        buf.write("\n\u00a4\3\u00a4\5\u00a4\u08f7\n\u00a4\3\u00a5\3\u00a5")
        buf.write("\5\u00a5\u08fb\n\u00a5\3\u00a6\3\u00a6\3\u00a6\3\u00a6")
        buf.write("\3\u00a6\3\u00a7\3\u00a7\3\u00a7\3\u00a7\3\u00a7\3\u00a8")
        buf.write("\3\u00a8\3\u00a8\7\u00a8\u090a\n\u00a8\f\u00a8\16\u00a8")
        buf.write("\u090d\13\u00a8\3\u00a9\3\u00a9\3\u00a9\7\u00a9\u0912")
        buf.write("\n\u00a9\f\u00a9\16\u00a9\u0915\13\u00a9\3\u00a9\5\u00a9")
        buf.write("\u0918\n\u00a9\3\u00aa\3\u00aa\3\u00aa\3\u00aa\3\u00aa")
        buf.write("\3\u00aa\5\u00aa\u0920\n\u00aa\3\u00ab\3\u00ab\3\u00ac")
        buf.write("\3\u00ac\3\u00ac\3\u00ad\3\u00ad\3\u00ad\3\u00ae\3\u00ae")
        buf.write("\3\u00ae\3\u00af\3\u00af\3\u00af\3\u00b0\3\u00b0\3\u00b0")
        buf.write("\3\u00b1\3\u00b1\3\u00b2\3\u00b2\3\u00b3\3\u00b3\3\u00b4")
        buf.write("\3\u00b4\3\u00b5\3\u00b5\3\u00b6\3\u00b6\3\u00b6\3\u00b6")
        buf.write("\3\u00b6\3\u00b6\3\u00b6\5\u00b6\u0944\n\u00b6\3\u00b7")
        buf.write("\3\u00b7\3\u00b7\3\u00b7\3\u00b7\7\u00b7\u094b\n\u00b7")
        buf.write("\f\u00b7\16\u00b7\u094e\13\u00b7\3\u00b8\3\u00b8\3\u00b8")
        buf.write("\3\u00b8\3\u00b8\3\u00b8\3\u00b8\5\u00b8\u0957\n\u00b8")
        buf.write("\3\u00b9\3\u00b9\3\u00ba\3\u00ba\3\u00ba\3\u00bb\3\u00bb")
        buf.write("\3\u00bb\3\u00bb\3\u00bb\5\u00bb\u0963\n\u00bb\3\u00bc")
        buf.write("\3\u00bc\3\u00bc\5\u00bc\u0968\n\u00bc\3\u00bc\3\u00bc")
        buf.write("\3\u00bd\3\u00bd\3\u00bd\3\u00bd\3\u00bd\3\u00bd\7\u00bd")
        buf.write("\u0972\n\u00bd\f\u00bd\16\u00bd\u0975\13\u00bd\3\u00be")
        buf.write("\3\u00be\3\u00be\3\u00be\3\u00bf\3\u00bf\3\u00bf\3\u00bf")
        buf.write("\3\u00c0\3\u00c0\3\u00c1\3\u00c1\3\u00c1\3\u00c1\3\u00c1")
        buf.write("\5\u00c1\u0986\n\u00c1\3\u00c2\3\u00c2\3\u00c3\3\u00c3")
        buf.write("\3\u00c3\5\u00c3\u098d\n\u00c3\3\u00c4\3\u00c4\3\u00c4")
        buf.write("\3\u00c4\3\u00c4\7\u00c4\u0994\n\u00c4\f\u00c4\16\u00c4")
        buf.write("\u0997\13\u00c4\3\u00c5\3\u00c5\3\u00c5\3\u00c5\3\u00c5")
        buf.write("\5\u00c5\u099e\n\u00c5\3\u00c6\3\u00c6\3\u00c7\3\u00c7")
        buf.write("\3\u00c7\3\u00c7\3\u00c7\3\u00c7\5\u00c7\u09a8\n\u00c7")
        buf.write("\3\u00c8\3\u00c8\3\u00c8\5\u00c8\u09ad\n\u00c8\3\u00c8")
        buf.write("\3\u00c8\3\u00c9\3\u00c9\3\u00c9\3\u00c9\3\u00c9\3\u00c9")
        buf.write("\5\u00c9\u09b7\n\u00c9\3\u00ca\3\u00ca\3\u00ca\3\u00ca")
        buf.write("\3\u00ca\3\u00ca\7\u00ca\u09bf\n\u00ca\f\u00ca\16\u00ca")
        buf.write("\u09c2\13\u00ca\3\u00cb\3\u00cb\3\u00cb\3\u00cb\3\u00cb")
        buf.write("\3\u00cb\3\u00cb\3\u00cb\3\u00cb\3\u00cb\3\u00cb\7\u00cb")
        buf.write("\u09cf\n\u00cb\f\u00cb\16\u00cb\u09d2\13\u00cb\3\u00cc")
        buf.write("\3\u00cc\3\u00cc\3\u00cc\3\u00cd\3\u00cd\3\u00cd\5\u00cd")
        buf.write("\u09db\n\u00cd\3\u00cd\3\u00cd\3\u00cd\7\u00cd\u09e0\n")
        buf.write("\u00cd\f\u00cd\16\u00cd\u09e3\13\u00cd\3\u00ce\3\u00ce")
        buf.write("\3\u00ce\3\u00ce\3\u00ce\5\u00ce\u09ea\n\u00ce\3\u00cf")
        buf.write("\3\u00cf\3\u00d0\3\u00d0\3\u00d0\3\u00d0\3\u00d0\3\u00d0")
        buf.write("\3\u00d0\5\u00d0\u09f5\n\u00d0\3\u00d1\3\u00d1\3\u00d1")
        buf.write("\3\u00d1\3\u00d1\7\u00d1\u09fc\n\u00d1\f\u00d1\16\u00d1")
        buf.write("\u09ff\13\u00d1\3\u00d2\3\u00d2\3\u00d2\3\u00d2\3\u00d2")
        buf.write("\5\u00d2\u0a06\n\u00d2\3\u00d3\3\u00d3\3\u00d4\3\u00d4")
        buf.write("\3\u00d4\3\u00d5\3\u00d5\3\u00d5\5\u00d5\u0a10\n\u00d5")
        buf.write("\3\u00d6\3\u00d6\3\u00d6\5\u00d6\u0a15\n\u00d6\3\u00d6")
        buf.write("\3\u00d6\3\u00d7\3\u00d7\3\u00d7\3\u00d7\3\u00d7\3\u00d7")
        buf.write("\7\u00d7\u0a1f\n\u00d7\f\u00d7\16\u00d7\u0a22\13\u00d7")
        buf.write("\3\u00d8\3\u00d8\3\u00d8\3\u00d8\3\u00d9\3\u00d9\3\u00d9")
        buf.write("\3\u00d9\3\u00da\3\u00da\3\u00da\3\u00da\3\u00da\3\u00da")
        buf.write("\7\u00da\u0a32\n\u00da\f\u00da\16\u00da\u0a35\13\u00da")
        buf.write("\3\u00db\3\u00db\3\u00db\3\u00db\3\u00db\7\u00db\u0a3c")
        buf.write("\n\u00db\f\u00db\16\u00db\u0a3f\13\u00db\3\u00dc\3\u00dc")
        buf.write("\3\u00dc\3\u00dc\3\u00dc\5\u00dc\u0a46\n\u00dc\3\u00dd")
        buf.write("\3\u00dd\3\u00de\3\u00de\3\u00de\3\u00de\3\u00de\3\u00de")
        buf.write("\3\u00de\5\u00de\u0a51\n\u00de\3\u00df\3\u00df\3\u00df")
        buf.write("\3\u00df\3\u00df\7\u00df\u0a58\n\u00df\f\u00df\16\u00df")
        buf.write("\u0a5b\13\u00df\3\u00e0\3\u00e0\3\u00e0\3\u00e0\3\u00e0")
        buf.write("\5\u00e0\u0a62\n\u00e0\3\u00e1\3\u00e1\3\u00e2\3\u00e2")
        buf.write("\3\u00e2\3\u00e3\3\u00e3\3\u00e3\5\u00e3\u0a6c\n\u00e3")
        buf.write("\3\u00e4\3\u00e4\3\u00e4\5\u00e4\u0a71\n\u00e4\3\u00e4")
        buf.write("\3\u00e4\3\u00e5\3\u00e5\3\u00e5\3\u00e5\3\u00e5\3\u00e5")
        buf.write("\7\u00e5\u0a7b\n\u00e5\f\u00e5\16\u00e5\u0a7e\13\u00e5")
        buf.write("\3\u00e6\3\u00e6\3\u00e6\3\u00e6\3\u00e7\3\u00e7\3\u00e7")
        buf.write("\3\u00e7\3\u00e8\3\u00e8\3\u00e8\5\u00e8\u0a8b\n\u00e8")
        buf.write("\3\u00e8\3\u00e8\3\u00e8\7\u00e8\u0a90\n\u00e8\f\u00e8")
        buf.write("\16\u00e8\u0a93\13\u00e8\3\u00e9\3\u00e9\3\u00e9\3\u00e9")
        buf.write("\3\u00e9\5\u00e9\u0a9a\n\u00e9\3\u00ea\3\u00ea\3\u00eb")
        buf.write("\3\u00eb\5\u00eb\u0aa0\n\u00eb\3\u00ec\3\u00ec\3\u00ec")
        buf.write("\5\u00ec\u0aa5\n\u00ec\3\u00ec\3\u00ec\5\u00ec\u0aa9\n")
        buf.write("\u00ec\3\u00ed\3\u00ed\5\u00ed\u0aad\n\u00ed\3\u00ed\3")
        buf.write("\u00ed\3\u00ee\3\u00ee\3\u00ee\5\u00ee\u0ab4\n\u00ee\3")
        buf.write("\u00ef\3\u00ef\3\u00ef\3\u00ef\3\u00f0\3\u00f0\3\u00f0")
        buf.write("\3\u00f0\7\u00f0\u0abe\n\u00f0\f\u00f0\16\u00f0\u0ac1")
        buf.write("\13\u00f0\3\u00f0\3\u00f0\3\u00f0\3\u00f1\3\u00f1\3\u00f1")
        buf.write("\3\u00f1\7\u00f1\u0aca\n\u00f1\f\u00f1\16\u00f1\u0acd")
        buf.write("\13\u00f1\3\u00f1\3\u00f1\3\u00f2\3\u00f2\3\u00f2\3\u00f2")
        buf.write("\3\u00f2\3\u00f3\3\u00f3\3\u00f3\7\u00f3\u0ad9\n\u00f3")
        buf.write("\f\u00f3\16\u00f3\u0adc\13\u00f3\3\u00f4\3\u00f4\7\u00f4")
        buf.write("\u0ae0\n\u00f4\f\u00f4\16\u00f4\u0ae3\13\u00f4\3\u00f5")
        buf.write("\3\u00f5\3\u00f5\5\u00f5\u0ae8\n\u00f5\3\u00f5\3\u00f5")
        buf.write("\3\u00f6\3\u00f6\3\u00f6\3\u00f6\3\u00f6\5\u00f6\u0af1")
        buf.write("\n\u00f6\3\u00f7\6\u00f7\u0af4\n\u00f7\r\u00f7\16\u00f7")
        buf.write("\u0af5\3\u00f8\3\u00f8\3\u00f8\3\u00f8\5\u00f8\u0afc\n")
        buf.write("\u00f8\3\u00f8\5\u00f8\u0aff\n\u00f8\3\u00f9\6\u00f9\u0b02")
        buf.write("\n\u00f9\r\u00f9\16\u00f9\u0b03\3\u00fa\3\u00fa\6\u00fa")
        buf.write("\u0b08\n\u00fa\r\u00fa\16\u00fa\u0b09\3\u00fa\3\u00fa")
        buf.write("\3\u00fb\3\u00fb\3\u00fb\3\u00fb\3\u00fb\3\u00fc\3\u00fc")
        buf.write("\3\u00fc\3\u00fc\5\u00fc\u0b17\n\u00fc\3\u00fc\3\u00fc")
        buf.write("\6\u00fc\u0b1b\n\u00fc\r\u00fc\16\u00fc\u0b1c\7\u00fc")
        buf.write("\u0b1f\n\u00fc\f\u00fc\16\u00fc\u0b22\13\u00fc\3\u00fd")
        buf.write("\3\u00fd\3\u00fd\3\u00fd\3\u00fd\5\u00fd\u0b29\n\u00fd")
        buf.write("\3\u00fe\6\u00fe\u0b2c\n\u00fe\r\u00fe\16\u00fe\u0b2d")
        buf.write("\3\u00fe\2\32&P\\^hl\u0082\u00c0\u00f2\u013e\u016c\u0178")
        buf.write("\u0186\u0192\u0194\u0198\u01a0\u01ac\u01b2\u01b4\u01bc")
        buf.write("\u01c8\u01ce\u01f6\u00ff\2\4\6\b\n\f\16\20\22\24\26\30")
        buf.write("\32\34\36 \"$&(*,.\60\62\64\668:<>@BDFHJLNPRTVXZ\\^`b")
        buf.write("dfhjlnprtvxz|~\u0080\u0082\u0084\u0086\u0088\u008a\u008c")
        buf.write("\u008e\u0090\u0092\u0094\u0096\u0098\u009a\u009c\u009e")
        buf.write("\u00a0\u00a2\u00a4\u00a6\u00a8\u00aa\u00ac\u00ae\u00b0")
        buf.write("\u00b2\u00b4\u00b6\u00b8\u00ba\u00bc\u00be\u00c0\u00c2")
        buf.write("\u00c4\u00c6\u00c8\u00ca\u00cc\u00ce\u00d0\u00d2\u00d4")
        buf.write("\u00d6\u00d8\u00da\u00dc\u00de\u00e0\u00e2\u00e4\u00e6")
        buf.write("\u00e8\u00ea\u00ec\u00ee\u00f0\u00f2\u00f4\u00f6\u00f8")
        buf.write("\u00fa\u00fc\u00fe\u0100\u0102\u0104\u0106\u0108\u010a")
        buf.write("\u010c\u010e\u0110\u0112\u0114\u0116\u0118\u011a\u011c")
        buf.write("\u011e\u0120\u0122\u0124\u0126\u0128\u012a\u012c\u012e")
        buf.write("\u0130\u0132\u0134\u0136\u0138\u013a\u013c\u013e\u0140")
        buf.write("\u0142\u0144\u0146\u0148\u014a\u014c\u014e\u0150\u0152")
        buf.write("\u0154\u0156\u0158\u015a\u015c\u015e\u0160\u0162\u0164")
        buf.write("\u0166\u0168\u016a\u016c\u016e\u0170\u0172\u0174\u0176")
        buf.write("\u0178\u017a\u017c\u017e\u0180\u0182\u0184\u0186\u0188")
        buf.write("\u018a\u018c\u018e\u0190\u0192\u0194\u0196\u0198\u019a")
        buf.write("\u019c\u019e\u01a0\u01a2\u01a4\u01a6\u01a8\u01aa\u01ac")
        buf.write("\u01ae\u01b0\u01b2\u01b4\u01b6\u01b8\u01ba\u01bc\u01be")
        buf.write("\u01c0\u01c2\u01c4\u01c6\u01c8\u01ca\u01cc\u01ce\u01d0")
        buf.write("\u01d2\u01d4\u01d6\u01d8\u01da\u01dc\u01de\u01e0\u01e2")
        buf.write("\u01e4\u01e6\u01e8\u01ea\u01ec\u01ee\u01f0\u01f2\u01f4")
        buf.write("\u01f6\u01f8\u01fa\2\21\3\2\"#\4\2\3\3\7\t\5\2rr\u0093")
        buf.write("\u0093\u00ac\u00ac\4\2\u0096\u0096\u00ac\u00ac\3\2\u00aa")
        buf.write("\u00ac\4\2\u0092\u0092\u009b\u009b\4\2PPaa\b\2\13\20\66")
        buf.write("?AHJvx\u0099\u009b\u00a5\4\2\'\'||\r\2\66?EEHH\177\177")
        buf.write("\u0082\u0082\u008c\u008c\u0092\u0092\u0099\u0099\u00a5")
        buf.write("\u00a5\u00aa\u00ac\u00ae\u00ae\f\2\66?EEHH\177\177\u0082")
        buf.write("\u0082\u008c\u008c\u0099\u0099\u009b\u009b\u00a5\u00a5")
        buf.write("\u00aa\u00ac\f\2\66?EEHH\177\177\u0082\u0082\u008c\u008c")
        buf.write("\u0092\u0092\u0099\u0099\u00a5\u00a5\u00aa\u00ae\f\2\66")
        buf.write("?EEHH\177\177\u0082\u0082\u008c\u008c\u0092\u0092\u0099")
        buf.write("\u0099\u00a5\u00a5\u00aa\u00ac\5\2\32\33((**\5\2\t\t\21")
        buf.write("\22\32\33\2\u0bd5\2\u01fc\3\2\2\2\4\u0211\3\2\2\2\6\u021d")
        buf.write("\3\2\2\2\b\u0223\3\2\2\2\n\u0229\3\2\2\2\f\u023f\3\2\2")
        buf.write("\2\16\u024f\3\2\2\2\20\u0262\3\2\2\2\22\u0280\3\2\2\2")
        buf.write("\24\u029d\3\2\2\2\26\u029f\3\2\2\2\30\u02af\3\2\2\2\32")
        buf.write("\u02b9\3\2\2\2\34\u02c6\3\2\2\2\36\u02d0\3\2\2\2 \u02dd")
        buf.write("\3\2\2\2\"\u02fc\3\2\2\2$\u031b\3\2\2\2&\u0324\3\2\2\2")
        buf.write("(\u033a\3\2\2\2*\u033c\3\2\2\2,\u0349\3\2\2\2.\u035e\3")
        buf.write("\2\2\2\60\u0373\3\2\2\2\62\u0388\3\2\2\2\64\u038a\3\2")
        buf.write("\2\2\66\u038f\3\2\2\28\u03ac\3\2\2\2:\u03ae\3\2\2\2<\u03b9")
        buf.write("\3\2\2\2>\u03d4\3\2\2\2@\u03d6\3\2\2\2B\u03df\3\2\2\2")
        buf.write("D\u03e8\3\2\2\2F\u0408\3\2\2\2H\u040a\3\2\2\2J\u0418\3")
        buf.write("\2\2\2L\u0421\3\2\2\2N\u0428\3\2\2\2P\u043c\3\2\2\2R\u0454")
        buf.write("\3\2\2\2T\u0457\3\2\2\2V\u048e\3\2\2\2X\u0490\3\2\2\2")
        buf.write("Z\u0492\3\2\2\2\\\u04b8\3\2\2\2^\u052d\3\2\2\2`\u0537")
        buf.write("\3\2\2\2b\u053b\3\2\2\2d\u053f\3\2\2\2f\u0545\3\2\2\2")
        buf.write("h\u0547\3\2\2\2j\u055e\3\2\2\2l\u0560\3\2\2\2n\u056b\3")
        buf.write("\2\2\2p\u0570\3\2\2\2r\u0589\3\2\2\2t\u058b\3\2\2\2v\u0590")
        buf.write("\3\2\2\2x\u0594\3\2\2\2z\u05c0\3\2\2\2|\u05f6\3\2\2\2")
        buf.write("~\u05f8\3\2\2\2\u0080\u0612\3\2\2\2\u0082\u0614\3\2\2")
        buf.write("\2\u0084\u0623\3\2\2\2\u0086\u0627\3\2\2\2\u0088\u0633")
        buf.write("\3\2\2\2\u008a\u0635\3\2\2\2\u008c\u063c\3\2\2\2\u008e")
        buf.write("\u0640\3\2\2\2\u0090\u0647\3\2\2\2\u0092\u064b\3\2\2\2")
        buf.write("\u0094\u0654\3\2\2\2\u0096\u0659\3\2\2\2\u0098\u065d\3")
        buf.write("\2\2\2\u009a\u0662\3\2\2\2\u009c\u0665\3\2\2\2\u009e\u066a")
        buf.write("\3\2\2\2\u00a0\u0678\3\2\2\2\u00a2\u068b\3\2\2\2\u00a4")
        buf.write("\u069c\3\2\2\2\u00a6\u069e\3\2\2\2\u00a8\u06a2\3\2\2\2")
        buf.write("\u00aa\u06a6\3\2\2\2\u00ac\u06a8\3\2\2\2\u00ae\u06ac\3")
        buf.write("\2\2\2\u00b0\u06ae\3\2\2\2\u00b2\u06b7\3\2\2\2\u00b4\u06c0")
        buf.write("\3\2\2\2\u00b6\u06d2\3\2\2\2\u00b8\u06d5\3\2\2\2\u00ba")
        buf.write("\u06de\3\2\2\2\u00bc\u06e6\3\2\2\2\u00be\u06ee\3\2\2\2")
        buf.write("\u00c0\u0700\3\2\2\2\u00c2\u0710\3\2\2\2\u00c4\u0722\3")
        buf.write("\2\2\2\u00c6\u0724\3\2\2\2\u00c8\u0727\3\2\2\2\u00ca\u072b")
        buf.write("\3\2\2\2\u00cc\u0730\3\2\2\2\u00ce\u0734\3\2\2\2\u00d0")
        buf.write("\u0736\3\2\2\2\u00d2\u0740\3\2\2\2\u00d4\u0744\3\2\2\2")
        buf.write("\u00d6\u0746\3\2\2\2\u00d8\u074a\3\2\2\2\u00da\u0750\3")
        buf.write("\2\2\2\u00dc\u0752\3\2\2\2\u00de\u0754\3\2\2\2\u00e0\u0756")
        buf.write("\3\2\2\2\u00e2\u0758\3\2\2\2\u00e4\u075a\3\2\2\2\u00e6")
        buf.write("\u075c\3\2\2\2\u00e8\u0769\3\2\2\2\u00ea\u076d\3\2\2\2")
        buf.write("\u00ec\u076f\3\2\2\2\u00ee\u0774\3\2\2\2\u00f0\u0779\3")
        buf.write("\2\2\2\u00f2\u077b\3\2\2\2\u00f4\u0789\3\2\2\2\u00f6\u0797")
        buf.write("\3\2\2\2\u00f8\u07a9\3\2\2\2\u00fa\u07b5\3\2\2\2\u00fc")
        buf.write("\u07c1\3\2\2\2\u00fe\u07c3\3\2\2\2\u0100\u07c7\3\2\2\2")
        buf.write("\u0102\u07d2\3\2\2\2\u0104\u07dd\3\2\2\2\u0106\u07ef\3")
        buf.write("\2\2\2\u0108\u07f7\3\2\2\2\u010a\u0803\3\2\2\2\u010c\u0805")
        buf.write("\3\2\2\2\u010e\u0807\3\2\2\2\u0110\u081a\3\2\2\2\u0112")
        buf.write("\u081c\3\2\2\2\u0114\u0823\3\2\2\2\u0116\u082a\3\2\2\2")
        buf.write("\u0118\u0833\3\2\2\2\u011a\u083c\3\2\2\2\u011c\u0845\3")
        buf.write("\2\2\2\u011e\u085c\3\2\2\2\u0120\u086e\3\2\2\2\u0122\u0870")
        buf.write("\3\2\2\2\u0124\u0878\3\2\2\2\u0126\u087a\3\2\2\2\u0128")
        buf.write("\u0880\3\2\2\2\u012a\u0888\3\2\2\2\u012c\u088b\3\2\2\2")
        buf.write("\u012e\u0894\3\2\2\2\u0130\u08a0\3\2\2\2\u0132\u08a6\3")
        buf.write("\2\2\2\u0134\u08b2\3\2\2\2\u0136\u08ba\3\2\2\2\u0138\u08c0")
        buf.write("\3\2\2\2\u013a\u08cb\3\2\2\2\u013c\u08cd\3\2\2\2\u013e")
        buf.write("\u08d1\3\2\2\2\u0140\u08df\3\2\2\2\u0142\u08e9\3\2\2\2")
        buf.write("\u0144\u08eb\3\2\2\2\u0146\u08f6\3\2\2\2\u0148\u08fa\3")
        buf.write("\2\2\2\u014a\u08fc\3\2\2\2\u014c\u0901\3\2\2\2\u014e\u0906")
        buf.write("\3\2\2\2\u0150\u090e\3\2\2\2\u0152\u091f\3\2\2\2\u0154")
        buf.write("\u0921\3\2\2\2\u0156\u0923\3\2\2\2\u0158\u0926\3\2\2\2")
        buf.write("\u015a\u0929\3\2\2\2\u015c\u092c\3\2\2\2\u015e\u092f\3")
        buf.write("\2\2\2\u0160\u0932\3\2\2\2\u0162\u0934\3\2\2\2\u0164\u0936")
        buf.write("\3\2\2\2\u0166\u0938\3\2\2\2\u0168\u093a\3\2\2\2\u016a")
        buf.write("\u0943\3\2\2\2\u016c\u0945\3\2\2\2\u016e\u0956\3\2\2\2")
        buf.write("\u0170\u0958\3\2\2\2\u0172\u095a\3\2\2\2\u0174\u0962\3")
        buf.write("\2\2\2\u0176\u0964\3\2\2\2\u0178\u096b\3\2\2\2\u017a\u0976")
        buf.write("\3\2\2\2\u017c\u097a\3\2\2\2\u017e\u097e\3\2\2\2\u0180")
        buf.write("\u0985\3\2\2\2\u0182\u0987\3\2\2\2\u0184\u098c\3\2\2\2")
        buf.write("\u0186\u098e\3\2\2\2\u0188\u099d\3\2\2\2\u018a\u099f\3")
        buf.write("\2\2\2\u018c\u09a7\3\2\2\2\u018e\u09a9\3\2\2\2\u0190\u09b6")
        buf.write("\3\2\2\2\u0192\u09b8\3\2\2\2\u0194\u09c3\3\2\2\2\u0196")
        buf.write("\u09d3\3\2\2\2\u0198\u09da\3\2\2\2\u019a\u09e9\3\2\2\2")
        buf.write("\u019c\u09eb\3\2\2\2\u019e\u09f4\3\2\2\2\u01a0\u09f6\3")
        buf.write("\2\2\2\u01a2\u0a05\3\2\2\2\u01a4\u0a07\3\2\2\2\u01a6\u0a09")
        buf.write("\3\2\2\2\u01a8\u0a0f\3\2\2\2\u01aa\u0a11\3\2\2\2\u01ac")
        buf.write("\u0a18\3\2\2\2\u01ae\u0a23\3\2\2\2\u01b0\u0a27\3\2\2\2")
        buf.write("\u01b2\u0a2b\3\2\2\2\u01b4\u0a36\3\2\2\2\u01b6\u0a45\3")
        buf.write("\2\2\2\u01b8\u0a47\3\2\2\2\u01ba\u0a50\3\2\2\2\u01bc\u0a52")
        buf.write("\3\2\2\2\u01be\u0a61\3\2\2\2\u01c0\u0a63\3\2\2\2\u01c2")
        buf.write("\u0a65\3\2\2\2\u01c4\u0a6b\3\2\2\2\u01c6\u0a6d\3\2\2\2")
        buf.write("\u01c8\u0a74\3\2\2\2\u01ca\u0a7f\3\2\2\2\u01cc\u0a83\3")
        buf.write("\2\2\2\u01ce\u0a8a\3\2\2\2\u01d0\u0a99\3\2\2\2\u01d2\u0a9b")
        buf.write("\3\2\2\2\u01d4\u0a9f\3\2\2\2\u01d6\u0aa8\3\2\2\2\u01d8")
        buf.write("\u0aaa\3\2\2\2\u01da\u0ab3\3\2\2\2\u01dc\u0ab5\3\2\2\2")
        buf.write("\u01de\u0ab9\3\2\2\2\u01e0\u0ac5\3\2\2\2\u01e2\u0ad0\3")
        buf.write("\2\2\2\u01e4\u0ad5\3\2\2\2\u01e6\u0add\3\2\2\2\u01e8\u0ae4")
        buf.write("\3\2\2\2\u01ea\u0af0\3\2\2\2\u01ec\u0af3\3\2\2\2\u01ee")
        buf.write("\u0afe\3\2\2\2\u01f0\u0b01\3\2\2\2\u01f2\u0b05\3\2\2\2")
        buf.write("\u01f4\u0b0d\3\2\2\2\u01f6\u0b16\3\2\2\2\u01f8\u0b28\3")
        buf.write("\2\2\2\u01fa\u0b2b\3\2\2\2\u01fc\u01fd\7_\2\2\u01fd\u01fe")
        buf.write("\5\u00e0q\2\u01fe\u01ff\7O\2\2\u01ff\u0202\7g\2\2\u0200")
        buf.write("\u0203\7Y\2\2\u0201\u0203\5\u00e0q\2\u0202\u0200\3\2\2")
        buf.write("\2\u0202\u0201\3\2\2\2\u0203\u0209\3\2\2\2\u0204\u0205")
        buf.write("\5(\25\2\u0205\u0206\7\23\2\2\u0206\u0207\7M\2\2\u0207")
        buf.write("\u020a\3\2\2\2\u0208\u020a\7\u00a1\2\2\u0209\u0204\3\2")
        buf.write("\2\2\u0209\u0208\3\2\2\2\u020a\u020b\3\2\2\2\u020b\u020c")
        buf.write("\5\u015e\u00b0\2\u020c\u020d\7\21\2\2\u020d\u020e\5\u0092")
        buf.write("J\2\u020e\u020f\5\u00b2Z\2\u020f\u0210\5\u0094K\2\u0210")
        buf.write("\3\3\2\2\2\u0211\u0212\7_\2\2\u0212\u0213\5\u00e0q\2\u0213")
        buf.write("\u0214\7O\2\2\u0214\u0215\7g\2\2\u0215\u0216\5\u00c4c")
        buf.write("\2\u0216\u0217\7\u00a1\2\2\u0217\u0218\5\u015e\u00b0\2")
        buf.write("\u0218\u0219\7\21\2\2\u0219\u021a\5\u0092J\2\u021a\u021b")
        buf.write("\5\u00b0Y\2\u021b\u021c\5\u0094K\2\u021c\5\3\2\2\2\u021d")
        buf.write("\u021e\5\u00e2r\2\u021e\u021f\7\u00a1\2\2\u021f\u0220")
        buf.write("\5\\/\2\u0220\u0221\7O\2\2\u0221\u0222\5\u015c\u00af\2")
        buf.write("\u0222\7\3\2\2\2\u0223\u0224\5\u00e2r\2\u0224\u0227\5")
        buf.write("\u0082B\2\u0225\u0226\7M\2\2\u0226\u0228\5\u0084C\2\u0227")
        buf.write("\u0225\3\2\2\2\u0227\u0228\3\2\2\2\u0228\t\3\2\2\2\u0229")
        buf.write("\u022a\7_\2\2\u022a\u022b\5\u00dep\2\u022b\u022d\7O\2")
        buf.write("\2\u022c\u022e\7\u0096\2\2\u022d\u022c\3\2\2\2\u022d\u022e")
        buf.write("\3\2\2\2\u022e\u022f\3\2\2\2\u022f\u0230\5\u00c0a\2\u0230")
        buf.write("\u0232\7R\2\2\u0231\u0233\5\u00b6\\\2\u0232\u0231\3\2")
        buf.write("\2\2\u0232\u0233\3\2\2\2\u0233\u023d\3\2\2\2\u0234\u023a")
        buf.write("\7\u00a1\2\2\u0235\u0238\5\u0106\u0084\2\u0236\u0237\7")
        buf.write("M\2\2\u0237\u0239\5\u00dco\2\u0238\u0236\3\2\2\2\u0238")
        buf.write("\u0239\3\2\2\2\u0239\u023b\3\2\2\2\u023a\u0235\3\2\2\2")
        buf.write("\u023a\u023b\3\2\2\2\u023b\u023c\3\2\2\2\u023c\u023e\7")
        buf.write("v\2\2\u023d\u0234\3\2\2\2\u023d\u023e\3\2\2\2\u023e\13")
        buf.write("\3\2\2\2\u023f\u0240\7_\2\2\u0240\u0241\5\u00e0q\2\u0241")
        buf.write("\u0244\7O\2\2\u0242\u0245\7\u00a0\2\2\u0243\u0245\5\u00e0")
        buf.write("q\2\u0244\u0242\3\2\2\2\u0244\u0243\3\2\2\2\u0245\u024d")
        buf.write("\3\2\2\2\u0246\u0247\7\u00a1\2\2\u0247\u0248\7{\2\2\u0248")
        buf.write("\u0249\7\21\2\2\u0249\u024a\5\u0092J\2\u024a\u024b\5\u00f4")
        buf.write("{\2\u024b\u024c\5\u0094K\2\u024c\u024e\3\2\2\2\u024d\u0246")
        buf.write("\3\2\2\2\u024d\u024e\3\2\2\2\u024e\r\3\2\2\2\u024f\u0250")
        buf.write("\7_\2\2\u0250\u0251\5\u00e0q\2\u0251\u0252\7O\2\2\u0252")
        buf.write("\u0253\7~\2\2\u0253\u0254\7\u00a0\2\2\u0254\u0255\7\u00a1")
        buf.write("\2\2\u0255\u0256\7T\2\2\u0256\u0257\7\21\2\2\u0257\u0258")
        buf.write("\5\u0092J\2\u0258\u0259\5$\23\2\u0259\u025a\5\u0094K\2")
        buf.write("\u025a\u025b\5\u008eH\2\u025b\u025c\7M\2\2\u025c\u025d")
        buf.write("\7{\2\2\u025d\u025e\7\21\2\2\u025e\u025f\5\u0092J\2\u025f")
        buf.write("\u0260\5\u00f8}\2\u0260\u0261\5\u0094K\2\u0261\17\3\2")
        buf.write("\2\2\u0262\u0263\7_\2\2\u0263\u0264\5\u00e0q\2\u0264\u0266")
        buf.write("\7O\2\2\u0265\u0267\7\u0096\2\2\u0266\u0265\3\2\2\2\u0266")
        buf.write("\u0267\3\2\2\2\u0267\u026a\3\2\2\2\u0268\u026b\7Y\2\2")
        buf.write("\u0269\u026b\5\24\13\2\u026a\u0268\3\2\2\2\u026a\u0269")
        buf.write("\3\2\2\2\u026b\u027e\3\2\2\2\u026c\u0275\5(\25\2\u026d")
        buf.write("\u026e\7\23\2\2\u026e\u026f\7M\2\2\u026f\u0270\7{\2\2")
        buf.write("\u0270\u0271\7\21\2\2\u0271\u0272\5\u0092J\2\u0272\u0273")
        buf.write("\5\u00f4{\2\u0273\u0274\5\u0094K\2\u0274\u0276\3\2\2\2")
        buf.write("\u0275\u026d\3\2\2\2\u0275\u0276\3\2\2\2\u0276\u027f\3")
        buf.write("\2\2\2\u0277\u0278\7\u00a1\2\2\u0278\u0279\7{\2\2\u0279")
        buf.write("\u027a\7\21\2\2\u027a\u027b\5\u0092J\2\u027b\u027c\5\u00f4")
        buf.write("{\2\u027c\u027d\5\u0094K\2\u027d\u027f\3\2\2\2\u027e\u026c")
        buf.write("\3\2\2\2\u027e\u0277\3\2\2\2\u027e\u027f\3\2\2\2\u027f")
        buf.write("\21\3\2\2\2\u0280\u0281\7_\2\2\u0281\u0282\5\u00e0q\2")
        buf.write("\u0282\u0283\7O\2\2\u0283\u0296\7\u0094\2\2\u0284\u028d")
        buf.write("\5(\25\2\u0285\u0286\7\23\2\2\u0286\u0287\7M\2\2\u0287")
        buf.write("\u0288\7{\2\2\u0288\u0289\7\21\2\2\u0289\u028a\5\u0092")
        buf.write("J\2\u028a\u028b\5\u00f4{\2\u028b\u028c\5\u0094K\2\u028c")
        buf.write("\u028e\3\2\2\2\u028d\u0285\3\2\2\2\u028d\u028e\3\2\2\2")
        buf.write("\u028e\u0297\3\2\2\2\u028f\u0290\7\u00a1\2\2\u0290\u0291")
        buf.write("\7{\2\2\u0291\u0292\7\21\2\2\u0292\u0293\5\u0092J\2\u0293")
        buf.write("\u0294\5\u00f4{\2\u0294\u0295\5\u0094K\2\u0295\u0297\3")
        buf.write("\2\2\2\u0296\u0284\3\2\2\2\u0296\u028f\3\2\2\2\u0296\u0297")
        buf.write("\3\2\2\2\u0297\23\3\2\2\2\u0298\u029e\5\u00d0i\2\u0299")
        buf.write("\u029a\5\u00d0i\2\u029a\u029b\7M\2\2\u029b\u029c\5\u00e0")
        buf.write("q\2\u029c\u029e\3\2\2\2\u029d\u0298\3\2\2\2\u029d\u0299")
        buf.write("\3\2\2\2\u029e\25\3\2\2\2\u029f\u02a0\7_\2\2\u02a0\u02a1")
        buf.write("\5\u0152\u00aa\2\u02a1\u02a2\7O\2\2\u02a2\u02a3\7\u0086")
        buf.write("\2\2\u02a3\u02a4\7\u008d\2\2\u02a4\u02a7\5\u00eav\2\u02a5")
        buf.write("\u02a6\7\u0090\2\2\u02a6\u02a8\5\u00c0a\2\u02a7\u02a5")
        buf.write("\3\2\2\2\u02a7\u02a8\3\2\2\2\u02a8\u02a9\3\2\2\2\u02a9")
        buf.write("\u02aa\7c\2\2\u02aa\u02ab\7\21\2\2\u02ab\u02ac\5\u0092")
        buf.write("J\2\u02ac\u02ad\5\u0116\u008c\2\u02ad\u02ae\5\u0094K\2")
        buf.write("\u02ae\27\3\2\2\2\u02af\u02b0\7_\2\2\u02b0\u02b1\5\u00dc")
        buf.write("o\2\u02b1\u02b2\7O\2\2\u02b2\u02b3\7\u0093\2\2\u02b3\u02b4")
        buf.write("\7c\2\2\u02b4\u02b5\7\21\2\2\u02b5\u02b6\5\u0092J\2\u02b6")
        buf.write("\u02b7\5\u0116\u008c\2\u02b7\u02b8\5\u0094K\2\u02b8\31")
        buf.write("\3\2\2\2\u02b9\u02ba\7_\2\2\u02ba\u02bb\5\u00dco\2\u02bb")
        buf.write("\u02bd\7O\2\2\u02bc\u02be\7~\2\2\u02bd\u02bc\3\2\2\2\u02bd")
        buf.write("\u02be\3\2\2\2\u02be\u02bf\3\2\2\2\u02bf\u02c0\7\u0093")
        buf.write("\2\2\u02c0\u02c1\7c\2\2\u02c1\u02c2\7\21\2\2\u02c2\u02c3")
        buf.write("\5\u0092J\2\u02c3\u02c4\5\u010e\u0088\2\u02c4\u02c5\5")
        buf.write("\u0094K\2\u02c5\33\3\2\2\2\u02c6\u02c7\7_\2\2\u02c7\u02c8")
        buf.write("\5\u00dco\2\u02c8\u02c9\7O\2\2\u02c9\u02ca\7r\2\2\u02ca")
        buf.write("\u02cb\7c\2\2\u02cb\u02cc\7\21\2\2\u02cc\u02cd\5\u0092")
        buf.write("J\2\u02cd\u02ce\5\u0116\u008c\2\u02ce\u02cf\5\u0094K\2")
        buf.write("\u02cf\35\3\2\2\2\u02d0\u02d1\7_\2\2\u02d1\u02d2\5\u00dc")
        buf.write("o\2\u02d2\u02d4\7O\2\2\u02d3\u02d5\7~\2\2\u02d4\u02d3")
        buf.write("\3\2\2\2\u02d4\u02d5\3\2\2\2\u02d5\u02d6\3\2\2\2\u02d6")
        buf.write("\u02d7\7r\2\2\u02d7\u02d8\7c\2\2\u02d8\u02d9\7\21\2\2")
        buf.write("\u02d9\u02da\5\u0092J\2\u02da\u02db\5\u010e\u0088\2\u02db")
        buf.write("\u02dc\5\u0094K\2\u02dc\37\3\2\2\2\u02dd\u02de\7_\2\2")
        buf.write("\u02de\u02df\5\u00e0q\2\u02df\u02e1\7O\2\2\u02e0\u02e2")
        buf.write("\7\u0096\2\2\u02e1\u02e0\3\2\2\2\u02e1\u02e2\3\2\2\2\u02e2")
        buf.write("\u02e3\3\2\2\2\u02e3\u02e4\7~\2\2\u02e4\u02ec\7Y\2\2\u02e5")
        buf.write("\u02e6\5(\25\2\u02e6\u02e7\7\23\2\2\u02e7\u02e8\7M\2\2")
        buf.write("\u02e8\u02e9\7T\2\2\u02e9\u02ed\3\2\2\2\u02ea\u02eb\7")
        buf.write("\u00a1\2\2\u02eb\u02ed\7T\2\2\u02ec\u02e5\3\2\2\2\u02ec")
        buf.write("\u02ea\3\2\2\2\u02ed\u02ee\3\2\2\2\u02ee\u02ef\7\21\2")
        buf.write("\2\u02ef\u02f0\5\u0092J\2\u02f0\u02f1\5$\23\2\u02f1\u02fa")
        buf.write("\5\u0094K\2\u02f2\u02f3\5\u008eH\2\u02f3\u02f4\7M\2\2")
        buf.write("\u02f4\u02f5\7{\2\2\u02f5\u02f6\7\21\2\2\u02f6\u02f7\5")
        buf.write("\u0092J\2\u02f7\u02f8\5\u00f8}\2\u02f8\u02f9\5\u0094K")
        buf.write("\2\u02f9\u02fb\3\2\2\2\u02fa\u02f2\3\2\2\2\u02fa\u02fb")
        buf.write("\3\2\2\2\u02fb!\3\2\2\2\u02fc\u02fd\7_\2\2\u02fd\u02fe")
        buf.write("\5\u00e0q\2\u02fe\u0300\7O\2\2\u02ff\u0301\7\u0096\2\2")
        buf.write("\u0300\u02ff\3\2\2\2\u0300\u0301\3\2\2\2\u0301\u0302\3")
        buf.write("\2\2\2\u0302\u0303\7~\2\2\u0303\u030b\7\u008e\2\2\u0304")
        buf.write("\u0305\5(\25\2\u0305\u0306\7\23\2\2\u0306\u0307\7M\2\2")
        buf.write("\u0307\u0308\7T\2\2\u0308\u030c\3\2\2\2\u0309\u030a\7")
        buf.write("\u00a1\2\2\u030a\u030c\7T\2\2\u030b\u0304\3\2\2\2\u030b")
        buf.write("\u0309\3\2\2\2\u030c\u030d\3\2\2\2\u030d\u030e\7\21\2")
        buf.write("\2\u030e\u030f\5\u0092J\2\u030f\u0310\5$\23\2\u0310\u0319")
        buf.write("\5\u0094K\2\u0311\u0312\5\u008eH\2\u0312\u0313\7M\2\2")
        buf.write("\u0313\u0314\7{\2\2\u0314\u0315\7\21\2\2\u0315\u0316\5")
        buf.write("\u0092J\2\u0316\u0317\5\u00f8}\2\u0317\u0318\5\u0094K")
        buf.write("\2\u0318\u031a\3\2\2\2\u0319\u0311\3\2\2\2\u0319\u031a")
        buf.write("\3\2\2\2\u031a#\3\2\2\2\u031b\u031c\7_\2\2\u031c\u031d")
        buf.write("\7Y\2\2\u031d\u031e\7T\2\2\u031e\u031f\7O\2\2\u031f\u0320")
        buf.write("\7\21\2\2\u0320\u0321\5\u0092J\2\u0321\u0322\5&\24\2\u0322")
        buf.write("\u0323\5\u0094K\2\u0323%\3\2\2\2\u0324\u0325\b\24\1\2")
        buf.write("\u0325\u0326\5\u00fc\177\2\u0326\u032d\3\2\2\2\u0327\u0328")
        buf.write("\f\3\2\2\u0328\u0329\5\u008eH\2\u0329\u032a\5\u00fc\177")
        buf.write("\2\u032a\u032c\3\2\2\2\u032b\u0327\3\2\2\2\u032c\u032f")
        buf.write("\3\2\2\2\u032d\u032b\3\2\2\2\u032d\u032e\3\2\2\2\u032e")
        buf.write("\'\3\2\2\2\u032f\u032d\3\2\2\2\u0330\u0331\7\u00a1\2\2")
        buf.write("\u0331\u0332\7R\2\2\u0332\u033b\5\u00dep\2\u0333\u0334")
        buf.write("\7\u00a1\2\2\u0334\u0335\7S\2\2\u0335\u0338\5\u0108\u0085")
        buf.write("\2\u0336\u0337\7M\2\2\u0337\u0339\5\u00dep\2\u0338\u0336")
        buf.write("\3\2\2\2\u0338\u0339\3\2\2\2\u0339\u033b\3\2\2\2\u033a")
        buf.write("\u0330\3\2\2\2\u033a\u0333\3\2\2\2\u033b)\3\2\2\2\u033c")
        buf.write("\u033d\7_\2\2\u033d\u033e\5\u00d2j\2\u033e\u033f\7O\2")
        buf.write("\2\u033f\u0340\7J\2\2\u0340\u0343\7z\2\2\u0341\u0342\7")
        buf.write("\u008d\2\2\u0342\u0344\5\64\33\2\u0343\u0341\3\2\2\2\u0343")
        buf.write("\u0344\3\2\2\2\u0344\u0347\3\2\2\2\u0345\u0346\7\u0090")
        buf.write("\2\2\u0346\u0348\5\u00c0a\2\u0347\u0345\3\2\2\2\u0347")
        buf.write("\u0348\3\2\2\2\u0348+\3\2\2\2\u0349\u034a\7_\2\2\u034a")
        buf.write("\u034b\5\u00d2j\2\u034b\u034c\7O\2\2\u034c\u034f\7z\2")
        buf.write("\2\u034d\u034e\7\u008d\2\2\u034e\u0350\5\64\33\2\u034f")
        buf.write("\u034d\3\2\2\2\u034f\u0350\3\2\2\2\u0350\u0353\3\2\2\2")
        buf.write("\u0351\u0352\7\u0090\2\2\u0352\u0354\5\u00c0a\2\u0353")
        buf.write("\u0351\3\2\2\2\u0353\u0354\3\2\2\2\u0354\u0355\3\2\2\2")
        buf.write("\u0355\u0356\7c\2\2\u0356\u0357\7\21\2\2\u0357\u035a\5")
        buf.write("\u0092J\2\u0358\u035b\5\u0116\u008c\2\u0359\u035b\7\u008a")
        buf.write("\2\2\u035a\u0358\3\2\2\2\u035a\u0359\3\2\2\2\u035b\u035c")
        buf.write("\3\2\2\2\u035c\u035d\5\u0094K\2\u035d-\3\2\2\2\u035e\u035f")
        buf.write("\7_\2\2\u035f\u0360\5\u00d2j\2\u0360\u0362\7O\2\2\u0361")
        buf.write("\u0363\7~\2\2\u0362\u0361\3\2\2\2\u0362\u0363\3\2\2\2")
        buf.write("\u0363\u0364\3\2\2\2\u0364\u0367\7z\2\2\u0365\u0366\7")
        buf.write("\u008d\2\2\u0366\u0368\5\64\33\2\u0367\u0365\3\2\2\2\u0367")
        buf.write("\u0368\3\2\2\2\u0368\u036b\3\2\2\2\u0369\u036a\7\u0090")
        buf.write("\2\2\u036a\u036c\5\u00f0y\2\u036b\u0369\3\2\2\2\u036b")
        buf.write("\u036c\3\2\2\2\u036c\u036d\3\2\2\2\u036d\u036e\7c\2\2")
        buf.write("\u036e\u036f\7\21\2\2\u036f\u0370\5\u0092J\2\u0370\u0371")
        buf.write("\5\u010e\u0088\2\u0371\u0372\5\u0094K\2\u0372/\3\2\2\2")
        buf.write("\u0373\u0374\7_\2\2\u0374\u0375\7\u00b0\2\2\u0375\u0376")
        buf.write("\7O\2\2\u0376\u0377\7\u0099\2\2\u0377\u0378\7z\2\2\u0378")
        buf.write("\u0379\7c\2\2\u0379\u037a\7\21\2\2\u037a\u037b\5\u0092")
        buf.write("J\2\u037b\u037c\5\u0116\u008c\2\u037c\u037d\5\u0094K\2")
        buf.write("\u037d\u037e\5\u008eH\2\u037e\u037f\7M\2\2\u037f\u0386")
        buf.write("\7\u009f\2\2\u0380\u0381\7\21\2\2\u0381\u0382\5\u0092")
        buf.write("J\2\u0382\u0383\5\u0118\u008d\2\u0383\u0384\5\u0094K\2")
        buf.write("\u0384\u0387\3\2\2\2\u0385\u0387\5\u00e2r\2\u0386\u0380")
        buf.write("\3\2\2\2\u0386\u0385\3\2\2\2\u0387\61\3\2\2\2\u0388\u0389")
        buf.write("\5\\/\2\u0389\63\3\2\2\2\u038a\u038d\5\u00e6t\2\u038b")
        buf.write("\u038c\7M\2\2\u038c\u038e\5\u00e8u\2\u038d\u038b\3\2\2")
        buf.write("\2\u038d\u038e\3\2\2\2\u038e\65\3\2\2\2\u038f\u0390\5")
        buf.write("\u00f0y\2\u0390\u0392\5\u00dco\2\u0391\u0393\5(\25\2\u0392")
        buf.write("\u0391\3\2\2\2\u0392\u0393\3\2\2\2\u0393\u0396\3\2\2\2")
        buf.write("\u0394\u0395\7.\2\2\u0395\u0397\5\u0128\u0095\2\u0396")
        buf.write("\u0394\3\2\2\2\u0396\u0397\3\2\2\2\u0397\67\3\2\2\2\u0398")
        buf.write("\u03ad\5\u0086D\2\u0399\u03ad\5> \2\u039a\u03ad\5\u008a")
        buf.write("F\2\u039b\u03ad\5<\37\2\u039c\u03ad\5|?\2\u039d\u03ad")
        buf.write("\5:\36\2\u039e\u03ad\5X-\2\u039f\u03ad\5Z.\2\u03a0\u03ad")
        buf.write("\5N(\2\u03a1\u03ad\5D#\2\u03a2\u03ad\5H%\2\u03a3\u03ad")
        buf.write("\5L\'\2\u03a4\u03ad\5J&\2\u03a5\u03ad\5R*\2\u03a6\u03ad")
        buf.write("\5T+\2\u03a7\u03ad\5t;\2\u03a8\u03ad\5@!\2\u03a9\u03ad")
        buf.write("\5B\"\2\u03aa\u03ad\5,\27\2\u03ab\u03ad\5\u010c\u0087")
        buf.write("\2\u03ac\u0398\3\2\2\2\u03ac\u0399\3\2\2\2\u03ac\u039a")
        buf.write("\3\2\2\2\u03ac\u039b\3\2\2\2\u03ac\u039c\3\2\2\2\u03ac")
        buf.write("\u039d\3\2\2\2\u03ac\u039e\3\2\2\2\u03ac\u039f\3\2\2\2")
        buf.write("\u03ac\u03a0\3\2\2\2\u03ac\u03a1\3\2\2\2\u03ac\u03a2\3")
        buf.write("\2\2\2\u03ac\u03a3\3\2\2\2\u03ac\u03a4\3\2\2\2\u03ac\u03a5")
        buf.write("\3\2\2\2\u03ac\u03a6\3\2\2\2\u03ac\u03a7\3\2\2\2\u03ac")
        buf.write("\u03a8\3\2\2\2\u03ac\u03a9\3\2\2\2\u03ac\u03aa\3\2\2\2")
        buf.write("\u03ac\u03ab\3\2\2\2\u03ad9\3\2\2\2\u03ae\u03af\7o\2\2")
        buf.write("\u03af;\3\2\2\2\u03b0\u03b1\7`\2\2\u03b1\u03b5\5\u00bc")
        buf.write("_\2\u03b2\u03b3\7M\2\2\u03b3\u03b4\7\u0097\2\2\u03b4\u03b6")
        buf.write("\5\u00bc_\2\u03b5\u03b2\3\2\2\2\u03b5\u03b6\3\2\2\2\u03b6")
        buf.write("\u03ba\3\2\2\2\u03b7\u03b8\7\u0097\2\2\u03b8\u03ba\5\u00bc")
        buf.write("_\2\u03b9\u03b0\3\2\2\2\u03b9\u03b7\3\2\2\2\u03ba\u03c1")
        buf.write("\3\2\2\2\u03bb\u03bc\7\u009a\2\2\u03bc\u03bd\7\21\2\2")
        buf.write("\u03bd\u03be\5\u0092J\2\u03be\u03bf\5\u0116\u008c\2\u03bf")
        buf.write("\u03c0\5\u0094K\2\u03c0\u03c2\3\2\2\2\u03c1\u03bb\3\2")
        buf.write("\2\2\u03c1\u03c2\3\2\2\2\u03c2=\3\2\2\2\u03c3\u03c5\5")
        buf.write("^\60\2\u03c4\u03c6\5\u0080A\2\u03c5\u03c4\3\2\2\2\u03c5")
        buf.write("\u03c6\3\2\2\2\u03c6\u03d1\3\2\2\2\u03c7\u03ca\7\u009a")
        buf.write("\2\2\u03c8\u03c9\7\u00a1\2\2\u03c9\u03cb\5\u00dco\2\u03ca")
        buf.write("\u03c8\3\2\2\2\u03ca\u03cb\3\2\2\2\u03cb\u03cc\3\2\2\2")
        buf.write("\u03cc\u03cd\7\21\2\2\u03cd\u03ce\5\u0092J\2\u03ce\u03cf")
        buf.write("\5\u0116\u008c\2\u03cf\u03d0\5\u0094K\2\u03d0\u03d2\3")
        buf.write("\2\2\2\u03d1\u03c7\3\2\2\2\u03d1\u03d2\3\2\2\2\u03d2\u03d5")
        buf.write("\3\2\2\2\u03d3\u03d5\5b\62\2\u03d4\u03c3\3\2\2\2\u03d4")
        buf.write("\u03d3\3\2\2\2\u03d5?\3\2\2\2\u03d6\u03d7\7\u00a1\2\2")
        buf.write("\u03d7\u03d8\5\u013c\u009f\2\u03d8\u03d9\7\23\2\2\u03d9")
        buf.write("\u03da\7b\2\2\u03da\u03db\7\21\2\2\u03db\u03dc\5\u0092")
        buf.write("J\2\u03dc\u03dd\5\u0116\u008c\2\u03dd\u03de\5\u0094K\2")
        buf.write("\u03deA\3\2\2\2\u03df\u03e0\7\u00a1\2\2\u03e0\u03e1\5")
        buf.write("\u00e0q\2\u03e1\u03e2\7\23\2\2\u03e2\u03e3\7b\2\2\u03e3")
        buf.write("\u03e4\7\21\2\2\u03e4\u03e5\5\u0092J\2\u03e5\u03e6\5\u0116")
        buf.write("\u008c\2\u03e6\u03e7\5\u0094K\2\u03e7C\3\2\2\2\u03e8\u03e9")
        buf.write("\7\u0098\2\2\u03e9\u03ea\7\u0083\2\2\u03ea\u03eb\5\\/")
        buf.write("\2\u03eb\u03ec\7\21\2\2\u03ec\u03ed\5\u0092J\2\u03ed\u03f5")
        buf.write("\5\u011a\u008e\2\u03ee\u03ef\5\u008eH\2\u03ef\u03f0\7")
        buf.write("\u0089\2\2\u03f0\u03f1\7\21\2\2\u03f1\u03f2\5\u0092J\2")
        buf.write("\u03f2\u03f3\5\u0116\u008c\2\u03f3\u03f4\5\u0094K\2\u03f4")
        buf.write("\u03f6\3\2\2\2\u03f5\u03ee\3\2\2\2\u03f5\u03f6\3\2\2\2")
        buf.write("\u03f6\u03f7\3\2\2\2\u03f7\u03f8\5\u0094K\2\u03f8E\3\2")
        buf.write("\2\2\u03f9\u03fa\7\u00a2\2\2\u03fa\u03fb\5\u0120\u0091")
        buf.write("\2\u03fb\u03fc\7\21\2\2\u03fc\u03fd\5\u0092J\2\u03fd\u03fe")
        buf.write("\5\u0116\u008c\2\u03fe\u03ff\5\u0094K\2\u03ff\u0409\3")
        buf.write("\2\2\2\u0400\u0401\7\u00a2\2\2\u0401\u0402\7u\2\2\u0402")
        buf.write("\u0403\5\u011e\u0090\2\u0403\u0404\7\21\2\2\u0404\u0405")
        buf.write("\5\u0092J\2\u0405\u0406\5\u0116\u008c\2\u0406\u0407\5")
        buf.write("\u0094K\2\u0407\u0409\3\2\2\2\u0408\u03f9\3\2\2\2\u0408")
        buf.write("\u0400\3\2\2\2\u0409G\3\2\2\2\u040a\u040b\7p\2\2\u040b")
        buf.write("\u040c\7d\2\2\u040c\u040f\5\u00dco\2\u040d\u040e\7\23")
        buf.write("\2\2\u040e\u0410\5\u00dco\2\u040f\u040d\3\2\2\2\u040f")
        buf.write("\u0410\3\2\2\2\u0410\u0411\3\2\2\2\u0411\u0412\7u\2\2")
        buf.write("\u0412\u0413\5\\/\2\u0413\u0414\7\21\2\2\u0414\u0415\5")
        buf.write("\u0092J\2\u0415\u0416\5\u0116\u008c\2\u0416\u0417\5\u0094")
        buf.write("K\2\u0417I\3\2\2\2\u0418\u0419\7b\2\2\u0419\u041a\7\21")
        buf.write("\2\2\u041a\u041b\5\u0092J\2\u041b\u041c\5\u0116\u008c")
        buf.write("\2\u041c\u041d\5\u0094K\2\u041d\u041e\5\u008eH\2\u041e")
        buf.write("\u041f\7\u00a4\2\2\u041f\u0420\5\\/\2\u0420K\3\2\2\2\u0421")
        buf.write("\u0422\7\u00a4\2\2\u0422\u0423\5\\/\2\u0423\u0424\7\21")
        buf.write("\2\2\u0424\u0425\5\u0092J\2\u0425\u0426\5\u0116\u008c")
        buf.write("\2\u0426\u0427\5\u0094K\2\u0427M\3\2\2\2\u0428\u0429\7")
        buf.write("t\2\2\u0429\u042a\5\\/\2\u042a\u042b\7\21\2\2\u042b\u042c")
        buf.write("\5\u0092J\2\u042c\u042d\5\u0116\u008c\2\u042d\u0431\5")
        buf.write("\u0094K\2\u042e\u042f\5\u008eH\2\u042f\u0430\5P)\2\u0430")
        buf.write("\u0432\3\2\2\2\u0431\u042e\3\2\2\2\u0431\u0432\3\2\2\2")
        buf.write("\u0432\u043a\3\2\2\2\u0433\u0434\5\u008eH\2\u0434\u0435")
        buf.write("\7e\2\2\u0435\u0436\7\21\2\2\u0436\u0437\5\u0092J\2\u0437")
        buf.write("\u0438\5\u0116\u008c\2\u0438\u0439\5\u0094K\2\u0439\u043b")
        buf.write("\3\2\2\2\u043a\u0433\3\2\2\2\u043a\u043b\3\2\2\2\u043b")
        buf.write("O\3\2\2\2\u043c\u043d\b)\1\2\u043d\u043e\7e\2\2\u043e")
        buf.write("\u043f\7t\2\2\u043f\u0440\5\\/\2\u0440\u0441\7\21\2\2")
        buf.write("\u0441\u0442\5\u0092J\2\u0442\u0443\5\u0116\u008c\2\u0443")
        buf.write("\u0444\5\u0094K\2\u0444\u0451\3\2\2\2\u0445\u0446\f\3")
        buf.write("\2\2\u0446\u0447\5\u008eH\2\u0447\u0448\7e\2\2\u0448\u0449")
        buf.write("\7t\2\2\u0449\u044a\5\\/\2\u044a\u044b\7\21\2\2\u044b")
        buf.write("\u044c\5\u0092J\2\u044c\u044d\5\u0116\u008c\2\u044d\u044e")
        buf.write("\5\u0094K\2\u044e\u0450\3\2\2\2\u044f\u0445\3\2\2\2\u0450")
        buf.write("\u0453\3\2\2\2\u0451\u044f\3\2\2\2\u0451\u0452\3\2\2\2")
        buf.write("\u0452Q\3\2\2\2\u0453\u0451\3\2\2\2\u0454\u0455\7\u008b")
        buf.write("\2\2\u0455\u0456\5\\/\2\u0456S\3\2\2\2\u0457\u0458\7\u0098")
        buf.write("\2\2\u0458\u0459\7\u0083\2\2\u0459\u045a\5\u00dco\2\u045a")
        buf.write("\u045b\7c\2\2\u045b\u045c\7\21\2\2\u045c\u045d\5\u0092")
        buf.write("J\2\u045d\u045e\5\u0116\u008c\2\u045e\u045f\5\u0094K\2")
        buf.write("\u045f\u0461\5\u008cG\2\u0460\u0462\5\u011c\u008f\2\u0461")
        buf.write("\u0460\3\2\2\2\u0461\u0462\3\2\2\2\u0462\u046e\3\2\2\2")
        buf.write("\u0463\u0467\7\u0089\2\2\u0464\u0465\7\u00a2\2\2\u0465")
        buf.write("\u0467\7N\2\2\u0466\u0463\3\2\2\2\u0466\u0464\3\2\2\2")
        buf.write("\u0467\u0468\3\2\2\2\u0468\u0469\7\21\2\2\u0469\u046a")
        buf.write("\5\u0092J\2\u046a\u046b\5\u0116\u008c\2\u046b\u046c\5")
        buf.write("\u0094K\2\u046c\u046d\5\u008cG\2\u046d\u046f\3\2\2\2\u046e")
        buf.write("\u0466\3\2\2\2\u046e\u046f\3\2\2\2\u046f\u0477\3\2\2\2")
        buf.write("\u0470\u0471\7L\2\2\u0471\u0472\7\21\2\2\u0472\u0473\5")
        buf.write("\u0092J\2\u0473\u0474\5\u0116\u008c\2\u0474\u0475\5\u0094")
        buf.write("K\2\u0475\u0476\5\u008cG\2\u0476\u0478\3\2\2\2\u0477\u0470")
        buf.write("\3\2\2\2\u0477\u0478\3\2\2\2\u0478\u0479\3\2\2\2\u0479")
        buf.write("\u047a\5\u008cG\2\u047aU\3\2\2\2\u047b\u047c\7\u00a2\2")
        buf.write("\2\u047c\u047d\5\u00e2r\2\u047d\u047e\7\21\2\2\u047e\u047f")
        buf.write("\5\u0092J\2\u047f\u0480\5\u0116\u008c\2\u0480\u0481\5")
        buf.write("\u0094K\2\u0481\u0482\5\u008cG\2\u0482\u048f\3\2\2\2\u0483")
        buf.write("\u0484\7\u00a2\2\2\u0484\u0485\7u\2\2\u0485\u0486\7\30")
        buf.write("\2\2\u0486\u0487\5\u00b4[\2\u0487\u0488\7\31\2\2\u0488")
        buf.write("\u0489\7\21\2\2\u0489\u048a\5\u0092J\2\u048a\u048b\5\u0116")
        buf.write("\u008c\2\u048b\u048c\5\u0094K\2\u048c\u048d\5\u008cG\2")
        buf.write("\u048d\u048f\3\2\2\2\u048e\u047b\3\2\2\2\u048e\u0483\3")
        buf.write("\2\2\2\u048fW\3\2\2\2\u0490\u0491\7U\2\2\u0491Y\3\2\2")
        buf.write("\2\u0492\u0494\7\u008f\2\2\u0493\u0495\5\\/\2\u0494\u0493")
        buf.write("\3\2\2\2\u0494\u0495\3\2\2\2\u0495[\3\2\2\2\u0496\u0497")
        buf.write("\b/\1\2\u0497\u04b9\5\u01f2\u00fa\2\u0498\u04b9\5\u01d4")
        buf.write("\u00eb\2\u0499\u04b9\5h\65\2\u049a\u04b9\5\u0142\u00a2")
        buf.write("\2\u049b\u04b9\5^\60\2\u049c\u049f\5h\65\2\u049d\u049f")
        buf.write("\5^\60\2\u049e\u049c\3\2\2\2\u049e\u049d\3\2\2\2\u049f")
        buf.write("\u04a0\3\2\2\2\u04a0\u04a1\5\u0080A\2\u04a1\u04b9\3\2")
        buf.write("\2\2\u04a2\u04b9\5r:\2\u04a3\u04a4\7#\2\2\u04a4\u04b9")
        buf.write("\5\\/.\u04a5\u04a6\7\u0080\2\2\u04a6\u04b9\5\\/-\u04a7")
        buf.write("\u04a8\7A\2\2\u04a8\u04a9\7\21\2\2\u04a9\u04b9\5\\/\20")
        buf.write("\u04aa\u04ab\7i\2\2\u04ab\u04ac\7\21\2\2\u04ac\u04b9\5")
        buf.write("\u00dco\2\u04ad\u04ae\7@\2\2\u04ae\u04b9\5\u00d2j\2\u04af")
        buf.write("\u04b9\5p9\2\u04b0\u04b9\5n8\2\u04b1\u04b9\5l\67\2\u04b2")
        buf.write("\u04b9\5z>\2\u04b3\u04b9\5\u014a\u00a6\2\u04b4\u04b9\5")
        buf.write("\u014c\u00a7\2\u04b5\u04b9\5~@\2\u04b6\u04b9\5v<\2\u04b7")
        buf.write("\u04b9\5b\62\2\u04b8\u0496\3\2\2\2\u04b8\u0498\3\2\2\2")
        buf.write("\u04b8\u0499\3\2\2\2\u04b8\u049a\3\2\2\2\u04b8\u049b\3")
        buf.write("\2\2\2\u04b8\u049e\3\2\2\2\u04b8\u04a2\3\2\2\2\u04b8\u04a3")
        buf.write("\3\2\2\2\u04b8\u04a5\3\2\2\2\u04b8\u04a7\3\2\2\2\u04b8")
        buf.write("\u04aa\3\2\2\2\u04b8\u04ad\3\2\2\2\u04b8\u04af\3\2\2\2")
        buf.write("\u04b8\u04b0\3\2\2\2\u04b8\u04b1\3\2\2\2\u04b8\u04b2\3")
        buf.write("\2\2\2\u04b8\u04b3\3\2\2\2\u04b8\u04b4\3\2\2\2\u04b8\u04b5")
        buf.write("\3\2\2\2\u04b8\u04b6\3\2\2\2\u04b8\u04b7\3\2\2\2\u04b9")
        buf.write("\u052a\3\2\2\2\u04ba\u04bb\f,\2\2\u04bb\u04bc\5\u0162")
        buf.write("\u00b2\2\u04bc\u04bd\5\\/-\u04bd\u0529\3\2\2\2\u04be\u04bf")
        buf.write("\f+\2\2\u04bf\u04c0\5\u0164\u00b3\2\u04c0\u04c1\5\\/,")
        buf.write("\u04c1\u0529\3\2\2\2\u04c2\u04c3\f*\2\2\u04c3\u04c4\5")
        buf.write("\u0168\u00b5\2\u04c4\u04c5\5\\/+\u04c5\u0529\3\2\2\2\u04c6")
        buf.write("\u04c7\f)\2\2\u04c7\u04c8\5\u0166\u00b4\2\u04c8\u04c9")
        buf.write("\5\\/*\u04c9\u0529\3\2\2\2\u04ca\u04cb\f(\2\2\u04cb\u04cc")
        buf.write("\t\2\2\2\u04cc\u0529\5\\/)\u04cd\u04ce\f&\2\2\u04ce\u04cf")
        buf.write("\7*\2\2\u04cf\u0529\5\\/\'\u04d0\u04d1\f%\2\2\u04d1\u04d2")
        buf.write("\7+\2\2\u04d2\u0529\5\\/&\u04d3\u04d4\f$\2\2\u04d4\u04d5")
        buf.write("\7(\2\2\u04d5\u0529\5\\/%\u04d6\u04d7\f#\2\2\u04d7\u04d8")
        buf.write("\7)\2\2\u04d8\u0529\5\\/$\u04d9\u04da\f \2\2\u04da\u04db")
        buf.write("\7.\2\2\u04db\u0529\5\\/!\u04dc\u04dd\f\37\2\2\u04dd\u04de")
        buf.write("\7,\2\2\u04de\u0529\5\\/ \u04df\u04e0\f\36\2\2\u04e0\u04e1")
        buf.write("\7\62\2\2\u04e1\u0529\5\\/\37\u04e2\u04e3\f\35\2\2\u04e3")
        buf.write("\u04e4\7\\\2\2\u04e4\u0529\5\\/\36\u04e5\u04e6\f\34\2")
        buf.write("\2\u04e6\u04e7\7u\2\2\u04e7\u0529\5\\/\35\u04e8\u04e9")
        buf.write("\f\33\2\2\u04e9\u04ea\7s\2\2\u04ea\u0529\5\\/\34\u04eb")
        buf.write("\u04ec\f\32\2\2\u04ec\u04ed\7s\2\2\u04ed\u04ee\7K\2\2")
        buf.write("\u04ee\u0529\5\\/\33\u04ef\u04f0\f\31\2\2\u04f0\u04f1")
        buf.write("\7s\2\2\u04f1\u04f2\7N\2\2\u04f2\u0529\5\\/\32\u04f3\u04f4")
        buf.write("\f\30\2\2\u04f4\u04f5\7\u0080\2\2\u04f5\u04f6\7\\\2\2")
        buf.write("\u04f6\u0529\5\\/\31\u04f7\u04f8\f\27\2\2\u04f8\u04f9")
        buf.write("\7\u0080\2\2\u04f9\u04fa\7u\2\2\u04fa\u0529\5\\/\30\u04fb")
        buf.write("\u04fc\f\26\2\2\u04fc\u04fd\7\u0080\2\2\u04fd\u04fe\7")
        buf.write("s\2\2\u04fe\u0529\5\\/\27\u04ff\u0500\f\25\2\2\u0500\u0501")
        buf.write("\7\u0080\2\2\u0501\u0502\7s\2\2\u0502\u0503\7K\2\2\u0503")
        buf.write("\u0529\5\\/\26\u0504\u0505\f\24\2\2\u0505\u0506\7\u0080")
        buf.write("\2\2\u0506\u0507\7s\2\2\u0507\u0508\7N\2\2\u0508\u0529")
        buf.write("\5\\/\25\u0509\u050a\f\23\2\2\u050a\u050b\7\u0087\2\2")
        buf.write("\u050b\u0529\5\\/\24\u050c\u050d\f\22\2\2\u050d\u050e")
        buf.write("\7M\2\2\u050e\u0529\5\\/\23\u050f\u0510\f\21\2\2\u0510")
        buf.write("\u0511\7t\2\2\u0511\u0512\5\\/\2\u0512\u0513\7e\2\2\u0513")
        buf.write("\u0514\5\\/\22\u0514\u0529\3\2\2\2\u0515\u0516\f\3\2\2")
        buf.write("\u0516\u0517\7p\2\2\u0517\u0518\7d\2\2\u0518\u0519\5\u00dc")
        buf.write("o\2\u0519\u051a\7u\2\2\u051a\u051b\5\\/\4\u051b\u0529")
        buf.write("\3\2\2\2\u051c\u051d\f\'\2\2\u051d\u051e\7O\2\2\u051e")
        buf.write("\u0529\5\u00f0y\2\u051f\u0520\f\"\2\2\u0520\u0521\7x\2")
        buf.write("\2\u0521\u0522\7\u0080\2\2\u0522\u0529\5\u0140\u00a1\2")
        buf.write("\u0523\u0524\f!\2\2\u0524\u0525\7x\2\2\u0525\u0529\5\u0140")
        buf.write("\u00a1\2\u0526\u0527\f\n\2\2\u0527\u0529\5x=\2\u0528\u04ba")
        buf.write("\3\2\2\2\u0528\u04be\3\2\2\2\u0528\u04c2\3\2\2\2\u0528")
        buf.write("\u04c6\3\2\2\2\u0528\u04ca\3\2\2\2\u0528\u04cd\3\2\2\2")
        buf.write("\u0528\u04d0\3\2\2\2\u0528\u04d3\3\2\2\2\u0528\u04d6\3")
        buf.write("\2\2\2\u0528\u04d9\3\2\2\2\u0528\u04dc\3\2\2\2\u0528\u04df")
        buf.write("\3\2\2\2\u0528\u04e2\3\2\2\2\u0528\u04e5\3\2\2\2\u0528")
        buf.write("\u04e8\3\2\2\2\u0528\u04eb\3\2\2\2\u0528\u04ef\3\2\2\2")
        buf.write("\u0528\u04f3\3\2\2\2\u0528\u04f7\3\2\2\2\u0528\u04fb\3")
        buf.write("\2\2\2\u0528\u04ff\3\2\2\2\u0528\u0504\3\2\2\2\u0528\u0509")
        buf.write("\3\2\2\2\u0528\u050c\3\2\2\2\u0528\u050f\3\2\2\2\u0528")
        buf.write("\u0515\3\2\2\2\u0528\u051c\3\2\2\2\u0528\u051f\3\2\2\2")
        buf.write("\u0528\u0523\3\2\2\2\u0528\u0526\3\2\2\2\u0529\u052c\3")
        buf.write("\2\2\2\u052a\u0528\3\2\2\2\u052a\u052b\3\2\2\2\u052b]")
        buf.write("\3\2\2\2\u052c\u052a\3\2\2\2\u052d\u052e\b\60\1\2\u052e")
        buf.write("\u052f\5\u00dan\2\u052f\u0534\3\2\2\2\u0530\u0531\f\3")
        buf.write("\2\2\u0531\u0533\5`\61\2\u0532\u0530\3\2\2\2\u0533\u0536")
        buf.write("\3\2\2\2\u0534\u0532\3\2\2\2\u0534\u0535\3\2\2\2\u0535")
        buf.write("_\3\2\2\2\u0536\u0534\3\2\2\2\u0537\u0538\6\61#\3\u0538")
        buf.write("\u0539\7\25\2\2\u0539\u053a\5\u00dan\2\u053aa\3\2\2\2")
        buf.write("\u053b\u053c\7w\2\2\u053c\u053d\5\u00dco\2\u053d\u053e")
        buf.write("\5d\63\2\u053ec\3\2\2\2\u053f\u0540\6\63$\3\u0540e\3\2")
        buf.write("\2\2\u0541\u0546\5\u0126\u0094\2\u0542\u0546\5\u0128\u0095")
        buf.write("\2\u0543\u0546\5\u00dan\2\u0544\u0546\5\u0124\u0093\2")
        buf.write("\u0545\u0541\3\2\2\2\u0545\u0542\3\2\2\2\u0545\u0543\3")
        buf.write("\2\2\2\u0545\u0544\3\2\2\2\u0546g\3\2\2\2\u0547\u0548")
        buf.write("\b\65\1\2\u0548\u0549\5f\64\2\u0549\u054e\3\2\2\2\u054a")
        buf.write("\u054b\f\3\2\2\u054b\u054d\5j\66\2\u054c\u054a\3\2\2\2")
        buf.write("\u054d\u0550\3\2\2\2\u054e\u054c\3\2\2\2\u054e\u054f\3")
        buf.write("\2\2\2\u054fi\3\2\2\2\u0550\u054e\3\2\2\2\u0551\u0552")
        buf.write("\6\66&\3\u0552\u0553\7\25\2\2\u0553\u055f\5\u00dco\2\u0554")
        buf.write("\u0555\6\66\'\3\u0555\u0556\7\30\2\2\u0556\u0557\5\u013a")
        buf.write("\u009e\2\u0557\u0558\7\31\2\2\u0558\u055f\3\2\2\2\u0559")
        buf.write("\u055a\6\66(\3\u055a\u055b\7\30\2\2\u055b\u055c\5\\/\2")
        buf.write("\u055c\u055d\7\31\2\2\u055d\u055f\3\2\2\2\u055e\u0551")
        buf.write("\3\2\2\2\u055e\u0554\3\2\2\2\u055e\u0559\3\2\2\2\u055f")
        buf.write("k\3\2\2\2\u0560\u0561\b\67\1\2\u0561\u0562\7}\2\2\u0562")
        buf.write("\u0563\5\u00dan\2\u0563\u0568\3\2\2\2\u0564\u0565\f\3")
        buf.write("\2\2\u0565\u0567\5j\66\2\u0566\u0564\3\2\2\2\u0567\u056a")
        buf.write("\3\2\2\2\u0568\u0566\3\2\2\2\u0568\u0569\3\2\2\2\u0569")
        buf.write("m\3\2\2\2\u056a\u0568\3\2\2\2\u056b\u056e\7B\2\2\u056c")
        buf.write("\u056d\7q\2\2\u056d\u056f\5\\/\2\u056e\u056c\3\2\2\2\u056e")
        buf.write("\u056f\3\2\2\2\u056fo\3\2\2\2\u0570\u0571\7C\2\2\u0571")
        buf.write("\u0572\7q\2\2\u0572\u0573\5\\/\2\u0573q\3\2\2\2\u0574")
        buf.write("\u0575\5\u00c8e\2\u0575\u0576\7q\2\2\u0576\u057f\5\\/")
        buf.write("\2\u0577\u0579\7\23\2\2\u0578\u0577\3\2\2\2\u0578\u0579")
        buf.write("\3\2\2\2\u0579\u057a\3\2\2\2\u057a\u057d\5\u0082B\2\u057b")
        buf.write("\u057c\7M\2\2\u057c\u057e\5\u0084C\2\u057d\u057b\3\2\2")
        buf.write("\2\u057d\u057e\3\2\2\2\u057e\u0580\3\2\2\2\u057f\u0578")
        buf.write("\3\2\2\2\u057f\u0580\3\2\2\2\u0580\u058a\3\2\2\2\u0581")
        buf.write("\u0587\5\u00c8e\2\u0582\u0585\5\u0082B\2\u0583\u0584\7")
        buf.write("M\2\2\u0584\u0586\5\u0084C\2\u0585\u0583\3\2\2\2\u0585")
        buf.write("\u0586\3\2\2\2\u0586\u0588\3\2\2\2\u0587\u0582\3\2\2\2")
        buf.write("\u0587\u0588\3\2\2\2\u0588\u058a\3\2\2\2\u0589\u0574\3")
        buf.write("\2\2\2\u0589\u0581\3\2\2\2\u058as\3\2\2\2\u058b\u058c")
        buf.write("\7\u00a5\2\2\u058c\u058d\5\\/\2\u058d\u058e\7\u009d\2")
        buf.write("\2\u058e\u058f\5\\/\2\u058fu\3\2\2\2\u0590\u0591\5^\60")
        buf.write("\2\u0591\u0592\7#\2\2\u0592\u0593\5\\/\2\u0593w\3\2\2")
        buf.write("\2\u0594\u0597\7m\2\2\u0595\u0596\7\u00a1\2\2\u0596\u0598")
        buf.write("\5\u00dco\2\u0597\u0595\3\2\2\2\u0597\u0598\3\2\2\2\u0598")
        buf.write("\u0599\3\2\2\2\u0599\u059a\7\u00a3\2\2\u059a\u059b\5\\")
        buf.write("/\2\u059by\3\2\2\2\u059c\u059d\7l\2\2\u059d\u059f\7\u0084")
        buf.write("\2\2\u059e\u05a0\5\u00c8e\2\u059f\u059e\3\2\2\2\u059f")
        buf.write("\u05a0\3\2\2\2\u05a0\u05a1\3\2\2\2\u05a1\u05a2\7\u00a3")
        buf.write("\2\2\u05a2\u05c1\5\\/\2\u05a3\u05b5\7l\2\2\u05a4\u05a6")
        buf.write("\7K\2\2\u05a5\u05a7\5\u00c8e\2\u05a6\u05a5\3\2\2\2\u05a6")
        buf.write("\u05a7\3\2\2\2\u05a7\u05b6\3\2\2\2\u05a8\u05aa\5\u00c8")
        buf.write("e\2\u05a9\u05ab\7\u0091\2\2\u05aa\u05a9\3\2\2\2\u05aa")
        buf.write("\u05ab\3\2\2\2\u05ab\u05ac\3\2\2\2\u05ac\u05ad\5\\/\2")
        buf.write("\u05ad\u05ae\7\u009d\2\2\u05ae\u05af\5\\/\2\u05af\u05b6")
        buf.write("\3\2\2\2\u05b0\u05b1\7\u0091\2\2\u05b1\u05b2\5\\/\2\u05b2")
        buf.write("\u05b3\7\u009d\2\2\u05b3\u05b4\5\\/\2\u05b4\u05b6\3\2")
        buf.write("\2\2\u05b5\u05a4\3\2\2\2\u05b5\u05a8\3\2\2\2\u05b5\u05b0")
        buf.write("\3\2\2\2\u05b6\u05b9\3\2\2\2\u05b7\u05b8\7\u00a3\2\2\u05b8")
        buf.write("\u05ba\5\\/\2\u05b9\u05b7\3\2\2\2\u05b9\u05ba\3\2\2\2")
        buf.write("\u05ba\u05be\3\2\2\2\u05bb\u05bc\7\u0088\2\2\u05bc\u05bd")
        buf.write("\7V\2\2\u05bd\u05bf\5\u014e\u00a8\2\u05be\u05bb\3\2\2")
        buf.write("\2\u05be\u05bf\3\2\2\2\u05bf\u05c1\3\2\2\2\u05c0\u059c")
        buf.write("\3\2\2\2\u05c0\u05a3\3\2\2\2\u05c1{\3\2\2\2\u05c2\u05c3")
        buf.write("\7l\2\2\u05c3\u05c5\7\u0084\2\2\u05c4\u05c6\5\u00c8e\2")
        buf.write("\u05c5\u05c4\3\2\2\2\u05c5\u05c6\3\2\2\2\u05c6\u05c7\3")
        buf.write("\2\2\2\u05c7\u05c8\7\u00a3\2\2\u05c8\u05c9\5\\/\2\u05c9")
        buf.write("\u05ca\7\u009a\2\2\u05ca\u05cb\7\u00a1\2\2\u05cb\u05cc")
        buf.write("\5\u00dco\2\u05cc\u05cd\7\21\2\2\u05cd\u05ce\5\u0092J")
        buf.write("\2\u05ce\u05cf\5\u0116\u008c\2\u05cf\u05d0\5\u0094K\2")
        buf.write("\u05d0\u05f7\3\2\2\2\u05d1\u05e3\7l\2\2\u05d2\u05d4\7")
        buf.write("K\2\2\u05d3\u05d5\5\u00c8e\2\u05d4\u05d3\3\2\2\2\u05d4")
        buf.write("\u05d5\3\2\2\2\u05d5\u05e4\3\2\2\2\u05d6\u05d8\5\u00c8")
        buf.write("e\2\u05d7\u05d9\7\u0091\2\2\u05d8\u05d7\3\2\2\2\u05d8")
        buf.write("\u05d9\3\2\2\2\u05d9\u05da\3\2\2\2\u05da\u05db\5\\/\2")
        buf.write("\u05db\u05dc\7\u009d\2\2\u05dc\u05dd\5\\/\2\u05dd\u05e4")
        buf.write("\3\2\2\2\u05de\u05df\7\u0091\2\2\u05df\u05e0\5\\/\2\u05e0")
        buf.write("\u05e1\7\u009d\2\2\u05e1\u05e2\5\\/\2\u05e2\u05e4\3\2")
        buf.write("\2\2\u05e3\u05d2\3\2\2\2\u05e3\u05d6\3\2\2\2\u05e3\u05de")
        buf.write("\3\2\2\2\u05e4\u05e7\3\2\2\2\u05e5\u05e6\7\u00a3\2\2\u05e6")
        buf.write("\u05e8\5\\/\2\u05e7\u05e5\3\2\2\2\u05e7\u05e8\3\2\2\2")
        buf.write("\u05e8\u05ec\3\2\2\2\u05e9\u05ea\7\u0088\2\2\u05ea\u05eb")
        buf.write("\7V\2\2\u05eb\u05ed\5\u014e\u00a8\2\u05ec\u05e9\3\2\2")
        buf.write("\2\u05ec\u05ed\3\2\2\2\u05ed\u05ee\3\2\2\2\u05ee\u05ef")
        buf.write("\7\u009a\2\2\u05ef\u05f0\7\u00a1\2\2\u05f0\u05f1\5\u00dc")
        buf.write("o\2\u05f1\u05f2\7\21\2\2\u05f2\u05f3\5\u0092J\2\u05f3")
        buf.write("\u05f4\5\u0116\u008c\2\u05f4\u05f5\5\u0094K\2\u05f5\u05f7")
        buf.write("\3\2\2\2\u05f6\u05c2\3\2\2\2\u05f6\u05d1\3\2\2\2\u05f7")
        buf.write("}\3\2\2\2\u05f8\u05fa\7\u0095\2\2\u05f9\u05fb\7a\2\2\u05fa")
        buf.write("\u05f9\3\2\2\2\u05fa\u05fb\3\2\2\2\u05fb\u05fc\3\2\2\2")
        buf.write("\u05fc\u0602\5h\65\2\u05fd\u05fe\7\u00a1\2\2\u05fe\u05ff")
        buf.write("\5\u0148\u00a5\2\u05ff\u0600\7O\2\2\u0600\u0601\5\u0158")
        buf.write("\u00ad\2\u0601\u0603\3\2\2\2\u0602\u05fd\3\2\2\2\u0602")
        buf.write("\u0603\3\2\2\2\u0603\177\3\2\2\2\u0604\u0605\6A*\3\u0605")
        buf.write("\u060b\5\\/\2\u0606\u0609\5\u0082B\2\u0607\u0608\7M\2")
        buf.write("\2\u0608\u060a\5\u0084C\2\u0609\u0607\3\2\2\2\u0609\u060a")
        buf.write("\3\2\2\2\u060a\u060c\3\2\2\2\u060b\u0606\3\2\2\2\u060b")
        buf.write("\u060c\3\2\2\2\u060c\u0613\3\2\2\2\u060d\u0610\5\u0082")
        buf.write("B\2\u060e\u060f\7M\2\2\u060f\u0611\5\u0084C\2\u0610\u060e")
        buf.write("\3\2\2\2\u0610\u0611\3\2\2\2\u0611\u0613\3\2\2\2\u0612")
        buf.write("\u0604\3\2\2\2\u0612\u060d\3\2\2\2\u0613\u0081\3\2\2\2")
        buf.write("\u0614\u0615\bB\1\2\u0615\u0616\7\u00a1\2\2\u0616\u0617")
        buf.write("\5\u0084C\2\u0617\u061d\3\2\2\2\u0618\u0619\f\3\2\2\u0619")
        buf.write("\u061a\7\23\2\2\u061a\u061c\5\u0084C\2\u061b\u0618\3\2")
        buf.write("\2\2\u061c\u061f\3\2\2\2\u061d\u061b\3\2\2\2\u061d\u061e")
        buf.write("\3\2\2\2\u061e\u0083\3\2\2\2\u061f\u061d\3\2\2\2\u0620")
        buf.write("\u0621\5\\/\2\u0621\u0622\7O\2\2\u0622\u0624\3\2\2\2\u0623")
        buf.write("\u0620\3\2\2\2\u0623\u0624\3\2\2\2\u0624\u0625\3\2\2\2")
        buf.write("\u0625\u0626\5\u00dco\2\u0626\u0085\3\2\2\2\u0627\u0628")
        buf.write("\5\u013e\u00a0\2\u0628\u0629\5\u0160\u00b1\2\u0629\u062a")
        buf.write("\5\\/\2\u062a\u0087\3\2\2\2\u062b\u062c\6E,\3\u062c\u062d")
        buf.write("\7\25\2\2\u062d\u0634\5\u00dco\2\u062e\u062f\6E-\3\u062f")
        buf.write("\u0630\7\30\2\2\u0630\u0631\5\\/\2\u0631\u0632\7\31\2")
        buf.write("\2\u0632\u0634\3\2\2\2\u0633\u062b\3\2\2\2\u0633\u062e")
        buf.write("\3\2\2\2\u0634\u0089\3\2\2\2\u0635\u0636\5\u0106\u0084")
        buf.write("\2\u0636\u0637\5\u0160\u00b1\2\u0637\u0638\5\\/\2\u0638")
        buf.write("\u008b\3\2\2\2\u0639\u063b\7\7\2\2\u063a\u0639\3\2\2\2")
        buf.write("\u063b\u063e\3\2\2\2\u063c\u063a\3\2\2\2\u063c\u063d\3")
        buf.write("\2\2\2\u063d\u008d\3\2\2\2\u063e\u063c\3\2\2\2\u063f\u0641")
        buf.write("\7\7\2\2\u0640\u063f\3\2\2\2\u0641\u0642\3\2\2\2\u0642")
        buf.write("\u0640\3\2\2\2\u0642\u0643\3\2\2\2\u0643\u008f\3\2\2\2")
        buf.write("\u0644\u0646\t\3\2\2\u0645\u0644\3\2\2\2\u0646\u0649\3")
        buf.write("\2\2\2\u0647\u0645\3\2\2\2\u0647\u0648\3\2\2\2\u0648\u0091")
        buf.write("\3\2\2\2\u0649\u0647\3\2\2\2\u064a\u064c\7\7\2\2\u064b")
        buf.write("\u064a\3\2\2\2\u064c\u064d\3\2\2\2\u064d\u064b\3\2\2\2")
        buf.write("\u064d\u064e\3\2\2\2\u064e\u064f\3\2\2\2\u064f\u0650\7")
        buf.write("\3\2\2\u0650\u0093\3\2\2\2\u0651\u0653\7\7\2\2\u0652\u0651")
        buf.write("\3\2\2\2\u0653\u0656\3\2\2\2\u0654\u0652\3\2\2\2\u0654")
        buf.write("\u0655\3\2\2\2\u0655\u0657\3\2\2\2\u0656\u0654\3\2\2\2")
        buf.write("\u0657\u0658\7\4\2\2\u0658\u0095\3\2\2\2\u0659\u065a\7")
        buf.write("I\2\2\u065a\u065b\7\21\2\2\u065b\u065c\5\u00f0y\2\u065c")
        buf.write("\u0097\3\2\2\2\u065d\u065e\7\u0081\2\2\u065e\u0099\3\2")
        buf.write("\2\2\u065f\u0663\5\u00a0Q\2\u0660\u0663\58\35\2\u0661")
        buf.write("\u0663\5\\/\2\u0662\u065f\3\2\2\2\u0662\u0660\3\2\2\2")
        buf.write("\u0662\u0661\3\2\2\2\u0663\u009b\3\2\2\2\u0664\u0666\5")
        buf.write("\u009eP\2\u0665\u0664\3\2\2\2\u0665\u0666\3\2\2\2\u0666")
        buf.write("\u0667\3\2\2\2\u0667\u0668\5\u008cG\2\u0668\u0669\7\2")
        buf.write("\2\3\u0669\u009d\3\2\2\2\u066a\u0670\5\u00a0Q\2\u066b")
        buf.write("\u066c\5\u008eH\2\u066c\u066d\5\u00a0Q\2\u066d\u066f\3")
        buf.write("\2\2\2\u066e\u066b\3\2\2\2\u066f\u0672\3\2\2\2\u0670\u066e")
        buf.write("\3\2\2\2\u0670\u0671\3\2\2\2\u0671\u009f\3\2\2\2\u0672")
        buf.write("\u0670\3\2\2\2\u0673\u0674\5\u010c\u0087\2\u0674\u0675")
        buf.write("\5\u008eH\2\u0675\u0677\3\2\2\2\u0676\u0673\3\2\2\2\u0677")
        buf.write("\u067a\3\2\2\2\u0678\u0676\3\2\2\2\u0678\u0679\3\2\2\2")
        buf.write("\u0679\u0680\3\2\2\2\u067a\u0678\3\2\2\2\u067b\u067c\5")
        buf.write("\u00a2R\2\u067c\u067d\5\u008eH\2\u067d\u067f\3\2\2\2\u067e")
        buf.write("\u067b\3\2\2\2\u067f\u0682\3\2\2\2\u0680\u067e\3\2\2\2")
        buf.write("\u0680\u0681\3\2\2\2\u0681\u0689\3\2\2\2\u0682\u0680\3")
        buf.write("\2\2\2\u0683\u068a\5\n\6\2\u0684\u068a\5\u00ccg\2\u0685")
        buf.write("\u068a\5\u00acW\2\u0686\u068a\5\u00aeX\2\u0687\u068a\5")
        buf.write("\u00ceh\2\u0688\u068a\5\u010a\u0086\2\u0689\u0683\3\2")
        buf.write("\2\2\u0689\u0684\3\2\2\2\u0689\u0685\3\2\2\2\u0689\u0686")
        buf.write("\3\2\2\2\u0689\u0687\3\2\2\2\u0689\u0688\3\2\2\2\u068a")
        buf.write("\u00a1\3\2\2\2\u068b\u069a\5\u00a4S\2\u068c\u0696\7\26")
        buf.write("\2\2\u068d\u0697\5\u00aaV\2\u068e\u0693\5\u00a6T\2\u068f")
        buf.write("\u0690\7\23\2\2\u0690\u0692\5\u00a6T\2\u0691\u068f\3\2")
        buf.write("\2\2\u0692\u0695\3\2\2\2\u0693\u0691\3\2\2\2\u0693\u0694")
        buf.write("\3\2\2\2\u0694\u0697\3\2\2\2\u0695\u0693\3\2\2\2\u0696")
        buf.write("\u068d\3\2\2\2\u0696\u068e\3\2\2\2\u0697\u0698\3\2\2\2")
        buf.write("\u0698\u0699\7\27\2\2\u0699\u069b\3\2\2\2\u069a\u068c")
        buf.write("\3\2\2\2\u069a\u069b\3\2\2\2\u069b\u00a3\3\2\2\2\u069c")
        buf.write("\u069d\7\u00af\2\2\u069d\u00a5\3\2\2\2\u069e\u069f\5\u00a8")
        buf.write("U\2\u069f\u06a0\7.\2\2\u06a0\u06a1\5\u00aaV\2\u06a1\u00a7")
        buf.write("\3\2\2\2\u06a2\u06a3\t\4\2\2\u06a3\u00a9\3\2\2\2\u06a4")
        buf.write("\u06a7\5\u0128\u0095\2\u06a5\u06a7\5\u00c2b\2\u06a6\u06a4")
        buf.write("\3\2\2\2\u06a6\u06a5\3\2\2\2\u06a7\u00ab\3\2\2\2\u06a8")
        buf.write("\u06a9\5\"\22\2\u06a9\u00ad\3\2\2\2\u06aa\u06ad\5\2\2")
        buf.write("\2\u06ab\u06ad\5\4\3\2\u06ac\u06aa\3\2\2\2\u06ac\u06ab")
        buf.write("\3\2\2\2\u06ad\u00af\3\2\2\2\u06ae\u06b4\5\6\4\2\u06af")
        buf.write("\u06b0\5\u008eH\2\u06b0\u06b1\5\6\4\2\u06b1\u06b3\3\2")
        buf.write("\2\2\u06b2\u06af\3\2\2\2\u06b3\u06b6\3\2\2\2\u06b4\u06b2")
        buf.write("\3\2\2\2\u06b4\u06b5\3\2\2\2\u06b5\u00b1\3\2\2\2\u06b6")
        buf.write("\u06b4\3\2\2\2\u06b7\u06bd\5\b\5\2\u06b8\u06b9\5\u008e")
        buf.write("H\2\u06b9\u06ba\5\b\5\2\u06ba\u06bc\3\2\2\2\u06bb\u06b8")
        buf.write("\3\2\2\2\u06bc\u06bf\3\2\2\2\u06bd\u06bb\3\2\2\2\u06bd")
        buf.write("\u06be\3\2\2\2\u06be\u00b3\3\2\2\2\u06bf\u06bd\3\2\2\2")
        buf.write("\u06c0\u06c5\5\u00e2r\2\u06c1\u06c2\7\23\2\2\u06c2\u06c4")
        buf.write("\5\u00e2r\2\u06c3\u06c1\3\2\2\2\u06c4\u06c7\3\2\2\2\u06c5")
        buf.write("\u06c3\3\2\2\2\u06c5\u06c6\3\2\2\2\u06c6\u00b5\3\2\2\2")
        buf.write("\u06c7\u06c5\3\2\2\2\u06c8\u06c9\7u\2\2\u06c9\u06d3\5")
        buf.write("\u00b8]\2\u06ca\u06cb\7u\2\2\u06cb\u06d3\5\u00ba^\2\u06cc")
        buf.write("\u06cd\7u\2\2\u06cd\u06d3\5\u00be`\2\u06ce\u06cf\7y\2")
        buf.write("\2\u06cf\u06d3\7\u00b0\2\2\u06d0\u06d1\7y\2\2\u06d1\u06d3")
        buf.write("\5\\/\2\u06d2\u06c8\3\2\2\2\u06d2\u06ca\3\2\2\2\u06d2")
        buf.write("\u06cc\3\2\2\2\u06d2\u06ce\3\2\2\2\u06d2\u06d0\3\2\2\2")
        buf.write("\u06d3\u00b7\3\2\2\2\u06d4\u06d6\7}\2\2\u06d5\u06d4\3")
        buf.write("\2\2\2\u06d5\u06d6\3\2\2\2\u06d6\u06d7\3\2\2\2\u06d7\u06d9")
        buf.write("\7\30\2\2\u06d8\u06da\5\u00bc_\2\u06d9\u06d8\3\2\2\2\u06d9")
        buf.write("\u06da\3\2\2\2\u06da\u06db\3\2\2\2\u06db\u06dc\7\31\2")
        buf.write("\2\u06dc\u00b9\3\2\2\2\u06dd\u06df\7}\2\2\u06de\u06dd")
        buf.write("\3\2\2\2\u06de\u06df\3\2\2\2\u06df\u06e0\3\2\2\2\u06e0")
        buf.write("\u06e2\7*\2\2\u06e1\u06e3\5\u00bc_\2\u06e2\u06e1\3\2\2")
        buf.write("\2\u06e2\u06e3\3\2\2\2\u06e3\u06e4\3\2\2\2\u06e4\u06e5")
        buf.write("\7(\2\2\u06e5\u00bb\3\2\2\2\u06e6\u06eb\5\\/\2\u06e7\u06e8")
        buf.write("\7\23\2\2\u06e8\u06ea\5\\/\2\u06e9\u06e7\3\2\2\2\u06ea")
        buf.write("\u06ed\3\2\2\2\u06eb\u06e9\3\2\2\2\u06eb\u06ec\3\2\2\2")
        buf.write("\u06ec\u00bd\3\2\2\2\u06ed\u06eb\3\2\2\2\u06ee\u06ef\7")
        buf.write("\30\2\2\u06ef\u06f0\5\\/\2\u06f0\u06f1\7\24\2\2\u06f1")
        buf.write("\u06f2\5\\/\2\u06f2\u06f3\7\31\2\2\u06f3\u00bf\3\2\2\2")
        buf.write("\u06f4\u06f5\ba\1\2\u06f5\u0701\5\u00c2b\2\u06f6\u06f7")
        buf.write("\7G\2\2\u06f7\u06f8\7*\2\2\u06f8\u06f9\5\u00c0a\2\u06f9")
        buf.write("\u06fa\7(\2\2\u06fa\u0701\3\2\2\2\u06fb\u06fc\7F\2\2\u06fc")
        buf.write("\u06fd\7*\2\2\u06fd\u06fe\5\u00c0a\2\u06fe\u06ff\7(\2")
        buf.write("\2\u06ff\u0701\3\2\2\2\u0700\u06f4\3\2\2\2\u0700\u06f6")
        buf.write("\3\2\2\2\u0700\u06fb\3\2\2\2\u0701\u070b\3\2\2\2\u0702")
        buf.write("\u0703\f\7\2\2\u0703\u070a\7,\2\2\u0704\u0705\f\6\2\2")
        buf.write("\u0705\u0706\7\30\2\2\u0706\u070a\7\31\2\2\u0707\u0708")
        buf.write("\f\5\2\2\u0708\u070a\7-\2\2\u0709\u0702\3\2\2\2\u0709")
        buf.write("\u0704\3\2\2\2\u0709\u0707\3\2\2\2\u070a\u070d\3\2\2\2")
        buf.write("\u070b\u0709\3\2\2\2\u070b\u070c\3\2\2\2\u070c\u00c1\3")
        buf.write("\2\2\2\u070d\u070b\3\2\2\2\u070e\u0711\5\u00c4c\2\u070f")
        buf.write("\u0711\5\u00c6d\2\u0710\u070e\3\2\2\2\u0710\u070f\3\2")
        buf.write("\2\2\u0711\u00c3\3\2\2\2\u0712\u0723\7\66\2\2\u0713\u0723")
        buf.write("\7\67\2\2\u0714\u0723\78\2\2\u0715\u0723\7D\2\2\u0716")
        buf.write("\u0723\79\2\2\u0717\u0723\7:\2\2\u0718\u0723\7B\2\2\u0719")
        buf.write("\u0723\7;\2\2\u071a\u0723\7=\2\2\u071b\u0723\7<\2\2\u071c")
        buf.write("\u0723\7>\2\2\u071d\u0723\7?\2\2\u071e\u0723\7A\2\2\u071f")
        buf.write("\u0723\7C\2\2\u0720\u0723\7E\2\2\u0721\u0723\7H\2\2\u0722")
        buf.write("\u0712\3\2\2\2\u0722\u0713\3\2\2\2\u0722\u0714\3\2\2\2")
        buf.write("\u0722\u0715\3\2\2\2\u0722\u0716\3\2\2\2\u0722\u0717\3")
        buf.write("\2\2\2\u0722\u0718\3\2\2\2\u0722\u0719\3\2\2\2\u0722\u071a")
        buf.write("\3\2\2\2\u0722\u071b\3\2\2\2\u0722\u071c\3\2\2\2\u0722")
        buf.write("\u071d\3\2\2\2\u0722\u071e\3\2\2\2\u0722\u071f\3\2\2\2")
        buf.write("\u0722\u0720\3\2\2\2\u0722\u0721\3\2\2\2\u0723\u00c5\3")
        buf.write("\2\2\2\u0724\u0725\7\u00ab\2\2\u0725\u00c7\3\2\2\2\u0726")
        buf.write("\u0728\7}\2\2\u0727\u0726\3\2\2\2\u0727\u0728\3\2\2\2")
        buf.write("\u0728\u0729\3\2\2\2\u0729\u072a\5\u00c6d\2\u072a\u00c9")
        buf.write("\3\2\2\2\u072b\u072c\7A\2\2\u072c\u00cb\3\2\2\2\u072d")
        buf.write("\u0731\5\20\t\2\u072e\u0731\5 \21\2\u072f\u0731\5\22\n")
        buf.write("\2\u0730\u072d\3\2\2\2\u0730\u072e\3\2\2\2\u0730\u072f")
        buf.write("\3\2\2\2\u0731\u00cd\3\2\2\2\u0732\u0735\5\f\7\2\u0733")
        buf.write("\u0735\5\16\b\2\u0734\u0732\3\2\2\2\u0734\u0733\3\2\2")
        buf.write("\2\u0735\u00cf\3\2\2\2\u0736\u073b\5\u00e0q\2\u0737\u0738")
        buf.write("\7\23\2\2\u0738\u073a\5\u00e0q\2\u0739\u0737\3\2\2\2\u073a")
        buf.write("\u073d\3\2\2\2\u073b\u0739\3\2\2\2\u073b\u073c\3\2\2\2")
        buf.write("\u073c\u00d1\3\2\2\2\u073d\u073b\3\2\2\2\u073e\u0741\5")
        buf.write("\u00dco\2\u073f\u0741\5\u00e0q\2\u0740\u073e\3\2\2\2\u0740")
        buf.write("\u073f\3\2\2\2\u0741\u00d3\3\2\2\2\u0742\u0745\5\u00da")
        buf.write("n\2\u0743\u0745\5\u0154\u00ab\2\u0744\u0742\3\2\2\2\u0744")
        buf.write("\u0743\3\2\2\2\u0745\u00d5\3\2\2\2\u0746\u0747\6l\61\3")
        buf.write("\u0747\u0748\7#\2\2\u0748\u0749\5\u00d8m\2\u0749\u00d7")
        buf.write("\3\2\2\2\u074a\u074b\6m\62\3\u074b\u074c\5\u00d4k\2\u074c")
        buf.write("\u00d9\3\2\2\2\u074d\u0751\5\u00dco\2\u074e\u0751\5\u00e0")
        buf.write("q\2\u074f\u0751\5\u00e2r\2\u0750\u074d\3\2\2\2\u0750\u074e")
        buf.write("\3\2\2\2\u0750\u074f\3\2\2\2\u0751\u00db\3\2\2\2\u0752")
        buf.write("\u0753\7\u00ac\2\2\u0753\u00dd\3\2\2\2\u0754\u0755\t\5")
        buf.write("\2\2\u0755\u00df\3\2\2\2\u0756\u0757\7\u00ab\2\2\u0757")
        buf.write("\u00e1\3\2\2\2\u0758\u0759\7\u00aa\2\2\u0759\u00e3\3\2")
        buf.write("\2\2\u075a\u075b\t\6\2\2\u075b\u00e5\3\2\2\2\u075c\u0761")
        buf.write("\5\u00e8u\2\u075d\u075e\7\23\2\2\u075e\u0760\5\u00e8u")
        buf.write("\2\u075f\u075d\3\2\2\2\u0760\u0763\3\2\2\2\u0761\u075f")
        buf.write("\3\2\2\2\u0761\u0762\3\2\2\2\u0762\u00e7\3\2\2\2\u0763")
        buf.write("\u0761\3\2\2\2\u0764\u076a\5\u00eex\2\u0765\u0767\7}\2")
        buf.write("\2\u0766\u0765\3\2\2\2\u0766\u0767\3\2\2\2\u0767\u0768")
        buf.write("\3\2\2\2\u0768\u076a\5\u00eav\2\u0769\u0764\3\2\2\2\u0769")
        buf.write("\u0766\3\2\2\2\u076a\u00e9\3\2\2\2\u076b\u076e\5\u00ec")
        buf.write("w\2\u076c\u076e\5\66\34\2\u076d\u076b\3\2\2\2\u076d\u076c")
        buf.write("\3\2\2\2\u076e\u00eb\3\2\2\2\u076f\u0772\5\u00dco\2\u0770")
        buf.write("\u0771\7.\2\2\u0771\u0773\5\u0128\u0095\2\u0772\u0770")
        buf.write("\3\2\2\2\u0772\u0773\3\2\2\2\u0773\u00ed\3\2\2\2\u0774")
        buf.write("\u0775\5\u00caf\2\u0775\u0776\5\u00dco\2\u0776\u00ef\3")
        buf.write("\2\2\2\u0777\u077a\5\u00c0a\2\u0778\u077a\5\u00f2z\2\u0779")
        buf.write("\u0777\3\2\2\2\u0779\u0778\3\2\2\2\u077a\u00f1\3\2\2\2")
        buf.write("\u077b\u077c\bz\1\2\u077c\u077d\7N\2\2\u077d\u0786\3\2")
        buf.write("\2\2\u077e\u077f\f\4\2\2\u077f\u0780\7\30\2\2\u0780\u0785")
        buf.write("\7\31\2\2\u0781\u0782\f\3\2\2\u0782\u0783\7\32\2\2\u0783")
        buf.write("\u0785\7\33\2\2\u0784\u077e\3\2\2\2\u0784\u0781\3\2\2")
        buf.write("\2\u0785\u0788\3\2\2\2\u0786\u0784\3\2\2\2\u0786\u0787")
        buf.write("\3\2\2\2\u0787\u00f3\3\2\2\2\u0788\u0786\3\2\2\2\u0789")
        buf.write("\u078f\5\u00f6|\2\u078a\u078b\5\u008eH\2\u078b\u078c\5")
        buf.write("\u00f6|\2\u078c\u078e\3\2\2\2\u078d\u078a\3\2\2\2\u078e")
        buf.write("\u0791\3\2\2\2\u078f\u078d\3\2\2\2\u078f\u0790\3\2\2\2")
        buf.write("\u0790\u00f5\3\2\2\2\u0791\u078f\3\2\2\2\u0792\u0793\5")
        buf.write("\u010c\u0087\2\u0793\u0794\5\u008eH\2\u0794\u0796\3\2")
        buf.write("\2\2\u0795\u0792\3\2\2\2\u0796\u0799\3\2\2\2\u0797\u0795")
        buf.write("\3\2\2\2\u0797\u0798\3\2\2\2\u0798\u079f\3\2\2\2\u0799")
        buf.write("\u0797\3\2\2\2\u079a\u079b\5\u00a2R\2\u079b\u079c\5\u008e")
        buf.write("H\2\u079c\u079e\3\2\2\2\u079d\u079a\3\2\2\2\u079e\u07a1")
        buf.write("\3\2\2\2\u079f\u079d\3\2\2\2\u079f\u07a0\3\2\2\2\u07a0")
        buf.write("\u07a7\3\2\2\2\u07a1\u079f\3\2\2\2\u07a2\u07a8\5\30\r")
        buf.write("\2\u07a3\u07a8\5\34\17\2\u07a4\u07a8\5,\27\2\u07a5\u07a8")
        buf.write("\5*\26\2\u07a6\u07a8\5\26\f\2\u07a7\u07a2\3\2\2\2\u07a7")
        buf.write("\u07a3\3\2\2\2\u07a7\u07a4\3\2\2\2\u07a7\u07a5\3\2\2\2")
        buf.write("\u07a7\u07a6\3\2\2\2\u07a8\u00f7\3\2\2\2\u07a9\u07af\5")
        buf.write("\u00fa~\2\u07aa\u07ab\5\u008eH\2\u07ab\u07ac\5\u00fa~")
        buf.write("\2\u07ac\u07ae\3\2\2\2\u07ad\u07aa\3\2\2\2\u07ae\u07b1")
        buf.write("\3\2\2\2\u07af\u07ad\3\2\2\2\u07af\u07b0\3\2\2\2\u07b0")
        buf.write("\u00f9\3\2\2\2\u07b1\u07af\3\2\2\2\u07b2\u07b6\5\36\20")
        buf.write("\2\u07b3\u07b6\5\32\16\2\u07b4\u07b6\5.\30\2\u07b5\u07b2")
        buf.write("\3\2\2\2\u07b5\u07b3\3\2\2\2\u07b5\u07b4\3\2\2\2\u07b6")
        buf.write("\u00fb\3\2\2\2\u07b7\u07b8\7\13\2\2\u07b8\u07c2\5\u01b4")
        buf.write("\u00db\2\u07b9\u07ba\7\f\2\2\u07ba\u07c2\5\u01ce\u00e8")
        buf.write("\2\u07bb\u07bc\7\r\2\2\u07bc\u07c2\5\u00fe\u0080\2\u07bd")
        buf.write("\u07be\7\16\2\2\u07be\u07c2\5\u00fe\u0080\2\u07bf\u07c0")
        buf.write("\7\17\2\2\u07c0\u07c2\5\u0102\u0082\2\u07c1\u07b7\3\2")
        buf.write("\2\2\u07c1\u07b9\3\2\2\2\u07c1\u07bb\3\2\2\2\u07c1\u07bd")
        buf.write("\3\2\2\2\u07c1\u07bf\3\2\2\2\u07c2\u00fd\3\2\2\2\u07c3")
        buf.write("\u07c5\5\u00dan\2\u07c4\u07c6\5\u0100\u0081\2\u07c5\u07c4")
        buf.write("\3\2\2\2\u07c5\u07c6\3\2\2\2\u07c6\u00ff\3\2\2\2\u07c7")
        buf.write("\u07c8\7q\2\2\u07c8\u07c9\5\u015a\u00ae\2\u07c9\u07ca")
        buf.write("\7\21\2\2\u07ca\u07cf\5\u019c\u00cf\2\u07cb\u07cc\7\25")
        buf.write("\2\2\u07cc\u07ce\5\u019c\u00cf\2\u07cd\u07cb\3\2\2\2\u07ce")
        buf.write("\u07d1\3\2\2\2\u07cf\u07cd\3\2\2\2\u07cf\u07d0\3\2\2\2")
        buf.write("\u07d0\u0101\3\2\2\2\u07d1\u07cf\3\2\2\2\u07d2\u07d7\5")
        buf.write("\u0182\u00c2\2\u07d3\u07d4\7\25\2\2\u07d4\u07d6\5\u0182")
        buf.write("\u00c2\2\u07d5\u07d3\3\2\2\2\u07d6\u07d9\3\2\2\2\u07d7")
        buf.write("\u07d5\3\2\2\2\u07d7\u07d8\3\2\2\2\u07d8\u07db\3\2\2\2")
        buf.write("\u07d9\u07d7\3\2\2\2\u07da\u07dc\5\u0104\u0083\2\u07db")
        buf.write("\u07da\3\2\2\2\u07db\u07dc\3\2\2\2\u07dc\u0103\3\2\2\2")
        buf.write("\u07dd\u07de\7q\2\2\u07de\u07df\5\u015a\u00ae\2\u07df")
        buf.write("\u07e1\7\21\2\2\u07e0\u07e2\7%\2\2\u07e1\u07e0\3\2\2\2")
        buf.write("\u07e1\u07e2\3\2\2\2\u07e2\u07e3\3\2\2\2\u07e3\u07e8\5")
        buf.write("\u0182\u00c2\2\u07e4\u07e5\7%\2\2\u07e5\u07e7\5\u0182")
        buf.write("\u00c2\2\u07e6\u07e4\3\2\2\2\u07e7\u07ea\3\2\2\2\u07e8")
        buf.write("\u07e6\3\2\2\2\u07e8\u07e9\3\2\2\2\u07e9\u07ed\3\2\2\2")
        buf.write("\u07ea\u07e8\3\2\2\2\u07eb\u07ec\7\25\2\2\u07ec\u07ee")
        buf.write("\5\u0182\u00c2\2\u07ed\u07eb\3\2\2\2\u07ed\u07ee\3\2\2")
        buf.write("\2\u07ee\u0105\3\2\2\2\u07ef\u07f4\5\u00dco\2\u07f0\u07f1")
        buf.write("\7\23\2\2\u07f1\u07f3\5\u00dco\2\u07f2\u07f0\3\2\2\2\u07f3")
        buf.write("\u07f6\3\2\2\2\u07f4\u07f2\3\2\2\2\u07f4\u07f5\3\2\2\2")
        buf.write("\u07f5\u0107\3\2\2\2\u07f6\u07f4\3\2\2\2\u07f7\u07fc\5")
        buf.write("\u00dep\2\u07f8\u07f9\7\23\2\2\u07f9\u07fb\5\u00dep\2")
        buf.write("\u07fa\u07f8\3\2\2\2\u07fb\u07fe\3\2\2\2\u07fc\u07fa\3")
        buf.write("\2\2\2\u07fc\u07fd\3\2\2\2\u07fd\u0109\3\2\2\2\u07fe\u07fc")
        buf.write("\3\2\2\2\u07ff\u0804\5*\26\2\u0800\u0804\5,\27\2\u0801")
        buf.write("\u0804\5.\30\2\u0802\u0804\5\60\31\2\u0803\u07ff\3\2\2")
        buf.write("\2\u0803\u0800\3\2\2\2\u0803\u0801\3\2\2\2\u0803\u0802")
        buf.write("\3\2\2\2\u0804\u010b\3\2\2\2\u0805\u0806\7\n\2\2\u0806")
        buf.write("\u010d\3\2\2\2\u0807\u080d\5\u0110\u0089\2\u0808\u0809")
        buf.write("\5\u008eH\2\u0809\u080a\5\u0110\u0089\2\u080a\u080c\3")
        buf.write("\2\2\2\u080b\u0808\3\2\2\2\u080c\u080f\3\2\2\2\u080d\u080b")
        buf.write("\3\2\2\2\u080d\u080e\3\2\2\2\u080e\u010f\3\2\2\2\u080f")
        buf.write("\u080d\3\2\2\2\u0810\u0811\7\13\2\2\u0811\u081b\5\u019e")
        buf.write("\u00d0\2\u0812\u0813\7\f\2\2\u0813\u081b\5\u01ba\u00de")
        buf.write("\2\u0814\u0815\7\r\2\2\u0815\u081b\5\u0112\u008a\2\u0816")
        buf.write("\u0817\7\16\2\2\u0817\u081b\5\u0112\u008a\2\u0818\u0819")
        buf.write("\7\17\2\2\u0819\u081b\5\u0114\u008b\2\u081a\u0810\3\2")
        buf.write("\2\2\u081a\u0812\3\2\2\2\u081a\u0814\3\2\2\2\u081a\u0816")
        buf.write("\3\2\2\2\u081a\u0818\3\2\2\2\u081b\u0111\3\2\2\2\u081c")
        buf.write("\u081e\5\u0184\u00c3\2\u081d\u081f\7\22\2\2\u081e\u081d")
        buf.write("\3\2\2\2\u081e\u081f\3\2\2\2\u081f\u0821\3\2\2\2\u0820")
        buf.write("\u0822\5\u0100\u0081\2\u0821\u0820\3\2\2\2\u0821\u0822")
        buf.write("\3\2\2\2\u0822\u0113\3\2\2\2\u0823\u0825\5\u016a\u00b6")
        buf.write("\2\u0824\u0826\7\22\2\2\u0825\u0824\3\2\2\2\u0825\u0826")
        buf.write("\3\2\2\2\u0826\u0828\3\2\2\2\u0827\u0829\5\u0104\u0083")
        buf.write("\2\u0828\u0827\3\2\2\2\u0828\u0829\3\2\2\2\u0829\u0115")
        buf.write("\3\2\2\2\u082a\u0830\58\35\2\u082b\u082c\5\u008eH\2\u082c")
        buf.write("\u082d\58\35\2\u082d\u082f\3\2\2\2\u082e\u082b\3\2\2\2")
        buf.write("\u082f\u0832\3\2\2\2\u0830\u082e\3\2\2\2\u0830\u0831\3")
        buf.write("\2\2\2\u0831\u0117\3\2\2\2\u0832\u0830\3\2\2\2\u0833\u0839")
        buf.write("\5\62\32\2\u0834\u0835\5\u008eH\2\u0835\u0836\5\62\32")
        buf.write("\2\u0836\u0838\3\2\2\2\u0837\u0834\3\2\2\2\u0838\u083b")
        buf.write("\3\2\2\2\u0839\u0837\3\2\2\2\u0839\u083a\3\2\2\2\u083a")
        buf.write("\u0119\3\2\2\2\u083b\u0839\3\2\2\2\u083c\u0842\5F$\2\u083d")
        buf.write("\u083e\5\u008eH\2\u083e\u083f\5F$\2\u083f\u0841\3\2\2")
        buf.write("\2\u0840\u083d\3\2\2\2\u0841\u0844\3\2\2\2\u0842\u0840")
        buf.write("\3\2\2\2\u0842\u0843\3\2\2\2\u0843\u011b\3\2\2\2\u0844")
        buf.write("\u0842\3\2\2\2\u0845\u084b\5V,\2\u0846\u0847\5\u008eH")
        buf.write("\2\u0847\u0848\5V,\2\u0848\u084a\3\2\2\2\u0849\u0846\3")
        buf.write("\2\2\2\u084a\u084d\3\2\2\2\u084b\u0849\3\2\2\2\u084b\u084c")
        buf.write("\3\2\2\2\u084c\u011d\3\2\2\2\u084d\u084b\3\2\2\2\u084e")
        buf.write("\u084f\7\30\2\2\u084f\u0850\5\u0120\u0091\2\u0850\u0851")
        buf.write("\7\24\2\2\u0851\u0852\5\u0120\u0091\2\u0852\u0853\7\31")
        buf.write("\2\2\u0853\u085d\3\2\2\2\u0854\u0855\7\30\2\2\u0855\u0856")
        buf.write("\5\u0122\u0092\2\u0856\u0857\7\31\2\2\u0857\u085d\3\2")
        buf.write("\2\2\u0858\u0859\7*\2\2\u0859\u085a\5\u0122\u0092\2\u085a")
        buf.write("\u085b\7(\2\2\u085b\u085d\3\2\2\2\u085c\u084e\3\2\2\2")
        buf.write("\u085c\u0854\3\2\2\2\u085c\u0858\3\2\2\2\u085d\u011f\3")
        buf.write("\2\2\2\u085e\u086f\7\u00a8\2\2\u085f\u086f\7\u00a9\2\2")
        buf.write("\u0860\u086f\7\u00b2\2\2\u0861\u086f\7\u00b3\2\2\u0862")
        buf.write("\u086f\7\u00a7\2\2\u0863\u086f\7\u00b7\2\2\u0864\u086f")
        buf.write("\7\u00b6\2\2\u0865\u086f\7\u00b0\2\2\u0866\u086f\7\u00b4")
        buf.write("\2\2\u0867\u086f\7\u00b5\2\2\u0868\u086f\7\u00a6\2\2\u0869")
        buf.write("\u086f\7\u00b8\2\2\u086a\u086f\7\u00b9\2\2\u086b\u086f")
        buf.write("\7\u00b1\2\2\u086c\u086f\5\u0096L\2\u086d\u086f\5\u0098")
        buf.write("M\2\u086e\u085e\3\2\2\2\u086e\u085f\3\2\2\2\u086e\u0860")
        buf.write("\3\2\2\2\u086e\u0861\3\2\2\2\u086e\u0862\3\2\2\2\u086e")
        buf.write("\u0863\3\2\2\2\u086e\u0864\3\2\2\2\u086e\u0865\3\2\2\2")
        buf.write("\u086e\u0866\3\2\2\2\u086e\u0867\3\2\2\2\u086e\u0868\3")
        buf.write("\2\2\2\u086e\u0869\3\2\2\2\u086e\u086a\3\2\2\2\u086e\u086b")
        buf.write("\3\2\2\2\u086e\u086c\3\2\2\2\u086e\u086d\3\2\2\2\u086f")
        buf.write("\u0121\3\2\2\2\u0870\u0875\5\u0120\u0091\2\u0871\u0872")
        buf.write("\7\23\2\2\u0872\u0874\5\u0120\u0091\2\u0873\u0871\3\2")
        buf.write("\2\2\u0874\u0877\3\2\2\2\u0875\u0873\3\2\2\2\u0875\u0876")
        buf.write("\3\2\2\2\u0876\u0123\3\2\2\2\u0877\u0875\3\2\2\2\u0878")
        buf.write("\u0879\t\7\2\2\u0879\u0125\3\2\2\2\u087a\u087b\7\26\2")
        buf.write("\2\u087b\u087c\5\\/\2\u087c\u087d\7\27\2\2\u087d\u0127")
        buf.write("\3\2\2\2\u087e\u0881\5\u0120\u0091\2\u087f\u0881\5\u012a")
        buf.write("\u0096\2\u0880\u087e\3\2\2\2\u0880\u087f\3\2\2\2\u0881")
        buf.write("\u0129\3\2\2\2\u0882\u0889\5\u00be`\2\u0883\u0889\5\u00b8")
        buf.write("]\2\u0884\u0889\5\u00ba^\2\u0885\u0889\5\u012e\u0098\2")
        buf.write("\u0886\u0889\5\u0130\u0099\2\u0887\u0889\5\u012c\u0097")
        buf.write("\2\u0888\u0882\3\2\2\2\u0888\u0883\3\2\2\2\u0888\u0884")
        buf.write("\3\2\2\2\u0888\u0885\3\2\2\2\u0888\u0886\3\2\2\2\u0888")
        buf.write("\u0887\3\2\2\2\u0889\u012b\3\2\2\2\u088a\u088c\7}\2\2")
        buf.write("\u088b\u088a\3\2\2\2\u088b\u088c\3\2\2\2\u088c\u088d\3")
        buf.write("\2\2\2\u088d\u088f\7\26\2\2\u088e\u0890\5\u0132\u009a")
        buf.write("\2\u088f\u088e\3\2\2\2\u088f\u0890\3\2\2\2\u0890\u0891")
        buf.write("\3\2\2\2\u0891\u0892\7\27\2\2\u0892\u012d\3\2\2\2\u0893")
        buf.write("\u0895\7}\2\2\u0894\u0893\3\2\2\2\u0894\u0895\3\2\2\2")
        buf.write("\u0895\u089e\3\2\2\2\u0896\u0897\7*\2\2\u0897\u0898\5")
        buf.write("\u0134\u009b\2\u0898\u0899\7(\2\2\u0899\u089f\3\2\2\2")
        buf.write("\u089a\u089f\7-\2\2\u089b\u089c\7*\2\2\u089c\u089d\7\21")
        buf.write("\2\2\u089d\u089f\7(\2\2\u089e\u0896\3\2\2\2\u089e\u089a")
        buf.write("\3\2\2\2\u089e\u089b\3\2\2\2\u089f\u012f\3\2\2\2\u08a0")
        buf.write("\u08a2\7\32\2\2\u08a1\u08a3\5\u0134\u009b\2\u08a2\u08a1")
        buf.write("\3\2\2\2\u08a2\u08a3\3\2\2\2\u08a3\u08a4\3\2\2\2\u08a4")
        buf.write("\u08a5\7\33\2\2\u08a5\u0131\3\2\2\2\u08a6\u08a7\5\\/\2")
        buf.write("\u08a7\u08b0\7\23\2\2\u08a8\u08ad\5\\/\2\u08a9\u08aa\7")
        buf.write("\23\2\2\u08aa\u08ac\5\\/\2\u08ab\u08a9\3\2\2\2\u08ac\u08af")
        buf.write("\3\2\2\2\u08ad\u08ab\3\2\2\2\u08ad\u08ae\3\2\2\2\u08ae")
        buf.write("\u08b1\3\2\2\2\u08af\u08ad\3\2\2\2\u08b0\u08a8\3\2\2\2")
        buf.write("\u08b0\u08b1\3\2\2\2\u08b1\u0133\3\2\2\2\u08b2\u08b7\5")
        buf.write("\u0136\u009c\2\u08b3\u08b4\7\23\2\2\u08b4\u08b6\5\u0136")
        buf.write("\u009c\2\u08b5\u08b3\3\2\2\2\u08b6\u08b9\3\2\2\2\u08b7")
        buf.write("\u08b5\3\2\2\2\u08b7\u08b8\3\2\2\2\u08b8\u0135\3\2\2\2")
        buf.write("\u08b9\u08b7\3\2\2\2\u08ba\u08bb\5\u0138\u009d\2\u08bb")
        buf.write("\u08bc\7\21\2\2\u08bc\u08bd\5\\/\2\u08bd\u0137\3\2\2\2")
        buf.write("\u08be\u08c1\5\u00e4s\2\u08bf\u08c1\7\u00b0\2\2\u08c0")
        buf.write("\u08be\3\2\2\2\u08c0\u08bf\3\2\2\2\u08c1\u0139\3\2\2\2")
        buf.write("\u08c2\u08c3\5\\/\2\u08c3\u08c4\7\21\2\2\u08c4\u08c5\5")
        buf.write("\\/\2\u08c5\u08cc\3\2\2\2\u08c6\u08c7\5\\/\2\u08c7\u08c8")
        buf.write("\7\21\2\2\u08c8\u08cc\3\2\2\2\u08c9\u08ca\7\21\2\2\u08ca")
        buf.write("\u08cc\5\\/\2\u08cb\u08c2\3\2\2\2\u08cb\u08c6\3\2\2\2")
        buf.write("\u08cb\u08c9\3\2\2\2\u08cc\u013b\3\2\2\2\u08cd\u08ce\5")
        buf.write("\u00dco\2\u08ce\u08cf\5\u0160\u00b1\2\u08cf\u08d0\5\\")
        buf.write("/\2\u08d0\u013d\3\2\2\2\u08d1\u08d2\b\u00a0\1\2\u08d2")
        buf.write("\u08d3\5\u00dco\2\u08d3\u08d8\3\2\2\2\u08d4\u08d5\f\3")
        buf.write("\2\2\u08d5\u08d7\5\u0088E\2\u08d6\u08d4\3\2\2\2\u08d7")
        buf.write("\u08da\3\2\2\2\u08d8\u08d6\3\2\2\2\u08d8\u08d9\3\2\2\2")
        buf.write("\u08d9\u013f\3\2\2\2\u08da\u08d8\3\2\2\2\u08db\u08dc\6")
        buf.write("\u00a1\66\3\u08dc\u08dd\7\u00ac\2\2\u08dd\u08e0\5\u00f0")
        buf.write("y\2\u08de\u08e0\5\\/\2\u08df\u08db\3\2\2\2\u08df\u08de")
        buf.write("\3\2\2\2\u08e0\u0141\3\2\2\2\u08e1\u08e2\5\u0144\u00a3")
        buf.write("\2\u08e2\u08e3\5\\/\2\u08e3\u08ea\3\2\2\2\u08e4\u08e5")
        buf.write("\5\u0144\u00a3\2\u08e5\u08e6\7\32\2\2\u08e6\u08e7\5\u0116")
        buf.write("\u008c\2\u08e7\u08e8\7\33\2\2\u08e8\u08ea\3\2\2\2\u08e9")
        buf.write("\u08e1\3\2\2\2\u08e9\u08e4\3\2\2\2\u08ea\u0143\3\2\2\2")
        buf.write("\u08eb\u08ec\5\u0146\u00a4\2\u08ec\u08ed\5\u0090I\2\u08ed")
        buf.write("\u08ee\7\65\2\2\u08ee\u08ef\5\u0090I\2\u08ef\u0145\3\2")
        buf.write("\2\2\u08f0\u08f7\5\u00dco\2\u08f1\u08f3\7\26\2\2\u08f2")
        buf.write("\u08f4\5\u0106\u0084\2\u08f3\u08f2\3\2\2\2\u08f3\u08f4")
        buf.write("\3\2\2\2\u08f4\u08f5\3\2\2\2\u08f5\u08f7\7\27\2\2\u08f6")
        buf.write("\u08f0\3\2\2\2\u08f6\u08f1\3\2\2\2\u08f7\u0147\3\2\2\2")
        buf.write("\u08f8\u08fb\5h\65\2\u08f9\u08fb\5\u0142\u00a2\2\u08fa")
        buf.write("\u08f8\3\2\2\2\u08fa\u08f9\3\2\2\2\u08fb\u0149\3\2\2\2")
        buf.write("\u08fc\u08fd\7\u008c\2\2\u08fd\u08fe\7K\2\2\u08fe\u08ff")
        buf.write("\7q\2\2\u08ff\u0900\5\\/\2\u0900\u014b\3\2\2\2\u0901\u0902")
        buf.write("\7\u008c\2\2\u0902\u0903\7\u0084\2\2\u0903\u0904\7q\2")
        buf.write("\2\u0904\u0905\5\\/\2\u0905\u014d\3\2\2\2\u0906\u090b")
        buf.write("\5\u0150\u00a9\2\u0907\u0908\7\23\2\2\u0908\u090a\5\u0150")
        buf.write("\u00a9\2\u0909\u0907\3\2\2\2\u090a\u090d\3\2\2\2\u090b")
        buf.write("\u0909\3\2\2\2\u090b\u090c\3\2\2\2\u090c\u014f\3\2\2\2")
        buf.write("\u090d\u090b\3\2\2\2\u090e\u0913\5\u00dco\2\u090f\u0910")
        buf.write("\7\25\2\2\u0910\u0912\5\u00dco\2\u0911\u090f\3\2\2\2\u0912")
        buf.write("\u0915\3\2\2\2\u0913\u0911\3\2\2\2\u0913\u0914\3\2\2\2")
        buf.write("\u0914\u0917\3\2\2\2\u0915\u0913\3\2\2\2\u0916\u0918\t")
        buf.write("\b\2\2\u0917\u0916\3\2\2\2\u0917\u0918\3\2\2\2\u0918\u0151")
        buf.write("\3\2\2\2\u0919\u0920\7\"\2\2\u091a\u0920\7#\2\2\u091b")
        buf.write("\u0920\5\u0162\u00b2\2\u091c\u0920\5\u0164\u00b3\2\u091d")
        buf.write("\u0920\5\u0166\u00b4\2\u091e\u0920\5\u0168\u00b5\2\u091f")
        buf.write("\u0919\3\2\2\2\u091f\u091a\3\2\2\2\u091f\u091b\3\2\2\2")
        buf.write("\u091f\u091c\3\2\2\2\u091f\u091d\3\2\2\2\u091f\u091e\3")
        buf.write("\2\2\2\u0920\u0153\3\2\2\2\u0921\u0922\t\t\2\2\u0922\u0155")
        buf.write("\3\2\2\2\u0923\u0924\7\u00ac\2\2\u0924\u0925\6\u00ac\67")
        buf.write("\3\u0925\u0157\3\2\2\2\u0926\u0927\7\u00ac\2\2\u0927\u0928")
        buf.write("\6\u00ad8\3\u0928\u0159\3\2\2\2\u0929\u092a\7\u00ac\2")
        buf.write("\2\u092a\u092b\6\u00ae9\3\u092b\u015b\3\2\2\2\u092c\u092d")
        buf.write("\7\u00ac\2\2\u092d\u092e\6\u00af:\3\u092e\u015d\3\2\2")
        buf.write("\2\u092f\u0930\7\u00ac\2\2\u0930\u0931\6\u00b0;\3\u0931")
        buf.write("\u015f\3\2\2\2\u0932\u0933\7.\2\2\u0933\u0161\3\2\2\2")
        buf.write("\u0934\u0935\7$\2\2\u0935\u0163\3\2\2\2\u0936\u0937\7")
        buf.write("%\2\2\u0937\u0165\3\2\2\2\u0938\u0939\7&\2\2\u0939\u0167")
        buf.write("\3\2\2\2\u093a\u093b\t\n\2\2\u093b\u0169\3\2\2\2\u093c")
        buf.write("\u093d\7\u008f\2\2\u093d\u093e\5\u016c\u00b7\2\u093e\u093f")
        buf.write("\7\22\2\2\u093f\u0944\3\2\2\2\u0940\u0941\5\u016c\u00b7")
        buf.write("\2\u0941\u0942\7\22\2\2\u0942\u0944\3\2\2\2\u0943\u093c")
        buf.write("\3\2\2\2\u0943\u0940\3\2\2\2\u0944\u016b\3\2\2\2\u0945")
        buf.write("\u0946\b\u00b7\1\2\u0946\u0947\5\u016e\u00b8\2\u0947\u094c")
        buf.write("\3\2\2\2\u0948\u0949\f\3\2\2\u0949\u094b\5\u0174\u00bb")
        buf.write("\2\u094a\u0948\3\2\2\2\u094b\u094e\3\2\2\2\u094c\u094a")
        buf.write("\3\2\2\2\u094c\u094d\3\2\2\2\u094d\u016d\3\2\2\2\u094e")
        buf.write("\u094c\3\2\2\2\u094f\u0957\5\u0170\u00b9\2\u0950\u0957")
        buf.write("\5\u0172\u00ba\2\u0951\u0957\5\u017c\u00bf\2\u0952\u0957")
        buf.write("\5\u017e\u00c0\2\u0953\u0957\5\u0180\u00c1\2\u0954\u0957")
        buf.write("\5\u0176\u00bc\2\u0955\u0957\5\u017a\u00be\2\u0956\u094f")
        buf.write("\3\2\2\2\u0956\u0950\3\2\2\2\u0956\u0951\3\2\2\2\u0956")
        buf.write("\u0952\3\2\2\2\u0956\u0953\3\2\2\2\u0956\u0954\3\2\2\2")
        buf.write("\u0956\u0955\3\2\2\2\u0957\u016f\3\2\2\2\u0958\u0959\5")
        buf.write("\u0124\u0093\2\u0959\u0171\3\2\2\2\u095a\u095b\5\u0156")
        buf.write("\u00ac\2\u095b\u095c\5\u0176\u00bc\2\u095c\u0173\3\2\2")
        buf.write("\2\u095d\u095e\7\25\2\2\u095e\u0963\5\u0176\u00bc\2\u095f")
        buf.write("\u0960\7\25\2\2\u0960\u0963\5\u0182\u00c2\2\u0961\u0963")
        buf.write("\5\u017a\u00be\2\u0962\u095d\3\2\2\2\u0962\u095f\3\2\2")
        buf.write("\2\u0962\u0961\3\2\2\2\u0963\u0175\3\2\2\2\u0964\u0965")
        buf.write("\5\u0182\u00c2\2\u0965\u0967\7\26\2\2\u0966\u0968\5\u0178")
        buf.write("\u00bd\2\u0967\u0966\3\2\2\2\u0967\u0968\3\2\2\2\u0968")
        buf.write("\u0969\3\2\2\2\u0969\u096a\7\27\2\2\u096a\u0177\3\2\2")
        buf.write("\2\u096b\u096c\b\u00bd\1\2\u096c\u096d\5\u016c\u00b7\2")
        buf.write("\u096d\u0973\3\2\2\2\u096e\u096f\f\3\2\2\u096f\u0970\7")
        buf.write("\23\2\2\u0970\u0972\5\u016c\u00b7\2\u0971\u096e\3\2\2")
        buf.write("\2\u0972\u0975\3\2\2\2\u0973\u0971\3\2\2\2\u0973\u0974")
        buf.write("\3\2\2\2\u0974\u0179\3\2\2\2\u0975\u0973\3\2\2\2\u0976")
        buf.write("\u0977\7\30\2\2\u0977\u0978\5\u016c\u00b7\2\u0978\u0979")
        buf.write("\7\31\2\2\u0979\u017b\3\2\2\2\u097a\u097b\7\26\2\2\u097b")
        buf.write("\u097c\5\u016c\u00b7\2\u097c\u097d\7\27\2\2\u097d\u017d")
        buf.write("\3\2\2\2\u097e\u097f\5\u0182\u00c2\2\u097f\u017f\3\2\2")
        buf.write("\2\u0980\u0986\7\u00b2\2\2\u0981\u0986\7\u00b4\2\2\u0982")
        buf.write("\u0986\7\u00b0\2\2\u0983\u0986\7\u00a6\2\2\u0984\u0986")
        buf.write("\7\u00a7\2\2\u0985\u0980\3\2\2\2\u0985\u0981\3\2\2\2\u0985")
        buf.write("\u0982\3\2\2\2\u0985\u0983\3\2\2\2\u0985\u0984\3\2\2\2")
        buf.write("\u0986\u0181\3\2\2\2\u0987\u0988\t\13\2\2\u0988\u0183")
        buf.write("\3\2\2\2\u0989\u098a\7\u008f\2\2\u098a\u098d\5\u0186\u00c4")
        buf.write("\2\u098b\u098d\5\u0186\u00c4\2\u098c\u0989\3\2\2\2\u098c")
        buf.write("\u098b\3\2\2\2\u098d\u0185\3\2\2\2\u098e\u098f\b\u00c4")
        buf.write("\1\2\u098f\u0990\5\u0188\u00c5\2\u0990\u0995\3\2\2\2\u0991")
        buf.write("\u0992\f\3\2\2\u0992\u0994\5\u018c\u00c7\2\u0993\u0991")
        buf.write("\3\2\2\2\u0994\u0997\3\2\2\2\u0995\u0993\3\2\2\2\u0995")
        buf.write("\u0996\3\2\2\2\u0996\u0187\3\2\2\2\u0997\u0995\3\2\2\2")
        buf.write("\u0998\u099e\5\u018a\u00c6\2\u0999\u099e\5\u0196\u00cc")
        buf.write("\2\u099a\u099e\5\u0198\u00cd\2\u099b\u099e\5\u019a\u00ce")
        buf.write("\2\u099c\u099e\5\u018e\u00c8\2\u099d\u0998\3\2\2\2\u099d")
        buf.write("\u0999\3\2\2\2\u099d\u099a\3\2\2\2\u099d\u099b\3\2\2\2")
        buf.write("\u099d\u099c\3\2\2\2\u099e\u0189\3\2\2\2\u099f\u09a0\5")
        buf.write("\u0124\u0093\2\u09a0\u018b\3\2\2\2\u09a1\u09a2\7\25\2")
        buf.write("\2\u09a2\u09a8\5\u018e\u00c8\2\u09a3\u09a4\7\30\2\2\u09a4")
        buf.write("\u09a5\5\u0186\u00c4\2\u09a5\u09a6\7\31\2\2\u09a6\u09a8")
        buf.write("\3\2\2\2\u09a7\u09a1\3\2\2\2\u09a7\u09a3\3\2\2\2\u09a8")
        buf.write("\u018d\3\2\2\2\u09a9\u09aa\5\u019c\u00cf\2\u09aa\u09ac")
        buf.write("\7\26\2\2\u09ab\u09ad\5\u0190\u00c9\2\u09ac\u09ab\3\2")
        buf.write("\2\2\u09ac\u09ad\3\2\2\2\u09ad\u09ae\3\2\2\2\u09ae\u09af")
        buf.write("\7\27\2\2\u09af\u018f\3\2\2\2\u09b0\u09b7\5\u0192\u00ca")
        buf.write("\2\u09b1\u09b7\5\u0194\u00cb\2\u09b2\u09b3\5\u0192\u00ca")
        buf.write("\2\u09b3\u09b4\7\23\2\2\u09b4\u09b5\5\u0194\u00cb\2\u09b5")
        buf.write("\u09b7\3\2\2\2\u09b6\u09b0\3\2\2\2\u09b6\u09b1\3\2\2\2")
        buf.write("\u09b6\u09b2\3\2\2\2\u09b7\u0191\3\2\2\2\u09b8\u09b9\b")
        buf.write("\u00ca\1\2\u09b9\u09ba\5\u0186\u00c4\2\u09ba\u09c0\3\2")
        buf.write("\2\2\u09bb\u09bc\f\3\2\2\u09bc\u09bd\7\23\2\2\u09bd\u09bf")
        buf.write("\5\u0186\u00c4\2\u09be\u09bb\3\2\2\2\u09bf\u09c2\3\2\2")
        buf.write("\2\u09c0\u09be\3\2\2\2\u09c0\u09c1\3\2\2\2\u09c1\u0193")
        buf.write("\3\2\2\2\u09c2\u09c0\3\2\2\2\u09c3\u09c4\b\u00cb\1\2\u09c4")
        buf.write("\u09c5\5\u019c\u00cf\2\u09c5\u09c6\7.\2\2\u09c6\u09c7")
        buf.write("\5\u0186\u00c4\2\u09c7\u09d0\3\2\2\2\u09c8\u09c9\f\3\2")
        buf.write("\2\u09c9\u09ca\7\23\2\2\u09ca\u09cb\5\u019c\u00cf\2\u09cb")
        buf.write("\u09cc\7.\2\2\u09cc\u09cd\5\u0186\u00c4\2\u09cd\u09cf")
        buf.write("\3\2\2\2\u09ce\u09c8\3\2\2\2\u09cf\u09d2\3\2\2\2\u09d0")
        buf.write("\u09ce\3\2\2\2\u09d0\u09d1\3\2\2\2\u09d1\u0195\3\2\2\2")
        buf.write("\u09d2\u09d0\3\2\2\2\u09d3\u09d4\7\26\2\2\u09d4\u09d5")
        buf.write("\5\u0186\u00c4\2\u09d5\u09d6\7\27\2\2\u09d6\u0197\3\2")
        buf.write("\2\2\u09d7\u09d8\b\u00cd\1\2\u09d8\u09db\7\u00ae\2\2\u09d9")
        buf.write("\u09db\5\u019c\u00cf\2\u09da\u09d7\3\2\2\2\u09da\u09d9")
        buf.write("\3\2\2\2\u09db\u09e1\3\2\2\2\u09dc\u09dd\f\3\2\2\u09dd")
        buf.write("\u09de\7\25\2\2\u09de\u09e0\5\u019c\u00cf\2\u09df\u09dc")
        buf.write("\3\2\2\2\u09e0\u09e3\3\2\2\2\u09e1\u09df\3\2\2\2\u09e1")
        buf.write("\u09e2\3\2\2\2\u09e2\u0199\3\2\2\2\u09e3\u09e1\3\2\2\2")
        buf.write("\u09e4\u09ea\7\u00b2\2\2\u09e5\u09ea\7\u00b4\2\2\u09e6")
        buf.write("\u09ea\7\u00b0\2\2\u09e7\u09ea\7\u00a6\2\2\u09e8\u09ea")
        buf.write("\7\u00a7\2\2\u09e9\u09e4\3\2\2\2\u09e9\u09e5\3\2\2\2\u09e9")
        buf.write("\u09e6\3\2\2\2\u09e9\u09e7\3\2\2\2\u09e9\u09e8\3\2\2\2")
        buf.write("\u09ea\u019b\3\2\2\2\u09eb\u09ec\t\f\2\2\u09ec\u019d\3")
        buf.write("\2\2\2\u09ed\u09ee\7\u008f\2\2\u09ee\u09ef\5\u01a0\u00d1")
        buf.write("\2\u09ef\u09f0\7\22\2\2\u09f0\u09f5\3\2\2\2\u09f1\u09f2")
        buf.write("\5\u01a0\u00d1\2\u09f2\u09f3\7\22\2\2\u09f3\u09f5\3\2")
        buf.write("\2\2\u09f4\u09ed\3\2\2\2\u09f4\u09f1\3\2\2\2\u09f5\u019f")
        buf.write("\3\2\2\2\u09f6\u09f7\b\u00d1\1\2\u09f7\u09f8\5\u01a2\u00d2")
        buf.write("\2\u09f8\u09fd\3\2\2\2\u09f9\u09fa\f\3\2\2\u09fa\u09fc")
        buf.write("\5\u01a8\u00d5\2\u09fb\u09f9\3\2\2\2\u09fc\u09ff\3\2\2")
        buf.write("\2\u09fd\u09fb\3\2\2\2\u09fd\u09fe\3\2\2\2\u09fe\u01a1")
        buf.write("\3\2\2\2\u09ff\u09fd\3\2\2\2\u0a00\u0a06\5\u01a4\u00d3")
        buf.write("\2\u0a01\u0a06\5\u01a6\u00d4\2\u0a02\u0a06\5\u01b0\u00d9")
        buf.write("\2\u0a03\u0a06\5\u01b2\u00da\2\u0a04\u0a06\5\u01b6\u00dc")
        buf.write("\2\u0a05\u0a00\3\2\2\2\u0a05\u0a01\3\2\2\2\u0a05\u0a02")
        buf.write("\3\2\2\2\u0a05\u0a03\3\2\2\2\u0a05\u0a04\3\2\2\2\u0a06")
        buf.write("\u01a3\3\2\2\2\u0a07\u0a08\5\u0124\u0093\2\u0a08\u01a5")
        buf.write("\3\2\2\2\u0a09\u0a0a\5\u0156\u00ac\2\u0a0a\u0a0b\5\u01aa")
        buf.write("\u00d6\2\u0a0b\u01a7\3\2\2\2\u0a0c\u0a0d\7\25\2\2\u0a0d")
        buf.write("\u0a10\5\u01aa\u00d6\2\u0a0e\u0a10\5\u01ae\u00d8\2\u0a0f")
        buf.write("\u0a0c\3\2\2\2\u0a0f\u0a0e\3\2\2\2\u0a10\u01a9\3\2\2\2")
        buf.write("\u0a11\u0a12\5\u01b8\u00dd\2\u0a12\u0a14\7\26\2\2\u0a13")
        buf.write("\u0a15\5\u01ac\u00d7\2\u0a14\u0a13\3\2\2\2\u0a14\u0a15")
        buf.write("\3\2\2\2\u0a15\u0a16\3\2\2\2\u0a16\u0a17\7\27\2\2\u0a17")
        buf.write("\u01ab\3\2\2\2\u0a18\u0a19\b\u00d7\1\2\u0a19\u0a1a\5\u01a0")
        buf.write("\u00d1\2\u0a1a\u0a20\3\2\2\2\u0a1b\u0a1c\f\3\2\2\u0a1c")
        buf.write("\u0a1d\7\23\2\2\u0a1d\u0a1f\5\u01a0\u00d1\2\u0a1e\u0a1b")
        buf.write("\3\2\2\2\u0a1f\u0a22\3\2\2\2\u0a20\u0a1e\3\2\2\2\u0a20")
        buf.write("\u0a21\3\2\2\2\u0a21\u01ad\3\2\2\2\u0a22\u0a20\3\2\2\2")
        buf.write("\u0a23\u0a24\7\30\2\2\u0a24\u0a25\5\u01a0\u00d1\2\u0a25")
        buf.write("\u0a26\7\31\2\2\u0a26\u01af\3\2\2\2\u0a27\u0a28\7\26\2")
        buf.write("\2\u0a28\u0a29\5\u01a0\u00d1\2\u0a29\u0a2a\7\27\2\2\u0a2a")
        buf.write("\u01b1\3\2\2\2\u0a2b\u0a2c\b\u00da\1\2\u0a2c\u0a2d\5\u01b8")
        buf.write("\u00dd\2\u0a2d\u0a33\3\2\2\2\u0a2e\u0a2f\f\3\2\2\u0a2f")
        buf.write("\u0a30\7\25\2\2\u0a30\u0a32\5\u01b8\u00dd\2\u0a31\u0a2e")
        buf.write("\3\2\2\2\u0a32\u0a35\3\2\2\2\u0a33\u0a31\3\2\2\2\u0a33")
        buf.write("\u0a34\3\2\2\2\u0a34\u01b3\3\2\2\2\u0a35\u0a33\3\2\2\2")
        buf.write("\u0a36\u0a37\b\u00db\1\2\u0a37\u0a38\5\u01b2\u00da\2\u0a38")
        buf.write("\u0a3d\3\2\2\2\u0a39\u0a3a\f\3\2\2\u0a3a\u0a3c\7\u00ae")
        buf.write("\2\2\u0a3b\u0a39\3\2\2\2\u0a3c\u0a3f\3\2\2\2\u0a3d\u0a3b")
        buf.write("\3\2\2\2\u0a3d\u0a3e\3\2\2\2\u0a3e\u01b5\3\2\2\2\u0a3f")
        buf.write("\u0a3d\3\2\2\2\u0a40\u0a46\7\u00b2\2\2\u0a41\u0a46\7\u00b4")
        buf.write("\2\2\u0a42\u0a46\7\u00b0\2\2\u0a43\u0a46\7\u00a6\2\2\u0a44")
        buf.write("\u0a46\7\u00a7\2\2\u0a45\u0a40\3\2\2\2\u0a45\u0a41\3\2")
        buf.write("\2\2\u0a45\u0a42\3\2\2\2\u0a45\u0a43\3\2\2\2\u0a45\u0a44")
        buf.write("\3\2\2\2\u0a46\u01b7\3\2\2\2\u0a47\u0a48\t\r\2\2\u0a48")
        buf.write("\u01b9\3\2\2\2\u0a49\u0a4a\7\u008f\2\2\u0a4a\u0a4b\5\u01bc")
        buf.write("\u00df\2\u0a4b\u0a4c\7\22\2\2\u0a4c\u0a51\3\2\2\2\u0a4d")
        buf.write("\u0a4e\5\u01bc\u00df\2\u0a4e\u0a4f\7\22\2\2\u0a4f\u0a51")
        buf.write("\3\2\2\2\u0a50\u0a49\3\2\2\2\u0a50\u0a4d\3\2\2\2\u0a51")
        buf.write("\u01bb\3\2\2\2\u0a52\u0a53\b\u00df\1\2\u0a53\u0a54\5\u01be")
        buf.write("\u00e0\2\u0a54\u0a59\3\2\2\2\u0a55\u0a56\f\3\2\2\u0a56")
        buf.write("\u0a58\5\u01c4\u00e3\2\u0a57\u0a55\3\2\2\2\u0a58\u0a5b")
        buf.write("\3\2\2\2\u0a59\u0a57\3\2\2\2\u0a59\u0a5a\3\2\2\2\u0a5a")
        buf.write("\u01bd\3\2\2\2\u0a5b\u0a59\3\2\2\2\u0a5c\u0a62\5\u01c0")
        buf.write("\u00e1\2\u0a5d\u0a62\5\u01c2\u00e2\2\u0a5e\u0a62\5\u01cc")
        buf.write("\u00e7\2\u0a5f\u0a62\5\u01ce\u00e8\2\u0a60\u0a62\5\u01d0")
        buf.write("\u00e9\2\u0a61\u0a5c\3\2\2\2\u0a61\u0a5d\3\2\2\2\u0a61")
        buf.write("\u0a5e\3\2\2\2\u0a61\u0a5f\3\2\2\2\u0a61\u0a60\3\2\2\2")
        buf.write("\u0a62\u01bf\3\2\2\2\u0a63\u0a64\5\u0124\u0093\2\u0a64")
        buf.write("\u01c1\3\2\2\2\u0a65\u0a66\5\u0156\u00ac\2\u0a66\u0a67")
        buf.write("\5\u01c6\u00e4\2\u0a67\u01c3\3\2\2\2\u0a68\u0a69\7\25")
        buf.write("\2\2\u0a69\u0a6c\5\u01c6\u00e4\2\u0a6a\u0a6c\5\u01ca\u00e6")
        buf.write("\2\u0a6b\u0a68\3\2\2\2\u0a6b\u0a6a\3\2\2\2\u0a6c\u01c5")
        buf.write("\3\2\2\2\u0a6d\u0a6e\5\u01d2\u00ea\2\u0a6e\u0a70\7\26")
        buf.write("\2\2\u0a6f\u0a71\5\u01c8\u00e5\2\u0a70\u0a6f\3\2\2\2\u0a70")
        buf.write("\u0a71\3\2\2\2\u0a71\u0a72\3\2\2\2\u0a72\u0a73\7\27\2")
        buf.write("\2\u0a73\u01c7\3\2\2\2\u0a74\u0a75\b\u00e5\1\2\u0a75\u0a76")
        buf.write("\5\u01bc\u00df\2\u0a76\u0a7c\3\2\2\2\u0a77\u0a78\f\3\2")
        buf.write("\2\u0a78\u0a79\7\23\2\2\u0a79\u0a7b\5\u01bc\u00df\2\u0a7a")
        buf.write("\u0a77\3\2\2\2\u0a7b\u0a7e\3\2\2\2\u0a7c\u0a7a\3\2\2\2")
        buf.write("\u0a7c\u0a7d\3\2\2\2\u0a7d\u01c9\3\2\2\2\u0a7e\u0a7c\3")
        buf.write("\2\2\2\u0a7f\u0a80\7\30\2\2\u0a80\u0a81\5\u01bc\u00df")
        buf.write("\2\u0a81\u0a82\7\31\2\2\u0a82\u01cb\3\2\2\2\u0a83\u0a84")
        buf.write("\7\26\2\2\u0a84\u0a85\5\u01bc\u00df\2\u0a85\u0a86\7\27")
        buf.write("\2\2\u0a86\u01cd\3\2\2\2\u0a87\u0a88\b\u00e8\1\2\u0a88")
        buf.write("\u0a8b\7\u00ae\2\2\u0a89\u0a8b\5\u01d2\u00ea\2\u0a8a\u0a87")
        buf.write("\3\2\2\2\u0a8a\u0a89\3\2\2\2\u0a8b\u0a91\3\2\2\2\u0a8c")
        buf.write("\u0a8d\f\3\2\2\u0a8d\u0a8e\7\25\2\2\u0a8e\u0a90\5\u01d2")
        buf.write("\u00ea\2\u0a8f\u0a8c\3\2\2\2\u0a90\u0a93\3\2\2\2\u0a91")
        buf.write("\u0a8f\3\2\2\2\u0a91\u0a92\3\2\2\2\u0a92\u01cf\3\2\2\2")
        buf.write("\u0a93\u0a91\3\2\2\2\u0a94\u0a9a\7\u00b2\2\2\u0a95\u0a9a")
        buf.write("\7\u00b4\2\2\u0a96\u0a9a\7\u00b0\2\2\u0a97\u0a9a\7\u00a6")
        buf.write("\2\2\u0a98\u0a9a\7\u00a7\2\2\u0a99\u0a94\3\2\2\2\u0a99")
        buf.write("\u0a95\3\2\2\2\u0a99\u0a96\3\2\2\2\u0a99\u0a97\3\2\2\2")
        buf.write("\u0a99\u0a98\3\2\2\2\u0a9a\u01d1\3\2\2\2\u0a9b\u0a9c\t")
        buf.write("\16\2\2\u0a9c\u01d3\3\2\2\2\u0a9d\u0aa0\5\u01d6\u00ec")
        buf.write("\2\u0a9e\u0aa0\5\u01d8\u00ed\2\u0a9f\u0a9d\3\2\2\2\u0a9f")
        buf.write("\u0a9e\3\2\2\2\u0aa0\u01d5\3\2\2\2\u0aa1\u0aa9\5\u01de")
        buf.write("\u00f0\2\u0aa2\u0aa4\5\u01e0\u00f1\2\u0aa3\u0aa5\5\u01ec")
        buf.write("\u00f7\2\u0aa4\u0aa3\3\2\2\2\u0aa4\u0aa5\3\2\2\2\u0aa5")
        buf.write("\u0aa6\3\2\2\2\u0aa6\u0aa7\5\u01e2\u00f2\2\u0aa7\u0aa9")
        buf.write("\3\2\2\2\u0aa8\u0aa1\3\2\2\2\u0aa8\u0aa2\3\2\2\2\u0aa9")
        buf.write("\u01d7\3\2\2\2\u0aaa\u0aac\5\u01da\u00ee\2\u0aab\u0aad")
        buf.write("\5\u01ec\u00f7\2\u0aac\u0aab\3\2\2\2\u0aac\u0aad\3\2\2")
        buf.write("\2\u0aad\u0aae\3\2\2\2\u0aae\u0aaf\5\u01dc\u00ef\2\u0aaf")
        buf.write("\u01d9\3\2\2\2\u0ab0\u0ab1\7*\2\2\u0ab1\u0ab4\7(\2\2\u0ab2")
        buf.write("\u0ab4\7,\2\2\u0ab3\u0ab0\3\2\2\2\u0ab3\u0ab2\3\2\2\2")
        buf.write("\u0ab4\u01db\3\2\2\2\u0ab5\u0ab6\7*\2\2\u0ab6\u0ab7\7")
        buf.write("%\2\2\u0ab7\u0ab8\7(\2\2\u0ab8\u01dd\3\2\2\2\u0ab9\u0aba")
        buf.write("\7*\2\2\u0aba\u0abb\5\u01e4\u00f3\2\u0abb\u0abf\5\u0090")
        buf.write("I\2\u0abc\u0abe\5\u01e8\u00f5\2\u0abd\u0abc\3\2\2\2\u0abe")
        buf.write("\u0ac1\3\2\2\2\u0abf\u0abd\3\2\2\2\u0abf\u0ac0\3\2\2\2")
        buf.write("\u0ac0\u0ac2\3\2\2\2\u0ac1\u0abf\3\2\2\2\u0ac2\u0ac3\7")
        buf.write("%\2\2\u0ac3\u0ac4\7(\2\2\u0ac4\u01df\3\2\2\2\u0ac5\u0ac6")
        buf.write("\7*\2\2\u0ac6\u0ac7\5\u01e4\u00f3\2\u0ac7\u0acb\5\u0090")
        buf.write("I\2\u0ac8\u0aca\5\u01e8\u00f5\2\u0ac9\u0ac8\3\2\2\2\u0aca")
        buf.write("\u0acd\3\2\2\2\u0acb\u0ac9\3\2\2\2\u0acb\u0acc\3\2\2\2")
        buf.write("\u0acc\u0ace\3\2\2\2\u0acd\u0acb\3\2\2\2\u0ace\u0acf\7")
        buf.write("(\2\2\u0acf\u01e1\3\2\2\2\u0ad0\u0ad1\7*\2\2\u0ad1\u0ad2")
        buf.write("\7%\2\2\u0ad2\u0ad3\5\u01e4\u00f3\2\u0ad3\u0ad4\7(\2\2")
        buf.write("\u0ad4\u01e3\3\2\2\2\u0ad5\u0ada\5\u01e6\u00f4\2\u0ad6")
        buf.write("\u0ad7\7\25\2\2\u0ad7\u0ad9\5\u01e6\u00f4\2\u0ad8\u0ad6")
        buf.write("\3\2\2\2\u0ad9\u0adc\3\2\2\2\u0ada\u0ad8\3\2\2\2\u0ada")
        buf.write("\u0adb\3\2\2\2\u0adb\u01e5\3\2\2\2\u0adc\u0ada\3\2\2\2")
        buf.write("\u0add\u0ae1\5\u00d4k\2\u0ade\u0ae0\5\u00d6l\2\u0adf\u0ade")
        buf.write("\3\2\2\2\u0ae0\u0ae3\3\2\2\2\u0ae1\u0adf\3\2\2\2\u0ae1")
        buf.write("\u0ae2\3\2\2\2\u0ae2\u01e7\3\2\2\2\u0ae3\u0ae1\3\2\2\2")
        buf.write("\u0ae4\u0ae7\5\u01e6\u00f4\2\u0ae5\u0ae6\7.\2\2\u0ae6")
        buf.write("\u0ae8\5\u01ea\u00f6\2\u0ae7\u0ae5\3\2\2\2\u0ae7\u0ae8")
        buf.write("\3\2\2\2\u0ae8\u0ae9\3\2\2\2\u0ae9\u0aea\5\u0090I\2\u0aea")
        buf.write("\u01e9\3\2\2\2\u0aeb\u0af1\7\u00b0\2\2\u0aec\u0aed\7\32")
        buf.write("\2\2\u0aed\u0aee\5\\/\2\u0aee\u0aef\7\33\2\2\u0aef\u0af1")
        buf.write("\3\2\2\2\u0af0\u0aeb\3\2\2\2\u0af0\u0aec\3\2\2\2\u0af1")
        buf.write("\u01eb\3\2\2\2\u0af2\u0af4\5\u01ee\u00f8\2\u0af3\u0af2")
        buf.write("\3\2\2\2\u0af4\u0af5\3\2\2\2\u0af5\u0af3\3\2\2\2\u0af5")
        buf.write("\u0af6\3\2\2\2\u0af6\u01ed\3\2\2\2\u0af7\u0aff\5\u01f0")
        buf.write("\u00f9\2\u0af8\u0aff\5\u01d6\u00ec\2\u0af9\u0afb\7\32")
        buf.write("\2\2\u0afa\u0afc\5\\/\2\u0afb\u0afa\3\2\2\2\u0afb\u0afc")
        buf.write("\3\2\2\2\u0afc\u0afd\3\2\2\2\u0afd\u0aff\7\33\2\2\u0afe")
        buf.write("\u0af7\3\2\2\2\u0afe\u0af8\3\2\2\2\u0afe\u0af9\3\2\2\2")
        buf.write("\u0aff\u01ef\3\2\2\2\u0b00\u0b02\n\17\2\2\u0b01\u0b00")
        buf.write("\3\2\2\2\u0b02\u0b03\3\2\2\2\u0b03\u0b01\3\2\2\2\u0b03")
        buf.write("\u0b04\3\2\2\2\u0b04\u01f1\3\2\2\2\u0b05\u0b07\7\32\2")
        buf.write("\2\u0b06\u0b08\5\u01f4\u00fb\2\u0b07\u0b06\3\2\2\2\u0b08")
        buf.write("\u0b09\3\2\2\2\u0b09\u0b07\3\2\2\2\u0b09\u0b0a\3\2\2\2")
        buf.write("\u0b0a\u0b0b\3\2\2\2\u0b0b\u0b0c\7\33\2\2\u0b0c\u01f3")
        buf.write("\3\2\2\2\u0b0d\u0b0e\5\u01f6\u00fc\2\u0b0e\u0b0f\7\21")
        buf.write("\2\2\u0b0f\u0b10\5\u01f8\u00fd\2\u0b10\u0b11\7\22\2\2")
        buf.write("\u0b11\u01f5\3\2\2\2\u0b12\u0b13\b\u00fc\1\2\u0b13\u0b17")
        buf.write("\5\u00d4k\2\u0b14\u0b15\7#\2\2\u0b15\u0b17\5\u00d8m\2")
        buf.write("\u0b16\u0b12\3\2\2\2\u0b16\u0b14\3\2\2\2\u0b17\u0b20\3")
        buf.write("\2\2\2\u0b18\u0b1a\f\3\2\2\u0b19\u0b1b\5\u00d6l\2\u0b1a")
        buf.write("\u0b19\3\2\2\2\u0b1b\u0b1c\3\2\2\2\u0b1c\u0b1a\3\2\2\2")
        buf.write("\u0b1c\u0b1d\3\2\2\2\u0b1d\u0b1f\3\2\2\2\u0b1e\u0b18\3")
        buf.write("\2\2\2\u0b1f\u0b22\3\2\2\2\u0b20\u0b1e\3\2\2\2\u0b20\u0b21")
        buf.write("\3\2\2\2\u0b21\u01f7\3\2\2\2\u0b22\u0b20\3\2\2\2\u0b23")
        buf.write("\u0b24\7\32\2\2\u0b24\u0b25\5\\/\2\u0b25\u0b26\7\33\2")
        buf.write("\2\u0b26\u0b29\3\2\2\2\u0b27\u0b29\5\u01fa\u00fe\2\u0b28")
        buf.write("\u0b23\3\2\2\2\u0b28\u0b27\3\2\2\2\u0b29\u01f9\3\2\2\2")
        buf.write("\u0b2a\u0b2c\n\20\2\2\u0b2b\u0b2a\3\2\2\2\u0b2c\u0b2d")
        buf.write("\3\2\2\2\u0b2d\u0b2b\3\2\2\2\u0b2d\u0b2e\3\2\2\2\u0b2e")
        buf.write("\u01fb\3\2\2\2\u0101\u0202\u0209\u0227\u022d\u0232\u0238")
        buf.write("\u023a\u023d\u0244\u024d\u0266\u026a\u0275\u027e\u028d")
        buf.write("\u0296\u029d\u02a7\u02bd\u02d4\u02e1\u02ec\u02fa\u0300")
        buf.write("\u030b\u0319\u032d\u0338\u033a\u0343\u0347\u034f\u0353")
        buf.write("\u035a\u0362\u0367\u036b\u0386\u038d\u0392\u0396\u03ac")
        buf.write("\u03b5\u03b9\u03c1\u03c5\u03ca\u03d1\u03d4\u03f5\u0408")
        buf.write("\u040f\u0431\u043a\u0451\u0461\u0466\u046e\u0477\u048e")
        buf.write("\u0494\u049e\u04b8\u0528\u052a\u0534\u0545\u054e\u055e")
        buf.write("\u0568\u056e\u0578\u057d\u057f\u0585\u0587\u0589\u0597")
        buf.write("\u059f\u05a6\u05aa\u05b5\u05b9\u05be\u05c0\u05c5\u05d4")
        buf.write("\u05d8\u05e3\u05e7\u05ec\u05f6\u05fa\u0602\u0609\u060b")
        buf.write("\u0610\u0612\u061d\u0623\u0633\u063c\u0642\u0647\u064d")
        buf.write("\u0654\u0662\u0665\u0670\u0678\u0680\u0689\u0693\u0696")
        buf.write("\u069a\u06a6\u06ac\u06b4\u06bd\u06c5\u06d2\u06d5\u06d9")
        buf.write("\u06de\u06e2\u06eb\u0700\u0709\u070b\u0710\u0722\u0727")
        buf.write("\u0730\u0734\u073b\u0740\u0744\u0750\u0761\u0766\u0769")
        buf.write("\u076d\u0772\u0779\u0784\u0786\u078f\u0797\u079f\u07a7")
        buf.write("\u07af\u07b5\u07c1\u07c5\u07cf\u07d7\u07db\u07e1\u07e8")
        buf.write("\u07ed\u07f4\u07fc\u0803\u080d\u081a\u081e\u0821\u0825")
        buf.write("\u0828\u0830\u0839\u0842\u084b\u085c\u086e\u0875\u0880")
        buf.write("\u0888\u088b\u088f\u0894\u089e\u08a2\u08ad\u08b0\u08b7")
        buf.write("\u08c0\u08cb\u08d8\u08df\u08e9\u08f3\u08f6\u08fa\u090b")
        buf.write("\u0913\u0917\u091f\u0943\u094c\u0956\u0962\u0967\u0973")
        buf.write("\u0985\u098c\u0995\u099d\u09a7\u09ac\u09b6\u09c0\u09d0")
        buf.write("\u09da\u09e1\u09e9\u09f4\u09fd\u0a05\u0a0f\u0a14\u0a20")
        buf.write("\u0a33\u0a3d\u0a45\u0a50\u0a59\u0a61\u0a6b\u0a70\u0a7c")
        buf.write("\u0a8a\u0a91\u0a99\u0a9f\u0aa4\u0aa8\u0aac\u0ab3\u0abf")
        buf.write("\u0acb\u0ada\u0ae1\u0ae7\u0af0\u0af5\u0afb\u0afe\u0b03")
        buf.write("\u0b09\u0b16\u0b1c\u0b20\u0b28\u0b2d")
        return buf.getvalue()


class EParser ( AbstractParser ):

    grammarFileName = "EParser.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "'\t'", "' '", "<INVALID>", 
                     "'Java:'", "'C#:'", "'Python2:'", "'Python3:'", "'JavaScript:'", 
                     "'Swift:'", "':'", "';'", "<INVALID>", "'..'", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "'!'", "'&'", 
                     "'&&'", "'|'", "'||'", "<INVALID>", "'-'", "'*'", "'/'", 
                     "'\\'", "'%'", "'>'", "'>='", "'<'", "'<='", "'<>'", 
                     "'<:>'", "'='", "'!='", "'=='", "'~='", "'~'", "'<-'", 
                     "'->'", "'=>'", "'Boolean'", "'Character'", "'Text'", 
                     "'Integer'", "'Decimal'", "'Date'", "'Time'", "'DateTime'", 
                     "'Period'", "'Version'", "'Method:'", "'Code'", "'Document'", 
                     "'Blob'", "'Image'", "'Uuid'", "'Iterator'", "'Cursor'", 
                     "'Html'", "'Type'", "'abstract'", "'all'", "'always'", 
                     "'and'", "'any'", "'as'", "<INVALID>", "'attr'", "'attribute'", 
                     "'attributes'", "'bindings'", "'break'", "'by'", "'case'", 
                     "'catch'", "'category'", "'class'", "'close'", "'contains'", 
                     "'def'", "'default'", "'define'", "'delete'", "<INVALID>", 
                     "'do'", "'doing'", "'each'", "'else'", "'enum'", "'enumerated'", 
                     "'except'", "'execute'", "'expecting'", "'extends'", 
                     "'fetch'", "'filtered'", "'finally'", "'flush'", "'for'", 
                     "'from'", "'getter'", "'has'", "'if'", "'in'", "'index'", 
                     "'invoke:'", "'is'", "'matching'", "'method'", "'methods'", 
                     "'modulo'", "'mutable'", "'native'", "'None'", "'not'", 
                     "<INVALID>", "'null'", "'on'", "'one'", "'open'", "'operator'", 
                     "'or'", "'order'", "'otherwise'", "'pass'", "'raise'", 
                     "'read'", "'receiving'", "'resource'", "'return'", 
                     "'returning'", "'rows'", "'self'", "'setter'", "'singleton'", 
                     "'sorted'", "'storable'", "'store'", "'switch'", "'test'", 
                     "'then'", "'this'", "'throw'", "'to'", "'try'", "'verifying'", 
                     "'widget'", "'with'", "'when'", "'where'", "'while'", 
                     "'write'", "<INVALID>", "<INVALID>", "'MIN_INTEGER'", 
                     "'MAX_INTEGER'" ]

    symbolicNames = [ "<INVALID>", "INDENT", "DEDENT", "LF_TAB", "LF_MORE", 
                      "LF", "TAB", "WS", "COMMENT", "JAVA", "CSHARP", "PYTHON2", 
                      "PYTHON3", "JAVASCRIPT", "SWIFT", "COLON", "SEMI", 
                      "COMMA", "RANGE", "DOT", "LPAR", "RPAR", "LBRAK", 
                      "RBRAK", "LCURL", "RCURL", "QMARK", "XMARK", "AMP", 
                      "AMP2", "PIPE", "PIPE2", "PLUS", "MINUS", "STAR", 
                      "SLASH", "BSLASH", "PERCENT", "GT", "GTE", "LT", "LTE", 
                      "LTGT", "LTCOLONGT", "EQ", "XEQ", "EQ2", "TEQ", "TILDE", 
                      "LARROW", "RARROW", "EGT", "BOOLEAN", "CHARACTER", 
                      "TEXT", "INTEGER", "DECIMAL", "DATE", "TIME", "DATETIME", 
                      "PERIOD", "VERSION", "METHOD_COLON", "CODE", "DOCUMENT", 
                      "BLOB", "IMAGE", "UUID", "ITERATOR", "CURSOR", "HTML", 
                      "TYPE", "ABSTRACT", "ALL", "ALWAYS", "AND", "ANY", 
                      "AS", "ASC", "ATTR", "ATTRIBUTE", "ATTRIBUTES", "BINDINGS", 
                      "BREAK", "BY", "CASE", "CATCH", "CATEGORY", "CLASS", 
                      "CLOSE", "CONTAINS", "DEF", "DEFAULT", "DEFINE", "DELETE", 
                      "DESC", "DO", "DOING", "EACH", "ELSE", "ENUM", "ENUMERATED", 
                      "EXCEPT", "EXECUTE", "EXPECTING", "EXTENDS", "FETCH", 
                      "FILTERED", "FINALLY", "FLUSH", "FOR", "FROM", "GETTER", 
                      "HAS", "IF", "IN", "INDEX", "INVOKE_COLON", "IS", 
                      "MATCHING", "METHOD", "METHODS", "MODULO", "MUTABLE", 
                      "NATIVE", "NONE", "NOT", "NOTHING", "NULL", "ON", 
                      "ONE", "OPEN", "OPERATOR", "OR", "ORDER", "OTHERWISE", 
                      "PASS", "RAISE", "READ", "RECEIVING", "RESOURCE", 
                      "RETURN", "RETURNING", "ROWS", "SELF", "SETTER", "SINGLETON", 
                      "SORTED", "STORABLE", "STORE", "SWITCH", "TEST", "THEN", 
                      "THIS", "THROW", "TO", "TRY", "VERIFYING", "WIDGET", 
                      "WITH", "WHEN", "WHERE", "WHILE", "WRITE", "BOOLEAN_LITERAL", 
                      "CHAR_LITERAL", "MIN_INTEGER", "MAX_INTEGER", "SYMBOL_IDENTIFIER", 
                      "TYPE_IDENTIFIER", "VARIABLE_IDENTIFIER", "NATIVE_IDENTIFIER", 
                      "DOLLAR_IDENTIFIER", "ARONDBASE_IDENTIFIER", "TEXT_LITERAL", 
                      "UUID_LITERAL", "INTEGER_LITERAL", "HEXA_LITERAL", 
                      "DECIMAL_LITERAL", "DATETIME_LITERAL", "TIME_LITERAL", 
                      "DATE_LITERAL", "PERIOD_LITERAL", "VERSION_LITERAL" ]

    RULE_enum_category_declaration = 0
    RULE_enum_native_declaration = 1
    RULE_native_symbol = 2
    RULE_category_symbol = 3
    RULE_attribute_declaration = 4
    RULE_concrete_widget_declaration = 5
    RULE_native_widget_declaration = 6
    RULE_concrete_category_declaration = 7
    RULE_singleton_category_declaration = 8
    RULE_derived_list = 9
    RULE_operator_method_declaration = 10
    RULE_setter_method_declaration = 11
    RULE_native_setter_declaration = 12
    RULE_getter_method_declaration = 13
    RULE_native_getter_declaration = 14
    RULE_native_category_declaration = 15
    RULE_native_resource_declaration = 16
    RULE_native_category_bindings = 17
    RULE_native_category_binding_list = 18
    RULE_attribute_list = 19
    RULE_abstract_method_declaration = 20
    RULE_concrete_method_declaration = 21
    RULE_native_method_declaration = 22
    RULE_test_method_declaration = 23
    RULE_assertion = 24
    RULE_full_argument_list = 25
    RULE_typed_argument = 26
    RULE_statement = 27
    RULE_flush_statement = 28
    RULE_store_statement = 29
    RULE_method_call_statement = 30
    RULE_with_resource_statement = 31
    RULE_with_singleton_statement = 32
    RULE_switch_statement = 33
    RULE_switch_case_statement = 34
    RULE_for_each_statement = 35
    RULE_do_while_statement = 36
    RULE_while_statement = 37
    RULE_if_statement = 38
    RULE_else_if_statement_list = 39
    RULE_raise_statement = 40
    RULE_try_statement = 41
    RULE_catch_statement = 42
    RULE_break_statement = 43
    RULE_return_statement = 44
    RULE_expression = 45
    RULE_unresolved_expression = 46
    RULE_unresolved_selector = 47
    RULE_invocation_expression = 48
    RULE_invocation_trailer = 49
    RULE_selectable_expression = 50
    RULE_instance_expression = 51
    RULE_instance_selector = 52
    RULE_mutable_instance_expression = 53
    RULE_document_expression = 54
    RULE_blob_expression = 55
    RULE_constructor_expression = 56
    RULE_write_statement = 57
    RULE_ambiguous_expression = 58
    RULE_filtered_list_suffix = 59
    RULE_fetch_expression = 60
    RULE_fetch_statement = 61
    RULE_sorted_expression = 62
    RULE_argument_assignment_list = 63
    RULE_with_argument_assignment_list = 64
    RULE_argument_assignment = 65
    RULE_assign_instance_statement = 66
    RULE_child_instance = 67
    RULE_assign_tuple_statement = 68
    RULE_lfs = 69
    RULE_lfp = 70
    RULE_ws_plus = 71
    RULE_indent = 72
    RULE_dedent = 73
    RULE_type_literal = 74
    RULE_null_literal = 75
    RULE_repl = 76
    RULE_declaration_list = 77
    RULE_declarations = 78
    RULE_declaration = 79
    RULE_annotation_constructor = 80
    RULE_annotation_identifier = 81
    RULE_annotation_argument = 82
    RULE_annotation_argument_name = 83
    RULE_annotation_argument_value = 84
    RULE_resource_declaration = 85
    RULE_enum_declaration = 86
    RULE_native_symbol_list = 87
    RULE_category_symbol_list = 88
    RULE_symbol_list = 89
    RULE_attribute_constraint = 90
    RULE_list_literal = 91
    RULE_set_literal = 92
    RULE_expression_list = 93
    RULE_range_literal = 94
    RULE_typedef = 95
    RULE_primary_type = 96
    RULE_native_type = 97
    RULE_category_type = 98
    RULE_mutable_category_type = 99
    RULE_code_type = 100
    RULE_category_declaration = 101
    RULE_widget_declaration = 102
    RULE_type_identifier_list = 103
    RULE_method_identifier = 104
    RULE_identifier_or_keyword = 105
    RULE_nospace_hyphen_identifier_or_keyword = 106
    RULE_nospace_identifier_or_keyword = 107
    RULE_identifier = 108
    RULE_variable_identifier = 109
    RULE_attribute_identifier = 110
    RULE_type_identifier = 111
    RULE_symbol_identifier = 112
    RULE_any_identifier = 113
    RULE_argument_list = 114
    RULE_argument = 115
    RULE_operator_argument = 116
    RULE_named_argument = 117
    RULE_code_argument = 118
    RULE_category_or_any_type = 119
    RULE_any_type = 120
    RULE_member_method_declaration_list = 121
    RULE_member_method_declaration = 122
    RULE_native_member_method_declaration_list = 123
    RULE_native_member_method_declaration = 124
    RULE_native_category_binding = 125
    RULE_python_category_binding = 126
    RULE_python_module = 127
    RULE_javascript_category_binding = 128
    RULE_javascript_module = 129
    RULE_variable_identifier_list = 130
    RULE_attribute_identifier_list = 131
    RULE_method_declaration = 132
    RULE_comment_statement = 133
    RULE_native_statement_list = 134
    RULE_native_statement = 135
    RULE_python_native_statement = 136
    RULE_javascript_native_statement = 137
    RULE_statement_list = 138
    RULE_assertion_list = 139
    RULE_switch_case_statement_list = 140
    RULE_catch_statement_list = 141
    RULE_literal_collection = 142
    RULE_atomic_literal = 143
    RULE_literal_list_literal = 144
    RULE_this_expression = 145
    RULE_parenthesis_expression = 146
    RULE_literal_expression = 147
    RULE_collection_literal = 148
    RULE_tuple_literal = 149
    RULE_dict_literal = 150
    RULE_document_literal = 151
    RULE_expression_tuple = 152
    RULE_dict_entry_list = 153
    RULE_dict_entry = 154
    RULE_dict_key = 155
    RULE_slice_arguments = 156
    RULE_assign_variable_statement = 157
    RULE_assignable_instance = 158
    RULE_is_expression = 159
    RULE_arrow_expression = 160
    RULE_arrow_prefix = 161
    RULE_arrow_args = 162
    RULE_sorted_key = 163
    RULE_read_all_expression = 164
    RULE_read_one_expression = 165
    RULE_order_by_list = 166
    RULE_order_by = 167
    RULE_operator = 168
    RULE_keyword = 169
    RULE_new_token = 170
    RULE_key_token = 171
    RULE_module_token = 172
    RULE_value_token = 173
    RULE_symbols_token = 174
    RULE_assign = 175
    RULE_multiply = 176
    RULE_divide = 177
    RULE_idivide = 178
    RULE_modulo = 179
    RULE_javascript_statement = 180
    RULE_javascript_expression = 181
    RULE_javascript_primary_expression = 182
    RULE_javascript_this_expression = 183
    RULE_javascript_new_expression = 184
    RULE_javascript_selector_expression = 185
    RULE_javascript_method_expression = 186
    RULE_javascript_arguments = 187
    RULE_javascript_item_expression = 188
    RULE_javascript_parenthesis_expression = 189
    RULE_javascript_identifier_expression = 190
    RULE_javascript_literal_expression = 191
    RULE_javascript_identifier = 192
    RULE_python_statement = 193
    RULE_python_expression = 194
    RULE_python_primary_expression = 195
    RULE_python_self_expression = 196
    RULE_python_selector_expression = 197
    RULE_python_method_expression = 198
    RULE_python_argument_list = 199
    RULE_python_ordinal_argument_list = 200
    RULE_python_named_argument_list = 201
    RULE_python_parenthesis_expression = 202
    RULE_python_identifier_expression = 203
    RULE_python_literal_expression = 204
    RULE_python_identifier = 205
    RULE_java_statement = 206
    RULE_java_expression = 207
    RULE_java_primary_expression = 208
    RULE_java_this_expression = 209
    RULE_java_new_expression = 210
    RULE_java_selector_expression = 211
    RULE_java_method_expression = 212
    RULE_java_arguments = 213
    RULE_java_item_expression = 214
    RULE_java_parenthesis_expression = 215
    RULE_java_identifier_expression = 216
    RULE_java_class_identifier_expression = 217
    RULE_java_literal_expression = 218
    RULE_java_identifier = 219
    RULE_csharp_statement = 220
    RULE_csharp_expression = 221
    RULE_csharp_primary_expression = 222
    RULE_csharp_this_expression = 223
    RULE_csharp_new_expression = 224
    RULE_csharp_selector_expression = 225
    RULE_csharp_method_expression = 226
    RULE_csharp_arguments = 227
    RULE_csharp_item_expression = 228
    RULE_csharp_parenthesis_expression = 229
    RULE_csharp_identifier_expression = 230
    RULE_csharp_literal_expression = 231
    RULE_csharp_identifier = 232
    RULE_jsx_expression = 233
    RULE_jsx_element = 234
    RULE_jsx_fragment = 235
    RULE_jsx_fragment_start = 236
    RULE_jsx_fragment_end = 237
    RULE_jsx_self_closing = 238
    RULE_jsx_opening = 239
    RULE_jsx_closing = 240
    RULE_jsx_element_name = 241
    RULE_jsx_identifier = 242
    RULE_jsx_attribute = 243
    RULE_jsx_attribute_value = 244
    RULE_jsx_children = 245
    RULE_jsx_child = 246
    RULE_jsx_text = 247
    RULE_css_expression = 248
    RULE_css_field = 249
    RULE_css_identifier = 250
    RULE_css_value = 251
    RULE_css_text = 252

    ruleNames =  [ "enum_category_declaration", "enum_native_declaration", 
                   "native_symbol", "category_symbol", "attribute_declaration", 
                   "concrete_widget_declaration", "native_widget_declaration", 
                   "concrete_category_declaration", "singleton_category_declaration", 
                   "derived_list", "operator_method_declaration", "setter_method_declaration", 
                   "native_setter_declaration", "getter_method_declaration", 
                   "native_getter_declaration", "native_category_declaration", 
                   "native_resource_declaration", "native_category_bindings", 
                   "native_category_binding_list", "attribute_list", "abstract_method_declaration", 
                   "concrete_method_declaration", "native_method_declaration", 
                   "test_method_declaration", "assertion", "full_argument_list", 
                   "typed_argument", "statement", "flush_statement", "store_statement", 
                   "method_call_statement", "with_resource_statement", "with_singleton_statement", 
                   "switch_statement", "switch_case_statement", "for_each_statement", 
                   "do_while_statement", "while_statement", "if_statement", 
                   "else_if_statement_list", "raise_statement", "try_statement", 
                   "catch_statement", "break_statement", "return_statement", 
                   "expression", "unresolved_expression", "unresolved_selector", 
                   "invocation_expression", "invocation_trailer", "selectable_expression", 
                   "instance_expression", "instance_selector", "mutable_instance_expression", 
                   "document_expression", "blob_expression", "constructor_expression", 
                   "write_statement", "ambiguous_expression", "filtered_list_suffix", 
                   "fetch_expression", "fetch_statement", "sorted_expression", 
                   "argument_assignment_list", "with_argument_assignment_list", 
                   "argument_assignment", "assign_instance_statement", "child_instance", 
                   "assign_tuple_statement", "lfs", "lfp", "ws_plus", "indent", 
                   "dedent", "type_literal", "null_literal", "repl", "declaration_list", 
                   "declarations", "declaration", "annotation_constructor", 
                   "annotation_identifier", "annotation_argument", "annotation_argument_name", 
                   "annotation_argument_value", "resource_declaration", 
                   "enum_declaration", "native_symbol_list", "category_symbol_list", 
                   "symbol_list", "attribute_constraint", "list_literal", 
                   "set_literal", "expression_list", "range_literal", "typedef", 
                   "primary_type", "native_type", "category_type", "mutable_category_type", 
                   "code_type", "category_declaration", "widget_declaration", 
                   "type_identifier_list", "method_identifier", "identifier_or_keyword", 
                   "nospace_hyphen_identifier_or_keyword", "nospace_identifier_or_keyword", 
                   "identifier", "variable_identifier", "attribute_identifier", 
                   "type_identifier", "symbol_identifier", "any_identifier", 
                   "argument_list", "argument", "operator_argument", "named_argument", 
                   "code_argument", "category_or_any_type", "any_type", 
                   "member_method_declaration_list", "member_method_declaration", 
                   "native_member_method_declaration_list", "native_member_method_declaration", 
                   "native_category_binding", "python_category_binding", 
                   "python_module", "javascript_category_binding", "javascript_module", 
                   "variable_identifier_list", "attribute_identifier_list", 
                   "method_declaration", "comment_statement", "native_statement_list", 
                   "native_statement", "python_native_statement", "javascript_native_statement", 
                   "statement_list", "assertion_list", "switch_case_statement_list", 
                   "catch_statement_list", "literal_collection", "atomic_literal", 
                   "literal_list_literal", "this_expression", "parenthesis_expression", 
                   "literal_expression", "collection_literal", "tuple_literal", 
                   "dict_literal", "document_literal", "expression_tuple", 
                   "dict_entry_list", "dict_entry", "dict_key", "slice_arguments", 
                   "assign_variable_statement", "assignable_instance", "is_expression", 
                   "arrow_expression", "arrow_prefix", "arrow_args", "sorted_key", 
                   "read_all_expression", "read_one_expression", "order_by_list", 
                   "order_by", "operator", "keyword", "new_token", "key_token", 
                   "module_token", "value_token", "symbols_token", "assign", 
                   "multiply", "divide", "idivide", "modulo", "javascript_statement", 
                   "javascript_expression", "javascript_primary_expression", 
                   "javascript_this_expression", "javascript_new_expression", 
                   "javascript_selector_expression", "javascript_method_expression", 
                   "javascript_arguments", "javascript_item_expression", 
                   "javascript_parenthesis_expression", "javascript_identifier_expression", 
                   "javascript_literal_expression", "javascript_identifier", 
                   "python_statement", "python_expression", "python_primary_expression", 
                   "python_self_expression", "python_selector_expression", 
                   "python_method_expression", "python_argument_list", "python_ordinal_argument_list", 
                   "python_named_argument_list", "python_parenthesis_expression", 
                   "python_identifier_expression", "python_literal_expression", 
                   "python_identifier", "java_statement", "java_expression", 
                   "java_primary_expression", "java_this_expression", "java_new_expression", 
                   "java_selector_expression", "java_method_expression", 
                   "java_arguments", "java_item_expression", "java_parenthesis_expression", 
                   "java_identifier_expression", "java_class_identifier_expression", 
                   "java_literal_expression", "java_identifier", "csharp_statement", 
                   "csharp_expression", "csharp_primary_expression", "csharp_this_expression", 
                   "csharp_new_expression", "csharp_selector_expression", 
                   "csharp_method_expression", "csharp_arguments", "csharp_item_expression", 
                   "csharp_parenthesis_expression", "csharp_identifier_expression", 
                   "csharp_literal_expression", "csharp_identifier", "jsx_expression", 
                   "jsx_element", "jsx_fragment", "jsx_fragment_start", 
                   "jsx_fragment_end", "jsx_self_closing", "jsx_opening", 
                   "jsx_closing", "jsx_element_name", "jsx_identifier", 
                   "jsx_attribute", "jsx_attribute_value", "jsx_children", 
                   "jsx_child", "jsx_text", "css_expression", "css_field", 
                   "css_identifier", "css_value", "css_text" ]

    EOF = Token.EOF
    INDENT=1
    DEDENT=2
    LF_TAB=3
    LF_MORE=4
    LF=5
    TAB=6
    WS=7
    COMMENT=8
    JAVA=9
    CSHARP=10
    PYTHON2=11
    PYTHON3=12
    JAVASCRIPT=13
    SWIFT=14
    COLON=15
    SEMI=16
    COMMA=17
    RANGE=18
    DOT=19
    LPAR=20
    RPAR=21
    LBRAK=22
    RBRAK=23
    LCURL=24
    RCURL=25
    QMARK=26
    XMARK=27
    AMP=28
    AMP2=29
    PIPE=30
    PIPE2=31
    PLUS=32
    MINUS=33
    STAR=34
    SLASH=35
    BSLASH=36
    PERCENT=37
    GT=38
    GTE=39
    LT=40
    LTE=41
    LTGT=42
    LTCOLONGT=43
    EQ=44
    XEQ=45
    EQ2=46
    TEQ=47
    TILDE=48
    LARROW=49
    RARROW=50
    EGT=51
    BOOLEAN=52
    CHARACTER=53
    TEXT=54
    INTEGER=55
    DECIMAL=56
    DATE=57
    TIME=58
    DATETIME=59
    PERIOD=60
    VERSION=61
    METHOD_COLON=62
    CODE=63
    DOCUMENT=64
    BLOB=65
    IMAGE=66
    UUID=67
    ITERATOR=68
    CURSOR=69
    HTML=70
    TYPE=71
    ABSTRACT=72
    ALL=73
    ALWAYS=74
    AND=75
    ANY=76
    AS=77
    ASC=78
    ATTR=79
    ATTRIBUTE=80
    ATTRIBUTES=81
    BINDINGS=82
    BREAK=83
    BY=84
    CASE=85
    CATCH=86
    CATEGORY=87
    CLASS=88
    CLOSE=89
    CONTAINS=90
    DEF=91
    DEFAULT=92
    DEFINE=93
    DELETE=94
    DESC=95
    DO=96
    DOING=97
    EACH=98
    ELSE=99
    ENUM=100
    ENUMERATED=101
    EXCEPT=102
    EXECUTE=103
    EXPECTING=104
    EXTENDS=105
    FETCH=106
    FILTERED=107
    FINALLY=108
    FLUSH=109
    FOR=110
    FROM=111
    GETTER=112
    HAS=113
    IF=114
    IN=115
    INDEX=116
    INVOKE_COLON=117
    IS=118
    MATCHING=119
    METHOD=120
    METHODS=121
    MODULO=122
    MUTABLE=123
    NATIVE=124
    NONE=125
    NOT=126
    NOTHING=127
    NULL=128
    ON=129
    ONE=130
    OPEN=131
    OPERATOR=132
    OR=133
    ORDER=134
    OTHERWISE=135
    PASS=136
    RAISE=137
    READ=138
    RECEIVING=139
    RESOURCE=140
    RETURN=141
    RETURNING=142
    ROWS=143
    SELF=144
    SETTER=145
    SINGLETON=146
    SORTED=147
    STORABLE=148
    STORE=149
    SWITCH=150
    TEST=151
    THEN=152
    THIS=153
    THROW=154
    TO=155
    TRY=156
    VERIFYING=157
    WIDGET=158
    WITH=159
    WHEN=160
    WHERE=161
    WHILE=162
    WRITE=163
    BOOLEAN_LITERAL=164
    CHAR_LITERAL=165
    MIN_INTEGER=166
    MAX_INTEGER=167
    SYMBOL_IDENTIFIER=168
    TYPE_IDENTIFIER=169
    VARIABLE_IDENTIFIER=170
    NATIVE_IDENTIFIER=171
    DOLLAR_IDENTIFIER=172
    ARONDBASE_IDENTIFIER=173
    TEXT_LITERAL=174
    UUID_LITERAL=175
    INTEGER_LITERAL=176
    HEXA_LITERAL=177
    DECIMAL_LITERAL=178
    DATETIME_LITERAL=179
    TIME_LITERAL=180
    DATE_LITERAL=181
    PERIOD_LITERAL=182
    VERSION_LITERAL=183

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.7.1")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None



    class Enum_category_declarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # Type_identifierContext
            self.derived = None # Type_identifierContext
            self.attrs = None # Attribute_listContext
            self.symbols = None # Category_symbol_listContext

        def DEFINE(self):
            return self.getToken(EParser.DEFINE, 0)

        def AS(self):
            return self.getToken(EParser.AS, 0)

        def ENUMERATED(self):
            return self.getToken(EParser.ENUMERATED, 0)

        def symbols_token(self):
            return self.getTypedRuleContext(EParser.Symbols_tokenContext,0)


        def COLON(self):
            return self.getToken(EParser.COLON, 0)

        def indent(self):
            return self.getTypedRuleContext(EParser.IndentContext,0)


        def dedent(self):
            return self.getTypedRuleContext(EParser.DedentContext,0)


        def type_identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(EParser.Type_identifierContext)
            else:
                return self.getTypedRuleContext(EParser.Type_identifierContext,i)


        def category_symbol_list(self):
            return self.getTypedRuleContext(EParser.Category_symbol_listContext,0)


        def CATEGORY(self):
            return self.getToken(EParser.CATEGORY, 0)

        def WITH(self):
            return self.getToken(EParser.WITH, 0)

        def COMMA(self):
            return self.getToken(EParser.COMMA, 0)

        def AND(self):
            return self.getToken(EParser.AND, 0)

        def attribute_list(self):
            return self.getTypedRuleContext(EParser.Attribute_listContext,0)


        def getRuleIndex(self):
            return EParser.RULE_enum_category_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnum_category_declaration" ):
                listener.enterEnum_category_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnum_category_declaration" ):
                listener.exitEnum_category_declaration(self)




    def enum_category_declaration(self):

        localctx = EParser.Enum_category_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_enum_category_declaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 506
            self.match(EParser.DEFINE)
            self.state = 507
            localctx.name = self.type_identifier()
            self.state = 508
            self.match(EParser.AS)
            self.state = 509
            self.match(EParser.ENUMERATED)
            self.state = 512
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [EParser.CATEGORY]:
                self.state = 510
                self.match(EParser.CATEGORY)
                pass
            elif token in [EParser.TYPE_IDENTIFIER]:
                self.state = 511
                localctx.derived = self.type_identifier()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 519
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1,self._ctx)
            if la_ == 1:
                self.state = 514
                localctx.attrs = self.attribute_list()
                self.state = 515
                self.match(EParser.COMMA)
                self.state = 516
                self.match(EParser.AND)
                pass

            elif la_ == 2:
                self.state = 518
                self.match(EParser.WITH)
                pass


            self.state = 521
            self.symbols_token()
            self.state = 522
            self.match(EParser.COLON)
            self.state = 523
            self.indent()
            self.state = 524
            localctx.symbols = self.category_symbol_list()
            self.state = 525
            self.dedent()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Enum_native_declarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # Type_identifierContext
            self.typ = None # Native_typeContext
            self.symbols = None # Native_symbol_listContext

        def DEFINE(self):
            return self.getToken(EParser.DEFINE, 0)

        def AS(self):
            return self.getToken(EParser.AS, 0)

        def ENUMERATED(self):
            return self.getToken(EParser.ENUMERATED, 0)

        def WITH(self):
            return self.getToken(EParser.WITH, 0)

        def symbols_token(self):
            return self.getTypedRuleContext(EParser.Symbols_tokenContext,0)


        def COLON(self):
            return self.getToken(EParser.COLON, 0)

        def indent(self):
            return self.getTypedRuleContext(EParser.IndentContext,0)


        def dedent(self):
            return self.getTypedRuleContext(EParser.DedentContext,0)


        def type_identifier(self):
            return self.getTypedRuleContext(EParser.Type_identifierContext,0)


        def native_type(self):
            return self.getTypedRuleContext(EParser.Native_typeContext,0)


        def native_symbol_list(self):
            return self.getTypedRuleContext(EParser.Native_symbol_listContext,0)


        def getRuleIndex(self):
            return EParser.RULE_enum_native_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnum_native_declaration" ):
                listener.enterEnum_native_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnum_native_declaration" ):
                listener.exitEnum_native_declaration(self)




    def enum_native_declaration(self):

        localctx = EParser.Enum_native_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_enum_native_declaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 527
            self.match(EParser.DEFINE)
            self.state = 528
            localctx.name = self.type_identifier()
            self.state = 529
            self.match(EParser.AS)
            self.state = 530
            self.match(EParser.ENUMERATED)
            self.state = 531
            localctx.typ = self.native_type()
            self.state = 532
            self.match(EParser.WITH)
            self.state = 533
            self.symbols_token()
            self.state = 534
            self.match(EParser.COLON)
            self.state = 535
            self.indent()
            self.state = 536
            localctx.symbols = self.native_symbol_list()
            self.state = 537
            self.dedent()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Native_symbolContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # Symbol_identifierContext
            self.exp = None # ExpressionContext

        def WITH(self):
            return self.getToken(EParser.WITH, 0)

        def AS(self):
            return self.getToken(EParser.AS, 0)

        def value_token(self):
            return self.getTypedRuleContext(EParser.Value_tokenContext,0)


        def symbol_identifier(self):
            return self.getTypedRuleContext(EParser.Symbol_identifierContext,0)


        def expression(self):
            return self.getTypedRuleContext(EParser.ExpressionContext,0)


        def getRuleIndex(self):
            return EParser.RULE_native_symbol

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNative_symbol" ):
                listener.enterNative_symbol(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNative_symbol" ):
                listener.exitNative_symbol(self)




    def native_symbol(self):

        localctx = EParser.Native_symbolContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_native_symbol)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 539
            localctx.name = self.symbol_identifier()
            self.state = 540
            self.match(EParser.WITH)
            self.state = 541
            localctx.exp = self.expression(0)
            self.state = 542
            self.match(EParser.AS)
            self.state = 543
            self.value_token()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Category_symbolContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # Symbol_identifierContext
            self.args = None # With_argument_assignment_listContext
            self.arg = None # Argument_assignmentContext

        def symbol_identifier(self):
            return self.getTypedRuleContext(EParser.Symbol_identifierContext,0)


        def with_argument_assignment_list(self):
            return self.getTypedRuleContext(EParser.With_argument_assignment_listContext,0)


        def AND(self):
            return self.getToken(EParser.AND, 0)

        def argument_assignment(self):
            return self.getTypedRuleContext(EParser.Argument_assignmentContext,0)


        def getRuleIndex(self):
            return EParser.RULE_category_symbol

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCategory_symbol" ):
                listener.enterCategory_symbol(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCategory_symbol" ):
                listener.exitCategory_symbol(self)




    def category_symbol(self):

        localctx = EParser.Category_symbolContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_category_symbol)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 545
            localctx.name = self.symbol_identifier()
            self.state = 546
            localctx.args = self.with_argument_assignment_list(0)
            self.state = 549
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==EParser.AND:
                self.state = 547
                self.match(EParser.AND)
                self.state = 548
                localctx.arg = self.argument_assignment()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Attribute_declarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # Attribute_identifierContext
            self.typ = None # TypedefContext
            self.match = None # Attribute_constraintContext
            self.indices = None # Variable_identifier_listContext
            self.index = None # Variable_identifierContext

        def DEFINE(self):
            return self.getToken(EParser.DEFINE, 0)

        def AS(self):
            return self.getToken(EParser.AS, 0)

        def ATTRIBUTE(self):
            return self.getToken(EParser.ATTRIBUTE, 0)

        def attribute_identifier(self):
            return self.getTypedRuleContext(EParser.Attribute_identifierContext,0)


        def typedef(self):
            return self.getTypedRuleContext(EParser.TypedefContext,0)


        def STORABLE(self):
            return self.getToken(EParser.STORABLE, 0)

        def WITH(self):
            return self.getToken(EParser.WITH, 0)

        def INDEX(self):
            return self.getToken(EParser.INDEX, 0)

        def attribute_constraint(self):
            return self.getTypedRuleContext(EParser.Attribute_constraintContext,0)


        def variable_identifier_list(self):
            return self.getTypedRuleContext(EParser.Variable_identifier_listContext,0)


        def AND(self):
            return self.getToken(EParser.AND, 0)

        def variable_identifier(self):
            return self.getTypedRuleContext(EParser.Variable_identifierContext,0)


        def getRuleIndex(self):
            return EParser.RULE_attribute_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttribute_declaration" ):
                listener.enterAttribute_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttribute_declaration" ):
                listener.exitAttribute_declaration(self)




    def attribute_declaration(self):

        localctx = EParser.Attribute_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_attribute_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 551
            self.match(EParser.DEFINE)
            self.state = 552
            localctx.name = self.attribute_identifier()
            self.state = 553
            self.match(EParser.AS)
            self.state = 555
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==EParser.STORABLE:
                self.state = 554
                self.match(EParser.STORABLE)


            self.state = 557
            localctx.typ = self.typedef(0)
            self.state = 558
            self.match(EParser.ATTRIBUTE)
            self.state = 560
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==EParser.IN or _la==EParser.MATCHING:
                self.state = 559
                localctx.match = self.attribute_constraint()


            self.state = 571
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==EParser.WITH:
                self.state = 562
                self.match(EParser.WITH)
                self.state = 568
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==EParser.VARIABLE_IDENTIFIER:
                    self.state = 563
                    localctx.indices = self.variable_identifier_list()
                    self.state = 566
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==EParser.AND:
                        self.state = 564
                        self.match(EParser.AND)
                        self.state = 565
                        localctx.index = self.variable_identifier()




                self.state = 570
                self.match(EParser.INDEX)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Concrete_widget_declarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # Type_identifierContext
            self.derived = None # Type_identifierContext
            self.methods = None # Member_method_declaration_listContext

        def DEFINE(self):
            return self.getToken(EParser.DEFINE, 0)

        def AS(self):
            return self.getToken(EParser.AS, 0)

        def type_identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(EParser.Type_identifierContext)
            else:
                return self.getTypedRuleContext(EParser.Type_identifierContext,i)


        def WIDGET(self):
            return self.getToken(EParser.WIDGET, 0)

        def WITH(self):
            return self.getToken(EParser.WITH, 0)

        def METHODS(self):
            return self.getToken(EParser.METHODS, 0)

        def COLON(self):
            return self.getToken(EParser.COLON, 0)

        def indent(self):
            return self.getTypedRuleContext(EParser.IndentContext,0)


        def dedent(self):
            return self.getTypedRuleContext(EParser.DedentContext,0)


        def member_method_declaration_list(self):
            return self.getTypedRuleContext(EParser.Member_method_declaration_listContext,0)


        def getRuleIndex(self):
            return EParser.RULE_concrete_widget_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConcrete_widget_declaration" ):
                listener.enterConcrete_widget_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConcrete_widget_declaration" ):
                listener.exitConcrete_widget_declaration(self)




    def concrete_widget_declaration(self):

        localctx = EParser.Concrete_widget_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_concrete_widget_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 573
            self.match(EParser.DEFINE)
            self.state = 574
            localctx.name = self.type_identifier()
            self.state = 575
            self.match(EParser.AS)
            self.state = 578
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [EParser.WIDGET]:
                self.state = 576
                self.match(EParser.WIDGET)
                pass
            elif token in [EParser.TYPE_IDENTIFIER]:
                self.state = 577
                localctx.derived = self.type_identifier()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 587
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==EParser.WITH:
                self.state = 580
                self.match(EParser.WITH)
                self.state = 581
                self.match(EParser.METHODS)
                self.state = 582
                self.match(EParser.COLON)
                self.state = 583
                self.indent()
                self.state = 584
                localctx.methods = self.member_method_declaration_list()
                self.state = 585
                self.dedent()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Native_widget_declarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # Type_identifierContext
            self.bindings = None # Native_category_bindingsContext
            self.methods = None # Native_member_method_declaration_listContext

        def DEFINE(self):
            return self.getToken(EParser.DEFINE, 0)

        def AS(self):
            return self.getToken(EParser.AS, 0)

        def NATIVE(self):
            return self.getToken(EParser.NATIVE, 0)

        def WIDGET(self):
            return self.getToken(EParser.WIDGET, 0)

        def WITH(self):
            return self.getToken(EParser.WITH, 0)

        def BINDINGS(self):
            return self.getToken(EParser.BINDINGS, 0)

        def COLON(self, i:int=None):
            if i is None:
                return self.getTokens(EParser.COLON)
            else:
                return self.getToken(EParser.COLON, i)

        def indent(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(EParser.IndentContext)
            else:
                return self.getTypedRuleContext(EParser.IndentContext,i)


        def dedent(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(EParser.DedentContext)
            else:
                return self.getTypedRuleContext(EParser.DedentContext,i)


        def lfp(self):
            return self.getTypedRuleContext(EParser.LfpContext,0)


        def AND(self):
            return self.getToken(EParser.AND, 0)

        def METHODS(self):
            return self.getToken(EParser.METHODS, 0)

        def type_identifier(self):
            return self.getTypedRuleContext(EParser.Type_identifierContext,0)


        def native_category_bindings(self):
            return self.getTypedRuleContext(EParser.Native_category_bindingsContext,0)


        def native_member_method_declaration_list(self):
            return self.getTypedRuleContext(EParser.Native_member_method_declaration_listContext,0)


        def getRuleIndex(self):
            return EParser.RULE_native_widget_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNative_widget_declaration" ):
                listener.enterNative_widget_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNative_widget_declaration" ):
                listener.exitNative_widget_declaration(self)




    def native_widget_declaration(self):

        localctx = EParser.Native_widget_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_native_widget_declaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 589
            self.match(EParser.DEFINE)
            self.state = 590
            localctx.name = self.type_identifier()
            self.state = 591
            self.match(EParser.AS)
            self.state = 592
            self.match(EParser.NATIVE)
            self.state = 593
            self.match(EParser.WIDGET)
            self.state = 594
            self.match(EParser.WITH)
            self.state = 595
            self.match(EParser.BINDINGS)
            self.state = 596
            self.match(EParser.COLON)
            self.state = 597
            self.indent()
            self.state = 598
            localctx.bindings = self.native_category_bindings()
            self.state = 599
            self.dedent()
            self.state = 600
            self.lfp()
            self.state = 601
            self.match(EParser.AND)
            self.state = 602
            self.match(EParser.METHODS)
            self.state = 603
            self.match(EParser.COLON)
            self.state = 604
            self.indent()
            self.state = 605
            localctx.methods = self.native_member_method_declaration_list()
            self.state = 606
            self.dedent()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Concrete_category_declarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # Type_identifierContext
            self.derived = None # Derived_listContext
            self.attrs = None # Attribute_listContext
            self.methods = None # Member_method_declaration_listContext

        def DEFINE(self):
            return self.getToken(EParser.DEFINE, 0)

        def AS(self):
            return self.getToken(EParser.AS, 0)

        def type_identifier(self):
            return self.getTypedRuleContext(EParser.Type_identifierContext,0)


        def CATEGORY(self):
            return self.getToken(EParser.CATEGORY, 0)

        def STORABLE(self):
            return self.getToken(EParser.STORABLE, 0)

        def derived_list(self):
            return self.getTypedRuleContext(EParser.Derived_listContext,0)


        def WITH(self):
            return self.getToken(EParser.WITH, 0)

        def METHODS(self):
            return self.getToken(EParser.METHODS, 0)

        def COLON(self):
            return self.getToken(EParser.COLON, 0)

        def indent(self):
            return self.getTypedRuleContext(EParser.IndentContext,0)


        def dedent(self):
            return self.getTypedRuleContext(EParser.DedentContext,0)


        def attribute_list(self):
            return self.getTypedRuleContext(EParser.Attribute_listContext,0)


        def member_method_declaration_list(self):
            return self.getTypedRuleContext(EParser.Member_method_declaration_listContext,0)


        def COMMA(self):
            return self.getToken(EParser.COMMA, 0)

        def AND(self):
            return self.getToken(EParser.AND, 0)

        def getRuleIndex(self):
            return EParser.RULE_concrete_category_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConcrete_category_declaration" ):
                listener.enterConcrete_category_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConcrete_category_declaration" ):
                listener.exitConcrete_category_declaration(self)




    def concrete_category_declaration(self):

        localctx = EParser.Concrete_category_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_concrete_category_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 608
            self.match(EParser.DEFINE)
            self.state = 609
            localctx.name = self.type_identifier()
            self.state = 610
            self.match(EParser.AS)
            self.state = 612
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==EParser.STORABLE:
                self.state = 611
                self.match(EParser.STORABLE)


            self.state = 616
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [EParser.CATEGORY]:
                self.state = 614
                self.match(EParser.CATEGORY)
                pass
            elif token in [EParser.TYPE_IDENTIFIER]:
                self.state = 615
                localctx.derived = self.derived_list()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 636
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,13,self._ctx)
            if la_ == 1:
                self.state = 618
                localctx.attrs = self.attribute_list()
                self.state = 627
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==EParser.COMMA:
                    self.state = 619
                    self.match(EParser.COMMA)
                    self.state = 620
                    self.match(EParser.AND)
                    self.state = 621
                    self.match(EParser.METHODS)
                    self.state = 622
                    self.match(EParser.COLON)
                    self.state = 623
                    self.indent()
                    self.state = 624
                    localctx.methods = self.member_method_declaration_list()
                    self.state = 625
                    self.dedent()



            elif la_ == 2:
                self.state = 629
                self.match(EParser.WITH)
                self.state = 630
                self.match(EParser.METHODS)
                self.state = 631
                self.match(EParser.COLON)
                self.state = 632
                self.indent()
                self.state = 633
                localctx.methods = self.member_method_declaration_list()
                self.state = 634
                self.dedent()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Singleton_category_declarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # Type_identifierContext
            self.attrs = None # Attribute_listContext
            self.methods = None # Member_method_declaration_listContext

        def DEFINE(self):
            return self.getToken(EParser.DEFINE, 0)

        def AS(self):
            return self.getToken(EParser.AS, 0)

        def SINGLETON(self):
            return self.getToken(EParser.SINGLETON, 0)

        def type_identifier(self):
            return self.getTypedRuleContext(EParser.Type_identifierContext,0)


        def WITH(self):
            return self.getToken(EParser.WITH, 0)

        def METHODS(self):
            return self.getToken(EParser.METHODS, 0)

        def COLON(self):
            return self.getToken(EParser.COLON, 0)

        def indent(self):
            return self.getTypedRuleContext(EParser.IndentContext,0)


        def dedent(self):
            return self.getTypedRuleContext(EParser.DedentContext,0)


        def attribute_list(self):
            return self.getTypedRuleContext(EParser.Attribute_listContext,0)


        def member_method_declaration_list(self):
            return self.getTypedRuleContext(EParser.Member_method_declaration_listContext,0)


        def COMMA(self):
            return self.getToken(EParser.COMMA, 0)

        def AND(self):
            return self.getToken(EParser.AND, 0)

        def getRuleIndex(self):
            return EParser.RULE_singleton_category_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSingleton_category_declaration" ):
                listener.enterSingleton_category_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSingleton_category_declaration" ):
                listener.exitSingleton_category_declaration(self)




    def singleton_category_declaration(self):

        localctx = EParser.Singleton_category_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_singleton_category_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 638
            self.match(EParser.DEFINE)
            self.state = 639
            localctx.name = self.type_identifier()
            self.state = 640
            self.match(EParser.AS)
            self.state = 641
            self.match(EParser.SINGLETON)
            self.state = 660
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,15,self._ctx)
            if la_ == 1:
                self.state = 642
                localctx.attrs = self.attribute_list()
                self.state = 651
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==EParser.COMMA:
                    self.state = 643
                    self.match(EParser.COMMA)
                    self.state = 644
                    self.match(EParser.AND)
                    self.state = 645
                    self.match(EParser.METHODS)
                    self.state = 646
                    self.match(EParser.COLON)
                    self.state = 647
                    self.indent()
                    self.state = 648
                    localctx.methods = self.member_method_declaration_list()
                    self.state = 649
                    self.dedent()



            elif la_ == 2:
                self.state = 653
                self.match(EParser.WITH)
                self.state = 654
                self.match(EParser.METHODS)
                self.state = 655
                self.match(EParser.COLON)
                self.state = 656
                self.indent()
                self.state = 657
                localctx.methods = self.member_method_declaration_list()
                self.state = 658
                self.dedent()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Derived_listContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return EParser.RULE_derived_list

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class DerivedListItemContext(Derived_listContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a EParser.Derived_listContext
            super().__init__(parser)
            self.items = None # Type_identifier_listContext
            self.item = None # Type_identifierContext
            self.copyFrom(ctx)

        def AND(self):
            return self.getToken(EParser.AND, 0)
        def type_identifier_list(self):
            return self.getTypedRuleContext(EParser.Type_identifier_listContext,0)

        def type_identifier(self):
            return self.getTypedRuleContext(EParser.Type_identifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDerivedListItem" ):
                listener.enterDerivedListItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDerivedListItem" ):
                listener.exitDerivedListItem(self)


    class DerivedListContext(Derived_listContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a EParser.Derived_listContext
            super().__init__(parser)
            self.items = None # Type_identifier_listContext
            self.copyFrom(ctx)

        def type_identifier_list(self):
            return self.getTypedRuleContext(EParser.Type_identifier_listContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDerivedList" ):
                listener.enterDerivedList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDerivedList" ):
                listener.exitDerivedList(self)



    def derived_list(self):

        localctx = EParser.Derived_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_derived_list)
        try:
            self.state = 667
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,16,self._ctx)
            if la_ == 1:
                localctx = EParser.DerivedListContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 662
                localctx.items = self.type_identifier_list()
                pass

            elif la_ == 2:
                localctx = EParser.DerivedListItemContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 663
                localctx.items = self.type_identifier_list()
                self.state = 664
                self.match(EParser.AND)
                self.state = 665
                localctx.item = self.type_identifier()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Operator_method_declarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.op = None # OperatorContext
            self.arg = None # Operator_argumentContext
            self.typ = None # TypedefContext
            self.stmts = None # Statement_listContext

        def DEFINE(self):
            return self.getToken(EParser.DEFINE, 0)

        def AS(self):
            return self.getToken(EParser.AS, 0)

        def OPERATOR(self):
            return self.getToken(EParser.OPERATOR, 0)

        def RECEIVING(self):
            return self.getToken(EParser.RECEIVING, 0)

        def DOING(self):
            return self.getToken(EParser.DOING, 0)

        def COLON(self):
            return self.getToken(EParser.COLON, 0)

        def indent(self):
            return self.getTypedRuleContext(EParser.IndentContext,0)


        def dedent(self):
            return self.getTypedRuleContext(EParser.DedentContext,0)


        def operator(self):
            return self.getTypedRuleContext(EParser.OperatorContext,0)


        def operator_argument(self):
            return self.getTypedRuleContext(EParser.Operator_argumentContext,0)


        def statement_list(self):
            return self.getTypedRuleContext(EParser.Statement_listContext,0)


        def RETURNING(self):
            return self.getToken(EParser.RETURNING, 0)

        def typedef(self):
            return self.getTypedRuleContext(EParser.TypedefContext,0)


        def getRuleIndex(self):
            return EParser.RULE_operator_method_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOperator_method_declaration" ):
                listener.enterOperator_method_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOperator_method_declaration" ):
                listener.exitOperator_method_declaration(self)




    def operator_method_declaration(self):

        localctx = EParser.Operator_method_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_operator_method_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 669
            self.match(EParser.DEFINE)
            self.state = 670
            localctx.op = self.operator()
            self.state = 671
            self.match(EParser.AS)
            self.state = 672
            self.match(EParser.OPERATOR)
            self.state = 673
            self.match(EParser.RECEIVING)
            self.state = 674
            localctx.arg = self.operator_argument()
            self.state = 677
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==EParser.RETURNING:
                self.state = 675
                self.match(EParser.RETURNING)
                self.state = 676
                localctx.typ = self.typedef(0)


            self.state = 679
            self.match(EParser.DOING)
            self.state = 680
            self.match(EParser.COLON)
            self.state = 681
            self.indent()
            self.state = 682
            localctx.stmts = self.statement_list()
            self.state = 683
            self.dedent()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Setter_method_declarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # Variable_identifierContext
            self.stmts = None # Statement_listContext

        def DEFINE(self):
            return self.getToken(EParser.DEFINE, 0)

        def AS(self):
            return self.getToken(EParser.AS, 0)

        def SETTER(self):
            return self.getToken(EParser.SETTER, 0)

        def DOING(self):
            return self.getToken(EParser.DOING, 0)

        def COLON(self):
            return self.getToken(EParser.COLON, 0)

        def indent(self):
            return self.getTypedRuleContext(EParser.IndentContext,0)


        def dedent(self):
            return self.getTypedRuleContext(EParser.DedentContext,0)


        def variable_identifier(self):
            return self.getTypedRuleContext(EParser.Variable_identifierContext,0)


        def statement_list(self):
            return self.getTypedRuleContext(EParser.Statement_listContext,0)


        def getRuleIndex(self):
            return EParser.RULE_setter_method_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetter_method_declaration" ):
                listener.enterSetter_method_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetter_method_declaration" ):
                listener.exitSetter_method_declaration(self)




    def setter_method_declaration(self):

        localctx = EParser.Setter_method_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_setter_method_declaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 685
            self.match(EParser.DEFINE)
            self.state = 686
            localctx.name = self.variable_identifier()
            self.state = 687
            self.match(EParser.AS)
            self.state = 688
            self.match(EParser.SETTER)
            self.state = 689
            self.match(EParser.DOING)
            self.state = 690
            self.match(EParser.COLON)
            self.state = 691
            self.indent()
            self.state = 692
            localctx.stmts = self.statement_list()
            self.state = 693
            self.dedent()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Native_setter_declarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # Variable_identifierContext
            self.stmts = None # Native_statement_listContext

        def DEFINE(self):
            return self.getToken(EParser.DEFINE, 0)

        def AS(self):
            return self.getToken(EParser.AS, 0)

        def SETTER(self):
            return self.getToken(EParser.SETTER, 0)

        def DOING(self):
            return self.getToken(EParser.DOING, 0)

        def COLON(self):
            return self.getToken(EParser.COLON, 0)

        def indent(self):
            return self.getTypedRuleContext(EParser.IndentContext,0)


        def dedent(self):
            return self.getTypedRuleContext(EParser.DedentContext,0)


        def variable_identifier(self):
            return self.getTypedRuleContext(EParser.Variable_identifierContext,0)


        def native_statement_list(self):
            return self.getTypedRuleContext(EParser.Native_statement_listContext,0)


        def NATIVE(self):
            return self.getToken(EParser.NATIVE, 0)

        def getRuleIndex(self):
            return EParser.RULE_native_setter_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNative_setter_declaration" ):
                listener.enterNative_setter_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNative_setter_declaration" ):
                listener.exitNative_setter_declaration(self)




    def native_setter_declaration(self):

        localctx = EParser.Native_setter_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_native_setter_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 695
            self.match(EParser.DEFINE)
            self.state = 696
            localctx.name = self.variable_identifier()
            self.state = 697
            self.match(EParser.AS)
            self.state = 699
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==EParser.NATIVE:
                self.state = 698
                self.match(EParser.NATIVE)


            self.state = 701
            self.match(EParser.SETTER)
            self.state = 702
            self.match(EParser.DOING)
            self.state = 703
            self.match(EParser.COLON)
            self.state = 704
            self.indent()
            self.state = 705
            localctx.stmts = self.native_statement_list()
            self.state = 706
            self.dedent()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Getter_method_declarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # Variable_identifierContext
            self.stmts = None # Statement_listContext

        def DEFINE(self):
            return self.getToken(EParser.DEFINE, 0)

        def AS(self):
            return self.getToken(EParser.AS, 0)

        def GETTER(self):
            return self.getToken(EParser.GETTER, 0)

        def DOING(self):
            return self.getToken(EParser.DOING, 0)

        def COLON(self):
            return self.getToken(EParser.COLON, 0)

        def indent(self):
            return self.getTypedRuleContext(EParser.IndentContext,0)


        def dedent(self):
            return self.getTypedRuleContext(EParser.DedentContext,0)


        def variable_identifier(self):
            return self.getTypedRuleContext(EParser.Variable_identifierContext,0)


        def statement_list(self):
            return self.getTypedRuleContext(EParser.Statement_listContext,0)


        def getRuleIndex(self):
            return EParser.RULE_getter_method_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGetter_method_declaration" ):
                listener.enterGetter_method_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGetter_method_declaration" ):
                listener.exitGetter_method_declaration(self)




    def getter_method_declaration(self):

        localctx = EParser.Getter_method_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_getter_method_declaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 708
            self.match(EParser.DEFINE)
            self.state = 709
            localctx.name = self.variable_identifier()
            self.state = 710
            self.match(EParser.AS)
            self.state = 711
            self.match(EParser.GETTER)
            self.state = 712
            self.match(EParser.DOING)
            self.state = 713
            self.match(EParser.COLON)
            self.state = 714
            self.indent()
            self.state = 715
            localctx.stmts = self.statement_list()
            self.state = 716
            self.dedent()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Native_getter_declarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # Variable_identifierContext
            self.stmts = None # Native_statement_listContext

        def DEFINE(self):
            return self.getToken(EParser.DEFINE, 0)

        def AS(self):
            return self.getToken(EParser.AS, 0)

        def GETTER(self):
            return self.getToken(EParser.GETTER, 0)

        def DOING(self):
            return self.getToken(EParser.DOING, 0)

        def COLON(self):
            return self.getToken(EParser.COLON, 0)

        def indent(self):
            return self.getTypedRuleContext(EParser.IndentContext,0)


        def dedent(self):
            return self.getTypedRuleContext(EParser.DedentContext,0)


        def variable_identifier(self):
            return self.getTypedRuleContext(EParser.Variable_identifierContext,0)


        def native_statement_list(self):
            return self.getTypedRuleContext(EParser.Native_statement_listContext,0)


        def NATIVE(self):
            return self.getToken(EParser.NATIVE, 0)

        def getRuleIndex(self):
            return EParser.RULE_native_getter_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNative_getter_declaration" ):
                listener.enterNative_getter_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNative_getter_declaration" ):
                listener.exitNative_getter_declaration(self)




    def native_getter_declaration(self):

        localctx = EParser.Native_getter_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_native_getter_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 718
            self.match(EParser.DEFINE)
            self.state = 719
            localctx.name = self.variable_identifier()
            self.state = 720
            self.match(EParser.AS)
            self.state = 722
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==EParser.NATIVE:
                self.state = 721
                self.match(EParser.NATIVE)


            self.state = 724
            self.match(EParser.GETTER)
            self.state = 725
            self.match(EParser.DOING)
            self.state = 726
            self.match(EParser.COLON)
            self.state = 727
            self.indent()
            self.state = 728
            localctx.stmts = self.native_statement_list()
            self.state = 729
            self.dedent()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Native_category_declarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # Type_identifierContext
            self.attrs = None # Attribute_listContext
            self.bindings = None # Native_category_bindingsContext
            self.methods = None # Native_member_method_declaration_listContext

        def DEFINE(self):
            return self.getToken(EParser.DEFINE, 0)

        def AS(self):
            return self.getToken(EParser.AS, 0)

        def NATIVE(self):
            return self.getToken(EParser.NATIVE, 0)

        def CATEGORY(self):
            return self.getToken(EParser.CATEGORY, 0)

        def COLON(self, i:int=None):
            if i is None:
                return self.getTokens(EParser.COLON)
            else:
                return self.getToken(EParser.COLON, i)

        def indent(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(EParser.IndentContext)
            else:
                return self.getTypedRuleContext(EParser.IndentContext,i)


        def dedent(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(EParser.DedentContext)
            else:
                return self.getTypedRuleContext(EParser.DedentContext,i)


        def type_identifier(self):
            return self.getTypedRuleContext(EParser.Type_identifierContext,0)


        def native_category_bindings(self):
            return self.getTypedRuleContext(EParser.Native_category_bindingsContext,0)


        def WITH(self):
            return self.getToken(EParser.WITH, 0)

        def BINDINGS(self):
            return self.getToken(EParser.BINDINGS, 0)

        def STORABLE(self):
            return self.getToken(EParser.STORABLE, 0)

        def lfp(self):
            return self.getTypedRuleContext(EParser.LfpContext,0)


        def AND(self, i:int=None):
            if i is None:
                return self.getTokens(EParser.AND)
            else:
                return self.getToken(EParser.AND, i)

        def METHODS(self):
            return self.getToken(EParser.METHODS, 0)

        def COMMA(self):
            return self.getToken(EParser.COMMA, 0)

        def native_member_method_declaration_list(self):
            return self.getTypedRuleContext(EParser.Native_member_method_declaration_listContext,0)


        def attribute_list(self):
            return self.getTypedRuleContext(EParser.Attribute_listContext,0)


        def getRuleIndex(self):
            return EParser.RULE_native_category_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNative_category_declaration" ):
                listener.enterNative_category_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNative_category_declaration" ):
                listener.exitNative_category_declaration(self)




    def native_category_declaration(self):

        localctx = EParser.Native_category_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_native_category_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 731
            self.match(EParser.DEFINE)
            self.state = 732
            localctx.name = self.type_identifier()
            self.state = 733
            self.match(EParser.AS)
            self.state = 735
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==EParser.STORABLE:
                self.state = 734
                self.match(EParser.STORABLE)


            self.state = 737
            self.match(EParser.NATIVE)
            self.state = 738
            self.match(EParser.CATEGORY)
            self.state = 746
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,21,self._ctx)
            if la_ == 1:
                self.state = 739
                localctx.attrs = self.attribute_list()
                self.state = 740
                self.match(EParser.COMMA)
                self.state = 741
                self.match(EParser.AND)
                self.state = 742
                self.match(EParser.BINDINGS)
                pass

            elif la_ == 2:
                self.state = 744
                self.match(EParser.WITH)
                self.state = 745
                self.match(EParser.BINDINGS)
                pass


            self.state = 748
            self.match(EParser.COLON)
            self.state = 749
            self.indent()
            self.state = 750
            localctx.bindings = self.native_category_bindings()
            self.state = 751
            self.dedent()
            self.state = 760
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,22,self._ctx)
            if la_ == 1:
                self.state = 752
                self.lfp()
                self.state = 753
                self.match(EParser.AND)
                self.state = 754
                self.match(EParser.METHODS)
                self.state = 755
                self.match(EParser.COLON)
                self.state = 756
                self.indent()
                self.state = 757
                localctx.methods = self.native_member_method_declaration_list()
                self.state = 758
                self.dedent()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Native_resource_declarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # Type_identifierContext
            self.attrs = None # Attribute_listContext
            self.bindings = None # Native_category_bindingsContext
            self.methods = None # Native_member_method_declaration_listContext

        def DEFINE(self):
            return self.getToken(EParser.DEFINE, 0)

        def AS(self):
            return self.getToken(EParser.AS, 0)

        def NATIVE(self):
            return self.getToken(EParser.NATIVE, 0)

        def RESOURCE(self):
            return self.getToken(EParser.RESOURCE, 0)

        def COLON(self, i:int=None):
            if i is None:
                return self.getTokens(EParser.COLON)
            else:
                return self.getToken(EParser.COLON, i)

        def indent(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(EParser.IndentContext)
            else:
                return self.getTypedRuleContext(EParser.IndentContext,i)


        def dedent(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(EParser.DedentContext)
            else:
                return self.getTypedRuleContext(EParser.DedentContext,i)


        def type_identifier(self):
            return self.getTypedRuleContext(EParser.Type_identifierContext,0)


        def native_category_bindings(self):
            return self.getTypedRuleContext(EParser.Native_category_bindingsContext,0)


        def WITH(self):
            return self.getToken(EParser.WITH, 0)

        def BINDINGS(self):
            return self.getToken(EParser.BINDINGS, 0)

        def STORABLE(self):
            return self.getToken(EParser.STORABLE, 0)

        def lfp(self):
            return self.getTypedRuleContext(EParser.LfpContext,0)


        def AND(self, i:int=None):
            if i is None:
                return self.getTokens(EParser.AND)
            else:
                return self.getToken(EParser.AND, i)

        def METHODS(self):
            return self.getToken(EParser.METHODS, 0)

        def COMMA(self):
            return self.getToken(EParser.COMMA, 0)

        def native_member_method_declaration_list(self):
            return self.getTypedRuleContext(EParser.Native_member_method_declaration_listContext,0)


        def attribute_list(self):
            return self.getTypedRuleContext(EParser.Attribute_listContext,0)


        def getRuleIndex(self):
            return EParser.RULE_native_resource_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNative_resource_declaration" ):
                listener.enterNative_resource_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNative_resource_declaration" ):
                listener.exitNative_resource_declaration(self)




    def native_resource_declaration(self):

        localctx = EParser.Native_resource_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_native_resource_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 762
            self.match(EParser.DEFINE)
            self.state = 763
            localctx.name = self.type_identifier()
            self.state = 764
            self.match(EParser.AS)
            self.state = 766
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==EParser.STORABLE:
                self.state = 765
                self.match(EParser.STORABLE)


            self.state = 768
            self.match(EParser.NATIVE)
            self.state = 769
            self.match(EParser.RESOURCE)
            self.state = 777
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,24,self._ctx)
            if la_ == 1:
                self.state = 770
                localctx.attrs = self.attribute_list()
                self.state = 771
                self.match(EParser.COMMA)
                self.state = 772
                self.match(EParser.AND)
                self.state = 773
                self.match(EParser.BINDINGS)
                pass

            elif la_ == 2:
                self.state = 775
                self.match(EParser.WITH)
                self.state = 776
                self.match(EParser.BINDINGS)
                pass


            self.state = 779
            self.match(EParser.COLON)
            self.state = 780
            self.indent()
            self.state = 781
            localctx.bindings = self.native_category_bindings()
            self.state = 782
            self.dedent()
            self.state = 791
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,25,self._ctx)
            if la_ == 1:
                self.state = 783
                self.lfp()
                self.state = 784
                self.match(EParser.AND)
                self.state = 785
                self.match(EParser.METHODS)
                self.state = 786
                self.match(EParser.COLON)
                self.state = 787
                self.indent()
                self.state = 788
                localctx.methods = self.native_member_method_declaration_list()
                self.state = 789
                self.dedent()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Native_category_bindingsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.items = None # Native_category_binding_listContext

        def DEFINE(self):
            return self.getToken(EParser.DEFINE, 0)

        def CATEGORY(self):
            return self.getToken(EParser.CATEGORY, 0)

        def BINDINGS(self):
            return self.getToken(EParser.BINDINGS, 0)

        def AS(self):
            return self.getToken(EParser.AS, 0)

        def COLON(self):
            return self.getToken(EParser.COLON, 0)

        def indent(self):
            return self.getTypedRuleContext(EParser.IndentContext,0)


        def dedent(self):
            return self.getTypedRuleContext(EParser.DedentContext,0)


        def native_category_binding_list(self):
            return self.getTypedRuleContext(EParser.Native_category_binding_listContext,0)


        def getRuleIndex(self):
            return EParser.RULE_native_category_bindings

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNative_category_bindings" ):
                listener.enterNative_category_bindings(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNative_category_bindings" ):
                listener.exitNative_category_bindings(self)




    def native_category_bindings(self):

        localctx = EParser.Native_category_bindingsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_native_category_bindings)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 793
            self.match(EParser.DEFINE)
            self.state = 794
            self.match(EParser.CATEGORY)
            self.state = 795
            self.match(EParser.BINDINGS)
            self.state = 796
            self.match(EParser.AS)
            self.state = 797
            self.match(EParser.COLON)
            self.state = 798
            self.indent()
            self.state = 799
            localctx.items = self.native_category_binding_list(0)
            self.state = 800
            self.dedent()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Native_category_binding_listContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return EParser.RULE_native_category_binding_list

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class NativeCategoryBindingListItemContext(Native_category_binding_listContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a EParser.Native_category_binding_listContext
            super().__init__(parser)
            self.items = None # Native_category_binding_listContext
            self.item = None # Native_category_bindingContext
            self.copyFrom(ctx)

        def lfp(self):
            return self.getTypedRuleContext(EParser.LfpContext,0)

        def native_category_binding_list(self):
            return self.getTypedRuleContext(EParser.Native_category_binding_listContext,0)

        def native_category_binding(self):
            return self.getTypedRuleContext(EParser.Native_category_bindingContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNativeCategoryBindingListItem" ):
                listener.enterNativeCategoryBindingListItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNativeCategoryBindingListItem" ):
                listener.exitNativeCategoryBindingListItem(self)


    class NativeCategoryBindingListContext(Native_category_binding_listContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a EParser.Native_category_binding_listContext
            super().__init__(parser)
            self.item = None # Native_category_bindingContext
            self.copyFrom(ctx)

        def native_category_binding(self):
            return self.getTypedRuleContext(EParser.Native_category_bindingContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNativeCategoryBindingList" ):
                listener.enterNativeCategoryBindingList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNativeCategoryBindingList" ):
                listener.exitNativeCategoryBindingList(self)



    def native_category_binding_list(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = EParser.Native_category_binding_listContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 36
        self.enterRecursionRule(localctx, 36, self.RULE_native_category_binding_list, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            localctx = EParser.NativeCategoryBindingListContext(self, localctx)
            self._ctx = localctx
            _prevctx = localctx

            self.state = 803
            localctx.item = self.native_category_binding()
            self._ctx.stop = self._input.LT(-1)
            self.state = 811
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,26,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = EParser.NativeCategoryBindingListItemContext(self, EParser.Native_category_binding_listContext(self, _parentctx, _parentState))
                    localctx.items = _prevctx
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_native_category_binding_list)
                    self.state = 805
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 806
                    self.lfp()
                    self.state = 807
                    localctx.item = self.native_category_binding() 
                self.state = 813
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,26,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class Attribute_listContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return EParser.RULE_attribute_list

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class AttributeListContext(Attribute_listContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a EParser.Attribute_listContext
            super().__init__(parser)
            self.item = None # Attribute_identifierContext
            self.copyFrom(ctx)

        def WITH(self):
            return self.getToken(EParser.WITH, 0)
        def ATTRIBUTE(self):
            return self.getToken(EParser.ATTRIBUTE, 0)
        def attribute_identifier(self):
            return self.getTypedRuleContext(EParser.Attribute_identifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttributeList" ):
                listener.enterAttributeList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttributeList" ):
                listener.exitAttributeList(self)


    class AttributeListItemContext(Attribute_listContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a EParser.Attribute_listContext
            super().__init__(parser)
            self.items = None # Attribute_identifier_listContext
            self.item = None # Attribute_identifierContext
            self.copyFrom(ctx)

        def WITH(self):
            return self.getToken(EParser.WITH, 0)
        def ATTRIBUTES(self):
            return self.getToken(EParser.ATTRIBUTES, 0)
        def attribute_identifier_list(self):
            return self.getTypedRuleContext(EParser.Attribute_identifier_listContext,0)

        def AND(self):
            return self.getToken(EParser.AND, 0)
        def attribute_identifier(self):
            return self.getTypedRuleContext(EParser.Attribute_identifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttributeListItem" ):
                listener.enterAttributeListItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttributeListItem" ):
                listener.exitAttributeListItem(self)



    def attribute_list(self):

        localctx = EParser.Attribute_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_attribute_list)
        try:
            self.state = 824
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,28,self._ctx)
            if la_ == 1:
                localctx = EParser.AttributeListContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 814
                self.match(EParser.WITH)
                self.state = 815
                self.match(EParser.ATTRIBUTE)
                self.state = 816
                localctx.item = self.attribute_identifier()
                pass

            elif la_ == 2:
                localctx = EParser.AttributeListItemContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 817
                self.match(EParser.WITH)
                self.state = 818
                self.match(EParser.ATTRIBUTES)
                self.state = 819
                localctx.items = self.attribute_identifier_list()
                self.state = 822
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,27,self._ctx)
                if la_ == 1:
                    self.state = 820
                    self.match(EParser.AND)
                    self.state = 821
                    localctx.item = self.attribute_identifier()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Abstract_method_declarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # Method_identifierContext
            self.args = None # Full_argument_listContext
            self.typ = None # TypedefContext

        def DEFINE(self):
            return self.getToken(EParser.DEFINE, 0)

        def AS(self):
            return self.getToken(EParser.AS, 0)

        def ABSTRACT(self):
            return self.getToken(EParser.ABSTRACT, 0)

        def METHOD(self):
            return self.getToken(EParser.METHOD, 0)

        def method_identifier(self):
            return self.getTypedRuleContext(EParser.Method_identifierContext,0)


        def RECEIVING(self):
            return self.getToken(EParser.RECEIVING, 0)

        def RETURNING(self):
            return self.getToken(EParser.RETURNING, 0)

        def full_argument_list(self):
            return self.getTypedRuleContext(EParser.Full_argument_listContext,0)


        def typedef(self):
            return self.getTypedRuleContext(EParser.TypedefContext,0)


        def getRuleIndex(self):
            return EParser.RULE_abstract_method_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAbstract_method_declaration" ):
                listener.enterAbstract_method_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAbstract_method_declaration" ):
                listener.exitAbstract_method_declaration(self)




    def abstract_method_declaration(self):

        localctx = EParser.Abstract_method_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_abstract_method_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 826
            self.match(EParser.DEFINE)
            self.state = 827
            localctx.name = self.method_identifier()
            self.state = 828
            self.match(EParser.AS)
            self.state = 829
            self.match(EParser.ABSTRACT)
            self.state = 830
            self.match(EParser.METHOD)
            self.state = 833
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==EParser.RECEIVING:
                self.state = 831
                self.match(EParser.RECEIVING)
                self.state = 832
                localctx.args = self.full_argument_list()


            self.state = 837
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==EParser.RETURNING:
                self.state = 835
                self.match(EParser.RETURNING)
                self.state = 836
                localctx.typ = self.typedef(0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Concrete_method_declarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # Method_identifierContext
            self.args = None # Full_argument_listContext
            self.typ = None # TypedefContext
            self.stmts = None # Statement_listContext

        def DEFINE(self):
            return self.getToken(EParser.DEFINE, 0)

        def AS(self):
            return self.getToken(EParser.AS, 0)

        def METHOD(self):
            return self.getToken(EParser.METHOD, 0)

        def DOING(self):
            return self.getToken(EParser.DOING, 0)

        def COLON(self):
            return self.getToken(EParser.COLON, 0)

        def indent(self):
            return self.getTypedRuleContext(EParser.IndentContext,0)


        def dedent(self):
            return self.getTypedRuleContext(EParser.DedentContext,0)


        def method_identifier(self):
            return self.getTypedRuleContext(EParser.Method_identifierContext,0)


        def PASS(self):
            return self.getToken(EParser.PASS, 0)

        def RECEIVING(self):
            return self.getToken(EParser.RECEIVING, 0)

        def RETURNING(self):
            return self.getToken(EParser.RETURNING, 0)

        def statement_list(self):
            return self.getTypedRuleContext(EParser.Statement_listContext,0)


        def full_argument_list(self):
            return self.getTypedRuleContext(EParser.Full_argument_listContext,0)


        def typedef(self):
            return self.getTypedRuleContext(EParser.TypedefContext,0)


        def getRuleIndex(self):
            return EParser.RULE_concrete_method_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConcrete_method_declaration" ):
                listener.enterConcrete_method_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConcrete_method_declaration" ):
                listener.exitConcrete_method_declaration(self)




    def concrete_method_declaration(self):

        localctx = EParser.Concrete_method_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_concrete_method_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 839
            self.match(EParser.DEFINE)
            self.state = 840
            localctx.name = self.method_identifier()
            self.state = 841
            self.match(EParser.AS)
            self.state = 842
            self.match(EParser.METHOD)
            self.state = 845
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==EParser.RECEIVING:
                self.state = 843
                self.match(EParser.RECEIVING)
                self.state = 844
                localctx.args = self.full_argument_list()


            self.state = 849
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==EParser.RETURNING:
                self.state = 847
                self.match(EParser.RETURNING)
                self.state = 848
                localctx.typ = self.typedef(0)


            self.state = 851
            self.match(EParser.DOING)
            self.state = 852
            self.match(EParser.COLON)
            self.state = 853
            self.indent()
            self.state = 856
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [EParser.COMMENT, EParser.BREAK, EParser.DEFINE, EParser.DELETE, EParser.DO, EParser.FETCH, EParser.FLUSH, EParser.FOR, EParser.IF, EParser.INVOKE_COLON, EParser.RAISE, EParser.RETURN, EParser.STORE, EParser.SWITCH, EParser.WITH, EParser.WHILE, EParser.WRITE, EParser.SYMBOL_IDENTIFIER, EParser.TYPE_IDENTIFIER, EParser.VARIABLE_IDENTIFIER]:
                self.state = 854
                localctx.stmts = self.statement_list()
                pass
            elif token in [EParser.PASS]:
                self.state = 855
                self.match(EParser.PASS)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 858
            self.dedent()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Native_method_declarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # Method_identifierContext
            self.args = None # Full_argument_listContext
            self.typ = None # Category_or_any_typeContext
            self.stmts = None # Native_statement_listContext

        def DEFINE(self):
            return self.getToken(EParser.DEFINE, 0)

        def AS(self):
            return self.getToken(EParser.AS, 0)

        def METHOD(self):
            return self.getToken(EParser.METHOD, 0)

        def DOING(self):
            return self.getToken(EParser.DOING, 0)

        def COLON(self):
            return self.getToken(EParser.COLON, 0)

        def indent(self):
            return self.getTypedRuleContext(EParser.IndentContext,0)


        def dedent(self):
            return self.getTypedRuleContext(EParser.DedentContext,0)


        def method_identifier(self):
            return self.getTypedRuleContext(EParser.Method_identifierContext,0)


        def native_statement_list(self):
            return self.getTypedRuleContext(EParser.Native_statement_listContext,0)


        def NATIVE(self):
            return self.getToken(EParser.NATIVE, 0)

        def RECEIVING(self):
            return self.getToken(EParser.RECEIVING, 0)

        def RETURNING(self):
            return self.getToken(EParser.RETURNING, 0)

        def full_argument_list(self):
            return self.getTypedRuleContext(EParser.Full_argument_listContext,0)


        def category_or_any_type(self):
            return self.getTypedRuleContext(EParser.Category_or_any_typeContext,0)


        def getRuleIndex(self):
            return EParser.RULE_native_method_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNative_method_declaration" ):
                listener.enterNative_method_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNative_method_declaration" ):
                listener.exitNative_method_declaration(self)




    def native_method_declaration(self):

        localctx = EParser.Native_method_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_native_method_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 860
            self.match(EParser.DEFINE)
            self.state = 861
            localctx.name = self.method_identifier()
            self.state = 862
            self.match(EParser.AS)
            self.state = 864
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==EParser.NATIVE:
                self.state = 863
                self.match(EParser.NATIVE)


            self.state = 866
            self.match(EParser.METHOD)
            self.state = 869
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==EParser.RECEIVING:
                self.state = 867
                self.match(EParser.RECEIVING)
                self.state = 868
                localctx.args = self.full_argument_list()


            self.state = 873
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==EParser.RETURNING:
                self.state = 871
                self.match(EParser.RETURNING)
                self.state = 872
                localctx.typ = self.category_or_any_type()


            self.state = 875
            self.match(EParser.DOING)
            self.state = 876
            self.match(EParser.COLON)
            self.state = 877
            self.indent()
            self.state = 878
            localctx.stmts = self.native_statement_list()
            self.state = 879
            self.dedent()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Test_method_declarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # Token
            self.stmts = None # Statement_listContext
            self.exps = None # Assertion_listContext
            self.error = None # Symbol_identifierContext

        def DEFINE(self):
            return self.getToken(EParser.DEFINE, 0)

        def AS(self):
            return self.getToken(EParser.AS, 0)

        def TEST(self):
            return self.getToken(EParser.TEST, 0)

        def METHOD(self):
            return self.getToken(EParser.METHOD, 0)

        def DOING(self):
            return self.getToken(EParser.DOING, 0)

        def COLON(self, i:int=None):
            if i is None:
                return self.getTokens(EParser.COLON)
            else:
                return self.getToken(EParser.COLON, i)

        def indent(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(EParser.IndentContext)
            else:
                return self.getTypedRuleContext(EParser.IndentContext,i)


        def dedent(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(EParser.DedentContext)
            else:
                return self.getTypedRuleContext(EParser.DedentContext,i)


        def lfp(self):
            return self.getTypedRuleContext(EParser.LfpContext,0)


        def AND(self):
            return self.getToken(EParser.AND, 0)

        def VERIFYING(self):
            return self.getToken(EParser.VERIFYING, 0)

        def TEXT_LITERAL(self):
            return self.getToken(EParser.TEXT_LITERAL, 0)

        def statement_list(self):
            return self.getTypedRuleContext(EParser.Statement_listContext,0)


        def symbol_identifier(self):
            return self.getTypedRuleContext(EParser.Symbol_identifierContext,0)


        def assertion_list(self):
            return self.getTypedRuleContext(EParser.Assertion_listContext,0)


        def getRuleIndex(self):
            return EParser.RULE_test_method_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTest_method_declaration" ):
                listener.enterTest_method_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTest_method_declaration" ):
                listener.exitTest_method_declaration(self)




    def test_method_declaration(self):

        localctx = EParser.Test_method_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_test_method_declaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 881
            self.match(EParser.DEFINE)
            self.state = 882
            localctx.name = self.match(EParser.TEXT_LITERAL)
            self.state = 883
            self.match(EParser.AS)
            self.state = 884
            self.match(EParser.TEST)
            self.state = 885
            self.match(EParser.METHOD)
            self.state = 886
            self.match(EParser.DOING)
            self.state = 887
            self.match(EParser.COLON)
            self.state = 888
            self.indent()
            self.state = 889
            localctx.stmts = self.statement_list()
            self.state = 890
            self.dedent()
            self.state = 891
            self.lfp()
            self.state = 892
            self.match(EParser.AND)
            self.state = 893
            self.match(EParser.VERIFYING)
            self.state = 900
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [EParser.COLON]:
                self.state = 894
                self.match(EParser.COLON)
                self.state = 895
                self.indent()
                self.state = 896
                localctx.exps = self.assertion_list()
                self.state = 897
                self.dedent()
                pass
            elif token in [EParser.SYMBOL_IDENTIFIER]:
                self.state = 899
                localctx.error = self.symbol_identifier()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AssertionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.exp = None # ExpressionContext

        def expression(self):
            return self.getTypedRuleContext(EParser.ExpressionContext,0)


        def getRuleIndex(self):
            return EParser.RULE_assertion

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssertion" ):
                listener.enterAssertion(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssertion" ):
                listener.exitAssertion(self)




    def assertion(self):

        localctx = EParser.AssertionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_assertion)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 902
            localctx.exp = self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Full_argument_listContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.items = None # Argument_listContext
            self.item = None # ArgumentContext

        def argument_list(self):
            return self.getTypedRuleContext(EParser.Argument_listContext,0)


        def AND(self):
            return self.getToken(EParser.AND, 0)

        def argument(self):
            return self.getTypedRuleContext(EParser.ArgumentContext,0)


        def getRuleIndex(self):
            return EParser.RULE_full_argument_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFull_argument_list" ):
                listener.enterFull_argument_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFull_argument_list" ):
                listener.exitFull_argument_list(self)




    def full_argument_list(self):

        localctx = EParser.Full_argument_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_full_argument_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 904
            localctx.items = self.argument_list()
            self.state = 907
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==EParser.AND:
                self.state = 905
                self.match(EParser.AND)
                self.state = 906
                localctx.item = self.argument()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Typed_argumentContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.typ = None # Category_or_any_typeContext
            self.name = None # Variable_identifierContext
            self.attrs = None # Attribute_listContext
            self.value = None # Literal_expressionContext

        def category_or_any_type(self):
            return self.getTypedRuleContext(EParser.Category_or_any_typeContext,0)


        def variable_identifier(self):
            return self.getTypedRuleContext(EParser.Variable_identifierContext,0)


        def EQ(self):
            return self.getToken(EParser.EQ, 0)

        def attribute_list(self):
            return self.getTypedRuleContext(EParser.Attribute_listContext,0)


        def literal_expression(self):
            return self.getTypedRuleContext(EParser.Literal_expressionContext,0)


        def getRuleIndex(self):
            return EParser.RULE_typed_argument

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTyped_argument" ):
                listener.enterTyped_argument(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTyped_argument" ):
                listener.exitTyped_argument(self)




    def typed_argument(self):

        localctx = EParser.Typed_argumentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_typed_argument)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 909
            localctx.typ = self.category_or_any_type()
            self.state = 910
            localctx.name = self.variable_identifier()
            self.state = 912
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==EParser.WITH:
                self.state = 911
                localctx.attrs = self.attribute_list()


            self.state = 916
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==EParser.EQ:
                self.state = 914
                self.match(EParser.EQ)
                self.state = 915
                localctx.value = self.literal_expression()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class StatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return EParser.RULE_statement

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class CommentStatementContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a EParser.StatementContext
            super().__init__(parser)
            self.decl = None # Comment_statementContext
            self.copyFrom(ctx)

        def comment_statement(self):
            return self.getTypedRuleContext(EParser.Comment_statementContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCommentStatement" ):
                listener.enterCommentStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCommentStatement" ):
                listener.exitCommentStatement(self)


    class StoreStatementContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a EParser.StatementContext
            super().__init__(parser)
            self.stmt = None # Store_statementContext
            self.copyFrom(ctx)

        def store_statement(self):
            return self.getTypedRuleContext(EParser.Store_statementContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStoreStatement" ):
                listener.enterStoreStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStoreStatement" ):
                listener.exitStoreStatement(self)


    class WithSingletonStatementContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a EParser.StatementContext
            super().__init__(parser)
            self.stmt = None # With_singleton_statementContext
            self.copyFrom(ctx)

        def with_singleton_statement(self):
            return self.getTypedRuleContext(EParser.With_singleton_statementContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWithSingletonStatement" ):
                listener.enterWithSingletonStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWithSingletonStatement" ):
                listener.exitWithSingletonStatement(self)


    class WriteStatementContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a EParser.StatementContext
            super().__init__(parser)
            self.stmt = None # Write_statementContext
            self.copyFrom(ctx)

        def write_statement(self):
            return self.getTypedRuleContext(EParser.Write_statementContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWriteStatement" ):
                listener.enterWriteStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWriteStatement" ):
                listener.exitWriteStatement(self)


    class WhileStatementContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a EParser.StatementContext
            super().__init__(parser)
            self.stmt = None # While_statementContext
            self.copyFrom(ctx)

        def while_statement(self):
            return self.getTypedRuleContext(EParser.While_statementContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhileStatement" ):
                listener.enterWhileStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhileStatement" ):
                listener.exitWhileStatement(self)


    class WithResourceStatementContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a EParser.StatementContext
            super().__init__(parser)
            self.stmt = None # With_resource_statementContext
            self.copyFrom(ctx)

        def with_resource_statement(self):
            return self.getTypedRuleContext(EParser.With_resource_statementContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWithResourceStatement" ):
                listener.enterWithResourceStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWithResourceStatement" ):
                listener.exitWithResourceStatement(self)


    class RaiseStatementContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a EParser.StatementContext
            super().__init__(parser)
            self.stmt = None # Raise_statementContext
            self.copyFrom(ctx)

        def raise_statement(self):
            return self.getTypedRuleContext(EParser.Raise_statementContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRaiseStatement" ):
                listener.enterRaiseStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRaiseStatement" ):
                listener.exitRaiseStatement(self)


    class FetchStatementContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a EParser.StatementContext
            super().__init__(parser)
            self.stmt = None # Fetch_statementContext
            self.copyFrom(ctx)

        def fetch_statement(self):
            return self.getTypedRuleContext(EParser.Fetch_statementContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFetchStatement" ):
                listener.enterFetchStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFetchStatement" ):
                listener.exitFetchStatement(self)


    class BreakStatementContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a EParser.StatementContext
            super().__init__(parser)
            self.stmt = None # Break_statementContext
            self.copyFrom(ctx)

        def break_statement(self):
            return self.getTypedRuleContext(EParser.Break_statementContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBreakStatement" ):
                listener.enterBreakStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBreakStatement" ):
                listener.exitBreakStatement(self)


    class AssignInstanceStatementContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a EParser.StatementContext
            super().__init__(parser)
            self.stmt = None # Assign_instance_statementContext
            self.copyFrom(ctx)

        def assign_instance_statement(self):
            return self.getTypedRuleContext(EParser.Assign_instance_statementContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignInstanceStatement" ):
                listener.enterAssignInstanceStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignInstanceStatement" ):
                listener.exitAssignInstanceStatement(self)


    class IfStatementContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a EParser.StatementContext
            super().__init__(parser)
            self.stmt = None # If_statementContext
            self.copyFrom(ctx)

        def if_statement(self):
            return self.getTypedRuleContext(EParser.If_statementContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIfStatement" ):
                listener.enterIfStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIfStatement" ):
                listener.exitIfStatement(self)


    class SwitchStatementContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a EParser.StatementContext
            super().__init__(parser)
            self.stmt = None # Switch_statementContext
            self.copyFrom(ctx)

        def switch_statement(self):
            return self.getTypedRuleContext(EParser.Switch_statementContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSwitchStatement" ):
                listener.enterSwitchStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSwitchStatement" ):
                listener.exitSwitchStatement(self)


    class TryStatementContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a EParser.StatementContext
            super().__init__(parser)
            self.stmt = None # Try_statementContext
            self.copyFrom(ctx)

        def try_statement(self):
            return self.getTypedRuleContext(EParser.Try_statementContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTryStatement" ):
                listener.enterTryStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTryStatement" ):
                listener.exitTryStatement(self)


    class MethodCallStatementContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a EParser.StatementContext
            super().__init__(parser)
            self.stmt = None # Method_call_statementContext
            self.copyFrom(ctx)

        def method_call_statement(self):
            return self.getTypedRuleContext(EParser.Method_call_statementContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMethodCallStatement" ):
                listener.enterMethodCallStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMethodCallStatement" ):
                listener.exitMethodCallStatement(self)


    class ReturnStatementContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a EParser.StatementContext
            super().__init__(parser)
            self.stmt = None # Return_statementContext
            self.copyFrom(ctx)

        def return_statement(self):
            return self.getTypedRuleContext(EParser.Return_statementContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReturnStatement" ):
                listener.enterReturnStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReturnStatement" ):
                listener.exitReturnStatement(self)


    class AssignTupleStatementContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a EParser.StatementContext
            super().__init__(parser)
            self.stmt = None # Assign_tuple_statementContext
            self.copyFrom(ctx)

        def assign_tuple_statement(self):
            return self.getTypedRuleContext(EParser.Assign_tuple_statementContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignTupleStatement" ):
                listener.enterAssignTupleStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignTupleStatement" ):
                listener.exitAssignTupleStatement(self)


    class ClosureStatementContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a EParser.StatementContext
            super().__init__(parser)
            self.decl = None # Concrete_method_declarationContext
            self.copyFrom(ctx)

        def concrete_method_declaration(self):
            return self.getTypedRuleContext(EParser.Concrete_method_declarationContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClosureStatement" ):
                listener.enterClosureStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClosureStatement" ):
                listener.exitClosureStatement(self)


    class FlushStatementContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a EParser.StatementContext
            super().__init__(parser)
            self.stmt = None # Flush_statementContext
            self.copyFrom(ctx)

        def flush_statement(self):
            return self.getTypedRuleContext(EParser.Flush_statementContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFlushStatement" ):
                listener.enterFlushStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFlushStatement" ):
                listener.exitFlushStatement(self)


    class DoWhileStatementContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a EParser.StatementContext
            super().__init__(parser)
            self.stmt = None # Do_while_statementContext
            self.copyFrom(ctx)

        def do_while_statement(self):
            return self.getTypedRuleContext(EParser.Do_while_statementContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDoWhileStatement" ):
                listener.enterDoWhileStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDoWhileStatement" ):
                listener.exitDoWhileStatement(self)


    class ForEachStatementContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a EParser.StatementContext
            super().__init__(parser)
            self.stmt = None # For_each_statementContext
            self.copyFrom(ctx)

        def for_each_statement(self):
            return self.getTypedRuleContext(EParser.For_each_statementContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForEachStatement" ):
                listener.enterForEachStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForEachStatement" ):
                listener.exitForEachStatement(self)



    def statement(self):

        localctx = EParser.StatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_statement)
        try:
            self.state = 938
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,41,self._ctx)
            if la_ == 1:
                localctx = EParser.AssignInstanceStatementContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 918
                localctx.stmt = self.assign_instance_statement()
                pass

            elif la_ == 2:
                localctx = EParser.MethodCallStatementContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 919
                localctx.stmt = self.method_call_statement()
                pass

            elif la_ == 3:
                localctx = EParser.AssignTupleStatementContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 920
                localctx.stmt = self.assign_tuple_statement()
                pass

            elif la_ == 4:
                localctx = EParser.StoreStatementContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 921
                localctx.stmt = self.store_statement()
                pass

            elif la_ == 5:
                localctx = EParser.FetchStatementContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 922
                localctx.stmt = self.fetch_statement()
                pass

            elif la_ == 6:
                localctx = EParser.FlushStatementContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 923
                localctx.stmt = self.flush_statement()
                pass

            elif la_ == 7:
                localctx = EParser.BreakStatementContext(self, localctx)
                self.enterOuterAlt(localctx, 7)
                self.state = 924
                localctx.stmt = self.break_statement()
                pass

            elif la_ == 8:
                localctx = EParser.ReturnStatementContext(self, localctx)
                self.enterOuterAlt(localctx, 8)
                self.state = 925
                localctx.stmt = self.return_statement()
                pass

            elif la_ == 9:
                localctx = EParser.IfStatementContext(self, localctx)
                self.enterOuterAlt(localctx, 9)
                self.state = 926
                localctx.stmt = self.if_statement()
                pass

            elif la_ == 10:
                localctx = EParser.SwitchStatementContext(self, localctx)
                self.enterOuterAlt(localctx, 10)
                self.state = 927
                localctx.stmt = self.switch_statement()
                pass

            elif la_ == 11:
                localctx = EParser.ForEachStatementContext(self, localctx)
                self.enterOuterAlt(localctx, 11)
                self.state = 928
                localctx.stmt = self.for_each_statement()
                pass

            elif la_ == 12:
                localctx = EParser.WhileStatementContext(self, localctx)
                self.enterOuterAlt(localctx, 12)
                self.state = 929
                localctx.stmt = self.while_statement()
                pass

            elif la_ == 13:
                localctx = EParser.DoWhileStatementContext(self, localctx)
                self.enterOuterAlt(localctx, 13)
                self.state = 930
                localctx.stmt = self.do_while_statement()
                pass

            elif la_ == 14:
                localctx = EParser.RaiseStatementContext(self, localctx)
                self.enterOuterAlt(localctx, 14)
                self.state = 931
                localctx.stmt = self.raise_statement()
                pass

            elif la_ == 15:
                localctx = EParser.TryStatementContext(self, localctx)
                self.enterOuterAlt(localctx, 15)
                self.state = 932
                localctx.stmt = self.try_statement()
                pass

            elif la_ == 16:
                localctx = EParser.WriteStatementContext(self, localctx)
                self.enterOuterAlt(localctx, 16)
                self.state = 933
                localctx.stmt = self.write_statement()
                pass

            elif la_ == 17:
                localctx = EParser.WithResourceStatementContext(self, localctx)
                self.enterOuterAlt(localctx, 17)
                self.state = 934
                localctx.stmt = self.with_resource_statement()
                pass

            elif la_ == 18:
                localctx = EParser.WithSingletonStatementContext(self, localctx)
                self.enterOuterAlt(localctx, 18)
                self.state = 935
                localctx.stmt = self.with_singleton_statement()
                pass

            elif la_ == 19:
                localctx = EParser.ClosureStatementContext(self, localctx)
                self.enterOuterAlt(localctx, 19)
                self.state = 936
                localctx.decl = self.concrete_method_declaration()
                pass

            elif la_ == 20:
                localctx = EParser.CommentStatementContext(self, localctx)
                self.enterOuterAlt(localctx, 20)
                self.state = 937
                localctx.decl = self.comment_statement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Flush_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FLUSH(self):
            return self.getToken(EParser.FLUSH, 0)

        def getRuleIndex(self):
            return EParser.RULE_flush_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFlush_statement" ):
                listener.enterFlush_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFlush_statement" ):
                listener.exitFlush_statement(self)




    def flush_statement(self):

        localctx = EParser.Flush_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_flush_statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 940
            self.match(EParser.FLUSH)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Store_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.to_del = None # Expression_listContext
            self.to_add = None # Expression_listContext
            self.stmts = None # Statement_listContext

        def DELETE(self):
            return self.getToken(EParser.DELETE, 0)

        def STORE(self):
            return self.getToken(EParser.STORE, 0)

        def expression_list(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(EParser.Expression_listContext)
            else:
                return self.getTypedRuleContext(EParser.Expression_listContext,i)


        def THEN(self):
            return self.getToken(EParser.THEN, 0)

        def COLON(self):
            return self.getToken(EParser.COLON, 0)

        def indent(self):
            return self.getTypedRuleContext(EParser.IndentContext,0)


        def dedent(self):
            return self.getTypedRuleContext(EParser.DedentContext,0)


        def statement_list(self):
            return self.getTypedRuleContext(EParser.Statement_listContext,0)


        def AND(self):
            return self.getToken(EParser.AND, 0)

        def getRuleIndex(self):
            return EParser.RULE_store_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStore_statement" ):
                listener.enterStore_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStore_statement" ):
                listener.exitStore_statement(self)




    def store_statement(self):

        localctx = EParser.Store_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_store_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 951
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [EParser.DELETE]:
                self.state = 942
                self.match(EParser.DELETE)
                self.state = 943
                localctx.to_del = self.expression_list()
                self.state = 947
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==EParser.AND:
                    self.state = 944
                    self.match(EParser.AND)
                    self.state = 945
                    self.match(EParser.STORE)
                    self.state = 946
                    localctx.to_add = self.expression_list()


                pass
            elif token in [EParser.STORE]:
                self.state = 949
                self.match(EParser.STORE)
                self.state = 950
                localctx.to_add = self.expression_list()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 959
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==EParser.THEN:
                self.state = 953
                self.match(EParser.THEN)
                self.state = 954
                self.match(EParser.COLON)
                self.state = 955
                self.indent()
                self.state = 956
                localctx.stmts = self.statement_list()
                self.state = 957
                self.dedent()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Method_call_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return EParser.RULE_method_call_statement

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class InvokeStatementContext(Method_call_statementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a EParser.Method_call_statementContext
            super().__init__(parser)
            self.exp = None # Invocation_expressionContext
            self.copyFrom(ctx)

        def invocation_expression(self):
            return self.getTypedRuleContext(EParser.Invocation_expressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInvokeStatement" ):
                listener.enterInvokeStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInvokeStatement" ):
                listener.exitInvokeStatement(self)


    class UnresolvedWithArgsStatementContext(Method_call_statementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a EParser.Method_call_statementContext
            super().__init__(parser)
            self.exp = None # Unresolved_expressionContext
            self.args = None # Argument_assignment_listContext
            self.name = None # Variable_identifierContext
            self.stmts = None # Statement_listContext
            self.copyFrom(ctx)

        def unresolved_expression(self):
            return self.getTypedRuleContext(EParser.Unresolved_expressionContext,0)

        def THEN(self):
            return self.getToken(EParser.THEN, 0)
        def COLON(self):
            return self.getToken(EParser.COLON, 0)
        def indent(self):
            return self.getTypedRuleContext(EParser.IndentContext,0)

        def dedent(self):
            return self.getTypedRuleContext(EParser.DedentContext,0)

        def argument_assignment_list(self):
            return self.getTypedRuleContext(EParser.Argument_assignment_listContext,0)

        def statement_list(self):
            return self.getTypedRuleContext(EParser.Statement_listContext,0)

        def WITH(self):
            return self.getToken(EParser.WITH, 0)
        def variable_identifier(self):
            return self.getTypedRuleContext(EParser.Variable_identifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnresolvedWithArgsStatement" ):
                listener.enterUnresolvedWithArgsStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnresolvedWithArgsStatement" ):
                listener.exitUnresolvedWithArgsStatement(self)



    def method_call_statement(self):

        localctx = EParser.Method_call_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_method_call_statement)
        self._la = 0 # Token type
        try:
            self.state = 978
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [EParser.SYMBOL_IDENTIFIER, EParser.TYPE_IDENTIFIER, EParser.VARIABLE_IDENTIFIER]:
                localctx = EParser.UnresolvedWithArgsStatementContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 961
                localctx.exp = self.unresolved_expression(0)
                self.state = 963
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,45,self._ctx)
                if la_ == 1:
                    self.state = 962
                    localctx.args = self.argument_assignment_list()


                self.state = 975
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==EParser.THEN:
                    self.state = 965
                    self.match(EParser.THEN)
                    self.state = 968
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==EParser.WITH:
                        self.state = 966
                        self.match(EParser.WITH)
                        self.state = 967
                        localctx.name = self.variable_identifier()


                    self.state = 970
                    self.match(EParser.COLON)
                    self.state = 971
                    self.indent()
                    self.state = 972
                    localctx.stmts = self.statement_list()
                    self.state = 973
                    self.dedent()


                pass
            elif token in [EParser.INVOKE_COLON]:
                localctx = EParser.InvokeStatementContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 977
                localctx.exp = self.invocation_expression()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class With_resource_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.stmt = None # Assign_variable_statementContext
            self.stmts = None # Statement_listContext

        def WITH(self):
            return self.getToken(EParser.WITH, 0)

        def COMMA(self):
            return self.getToken(EParser.COMMA, 0)

        def DO(self):
            return self.getToken(EParser.DO, 0)

        def COLON(self):
            return self.getToken(EParser.COLON, 0)

        def indent(self):
            return self.getTypedRuleContext(EParser.IndentContext,0)


        def dedent(self):
            return self.getTypedRuleContext(EParser.DedentContext,0)


        def assign_variable_statement(self):
            return self.getTypedRuleContext(EParser.Assign_variable_statementContext,0)


        def statement_list(self):
            return self.getTypedRuleContext(EParser.Statement_listContext,0)


        def getRuleIndex(self):
            return EParser.RULE_with_resource_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWith_resource_statement" ):
                listener.enterWith_resource_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWith_resource_statement" ):
                listener.exitWith_resource_statement(self)




    def with_resource_statement(self):

        localctx = EParser.With_resource_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_with_resource_statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 980
            self.match(EParser.WITH)
            self.state = 981
            localctx.stmt = self.assign_variable_statement()
            self.state = 982
            self.match(EParser.COMMA)
            self.state = 983
            self.match(EParser.DO)
            self.state = 984
            self.match(EParser.COLON)
            self.state = 985
            self.indent()
            self.state = 986
            localctx.stmts = self.statement_list()
            self.state = 987
            self.dedent()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class With_singleton_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.typ = None # Type_identifierContext
            self.stmts = None # Statement_listContext

        def WITH(self):
            return self.getToken(EParser.WITH, 0)

        def COMMA(self):
            return self.getToken(EParser.COMMA, 0)

        def DO(self):
            return self.getToken(EParser.DO, 0)

        def COLON(self):
            return self.getToken(EParser.COLON, 0)

        def indent(self):
            return self.getTypedRuleContext(EParser.IndentContext,0)


        def dedent(self):
            return self.getTypedRuleContext(EParser.DedentContext,0)


        def type_identifier(self):
            return self.getTypedRuleContext(EParser.Type_identifierContext,0)


        def statement_list(self):
            return self.getTypedRuleContext(EParser.Statement_listContext,0)


        def getRuleIndex(self):
            return EParser.RULE_with_singleton_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWith_singleton_statement" ):
                listener.enterWith_singleton_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWith_singleton_statement" ):
                listener.exitWith_singleton_statement(self)




    def with_singleton_statement(self):

        localctx = EParser.With_singleton_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_with_singleton_statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 989
            self.match(EParser.WITH)
            self.state = 990
            localctx.typ = self.type_identifier()
            self.state = 991
            self.match(EParser.COMMA)
            self.state = 992
            self.match(EParser.DO)
            self.state = 993
            self.match(EParser.COLON)
            self.state = 994
            self.indent()
            self.state = 995
            localctx.stmts = self.statement_list()
            self.state = 996
            self.dedent()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Switch_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.exp = None # ExpressionContext
            self.cases = None # Switch_case_statement_listContext
            self.stmts = None # Statement_listContext

        def SWITCH(self):
            return self.getToken(EParser.SWITCH, 0)

        def ON(self):
            return self.getToken(EParser.ON, 0)

        def COLON(self, i:int=None):
            if i is None:
                return self.getTokens(EParser.COLON)
            else:
                return self.getToken(EParser.COLON, i)

        def indent(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(EParser.IndentContext)
            else:
                return self.getTypedRuleContext(EParser.IndentContext,i)


        def dedent(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(EParser.DedentContext)
            else:
                return self.getTypedRuleContext(EParser.DedentContext,i)


        def expression(self):
            return self.getTypedRuleContext(EParser.ExpressionContext,0)


        def switch_case_statement_list(self):
            return self.getTypedRuleContext(EParser.Switch_case_statement_listContext,0)


        def lfp(self):
            return self.getTypedRuleContext(EParser.LfpContext,0)


        def OTHERWISE(self):
            return self.getToken(EParser.OTHERWISE, 0)

        def statement_list(self):
            return self.getTypedRuleContext(EParser.Statement_listContext,0)


        def getRuleIndex(self):
            return EParser.RULE_switch_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSwitch_statement" ):
                listener.enterSwitch_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSwitch_statement" ):
                listener.exitSwitch_statement(self)




    def switch_statement(self):

        localctx = EParser.Switch_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_switch_statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 998
            self.match(EParser.SWITCH)
            self.state = 999
            self.match(EParser.ON)
            self.state = 1000
            localctx.exp = self.expression(0)
            self.state = 1001
            self.match(EParser.COLON)
            self.state = 1002
            self.indent()
            self.state = 1003
            localctx.cases = self.switch_case_statement_list()
            self.state = 1011
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,49,self._ctx)
            if la_ == 1:
                self.state = 1004
                self.lfp()
                self.state = 1005
                self.match(EParser.OTHERWISE)
                self.state = 1006
                self.match(EParser.COLON)
                self.state = 1007
                self.indent()
                self.state = 1008
                localctx.stmts = self.statement_list()
                self.state = 1009
                self.dedent()


            self.state = 1013
            self.dedent()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Switch_case_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return EParser.RULE_switch_case_statement

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class AtomicSwitchCaseContext(Switch_case_statementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a EParser.Switch_case_statementContext
            super().__init__(parser)
            self.exp = None # Atomic_literalContext
            self.stmts = None # Statement_listContext
            self.copyFrom(ctx)

        def WHEN(self):
            return self.getToken(EParser.WHEN, 0)
        def COLON(self):
            return self.getToken(EParser.COLON, 0)
        def indent(self):
            return self.getTypedRuleContext(EParser.IndentContext,0)

        def dedent(self):
            return self.getTypedRuleContext(EParser.DedentContext,0)

        def atomic_literal(self):
            return self.getTypedRuleContext(EParser.Atomic_literalContext,0)

        def statement_list(self):
            return self.getTypedRuleContext(EParser.Statement_listContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAtomicSwitchCase" ):
                listener.enterAtomicSwitchCase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAtomicSwitchCase" ):
                listener.exitAtomicSwitchCase(self)


    class CollectionSwitchCaseContext(Switch_case_statementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a EParser.Switch_case_statementContext
            super().__init__(parser)
            self.exp = None # Literal_collectionContext
            self.stmts = None # Statement_listContext
            self.copyFrom(ctx)

        def WHEN(self):
            return self.getToken(EParser.WHEN, 0)
        def IN(self):
            return self.getToken(EParser.IN, 0)
        def COLON(self):
            return self.getToken(EParser.COLON, 0)
        def indent(self):
            return self.getTypedRuleContext(EParser.IndentContext,0)

        def dedent(self):
            return self.getTypedRuleContext(EParser.DedentContext,0)

        def literal_collection(self):
            return self.getTypedRuleContext(EParser.Literal_collectionContext,0)

        def statement_list(self):
            return self.getTypedRuleContext(EParser.Statement_listContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCollectionSwitchCase" ):
                listener.enterCollectionSwitchCase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCollectionSwitchCase" ):
                listener.exitCollectionSwitchCase(self)



    def switch_case_statement(self):

        localctx = EParser.Switch_case_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_switch_case_statement)
        try:
            self.state = 1030
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,50,self._ctx)
            if la_ == 1:
                localctx = EParser.AtomicSwitchCaseContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1015
                self.match(EParser.WHEN)
                self.state = 1016
                localctx.exp = self.atomic_literal()
                self.state = 1017
                self.match(EParser.COLON)
                self.state = 1018
                self.indent()
                self.state = 1019
                localctx.stmts = self.statement_list()
                self.state = 1020
                self.dedent()
                pass

            elif la_ == 2:
                localctx = EParser.CollectionSwitchCaseContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1022
                self.match(EParser.WHEN)
                self.state = 1023
                self.match(EParser.IN)
                self.state = 1024
                localctx.exp = self.literal_collection()
                self.state = 1025
                self.match(EParser.COLON)
                self.state = 1026
                self.indent()
                self.state = 1027
                localctx.stmts = self.statement_list()
                self.state = 1028
                self.dedent()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class For_each_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name1 = None # Variable_identifierContext
            self.name2 = None # Variable_identifierContext
            self.source = None # ExpressionContext
            self.stmts = None # Statement_listContext

        def FOR(self):
            return self.getToken(EParser.FOR, 0)

        def EACH(self):
            return self.getToken(EParser.EACH, 0)

        def IN(self):
            return self.getToken(EParser.IN, 0)

        def COLON(self):
            return self.getToken(EParser.COLON, 0)

        def indent(self):
            return self.getTypedRuleContext(EParser.IndentContext,0)


        def dedent(self):
            return self.getTypedRuleContext(EParser.DedentContext,0)


        def variable_identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(EParser.Variable_identifierContext)
            else:
                return self.getTypedRuleContext(EParser.Variable_identifierContext,i)


        def expression(self):
            return self.getTypedRuleContext(EParser.ExpressionContext,0)


        def statement_list(self):
            return self.getTypedRuleContext(EParser.Statement_listContext,0)


        def COMMA(self):
            return self.getToken(EParser.COMMA, 0)

        def getRuleIndex(self):
            return EParser.RULE_for_each_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFor_each_statement" ):
                listener.enterFor_each_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFor_each_statement" ):
                listener.exitFor_each_statement(self)




    def for_each_statement(self):

        localctx = EParser.For_each_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_for_each_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1032
            self.match(EParser.FOR)
            self.state = 1033
            self.match(EParser.EACH)
            self.state = 1034
            localctx.name1 = self.variable_identifier()
            self.state = 1037
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==EParser.COMMA:
                self.state = 1035
                self.match(EParser.COMMA)
                self.state = 1036
                localctx.name2 = self.variable_identifier()


            self.state = 1039
            self.match(EParser.IN)
            self.state = 1040
            localctx.source = self.expression(0)
            self.state = 1041
            self.match(EParser.COLON)
            self.state = 1042
            self.indent()
            self.state = 1043
            localctx.stmts = self.statement_list()
            self.state = 1044
            self.dedent()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Do_while_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.stmts = None # Statement_listContext
            self.exp = None # ExpressionContext

        def DO(self):
            return self.getToken(EParser.DO, 0)

        def COLON(self):
            return self.getToken(EParser.COLON, 0)

        def indent(self):
            return self.getTypedRuleContext(EParser.IndentContext,0)


        def dedent(self):
            return self.getTypedRuleContext(EParser.DedentContext,0)


        def lfp(self):
            return self.getTypedRuleContext(EParser.LfpContext,0)


        def WHILE(self):
            return self.getToken(EParser.WHILE, 0)

        def statement_list(self):
            return self.getTypedRuleContext(EParser.Statement_listContext,0)


        def expression(self):
            return self.getTypedRuleContext(EParser.ExpressionContext,0)


        def getRuleIndex(self):
            return EParser.RULE_do_while_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDo_while_statement" ):
                listener.enterDo_while_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDo_while_statement" ):
                listener.exitDo_while_statement(self)




    def do_while_statement(self):

        localctx = EParser.Do_while_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_do_while_statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1046
            self.match(EParser.DO)
            self.state = 1047
            self.match(EParser.COLON)
            self.state = 1048
            self.indent()
            self.state = 1049
            localctx.stmts = self.statement_list()
            self.state = 1050
            self.dedent()
            self.state = 1051
            self.lfp()
            self.state = 1052
            self.match(EParser.WHILE)
            self.state = 1053
            localctx.exp = self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class While_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.exp = None # ExpressionContext
            self.stmts = None # Statement_listContext

        def WHILE(self):
            return self.getToken(EParser.WHILE, 0)

        def COLON(self):
            return self.getToken(EParser.COLON, 0)

        def indent(self):
            return self.getTypedRuleContext(EParser.IndentContext,0)


        def dedent(self):
            return self.getTypedRuleContext(EParser.DedentContext,0)


        def expression(self):
            return self.getTypedRuleContext(EParser.ExpressionContext,0)


        def statement_list(self):
            return self.getTypedRuleContext(EParser.Statement_listContext,0)


        def getRuleIndex(self):
            return EParser.RULE_while_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhile_statement" ):
                listener.enterWhile_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhile_statement" ):
                listener.exitWhile_statement(self)




    def while_statement(self):

        localctx = EParser.While_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_while_statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1055
            self.match(EParser.WHILE)
            self.state = 1056
            localctx.exp = self.expression(0)
            self.state = 1057
            self.match(EParser.COLON)
            self.state = 1058
            self.indent()
            self.state = 1059
            localctx.stmts = self.statement_list()
            self.state = 1060
            self.dedent()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class If_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.exp = None # ExpressionContext
            self.stmts = None # Statement_listContext
            self.elseIfs = None # Else_if_statement_listContext
            self.elseStmts = None # Statement_listContext

        def IF(self):
            return self.getToken(EParser.IF, 0)

        def COLON(self, i:int=None):
            if i is None:
                return self.getTokens(EParser.COLON)
            else:
                return self.getToken(EParser.COLON, i)

        def indent(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(EParser.IndentContext)
            else:
                return self.getTypedRuleContext(EParser.IndentContext,i)


        def dedent(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(EParser.DedentContext)
            else:
                return self.getTypedRuleContext(EParser.DedentContext,i)


        def expression(self):
            return self.getTypedRuleContext(EParser.ExpressionContext,0)


        def statement_list(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(EParser.Statement_listContext)
            else:
                return self.getTypedRuleContext(EParser.Statement_listContext,i)


        def lfp(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(EParser.LfpContext)
            else:
                return self.getTypedRuleContext(EParser.LfpContext,i)


        def ELSE(self):
            return self.getToken(EParser.ELSE, 0)

        def else_if_statement_list(self):
            return self.getTypedRuleContext(EParser.Else_if_statement_listContext,0)


        def getRuleIndex(self):
            return EParser.RULE_if_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIf_statement" ):
                listener.enterIf_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIf_statement" ):
                listener.exitIf_statement(self)




    def if_statement(self):

        localctx = EParser.If_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_if_statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1062
            self.match(EParser.IF)
            self.state = 1063
            localctx.exp = self.expression(0)
            self.state = 1064
            self.match(EParser.COLON)
            self.state = 1065
            self.indent()
            self.state = 1066
            localctx.stmts = self.statement_list()
            self.state = 1067
            self.dedent()
            self.state = 1071
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,52,self._ctx)
            if la_ == 1:
                self.state = 1068
                self.lfp()
                self.state = 1069
                localctx.elseIfs = self.else_if_statement_list(0)


            self.state = 1080
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,53,self._ctx)
            if la_ == 1:
                self.state = 1073
                self.lfp()
                self.state = 1074
                self.match(EParser.ELSE)
                self.state = 1075
                self.match(EParser.COLON)
                self.state = 1076
                self.indent()
                self.state = 1077
                localctx.elseStmts = self.statement_list()
                self.state = 1078
                self.dedent()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Else_if_statement_listContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return EParser.RULE_else_if_statement_list

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class ElseIfStatementListContext(Else_if_statement_listContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a EParser.Else_if_statement_listContext
            super().__init__(parser)
            self.exp = None # ExpressionContext
            self.stmts = None # Statement_listContext
            self.copyFrom(ctx)

        def ELSE(self):
            return self.getToken(EParser.ELSE, 0)
        def IF(self):
            return self.getToken(EParser.IF, 0)
        def COLON(self):
            return self.getToken(EParser.COLON, 0)
        def indent(self):
            return self.getTypedRuleContext(EParser.IndentContext,0)

        def dedent(self):
            return self.getTypedRuleContext(EParser.DedentContext,0)

        def expression(self):
            return self.getTypedRuleContext(EParser.ExpressionContext,0)

        def statement_list(self):
            return self.getTypedRuleContext(EParser.Statement_listContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElseIfStatementList" ):
                listener.enterElseIfStatementList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElseIfStatementList" ):
                listener.exitElseIfStatementList(self)


    class ElseIfStatementListItemContext(Else_if_statement_listContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a EParser.Else_if_statement_listContext
            super().__init__(parser)
            self.items = None # Else_if_statement_listContext
            self.exp = None # ExpressionContext
            self.stmts = None # Statement_listContext
            self.copyFrom(ctx)

        def lfp(self):
            return self.getTypedRuleContext(EParser.LfpContext,0)

        def ELSE(self):
            return self.getToken(EParser.ELSE, 0)
        def IF(self):
            return self.getToken(EParser.IF, 0)
        def COLON(self):
            return self.getToken(EParser.COLON, 0)
        def indent(self):
            return self.getTypedRuleContext(EParser.IndentContext,0)

        def dedent(self):
            return self.getTypedRuleContext(EParser.DedentContext,0)

        def else_if_statement_list(self):
            return self.getTypedRuleContext(EParser.Else_if_statement_listContext,0)

        def expression(self):
            return self.getTypedRuleContext(EParser.ExpressionContext,0)

        def statement_list(self):
            return self.getTypedRuleContext(EParser.Statement_listContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElseIfStatementListItem" ):
                listener.enterElseIfStatementListItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElseIfStatementListItem" ):
                listener.exitElseIfStatementListItem(self)



    def else_if_statement_list(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = EParser.Else_if_statement_listContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 78
        self.enterRecursionRule(localctx, 78, self.RULE_else_if_statement_list, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            localctx = EParser.ElseIfStatementListContext(self, localctx)
            self._ctx = localctx
            _prevctx = localctx

            self.state = 1083
            self.match(EParser.ELSE)
            self.state = 1084
            self.match(EParser.IF)
            self.state = 1085
            localctx.exp = self.expression(0)
            self.state = 1086
            self.match(EParser.COLON)
            self.state = 1087
            self.indent()
            self.state = 1088
            localctx.stmts = self.statement_list()
            self.state = 1089
            self.dedent()
            self._ctx.stop = self._input.LT(-1)
            self.state = 1103
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,54,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = EParser.ElseIfStatementListItemContext(self, EParser.Else_if_statement_listContext(self, _parentctx, _parentState))
                    localctx.items = _prevctx
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_else_if_statement_list)
                    self.state = 1091
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 1092
                    self.lfp()
                    self.state = 1093
                    self.match(EParser.ELSE)
                    self.state = 1094
                    self.match(EParser.IF)
                    self.state = 1095
                    localctx.exp = self.expression(0)
                    self.state = 1096
                    self.match(EParser.COLON)
                    self.state = 1097
                    self.indent()
                    self.state = 1098
                    localctx.stmts = self.statement_list()
                    self.state = 1099
                    self.dedent() 
                self.state = 1105
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,54,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class Raise_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.exp = None # ExpressionContext

        def RAISE(self):
            return self.getToken(EParser.RAISE, 0)

        def expression(self):
            return self.getTypedRuleContext(EParser.ExpressionContext,0)


        def getRuleIndex(self):
            return EParser.RULE_raise_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRaise_statement" ):
                listener.enterRaise_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRaise_statement" ):
                listener.exitRaise_statement(self)




    def raise_statement(self):

        localctx = EParser.Raise_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_raise_statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1106
            self.match(EParser.RAISE)
            self.state = 1107
            localctx.exp = self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Try_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # Variable_identifierContext
            self.stmts = None # Statement_listContext
            self.handlers = None # Catch_statement_listContext
            self.anyStmts = None # Statement_listContext
            self.finalStmts = None # Statement_listContext

        def SWITCH(self):
            return self.getToken(EParser.SWITCH, 0)

        def ON(self):
            return self.getToken(EParser.ON, 0)

        def DOING(self):
            return self.getToken(EParser.DOING, 0)

        def COLON(self, i:int=None):
            if i is None:
                return self.getTokens(EParser.COLON)
            else:
                return self.getToken(EParser.COLON, i)

        def indent(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(EParser.IndentContext)
            else:
                return self.getTypedRuleContext(EParser.IndentContext,i)


        def dedent(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(EParser.DedentContext)
            else:
                return self.getTypedRuleContext(EParser.DedentContext,i)


        def lfs(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(EParser.LfsContext)
            else:
                return self.getTypedRuleContext(EParser.LfsContext,i)


        def variable_identifier(self):
            return self.getTypedRuleContext(EParser.Variable_identifierContext,0)


        def statement_list(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(EParser.Statement_listContext)
            else:
                return self.getTypedRuleContext(EParser.Statement_listContext,i)


        def ALWAYS(self):
            return self.getToken(EParser.ALWAYS, 0)

        def catch_statement_list(self):
            return self.getTypedRuleContext(EParser.Catch_statement_listContext,0)


        def OTHERWISE(self):
            return self.getToken(EParser.OTHERWISE, 0)

        def WHEN(self):
            return self.getToken(EParser.WHEN, 0)

        def ANY(self):
            return self.getToken(EParser.ANY, 0)

        def getRuleIndex(self):
            return EParser.RULE_try_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTry_statement" ):
                listener.enterTry_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTry_statement" ):
                listener.exitTry_statement(self)




    def try_statement(self):

        localctx = EParser.Try_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_try_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1109
            self.match(EParser.SWITCH)
            self.state = 1110
            self.match(EParser.ON)
            self.state = 1111
            localctx.name = self.variable_identifier()
            self.state = 1112
            self.match(EParser.DOING)
            self.state = 1113
            self.match(EParser.COLON)
            self.state = 1114
            self.indent()
            self.state = 1115
            localctx.stmts = self.statement_list()
            self.state = 1116
            self.dedent()
            self.state = 1117
            self.lfs()
            self.state = 1119
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,55,self._ctx)
            if la_ == 1:
                self.state = 1118
                localctx.handlers = self.catch_statement_list()


            self.state = 1132
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==EParser.OTHERWISE or _la==EParser.WHEN:
                self.state = 1124
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [EParser.OTHERWISE]:
                    self.state = 1121
                    self.match(EParser.OTHERWISE)
                    pass
                elif token in [EParser.WHEN]:
                    self.state = 1122
                    self.match(EParser.WHEN)
                    self.state = 1123
                    self.match(EParser.ANY)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1126
                self.match(EParser.COLON)
                self.state = 1127
                self.indent()
                self.state = 1128
                localctx.anyStmts = self.statement_list()
                self.state = 1129
                self.dedent()
                self.state = 1130
                self.lfs()


            self.state = 1141
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==EParser.ALWAYS:
                self.state = 1134
                self.match(EParser.ALWAYS)
                self.state = 1135
                self.match(EParser.COLON)
                self.state = 1136
                self.indent()
                self.state = 1137
                localctx.finalStmts = self.statement_list()
                self.state = 1138
                self.dedent()
                self.state = 1139
                self.lfs()


            self.state = 1143
            self.lfs()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Catch_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return EParser.RULE_catch_statement

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class CatchAtomicStatementContext(Catch_statementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a EParser.Catch_statementContext
            super().__init__(parser)
            self.name = None # Symbol_identifierContext
            self.stmts = None # Statement_listContext
            self.copyFrom(ctx)

        def WHEN(self):
            return self.getToken(EParser.WHEN, 0)
        def COLON(self):
            return self.getToken(EParser.COLON, 0)
        def indent(self):
            return self.getTypedRuleContext(EParser.IndentContext,0)

        def dedent(self):
            return self.getTypedRuleContext(EParser.DedentContext,0)

        def lfs(self):
            return self.getTypedRuleContext(EParser.LfsContext,0)

        def symbol_identifier(self):
            return self.getTypedRuleContext(EParser.Symbol_identifierContext,0)

        def statement_list(self):
            return self.getTypedRuleContext(EParser.Statement_listContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCatchAtomicStatement" ):
                listener.enterCatchAtomicStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCatchAtomicStatement" ):
                listener.exitCatchAtomicStatement(self)


    class CatchCollectionStatementContext(Catch_statementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a EParser.Catch_statementContext
            super().__init__(parser)
            self.exp = None # Symbol_listContext
            self.stmts = None # Statement_listContext
            self.copyFrom(ctx)

        def WHEN(self):
            return self.getToken(EParser.WHEN, 0)
        def IN(self):
            return self.getToken(EParser.IN, 0)
        def LBRAK(self):
            return self.getToken(EParser.LBRAK, 0)
        def RBRAK(self):
            return self.getToken(EParser.RBRAK, 0)
        def COLON(self):
            return self.getToken(EParser.COLON, 0)
        def indent(self):
            return self.getTypedRuleContext(EParser.IndentContext,0)

        def dedent(self):
            return self.getTypedRuleContext(EParser.DedentContext,0)

        def lfs(self):
            return self.getTypedRuleContext(EParser.LfsContext,0)

        def symbol_list(self):
            return self.getTypedRuleContext(EParser.Symbol_listContext,0)

        def statement_list(self):
            return self.getTypedRuleContext(EParser.Statement_listContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCatchCollectionStatement" ):
                listener.enterCatchCollectionStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCatchCollectionStatement" ):
                listener.exitCatchCollectionStatement(self)



    def catch_statement(self):

        localctx = EParser.Catch_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_catch_statement)
        try:
            self.state = 1164
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,59,self._ctx)
            if la_ == 1:
                localctx = EParser.CatchAtomicStatementContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1145
                self.match(EParser.WHEN)
                self.state = 1146
                localctx.name = self.symbol_identifier()
                self.state = 1147
                self.match(EParser.COLON)
                self.state = 1148
                self.indent()
                self.state = 1149
                localctx.stmts = self.statement_list()
                self.state = 1150
                self.dedent()
                self.state = 1151
                self.lfs()
                pass

            elif la_ == 2:
                localctx = EParser.CatchCollectionStatementContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1153
                self.match(EParser.WHEN)
                self.state = 1154
                self.match(EParser.IN)
                self.state = 1155
                self.match(EParser.LBRAK)
                self.state = 1156
                localctx.exp = self.symbol_list()
                self.state = 1157
                self.match(EParser.RBRAK)
                self.state = 1158
                self.match(EParser.COLON)
                self.state = 1159
                self.indent()
                self.state = 1160
                localctx.stmts = self.statement_list()
                self.state = 1161
                self.dedent()
                self.state = 1162
                self.lfs()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Break_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BREAK(self):
            return self.getToken(EParser.BREAK, 0)

        def getRuleIndex(self):
            return EParser.RULE_break_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBreak_statement" ):
                listener.enterBreak_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBreak_statement" ):
                listener.exitBreak_statement(self)




    def break_statement(self):

        localctx = EParser.Break_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_break_statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1166
            self.match(EParser.BREAK)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Return_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.exp = None # ExpressionContext

        def RETURN(self):
            return self.getToken(EParser.RETURN, 0)

        def expression(self):
            return self.getTypedRuleContext(EParser.ExpressionContext,0)


        def getRuleIndex(self):
            return EParser.RULE_return_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReturn_statement" ):
                listener.enterReturn_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReturn_statement" ):
                listener.exitReturn_statement(self)




    def return_statement(self):

        localctx = EParser.Return_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_return_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1168
            self.match(EParser.RETURN)
            self.state = 1170
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << EParser.LPAR) | (1 << EParser.LBRAK) | (1 << EParser.LCURL) | (1 << EParser.MINUS) | (1 << EParser.LT) | (1 << EParser.LTGT) | (1 << EParser.LTCOLONGT) | (1 << EParser.METHOD_COLON) | (1 << EParser.CODE))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (EParser.DOCUMENT - 64)) | (1 << (EParser.BLOB - 64)) | (1 << (EParser.TYPE - 64)) | (1 << (EParser.EXECUTE - 64)) | (1 << (EParser.FETCH - 64)) | (1 << (EParser.INVOKE_COLON - 64)) | (1 << (EParser.MUTABLE - 64)) | (1 << (EParser.NOT - 64)) | (1 << (EParser.NOTHING - 64)))) != 0) or ((((_la - 138)) & ~0x3f) == 0 and ((1 << (_la - 138)) & ((1 << (EParser.READ - 138)) | (1 << (EParser.SELF - 138)) | (1 << (EParser.SORTED - 138)) | (1 << (EParser.THIS - 138)) | (1 << (EParser.BOOLEAN_LITERAL - 138)) | (1 << (EParser.CHAR_LITERAL - 138)) | (1 << (EParser.MIN_INTEGER - 138)) | (1 << (EParser.MAX_INTEGER - 138)) | (1 << (EParser.SYMBOL_IDENTIFIER - 138)) | (1 << (EParser.TYPE_IDENTIFIER - 138)) | (1 << (EParser.VARIABLE_IDENTIFIER - 138)) | (1 << (EParser.TEXT_LITERAL - 138)) | (1 << (EParser.UUID_LITERAL - 138)) | (1 << (EParser.INTEGER_LITERAL - 138)) | (1 << (EParser.HEXA_LITERAL - 138)) | (1 << (EParser.DECIMAL_LITERAL - 138)) | (1 << (EParser.DATETIME_LITERAL - 138)) | (1 << (EParser.TIME_LITERAL - 138)) | (1 << (EParser.DATE_LITERAL - 138)) | (1 << (EParser.PERIOD_LITERAL - 138)) | (1 << (EParser.VERSION_LITERAL - 138)))) != 0):
                self.state = 1169
                localctx.exp = self.expression(0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return EParser.RULE_expression

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class IntDivideExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a EParser.ExpressionContext
            super().__init__(parser)
            self.left = None # ExpressionContext
            self.right = None # ExpressionContext
            self.copyFrom(ctx)

        def idivide(self):
            return self.getTypedRuleContext(EParser.IdivideContext,0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(EParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(EParser.ExpressionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIntDivideExpression" ):
                listener.enterIntDivideExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIntDivideExpression" ):
                listener.exitIntDivideExpression(self)


    class HasAnyExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a EParser.ExpressionContext
            super().__init__(parser)
            self.left = None # ExpressionContext
            self.right = None # ExpressionContext
            self.copyFrom(ctx)

        def HAS(self):
            return self.getToken(EParser.HAS, 0)
        def ANY(self):
            return self.getToken(EParser.ANY, 0)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(EParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(EParser.ExpressionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHasAnyExpression" ):
                listener.enterHasAnyExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHasAnyExpression" ):
                listener.exitHasAnyExpression(self)


    class HasExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a EParser.ExpressionContext
            super().__init__(parser)
            self.left = None # ExpressionContext
            self.right = None # ExpressionContext
            self.copyFrom(ctx)

        def HAS(self):
            return self.getToken(EParser.HAS, 0)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(EParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(EParser.ExpressionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHasExpression" ):
                listener.enterHasExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHasExpression" ):
                listener.exitHasExpression(self)


    class InExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a EParser.ExpressionContext
            super().__init__(parser)
            self.left = None # ExpressionContext
            self.right = None # ExpressionContext
            self.copyFrom(ctx)

        def IN(self):
            return self.getToken(EParser.IN, 0)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(EParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(EParser.ExpressionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInExpression" ):
                listener.enterInExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInExpression" ):
                listener.exitInExpression(self)


    class JsxExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a EParser.ExpressionContext
            super().__init__(parser)
            self.exp = None # Jsx_expressionContext
            self.copyFrom(ctx)

        def jsx_expression(self):
            return self.getTypedRuleContext(EParser.Jsx_expressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJsxExpression" ):
                listener.enterJsxExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJsxExpression" ):
                listener.exitJsxExpression(self)


    class GreaterThanExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a EParser.ExpressionContext
            super().__init__(parser)
            self.left = None # ExpressionContext
            self.right = None # ExpressionContext
            self.copyFrom(ctx)

        def GT(self):
            return self.getToken(EParser.GT, 0)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(EParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(EParser.ExpressionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGreaterThanExpression" ):
                listener.enterGreaterThanExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGreaterThanExpression" ):
                listener.exitGreaterThanExpression(self)


    class OrExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a EParser.ExpressionContext
            super().__init__(parser)
            self.left = None # ExpressionContext
            self.right = None # ExpressionContext
            self.copyFrom(ctx)

        def OR(self):
            return self.getToken(EParser.OR, 0)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(EParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(EParser.ExpressionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOrExpression" ):
                listener.enterOrExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOrExpression" ):
                listener.exitOrExpression(self)


    class ReadOneExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a EParser.ExpressionContext
            super().__init__(parser)
            self.exp = None # Read_one_expressionContext
            self.copyFrom(ctx)

        def read_one_expression(self):
            return self.getTypedRuleContext(EParser.Read_one_expressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReadOneExpression" ):
                listener.enterReadOneExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReadOneExpression" ):
                listener.exitReadOneExpression(self)


    class NotHasAnyExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a EParser.ExpressionContext
            super().__init__(parser)
            self.left = None # ExpressionContext
            self.right = None # ExpressionContext
            self.copyFrom(ctx)

        def NOT(self):
            return self.getToken(EParser.NOT, 0)
        def HAS(self):
            return self.getToken(EParser.HAS, 0)
        def ANY(self):
            return self.getToken(EParser.ANY, 0)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(EParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(EParser.ExpressionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNotHasAnyExpression" ):
                listener.enterNotHasAnyExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNotHasAnyExpression" ):
                listener.exitNotHasAnyExpression(self)


    class AndExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a EParser.ExpressionContext
            super().__init__(parser)
            self.left = None # ExpressionContext
            self.right = None # ExpressionContext
            self.copyFrom(ctx)

        def AND(self):
            return self.getToken(EParser.AND, 0)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(EParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(EParser.ExpressionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAndExpression" ):
                listener.enterAndExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAndExpression" ):
                listener.exitAndExpression(self)


    class ArrowExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a EParser.ExpressionContext
            super().__init__(parser)
            self.exp = None # Arrow_expressionContext
            self.copyFrom(ctx)

        def arrow_expression(self):
            return self.getTypedRuleContext(EParser.Arrow_expressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArrowExpression" ):
                listener.enterArrowExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArrowExpression" ):
                listener.exitArrowExpression(self)


    class MethodCallExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a EParser.ExpressionContext
            super().__init__(parser)
            self.exp1 = None # Instance_expressionContext
            self.exp2 = None # Unresolved_expressionContext
            self.args = None # Argument_assignment_listContext
            self.copyFrom(ctx)

        def argument_assignment_list(self):
            return self.getTypedRuleContext(EParser.Argument_assignment_listContext,0)

        def instance_expression(self):
            return self.getTypedRuleContext(EParser.Instance_expressionContext,0)

        def unresolved_expression(self):
            return self.getTypedRuleContext(EParser.Unresolved_expressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMethodCallExpression" ):
                listener.enterMethodCallExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMethodCallExpression" ):
                listener.exitMethodCallExpression(self)


    class FetchExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a EParser.ExpressionContext
            super().__init__(parser)
            self.exp = None # Fetch_expressionContext
            self.copyFrom(ctx)

        def fetch_expression(self):
            return self.getTypedRuleContext(EParser.Fetch_expressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFetchExpression" ):
                listener.enterFetchExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFetchExpression" ):
                listener.exitFetchExpression(self)


    class NotHasExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a EParser.ExpressionContext
            super().__init__(parser)
            self.left = None # ExpressionContext
            self.right = None # ExpressionContext
            self.copyFrom(ctx)

        def NOT(self):
            return self.getToken(EParser.NOT, 0)
        def HAS(self):
            return self.getToken(EParser.HAS, 0)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(EParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(EParser.ExpressionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNotHasExpression" ):
                listener.enterNotHasExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNotHasExpression" ):
                listener.exitNotHasExpression(self)


    class SortedExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a EParser.ExpressionContext
            super().__init__(parser)
            self.exp = None # Sorted_expressionContext
            self.copyFrom(ctx)

        def sorted_expression(self):
            return self.getTypedRuleContext(EParser.Sorted_expressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSortedExpression" ):
                listener.enterSortedExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSortedExpression" ):
                listener.exitSortedExpression(self)


    class NotHasAllExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a EParser.ExpressionContext
            super().__init__(parser)
            self.left = None # ExpressionContext
            self.right = None # ExpressionContext
            self.copyFrom(ctx)

        def NOT(self):
            return self.getToken(EParser.NOT, 0)
        def HAS(self):
            return self.getToken(EParser.HAS, 0)
        def ALL(self):
            return self.getToken(EParser.ALL, 0)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(EParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(EParser.ExpressionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNotHasAllExpression" ):
                listener.enterNotHasAllExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNotHasAllExpression" ):
                listener.exitNotHasAllExpression(self)


    class ContainsExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a EParser.ExpressionContext
            super().__init__(parser)
            self.left = None # ExpressionContext
            self.right = None # ExpressionContext
            self.copyFrom(ctx)

        def CONTAINS(self):
            return self.getToken(EParser.CONTAINS, 0)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(EParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(EParser.ExpressionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterContainsExpression" ):
                listener.enterContainsExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitContainsExpression" ):
                listener.exitContainsExpression(self)


    class NotContainsExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a EParser.ExpressionContext
            super().__init__(parser)
            self.left = None # ExpressionContext
            self.right = None # ExpressionContext
            self.copyFrom(ctx)

        def NOT(self):
            return self.getToken(EParser.NOT, 0)
        def CONTAINS(self):
            return self.getToken(EParser.CONTAINS, 0)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(EParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(EParser.ExpressionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNotContainsExpression" ):
                listener.enterNotContainsExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNotContainsExpression" ):
                listener.exitNotContainsExpression(self)


    class RoughlyEqualsExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a EParser.ExpressionContext
            super().__init__(parser)
            self.left = None # ExpressionContext
            self.right = None # ExpressionContext
            self.copyFrom(ctx)

        def TILDE(self):
            return self.getToken(EParser.TILDE, 0)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(EParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(EParser.ExpressionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRoughlyEqualsExpression" ):
                listener.enterRoughlyEqualsExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRoughlyEqualsExpression" ):
                listener.exitRoughlyEqualsExpression(self)


    class ExecuteExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a EParser.ExpressionContext
            super().__init__(parser)
            self.name = None # Variable_identifierContext
            self.copyFrom(ctx)

        def EXECUTE(self):
            return self.getToken(EParser.EXECUTE, 0)
        def COLON(self):
            return self.getToken(EParser.COLON, 0)
        def variable_identifier(self):
            return self.getTypedRuleContext(EParser.Variable_identifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExecuteExpression" ):
                listener.enterExecuteExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExecuteExpression" ):
                listener.exitExecuteExpression(self)


    class GreaterThanOrEqualExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a EParser.ExpressionContext
            super().__init__(parser)
            self.left = None # ExpressionContext
            self.right = None # ExpressionContext
            self.copyFrom(ctx)

        def GTE(self):
            return self.getToken(EParser.GTE, 0)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(EParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(EParser.ExpressionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGreaterThanOrEqualExpression" ):
                listener.enterGreaterThanOrEqualExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGreaterThanOrEqualExpression" ):
                listener.exitGreaterThanOrEqualExpression(self)


    class IteratorExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a EParser.ExpressionContext
            super().__init__(parser)
            self.exp = None # ExpressionContext
            self.name = None # Variable_identifierContext
            self.source = None # ExpressionContext
            self.copyFrom(ctx)

        def FOR(self):
            return self.getToken(EParser.FOR, 0)
        def EACH(self):
            return self.getToken(EParser.EACH, 0)
        def IN(self):
            return self.getToken(EParser.IN, 0)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(EParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(EParser.ExpressionContext,i)

        def variable_identifier(self):
            return self.getTypedRuleContext(EParser.Variable_identifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIteratorExpression" ):
                listener.enterIteratorExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIteratorExpression" ):
                listener.exitIteratorExpression(self)


    class IsNotExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a EParser.ExpressionContext
            super().__init__(parser)
            self.left = None # ExpressionContext
            self.right = None # Is_expressionContext
            self.copyFrom(ctx)

        def IS(self):
            return self.getToken(EParser.IS, 0)
        def NOT(self):
            return self.getToken(EParser.NOT, 0)
        def expression(self):
            return self.getTypedRuleContext(EParser.ExpressionContext,0)

        def is_expression(self):
            return self.getTypedRuleContext(EParser.Is_expressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIsNotExpression" ):
                listener.enterIsNotExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIsNotExpression" ):
                listener.exitIsNotExpression(self)


    class DivideExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a EParser.ExpressionContext
            super().__init__(parser)
            self.left = None # ExpressionContext
            self.right = None # ExpressionContext
            self.copyFrom(ctx)

        def divide(self):
            return self.getTypedRuleContext(EParser.DivideContext,0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(EParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(EParser.ExpressionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDivideExpression" ):
                listener.enterDivideExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDivideExpression" ):
                listener.exitDivideExpression(self)


    class IsExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a EParser.ExpressionContext
            super().__init__(parser)
            self.left = None # ExpressionContext
            self.right = None # Is_expressionContext
            self.copyFrom(ctx)

        def IS(self):
            return self.getToken(EParser.IS, 0)
        def expression(self):
            return self.getTypedRuleContext(EParser.ExpressionContext,0)

        def is_expression(self):
            return self.getTypedRuleContext(EParser.Is_expressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIsExpression" ):
                listener.enterIsExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIsExpression" ):
                listener.exitIsExpression(self)


    class AddExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a EParser.ExpressionContext
            super().__init__(parser)
            self.left = None # ExpressionContext
            self.op = None # Token
            self.right = None # ExpressionContext
            self.copyFrom(ctx)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(EParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(EParser.ExpressionContext,i)

        def PLUS(self):
            return self.getToken(EParser.PLUS, 0)
        def MINUS(self):
            return self.getToken(EParser.MINUS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAddExpression" ):
                listener.enterAddExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAddExpression" ):
                listener.exitAddExpression(self)


    class InstanceExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a EParser.ExpressionContext
            super().__init__(parser)
            self.exp = None # Instance_expressionContext
            self.copyFrom(ctx)

        def instance_expression(self):
            return self.getTypedRuleContext(EParser.Instance_expressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInstanceExpression" ):
                listener.enterInstanceExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInstanceExpression" ):
                listener.exitInstanceExpression(self)


    class MutableInstanceExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a EParser.ExpressionContext
            super().__init__(parser)
            self.exp = None # Mutable_instance_expressionContext
            self.copyFrom(ctx)

        def mutable_instance_expression(self):
            return self.getTypedRuleContext(EParser.Mutable_instance_expressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMutableInstanceExpression" ):
                listener.enterMutableInstanceExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMutableInstanceExpression" ):
                listener.exitMutableInstanceExpression(self)


    class ReadAllExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a EParser.ExpressionContext
            super().__init__(parser)
            self.exp = None # Read_all_expressionContext
            self.copyFrom(ctx)

        def read_all_expression(self):
            return self.getTypedRuleContext(EParser.Read_all_expressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReadAllExpression" ):
                listener.enterReadAllExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReadAllExpression" ):
                listener.exitReadAllExpression(self)


    class CastExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a EParser.ExpressionContext
            super().__init__(parser)
            self.left = None # ExpressionContext
            self.right = None # Category_or_any_typeContext
            self.copyFrom(ctx)

        def AS(self):
            return self.getToken(EParser.AS, 0)
        def expression(self):
            return self.getTypedRuleContext(EParser.ExpressionContext,0)

        def category_or_any_type(self):
            return self.getTypedRuleContext(EParser.Category_or_any_typeContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCastExpression" ):
                listener.enterCastExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCastExpression" ):
                listener.exitCastExpression(self)


    class ModuloExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a EParser.ExpressionContext
            super().__init__(parser)
            self.left = None # ExpressionContext
            self.right = None # ExpressionContext
            self.copyFrom(ctx)

        def modulo(self):
            return self.getTypedRuleContext(EParser.ModuloContext,0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(EParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(EParser.ExpressionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModuloExpression" ):
                listener.enterModuloExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModuloExpression" ):
                listener.exitModuloExpression(self)


    class TernaryExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a EParser.ExpressionContext
            super().__init__(parser)
            self.ifTrue = None # ExpressionContext
            self.test = None # ExpressionContext
            self.ifFalse = None # ExpressionContext
            self.copyFrom(ctx)

        def IF(self):
            return self.getToken(EParser.IF, 0)
        def ELSE(self):
            return self.getToken(EParser.ELSE, 0)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(EParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(EParser.ExpressionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTernaryExpression" ):
                listener.enterTernaryExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTernaryExpression" ):
                listener.exitTernaryExpression(self)


    class NotEqualsExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a EParser.ExpressionContext
            super().__init__(parser)
            self.left = None # ExpressionContext
            self.right = None # ExpressionContext
            self.copyFrom(ctx)

        def LTGT(self):
            return self.getToken(EParser.LTGT, 0)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(EParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(EParser.ExpressionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNotEqualsExpression" ):
                listener.enterNotEqualsExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNotEqualsExpression" ):
                listener.exitNotEqualsExpression(self)


    class DocumentExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a EParser.ExpressionContext
            super().__init__(parser)
            self.exp = None # Document_expressionContext
            self.copyFrom(ctx)

        def document_expression(self):
            return self.getTypedRuleContext(EParser.Document_expressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDocumentExpression" ):
                listener.enterDocumentExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDocumentExpression" ):
                listener.exitDocumentExpression(self)


    class NotExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a EParser.ExpressionContext
            super().__init__(parser)
            self.exp = None # ExpressionContext
            self.copyFrom(ctx)

        def NOT(self):
            return self.getToken(EParser.NOT, 0)
        def expression(self):
            return self.getTypedRuleContext(EParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNotExpression" ):
                listener.enterNotExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNotExpression" ):
                listener.exitNotExpression(self)


    class InvocationExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a EParser.ExpressionContext
            super().__init__(parser)
            self.exp = None # Invocation_expressionContext
            self.copyFrom(ctx)

        def invocation_expression(self):
            return self.getTypedRuleContext(EParser.Invocation_expressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInvocationExpression" ):
                listener.enterInvocationExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInvocationExpression" ):
                listener.exitInvocationExpression(self)


    class CodeExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a EParser.ExpressionContext
            super().__init__(parser)
            self.exp = None # ExpressionContext
            self.copyFrom(ctx)

        def CODE(self):
            return self.getToken(EParser.CODE, 0)
        def COLON(self):
            return self.getToken(EParser.COLON, 0)
        def expression(self):
            return self.getTypedRuleContext(EParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCodeExpression" ):
                listener.enterCodeExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCodeExpression" ):
                listener.exitCodeExpression(self)


    class AmbiguousExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a EParser.ExpressionContext
            super().__init__(parser)
            self.exp = None # Ambiguous_expressionContext
            self.copyFrom(ctx)

        def ambiguous_expression(self):
            return self.getTypedRuleContext(EParser.Ambiguous_expressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAmbiguousExpression" ):
                listener.enterAmbiguousExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAmbiguousExpression" ):
                listener.exitAmbiguousExpression(self)


    class LessThanOrEqualExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a EParser.ExpressionContext
            super().__init__(parser)
            self.left = None # ExpressionContext
            self.right = None # ExpressionContext
            self.copyFrom(ctx)

        def LTE(self):
            return self.getToken(EParser.LTE, 0)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(EParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(EParser.ExpressionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLessThanOrEqualExpression" ):
                listener.enterLessThanOrEqualExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLessThanOrEqualExpression" ):
                listener.exitLessThanOrEqualExpression(self)


    class ClosureExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a EParser.ExpressionContext
            super().__init__(parser)
            self.name = None # Method_identifierContext
            self.copyFrom(ctx)

        def METHOD_COLON(self):
            return self.getToken(EParser.METHOD_COLON, 0)
        def method_identifier(self):
            return self.getTypedRuleContext(EParser.Method_identifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClosureExpression" ):
                listener.enterClosureExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClosureExpression" ):
                listener.exitClosureExpression(self)


    class BlobExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a EParser.ExpressionContext
            super().__init__(parser)
            self.exp = None # Blob_expressionContext
            self.copyFrom(ctx)

        def blob_expression(self):
            return self.getTypedRuleContext(EParser.Blob_expressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBlobExpression" ):
                listener.enterBlobExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBlobExpression" ):
                listener.exitBlobExpression(self)


    class FilteredListExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a EParser.ExpressionContext
            super().__init__(parser)
            self.src = None # ExpressionContext
            self.copyFrom(ctx)

        def filtered_list_suffix(self):
            return self.getTypedRuleContext(EParser.Filtered_list_suffixContext,0)

        def expression(self):
            return self.getTypedRuleContext(EParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFilteredListExpression" ):
                listener.enterFilteredListExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFilteredListExpression" ):
                listener.exitFilteredListExpression(self)


    class ConstructorExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a EParser.ExpressionContext
            super().__init__(parser)
            self.exp = None # Constructor_expressionContext
            self.copyFrom(ctx)

        def constructor_expression(self):
            return self.getTypedRuleContext(EParser.Constructor_expressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstructorExpression" ):
                listener.enterConstructorExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstructorExpression" ):
                listener.exitConstructorExpression(self)


    class MultiplyExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a EParser.ExpressionContext
            super().__init__(parser)
            self.left = None # ExpressionContext
            self.right = None # ExpressionContext
            self.copyFrom(ctx)

        def multiply(self):
            return self.getTypedRuleContext(EParser.MultiplyContext,0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(EParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(EParser.ExpressionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMultiplyExpression" ):
                listener.enterMultiplyExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMultiplyExpression" ):
                listener.exitMultiplyExpression(self)


    class NotInExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a EParser.ExpressionContext
            super().__init__(parser)
            self.left = None # ExpressionContext
            self.right = None # ExpressionContext
            self.copyFrom(ctx)

        def NOT(self):
            return self.getToken(EParser.NOT, 0)
        def IN(self):
            return self.getToken(EParser.IN, 0)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(EParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(EParser.ExpressionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNotInExpression" ):
                listener.enterNotInExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNotInExpression" ):
                listener.exitNotInExpression(self)


    class UnresolvedExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a EParser.ExpressionContext
            super().__init__(parser)
            self.exp = None # Unresolved_expressionContext
            self.copyFrom(ctx)

        def unresolved_expression(self):
            return self.getTypedRuleContext(EParser.Unresolved_expressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnresolvedExpression" ):
                listener.enterUnresolvedExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnresolvedExpression" ):
                listener.exitUnresolvedExpression(self)


    class MinusExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a EParser.ExpressionContext
            super().__init__(parser)
            self.exp = None # ExpressionContext
            self.copyFrom(ctx)

        def MINUS(self):
            return self.getToken(EParser.MINUS, 0)
        def expression(self):
            return self.getTypedRuleContext(EParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMinusExpression" ):
                listener.enterMinusExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMinusExpression" ):
                listener.exitMinusExpression(self)


    class HasAllExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a EParser.ExpressionContext
            super().__init__(parser)
            self.left = None # ExpressionContext
            self.right = None # ExpressionContext
            self.copyFrom(ctx)

        def HAS(self):
            return self.getToken(EParser.HAS, 0)
        def ALL(self):
            return self.getToken(EParser.ALL, 0)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(EParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(EParser.ExpressionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHasAllExpression" ):
                listener.enterHasAllExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHasAllExpression" ):
                listener.exitHasAllExpression(self)


    class CssExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a EParser.ExpressionContext
            super().__init__(parser)
            self.exp = None # Css_expressionContext
            self.copyFrom(ctx)

        def css_expression(self):
            return self.getTypedRuleContext(EParser.Css_expressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCssExpression" ):
                listener.enterCssExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCssExpression" ):
                listener.exitCssExpression(self)


    class LessThanExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a EParser.ExpressionContext
            super().__init__(parser)
            self.left = None # ExpressionContext
            self.right = None # ExpressionContext
            self.copyFrom(ctx)

        def LT(self):
            return self.getToken(EParser.LT, 0)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(EParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(EParser.ExpressionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLessThanExpression" ):
                listener.enterLessThanExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLessThanExpression" ):
                listener.exitLessThanExpression(self)


    class EqualsExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a EParser.ExpressionContext
            super().__init__(parser)
            self.left = None # ExpressionContext
            self.right = None # ExpressionContext
            self.copyFrom(ctx)

        def EQ(self):
            return self.getToken(EParser.EQ, 0)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(EParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(EParser.ExpressionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEqualsExpression" ):
                listener.enterEqualsExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEqualsExpression" ):
                listener.exitEqualsExpression(self)



    def expression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = EParser.ExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 90
        self.enterRecursionRule(localctx, 90, self.RULE_expression, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1206
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,62,self._ctx)
            if la_ == 1:
                localctx = EParser.CssExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx

                self.state = 1173
                localctx.exp = self.css_expression()
                pass

            elif la_ == 2:
                localctx = EParser.JsxExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1174
                localctx.exp = self.jsx_expression()
                pass

            elif la_ == 3:
                localctx = EParser.InstanceExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1175
                localctx.exp = self.instance_expression(0)
                pass

            elif la_ == 4:
                localctx = EParser.ArrowExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1176
                localctx.exp = self.arrow_expression()
                pass

            elif la_ == 5:
                localctx = EParser.UnresolvedExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1177
                localctx.exp = self.unresolved_expression(0)
                pass

            elif la_ == 6:
                localctx = EParser.MethodCallExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1180
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,61,self._ctx)
                if la_ == 1:
                    self.state = 1178
                    localctx.exp1 = self.instance_expression(0)
                    pass

                elif la_ == 2:
                    self.state = 1179
                    localctx.exp2 = self.unresolved_expression(0)
                    pass


                self.state = 1182
                localctx.args = self.argument_assignment_list()
                pass

            elif la_ == 7:
                localctx = EParser.ConstructorExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1184
                localctx.exp = self.constructor_expression()
                pass

            elif la_ == 8:
                localctx = EParser.MinusExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1185
                self.match(EParser.MINUS)
                self.state = 1186
                localctx.exp = self.expression(44)
                pass

            elif la_ == 9:
                localctx = EParser.NotExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1187
                self.match(EParser.NOT)
                self.state = 1188
                localctx.exp = self.expression(43)
                pass

            elif la_ == 10:
                localctx = EParser.CodeExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1189
                self.match(EParser.CODE)
                self.state = 1190
                self.match(EParser.COLON)
                self.state = 1191
                localctx.exp = self.expression(14)
                pass

            elif la_ == 11:
                localctx = EParser.ExecuteExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1192
                self.match(EParser.EXECUTE)
                self.state = 1193
                self.match(EParser.COLON)
                self.state = 1194
                localctx.name = self.variable_identifier()
                pass

            elif la_ == 12:
                localctx = EParser.ClosureExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1195
                self.match(EParser.METHOD_COLON)
                self.state = 1196
                localctx.name = self.method_identifier()
                pass

            elif la_ == 13:
                localctx = EParser.BlobExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1197
                localctx.exp = self.blob_expression()
                pass

            elif la_ == 14:
                localctx = EParser.DocumentExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1198
                localctx.exp = self.document_expression()
                pass

            elif la_ == 15:
                localctx = EParser.MutableInstanceExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1199
                localctx.exp = self.mutable_instance_expression(0)
                pass

            elif la_ == 16:
                localctx = EParser.FetchExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1200
                localctx.exp = self.fetch_expression()
                pass

            elif la_ == 17:
                localctx = EParser.ReadAllExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1201
                localctx.exp = self.read_all_expression()
                pass

            elif la_ == 18:
                localctx = EParser.ReadOneExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1202
                localctx.exp = self.read_one_expression()
                pass

            elif la_ == 19:
                localctx = EParser.SortedExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1203
                localctx.exp = self.sorted_expression()
                pass

            elif la_ == 20:
                localctx = EParser.AmbiguousExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1204
                localctx.exp = self.ambiguous_expression()
                pass

            elif la_ == 21:
                localctx = EParser.InvocationExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1205
                localctx.exp = self.invocation_expression()
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 1320
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,64,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 1318
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,63,self._ctx)
                    if la_ == 1:
                        localctx = EParser.MultiplyExpressionContext(self, EParser.ExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1208
                        if not self.precpred(self._ctx, 42):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 42)")
                        self.state = 1209
                        self.multiply()
                        self.state = 1210
                        localctx.right = self.expression(43)
                        pass

                    elif la_ == 2:
                        localctx = EParser.DivideExpressionContext(self, EParser.ExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1212
                        if not self.precpred(self._ctx, 41):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 41)")
                        self.state = 1213
                        self.divide()
                        self.state = 1214
                        localctx.right = self.expression(42)
                        pass

                    elif la_ == 3:
                        localctx = EParser.ModuloExpressionContext(self, EParser.ExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1216
                        if not self.precpred(self._ctx, 40):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 40)")
                        self.state = 1217
                        self.modulo()
                        self.state = 1218
                        localctx.right = self.expression(41)
                        pass

                    elif la_ == 4:
                        localctx = EParser.IntDivideExpressionContext(self, EParser.ExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1220
                        if not self.precpred(self._ctx, 39):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 39)")
                        self.state = 1221
                        self.idivide()
                        self.state = 1222
                        localctx.right = self.expression(40)
                        pass

                    elif la_ == 5:
                        localctx = EParser.AddExpressionContext(self, EParser.ExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1224
                        if not self.precpred(self._ctx, 38):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 38)")
                        self.state = 1225
                        localctx.op = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(_la==EParser.PLUS or _la==EParser.MINUS):
                            localctx.op = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1226
                        localctx.right = self.expression(39)
                        pass

                    elif la_ == 6:
                        localctx = EParser.LessThanExpressionContext(self, EParser.ExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1227
                        if not self.precpred(self._ctx, 36):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 36)")
                        self.state = 1228
                        self.match(EParser.LT)
                        self.state = 1229
                        localctx.right = self.expression(37)
                        pass

                    elif la_ == 7:
                        localctx = EParser.LessThanOrEqualExpressionContext(self, EParser.ExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1230
                        if not self.precpred(self._ctx, 35):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 35)")
                        self.state = 1231
                        self.match(EParser.LTE)
                        self.state = 1232
                        localctx.right = self.expression(36)
                        pass

                    elif la_ == 8:
                        localctx = EParser.GreaterThanExpressionContext(self, EParser.ExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1233
                        if not self.precpred(self._ctx, 34):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 34)")
                        self.state = 1234
                        self.match(EParser.GT)
                        self.state = 1235
                        localctx.right = self.expression(35)
                        pass

                    elif la_ == 9:
                        localctx = EParser.GreaterThanOrEqualExpressionContext(self, EParser.ExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1236
                        if not self.precpred(self._ctx, 33):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 33)")
                        self.state = 1237
                        self.match(EParser.GTE)
                        self.state = 1238
                        localctx.right = self.expression(34)
                        pass

                    elif la_ == 10:
                        localctx = EParser.EqualsExpressionContext(self, EParser.ExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1239
                        if not self.precpred(self._ctx, 30):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 30)")
                        self.state = 1240
                        self.match(EParser.EQ)
                        self.state = 1241
                        localctx.right = self.expression(31)
                        pass

                    elif la_ == 11:
                        localctx = EParser.NotEqualsExpressionContext(self, EParser.ExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1242
                        if not self.precpred(self._ctx, 29):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 29)")
                        self.state = 1243
                        self.match(EParser.LTGT)
                        self.state = 1244
                        localctx.right = self.expression(30)
                        pass

                    elif la_ == 12:
                        localctx = EParser.RoughlyEqualsExpressionContext(self, EParser.ExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1245
                        if not self.precpred(self._ctx, 28):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 28)")
                        self.state = 1246
                        self.match(EParser.TILDE)
                        self.state = 1247
                        localctx.right = self.expression(29)
                        pass

                    elif la_ == 13:
                        localctx = EParser.ContainsExpressionContext(self, EParser.ExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1248
                        if not self.precpred(self._ctx, 27):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 27)")
                        self.state = 1249
                        self.match(EParser.CONTAINS)
                        self.state = 1250
                        localctx.right = self.expression(28)
                        pass

                    elif la_ == 14:
                        localctx = EParser.InExpressionContext(self, EParser.ExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1251
                        if not self.precpred(self._ctx, 26):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 26)")
                        self.state = 1252
                        self.match(EParser.IN)
                        self.state = 1253
                        localctx.right = self.expression(27)
                        pass

                    elif la_ == 15:
                        localctx = EParser.HasExpressionContext(self, EParser.ExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1254
                        if not self.precpred(self._ctx, 25):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 25)")
                        self.state = 1255
                        self.match(EParser.HAS)
                        self.state = 1256
                        localctx.right = self.expression(26)
                        pass

                    elif la_ == 16:
                        localctx = EParser.HasAllExpressionContext(self, EParser.ExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1257
                        if not self.precpred(self._ctx, 24):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 24)")
                        self.state = 1258
                        self.match(EParser.HAS)
                        self.state = 1259
                        self.match(EParser.ALL)
                        self.state = 1260
                        localctx.right = self.expression(25)
                        pass

                    elif la_ == 17:
                        localctx = EParser.HasAnyExpressionContext(self, EParser.ExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1261
                        if not self.precpred(self._ctx, 23):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 23)")
                        self.state = 1262
                        self.match(EParser.HAS)
                        self.state = 1263
                        self.match(EParser.ANY)
                        self.state = 1264
                        localctx.right = self.expression(24)
                        pass

                    elif la_ == 18:
                        localctx = EParser.NotContainsExpressionContext(self, EParser.ExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1265
                        if not self.precpred(self._ctx, 22):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 22)")
                        self.state = 1266
                        self.match(EParser.NOT)
                        self.state = 1267
                        self.match(EParser.CONTAINS)
                        self.state = 1268
                        localctx.right = self.expression(23)
                        pass

                    elif la_ == 19:
                        localctx = EParser.NotInExpressionContext(self, EParser.ExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1269
                        if not self.precpred(self._ctx, 21):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 21)")
                        self.state = 1270
                        self.match(EParser.NOT)
                        self.state = 1271
                        self.match(EParser.IN)
                        self.state = 1272
                        localctx.right = self.expression(22)
                        pass

                    elif la_ == 20:
                        localctx = EParser.NotHasExpressionContext(self, EParser.ExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1273
                        if not self.precpred(self._ctx, 20):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 20)")
                        self.state = 1274
                        self.match(EParser.NOT)
                        self.state = 1275
                        self.match(EParser.HAS)
                        self.state = 1276
                        localctx.right = self.expression(21)
                        pass

                    elif la_ == 21:
                        localctx = EParser.NotHasAllExpressionContext(self, EParser.ExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1277
                        if not self.precpred(self._ctx, 19):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 19)")
                        self.state = 1278
                        self.match(EParser.NOT)
                        self.state = 1279
                        self.match(EParser.HAS)
                        self.state = 1280
                        self.match(EParser.ALL)
                        self.state = 1281
                        localctx.right = self.expression(20)
                        pass

                    elif la_ == 22:
                        localctx = EParser.NotHasAnyExpressionContext(self, EParser.ExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1282
                        if not self.precpred(self._ctx, 18):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 18)")
                        self.state = 1283
                        self.match(EParser.NOT)
                        self.state = 1284
                        self.match(EParser.HAS)
                        self.state = 1285
                        self.match(EParser.ANY)
                        self.state = 1286
                        localctx.right = self.expression(19)
                        pass

                    elif la_ == 23:
                        localctx = EParser.OrExpressionContext(self, EParser.ExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1287
                        if not self.precpred(self._ctx, 17):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 17)")
                        self.state = 1288
                        self.match(EParser.OR)
                        self.state = 1289
                        localctx.right = self.expression(18)
                        pass

                    elif la_ == 24:
                        localctx = EParser.AndExpressionContext(self, EParser.ExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1290
                        if not self.precpred(self._ctx, 16):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 16)")
                        self.state = 1291
                        self.match(EParser.AND)
                        self.state = 1292
                        localctx.right = self.expression(17)
                        pass

                    elif la_ == 25:
                        localctx = EParser.TernaryExpressionContext(self, EParser.ExpressionContext(self, _parentctx, _parentState))
                        localctx.ifTrue = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1293
                        if not self.precpred(self._ctx, 15):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 15)")
                        self.state = 1294
                        self.match(EParser.IF)
                        self.state = 1295
                        localctx.test = self.expression(0)
                        self.state = 1296
                        self.match(EParser.ELSE)
                        self.state = 1297
                        localctx.ifFalse = self.expression(16)
                        pass

                    elif la_ == 26:
                        localctx = EParser.IteratorExpressionContext(self, EParser.ExpressionContext(self, _parentctx, _parentState))
                        localctx.exp = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1299
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 1300
                        self.match(EParser.FOR)
                        self.state = 1301
                        self.match(EParser.EACH)
                        self.state = 1302
                        localctx.name = self.variable_identifier()
                        self.state = 1303
                        self.match(EParser.IN)
                        self.state = 1304
                        localctx.source = self.expression(2)
                        pass

                    elif la_ == 27:
                        localctx = EParser.CastExpressionContext(self, EParser.ExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1306
                        if not self.precpred(self._ctx, 37):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 37)")
                        self.state = 1307
                        self.match(EParser.AS)
                        self.state = 1308
                        localctx.right = self.category_or_any_type()
                        pass

                    elif la_ == 28:
                        localctx = EParser.IsNotExpressionContext(self, EParser.ExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1309
                        if not self.precpred(self._ctx, 32):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 32)")
                        self.state = 1310
                        self.match(EParser.IS)
                        self.state = 1311
                        self.match(EParser.NOT)
                        self.state = 1312
                        localctx.right = self.is_expression()
                        pass

                    elif la_ == 29:
                        localctx = EParser.IsExpressionContext(self, EParser.ExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1313
                        if not self.precpred(self._ctx, 31):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 31)")
                        self.state = 1314
                        self.match(EParser.IS)
                        self.state = 1315
                        localctx.right = self.is_expression()
                        pass

                    elif la_ == 30:
                        localctx = EParser.FilteredListExpressionContext(self, EParser.ExpressionContext(self, _parentctx, _parentState))
                        localctx.src = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1316
                        if not self.precpred(self._ctx, 8):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 8)")
                        self.state = 1317
                        self.filtered_list_suffix()
                        pass

             
                self.state = 1322
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,64,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class Unresolved_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return EParser.RULE_unresolved_expression

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class UnresolvedSelectorContext(Unresolved_expressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a EParser.Unresolved_expressionContext
            super().__init__(parser)
            self.parent = None # Unresolved_expressionContext
            self.selector = None # Unresolved_selectorContext
            self.copyFrom(ctx)

        def unresolved_expression(self):
            return self.getTypedRuleContext(EParser.Unresolved_expressionContext,0)

        def unresolved_selector(self):
            return self.getTypedRuleContext(EParser.Unresolved_selectorContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnresolvedSelector" ):
                listener.enterUnresolvedSelector(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnresolvedSelector" ):
                listener.exitUnresolvedSelector(self)


    class UnresolvedIdentifierContext(Unresolved_expressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a EParser.Unresolved_expressionContext
            super().__init__(parser)
            self.name = None # IdentifierContext
            self.copyFrom(ctx)

        def identifier(self):
            return self.getTypedRuleContext(EParser.IdentifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnresolvedIdentifier" ):
                listener.enterUnresolvedIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnresolvedIdentifier" ):
                listener.exitUnresolvedIdentifier(self)



    def unresolved_expression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = EParser.Unresolved_expressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 92
        self.enterRecursionRule(localctx, 92, self.RULE_unresolved_expression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            localctx = EParser.UnresolvedIdentifierContext(self, localctx)
            self._ctx = localctx
            _prevctx = localctx

            self.state = 1324
            localctx.name = self.identifier()
            self._ctx.stop = self._input.LT(-1)
            self.state = 1330
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,65,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = EParser.UnresolvedSelectorContext(self, EParser.Unresolved_expressionContext(self, _parentctx, _parentState))
                    localctx.parent = _prevctx
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_unresolved_expression)
                    self.state = 1326
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 1327
                    localctx.selector = self.unresolved_selector() 
                self.state = 1332
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,65,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class Unresolved_selectorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # IdentifierContext

        def DOT(self):
            return self.getToken(EParser.DOT, 0)

        def identifier(self):
            return self.getTypedRuleContext(EParser.IdentifierContext,0)


        def getRuleIndex(self):
            return EParser.RULE_unresolved_selector

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnresolved_selector" ):
                listener.enterUnresolved_selector(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnresolved_selector" ):
                listener.exitUnresolved_selector(self)




    def unresolved_selector(self):

        localctx = EParser.Unresolved_selectorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_unresolved_selector)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1333
            if not self.wasNot(EParser.WS):
                from antlr4.error.Errors import FailedPredicateException
                raise FailedPredicateException(self, "$parser.wasNot(EParser.WS)")
            self.state = 1334
            self.match(EParser.DOT)
            self.state = 1335
            localctx.name = self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Invocation_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # Variable_identifierContext

        def INVOKE_COLON(self):
            return self.getToken(EParser.INVOKE_COLON, 0)

        def invocation_trailer(self):
            return self.getTypedRuleContext(EParser.Invocation_trailerContext,0)


        def variable_identifier(self):
            return self.getTypedRuleContext(EParser.Variable_identifierContext,0)


        def getRuleIndex(self):
            return EParser.RULE_invocation_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInvocation_expression" ):
                listener.enterInvocation_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInvocation_expression" ):
                listener.exitInvocation_expression(self)




    def invocation_expression(self):

        localctx = EParser.Invocation_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_invocation_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1337
            self.match(EParser.INVOKE_COLON)
            self.state = 1338
            localctx.name = self.variable_identifier()
            self.state = 1339
            self.invocation_trailer()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Invocation_trailerContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return EParser.RULE_invocation_trailer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInvocation_trailer" ):
                listener.enterInvocation_trailer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInvocation_trailer" ):
                listener.exitInvocation_trailer(self)




    def invocation_trailer(self):

        localctx = EParser.Invocation_trailerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_invocation_trailer)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1341
            if not self.willBe(EParser.LF):
                from antlr4.error.Errors import FailedPredicateException
                raise FailedPredicateException(self, "$parser.willBe(EParser.LF)")
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Selectable_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return EParser.RULE_selectable_expression

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class ThisExpressionContext(Selectable_expressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a EParser.Selectable_expressionContext
            super().__init__(parser)
            self.exp = None # This_expressionContext
            self.copyFrom(ctx)

        def this_expression(self):
            return self.getTypedRuleContext(EParser.This_expressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterThisExpression" ):
                listener.enterThisExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitThisExpression" ):
                listener.exitThisExpression(self)


    class ParenthesisExpressionContext(Selectable_expressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a EParser.Selectable_expressionContext
            super().__init__(parser)
            self.exp = None # Parenthesis_expressionContext
            self.copyFrom(ctx)

        def parenthesis_expression(self):
            return self.getTypedRuleContext(EParser.Parenthesis_expressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParenthesisExpression" ):
                listener.enterParenthesisExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParenthesisExpression" ):
                listener.exitParenthesisExpression(self)


    class LiteralExpressionContext(Selectable_expressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a EParser.Selectable_expressionContext
            super().__init__(parser)
            self.exp = None # Literal_expressionContext
            self.copyFrom(ctx)

        def literal_expression(self):
            return self.getTypedRuleContext(EParser.Literal_expressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLiteralExpression" ):
                listener.enterLiteralExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLiteralExpression" ):
                listener.exitLiteralExpression(self)


    class IdentifierExpressionContext(Selectable_expressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a EParser.Selectable_expressionContext
            super().__init__(parser)
            self.exp = None # IdentifierContext
            self.copyFrom(ctx)

        def identifier(self):
            return self.getTypedRuleContext(EParser.IdentifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentifierExpression" ):
                listener.enterIdentifierExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentifierExpression" ):
                listener.exitIdentifierExpression(self)



    def selectable_expression(self):

        localctx = EParser.Selectable_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_selectable_expression)
        try:
            self.state = 1347
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,66,self._ctx)
            if la_ == 1:
                localctx = EParser.ParenthesisExpressionContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1343
                localctx.exp = self.parenthesis_expression()
                pass

            elif la_ == 2:
                localctx = EParser.LiteralExpressionContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1344
                localctx.exp = self.literal_expression()
                pass

            elif la_ == 3:
                localctx = EParser.IdentifierExpressionContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 1345
                localctx.exp = self.identifier()
                pass

            elif la_ == 4:
                localctx = EParser.ThisExpressionContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 1346
                localctx.exp = self.this_expression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Instance_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return EParser.RULE_instance_expression

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class SelectorExpressionContext(Instance_expressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a EParser.Instance_expressionContext
            super().__init__(parser)
            self.parent = None # Instance_expressionContext
            self.selector = None # Instance_selectorContext
            self.copyFrom(ctx)

        def instance_expression(self):
            return self.getTypedRuleContext(EParser.Instance_expressionContext,0)

        def instance_selector(self):
            return self.getTypedRuleContext(EParser.Instance_selectorContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelectorExpression" ):
                listener.enterSelectorExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelectorExpression" ):
                listener.exitSelectorExpression(self)


    class SelectableExpressionContext(Instance_expressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a EParser.Instance_expressionContext
            super().__init__(parser)
            self.parent = None # Selectable_expressionContext
            self.copyFrom(ctx)

        def selectable_expression(self):
            return self.getTypedRuleContext(EParser.Selectable_expressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelectableExpression" ):
                listener.enterSelectableExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelectableExpression" ):
                listener.exitSelectableExpression(self)



    def instance_expression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = EParser.Instance_expressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 102
        self.enterRecursionRule(localctx, 102, self.RULE_instance_expression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            localctx = EParser.SelectableExpressionContext(self, localctx)
            self._ctx = localctx
            _prevctx = localctx

            self.state = 1350
            localctx.parent = self.selectable_expression()
            self._ctx.stop = self._input.LT(-1)
            self.state = 1356
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,67,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = EParser.SelectorExpressionContext(self, EParser.Instance_expressionContext(self, _parentctx, _parentState))
                    localctx.parent = _prevctx
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_instance_expression)
                    self.state = 1352
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 1353
                    localctx.selector = self.instance_selector() 
                self.state = 1358
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,67,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class Instance_selectorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return EParser.RULE_instance_selector

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class SliceSelectorContext(Instance_selectorContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a EParser.Instance_selectorContext
            super().__init__(parser)
            self.xslice = None # Slice_argumentsContext
            self.copyFrom(ctx)

        def LBRAK(self):
            return self.getToken(EParser.LBRAK, 0)
        def RBRAK(self):
            return self.getToken(EParser.RBRAK, 0)
        def slice_arguments(self):
            return self.getTypedRuleContext(EParser.Slice_argumentsContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSliceSelector" ):
                listener.enterSliceSelector(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSliceSelector" ):
                listener.exitSliceSelector(self)


    class MemberSelectorContext(Instance_selectorContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a EParser.Instance_selectorContext
            super().__init__(parser)
            self.name = None # Variable_identifierContext
            self.copyFrom(ctx)

        def DOT(self):
            return self.getToken(EParser.DOT, 0)
        def variable_identifier(self):
            return self.getTypedRuleContext(EParser.Variable_identifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMemberSelector" ):
                listener.enterMemberSelector(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMemberSelector" ):
                listener.exitMemberSelector(self)


    class ItemSelectorContext(Instance_selectorContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a EParser.Instance_selectorContext
            super().__init__(parser)
            self.exp = None # ExpressionContext
            self.copyFrom(ctx)

        def LBRAK(self):
            return self.getToken(EParser.LBRAK, 0)
        def RBRAK(self):
            return self.getToken(EParser.RBRAK, 0)
        def expression(self):
            return self.getTypedRuleContext(EParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterItemSelector" ):
                listener.enterItemSelector(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitItemSelector" ):
                listener.exitItemSelector(self)



    def instance_selector(self):

        localctx = EParser.Instance_selectorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_instance_selector)
        try:
            self.state = 1372
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,68,self._ctx)
            if la_ == 1:
                localctx = EParser.MemberSelectorContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1359
                if not self.wasNot(EParser.WS):
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "$parser.wasNot(EParser.WS)")
                self.state = 1360
                self.match(EParser.DOT)
                self.state = 1361
                localctx.name = self.variable_identifier()
                pass

            elif la_ == 2:
                localctx = EParser.SliceSelectorContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1362
                if not self.wasNot(EParser.WS):
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "$parser.wasNot(EParser.WS)")
                self.state = 1363
                self.match(EParser.LBRAK)
                self.state = 1364
                localctx.xslice = self.slice_arguments()
                self.state = 1365
                self.match(EParser.RBRAK)
                pass

            elif la_ == 3:
                localctx = EParser.ItemSelectorContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 1367
                if not self.wasNot(EParser.WS):
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "$parser.wasNot(EParser.WS)")
                self.state = 1368
                self.match(EParser.LBRAK)
                self.state = 1369
                localctx.exp = self.expression(0)
                self.state = 1370
                self.match(EParser.RBRAK)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Mutable_instance_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return EParser.RULE_mutable_instance_expression

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class MutableSelectableExpressionContext(Mutable_instance_expressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a EParser.Mutable_instance_expressionContext
            super().__init__(parser)
            self.exp = None # IdentifierContext
            self.copyFrom(ctx)

        def MUTABLE(self):
            return self.getToken(EParser.MUTABLE, 0)
        def identifier(self):
            return self.getTypedRuleContext(EParser.IdentifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMutableSelectableExpression" ):
                listener.enterMutableSelectableExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMutableSelectableExpression" ):
                listener.exitMutableSelectableExpression(self)


    class MutableSelectorExpressionContext(Mutable_instance_expressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a EParser.Mutable_instance_expressionContext
            super().__init__(parser)
            self.parent = None # Mutable_instance_expressionContext
            self.selector = None # Instance_selectorContext
            self.copyFrom(ctx)

        def mutable_instance_expression(self):
            return self.getTypedRuleContext(EParser.Mutable_instance_expressionContext,0)

        def instance_selector(self):
            return self.getTypedRuleContext(EParser.Instance_selectorContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMutableSelectorExpression" ):
                listener.enterMutableSelectorExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMutableSelectorExpression" ):
                listener.exitMutableSelectorExpression(self)



    def mutable_instance_expression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = EParser.Mutable_instance_expressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 106
        self.enterRecursionRule(localctx, 106, self.RULE_mutable_instance_expression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            localctx = EParser.MutableSelectableExpressionContext(self, localctx)
            self._ctx = localctx
            _prevctx = localctx

            self.state = 1375
            self.match(EParser.MUTABLE)
            self.state = 1376
            localctx.exp = self.identifier()
            self._ctx.stop = self._input.LT(-1)
            self.state = 1382
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,69,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = EParser.MutableSelectorExpressionContext(self, EParser.Mutable_instance_expressionContext(self, _parentctx, _parentState))
                    localctx.parent = _prevctx
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_mutable_instance_expression)
                    self.state = 1378
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 1379
                    localctx.selector = self.instance_selector() 
                self.state = 1384
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,69,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class Document_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DOCUMENT(self):
            return self.getToken(EParser.DOCUMENT, 0)

        def FROM(self):
            return self.getToken(EParser.FROM, 0)

        def expression(self):
            return self.getTypedRuleContext(EParser.ExpressionContext,0)


        def getRuleIndex(self):
            return EParser.RULE_document_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDocument_expression" ):
                listener.enterDocument_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDocument_expression" ):
                listener.exitDocument_expression(self)




    def document_expression(self):

        localctx = EParser.Document_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_document_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1385
            self.match(EParser.DOCUMENT)
            self.state = 1388
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,70,self._ctx)
            if la_ == 1:
                self.state = 1386
                self.match(EParser.FROM)
                self.state = 1387
                self.expression(0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Blob_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BLOB(self):
            return self.getToken(EParser.BLOB, 0)

        def FROM(self):
            return self.getToken(EParser.FROM, 0)

        def expression(self):
            return self.getTypedRuleContext(EParser.ExpressionContext,0)


        def getRuleIndex(self):
            return EParser.RULE_blob_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBlob_expression" ):
                listener.enterBlob_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBlob_expression" ):
                listener.exitBlob_expression(self)




    def blob_expression(self):

        localctx = EParser.Blob_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_blob_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1390
            self.match(EParser.BLOB)
            self.state = 1391
            self.match(EParser.FROM)
            self.state = 1392
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Constructor_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return EParser.RULE_constructor_expression

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class ConstructorFromContext(Constructor_expressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a EParser.Constructor_expressionContext
            super().__init__(parser)
            self.typ = None # Mutable_category_typeContext
            self.copyExp = None # ExpressionContext
            self.args = None # With_argument_assignment_listContext
            self.arg = None # Argument_assignmentContext
            self.copyFrom(ctx)

        def FROM(self):
            return self.getToken(EParser.FROM, 0)
        def mutable_category_type(self):
            return self.getTypedRuleContext(EParser.Mutable_category_typeContext,0)

        def expression(self):
            return self.getTypedRuleContext(EParser.ExpressionContext,0)

        def with_argument_assignment_list(self):
            return self.getTypedRuleContext(EParser.With_argument_assignment_listContext,0)

        def COMMA(self):
            return self.getToken(EParser.COMMA, 0)
        def AND(self):
            return self.getToken(EParser.AND, 0)
        def argument_assignment(self):
            return self.getTypedRuleContext(EParser.Argument_assignmentContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstructorFrom" ):
                listener.enterConstructorFrom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstructorFrom" ):
                listener.exitConstructorFrom(self)


    class ConstructorNoFromContext(Constructor_expressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a EParser.Constructor_expressionContext
            super().__init__(parser)
            self.typ = None # Mutable_category_typeContext
            self.args = None # With_argument_assignment_listContext
            self.arg = None # Argument_assignmentContext
            self.copyFrom(ctx)

        def mutable_category_type(self):
            return self.getTypedRuleContext(EParser.Mutable_category_typeContext,0)

        def with_argument_assignment_list(self):
            return self.getTypedRuleContext(EParser.With_argument_assignment_listContext,0)

        def AND(self):
            return self.getToken(EParser.AND, 0)
        def argument_assignment(self):
            return self.getTypedRuleContext(EParser.Argument_assignmentContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstructorNoFrom" ):
                listener.enterConstructorNoFrom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstructorNoFrom" ):
                listener.exitConstructorNoFrom(self)



    def constructor_expression(self):

        localctx = EParser.Constructor_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_constructor_expression)
        self._la = 0 # Token type
        try:
            self.state = 1415
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,76,self._ctx)
            if la_ == 1:
                localctx = EParser.ConstructorFromContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1394
                localctx.typ = self.mutable_category_type()
                self.state = 1395
                self.match(EParser.FROM)
                self.state = 1396
                localctx.copyExp = self.expression(0)
                self.state = 1405
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,73,self._ctx)
                if la_ == 1:
                    self.state = 1398
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==EParser.COMMA:
                        self.state = 1397
                        self.match(EParser.COMMA)


                    self.state = 1400
                    localctx.args = self.with_argument_assignment_list(0)
                    self.state = 1403
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,72,self._ctx)
                    if la_ == 1:
                        self.state = 1401
                        self.match(EParser.AND)
                        self.state = 1402
                        localctx.arg = self.argument_assignment()




                pass

            elif la_ == 2:
                localctx = EParser.ConstructorNoFromContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1407
                localctx.typ = self.mutable_category_type()
                self.state = 1413
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,75,self._ctx)
                if la_ == 1:
                    self.state = 1408
                    localctx.args = self.with_argument_assignment_list(0)
                    self.state = 1411
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,74,self._ctx)
                    if la_ == 1:
                        self.state = 1409
                        self.match(EParser.AND)
                        self.state = 1410
                        localctx.arg = self.argument_assignment()




                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Write_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.what = None # ExpressionContext
            self.target = None # ExpressionContext

        def WRITE(self):
            return self.getToken(EParser.WRITE, 0)

        def TO(self):
            return self.getToken(EParser.TO, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(EParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(EParser.ExpressionContext,i)


        def getRuleIndex(self):
            return EParser.RULE_write_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWrite_statement" ):
                listener.enterWrite_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWrite_statement" ):
                listener.exitWrite_statement(self)




    def write_statement(self):

        localctx = EParser.Write_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_write_statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1417
            self.match(EParser.WRITE)
            self.state = 1418
            localctx.what = self.expression(0)
            self.state = 1419
            self.match(EParser.TO)
            self.state = 1420
            localctx.target = self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Ambiguous_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.method = None # Unresolved_expressionContext
            self.exp = None # ExpressionContext

        def MINUS(self):
            return self.getToken(EParser.MINUS, 0)

        def unresolved_expression(self):
            return self.getTypedRuleContext(EParser.Unresolved_expressionContext,0)


        def expression(self):
            return self.getTypedRuleContext(EParser.ExpressionContext,0)


        def getRuleIndex(self):
            return EParser.RULE_ambiguous_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAmbiguous_expression" ):
                listener.enterAmbiguous_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAmbiguous_expression" ):
                listener.exitAmbiguous_expression(self)




    def ambiguous_expression(self):

        localctx = EParser.Ambiguous_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_ambiguous_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1422
            localctx.method = self.unresolved_expression(0)
            self.state = 1423
            self.match(EParser.MINUS)
            self.state = 1424
            localctx.exp = self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Filtered_list_suffixContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # Variable_identifierContext
            self.predicate = None # ExpressionContext

        def FILTERED(self):
            return self.getToken(EParser.FILTERED, 0)

        def WHERE(self):
            return self.getToken(EParser.WHERE, 0)

        def expression(self):
            return self.getTypedRuleContext(EParser.ExpressionContext,0)


        def WITH(self):
            return self.getToken(EParser.WITH, 0)

        def variable_identifier(self):
            return self.getTypedRuleContext(EParser.Variable_identifierContext,0)


        def getRuleIndex(self):
            return EParser.RULE_filtered_list_suffix

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFiltered_list_suffix" ):
                listener.enterFiltered_list_suffix(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFiltered_list_suffix" ):
                listener.exitFiltered_list_suffix(self)




    def filtered_list_suffix(self):

        localctx = EParser.Filtered_list_suffixContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_filtered_list_suffix)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1426
            self.match(EParser.FILTERED)
            self.state = 1429
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==EParser.WITH:
                self.state = 1427
                self.match(EParser.WITH)
                self.state = 1428
                localctx.name = self.variable_identifier()


            self.state = 1431
            self.match(EParser.WHERE)
            self.state = 1432
            localctx.predicate = self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Fetch_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return EParser.RULE_fetch_expression

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class FetchOneContext(Fetch_expressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a EParser.Fetch_expressionContext
            super().__init__(parser)
            self.typ = None # Mutable_category_typeContext
            self.predicate = None # ExpressionContext
            self.copyFrom(ctx)

        def FETCH(self):
            return self.getToken(EParser.FETCH, 0)
        def ONE(self):
            return self.getToken(EParser.ONE, 0)
        def WHERE(self):
            return self.getToken(EParser.WHERE, 0)
        def expression(self):
            return self.getTypedRuleContext(EParser.ExpressionContext,0)

        def mutable_category_type(self):
            return self.getTypedRuleContext(EParser.Mutable_category_typeContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFetchOne" ):
                listener.enterFetchOne(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFetchOne" ):
                listener.exitFetchOne(self)


    class FetchManyContext(Fetch_expressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a EParser.Fetch_expressionContext
            super().__init__(parser)
            self.typ = None # Mutable_category_typeContext
            self.xstart = None # ExpressionContext
            self.xstop = None # ExpressionContext
            self.predicate = None # ExpressionContext
            self.orderby = None # Order_by_listContext
            self.copyFrom(ctx)

        def FETCH(self):
            return self.getToken(EParser.FETCH, 0)
        def WHERE(self):
            return self.getToken(EParser.WHERE, 0)
        def ORDER(self):
            return self.getToken(EParser.ORDER, 0)
        def BY(self):
            return self.getToken(EParser.BY, 0)
        def ALL(self):
            return self.getToken(EParser.ALL, 0)
        def TO(self):
            return self.getToken(EParser.TO, 0)
        def ROWS(self):
            return self.getToken(EParser.ROWS, 0)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(EParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(EParser.ExpressionContext,i)

        def order_by_list(self):
            return self.getTypedRuleContext(EParser.Order_by_listContext,0)

        def mutable_category_type(self):
            return self.getTypedRuleContext(EParser.Mutable_category_typeContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFetchMany" ):
                listener.enterFetchMany(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFetchMany" ):
                listener.exitFetchMany(self)



    def fetch_expression(self):

        localctx = EParser.Fetch_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_fetch_expression)
        self._la = 0 # Token type
        try:
            self.state = 1470
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,84,self._ctx)
            if la_ == 1:
                localctx = EParser.FetchOneContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1434
                self.match(EParser.FETCH)
                self.state = 1435
                self.match(EParser.ONE)

                self.state = 1437
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==EParser.MUTABLE or _la==EParser.TYPE_IDENTIFIER:
                    self.state = 1436
                    localctx.typ = self.mutable_category_type()


                self.state = 1439
                self.match(EParser.WHERE)
                self.state = 1440
                localctx.predicate = self.expression(0)
                pass

            elif la_ == 2:
                localctx = EParser.FetchManyContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1441
                self.match(EParser.FETCH)
                self.state = 1459
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [EParser.ALL]:
                    self.state = 1442
                    self.match(EParser.ALL)
                    self.state = 1444
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,79,self._ctx)
                    if la_ == 1:
                        self.state = 1443
                        localctx.typ = self.mutable_category_type()


                    pass
                elif token in [EParser.MUTABLE, EParser.TYPE_IDENTIFIER]:
                    self.state = 1446
                    localctx.typ = self.mutable_category_type()
                    self.state = 1448
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==EParser.ROWS:
                        self.state = 1447
                        self.match(EParser.ROWS)


                    self.state = 1450
                    localctx.xstart = self.expression(0)
                    self.state = 1451
                    self.match(EParser.TO)
                    self.state = 1452
                    localctx.xstop = self.expression(0)
                    pass
                elif token in [EParser.ROWS]:
                    self.state = 1454
                    self.match(EParser.ROWS)
                    self.state = 1455
                    localctx.xstart = self.expression(0)
                    self.state = 1456
                    self.match(EParser.TO)
                    self.state = 1457
                    localctx.xstop = self.expression(0)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1463
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,82,self._ctx)
                if la_ == 1:
                    self.state = 1461
                    self.match(EParser.WHERE)
                    self.state = 1462
                    localctx.predicate = self.expression(0)


                self.state = 1468
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,83,self._ctx)
                if la_ == 1:
                    self.state = 1465
                    self.match(EParser.ORDER)
                    self.state = 1466
                    self.match(EParser.BY)
                    self.state = 1467
                    localctx.orderby = self.order_by_list()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Fetch_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return EParser.RULE_fetch_statement

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class FetchManyAsyncContext(Fetch_statementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a EParser.Fetch_statementContext
            super().__init__(parser)
            self.typ = None # Mutable_category_typeContext
            self.xstart = None # ExpressionContext
            self.xstop = None # ExpressionContext
            self.predicate = None # ExpressionContext
            self.orderby = None # Order_by_listContext
            self.name = None # Variable_identifierContext
            self.stmts = None # Statement_listContext
            self.copyFrom(ctx)

        def FETCH(self):
            return self.getToken(EParser.FETCH, 0)
        def THEN(self):
            return self.getToken(EParser.THEN, 0)
        def WITH(self):
            return self.getToken(EParser.WITH, 0)
        def COLON(self):
            return self.getToken(EParser.COLON, 0)
        def indent(self):
            return self.getTypedRuleContext(EParser.IndentContext,0)

        def dedent(self):
            return self.getTypedRuleContext(EParser.DedentContext,0)

        def variable_identifier(self):
            return self.getTypedRuleContext(EParser.Variable_identifierContext,0)

        def statement_list(self):
            return self.getTypedRuleContext(EParser.Statement_listContext,0)

        def WHERE(self):
            return self.getToken(EParser.WHERE, 0)
        def ORDER(self):
            return self.getToken(EParser.ORDER, 0)
        def BY(self):
            return self.getToken(EParser.BY, 0)
        def ALL(self):
            return self.getToken(EParser.ALL, 0)
        def TO(self):
            return self.getToken(EParser.TO, 0)
        def ROWS(self):
            return self.getToken(EParser.ROWS, 0)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(EParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(EParser.ExpressionContext,i)

        def order_by_list(self):
            return self.getTypedRuleContext(EParser.Order_by_listContext,0)

        def mutable_category_type(self):
            return self.getTypedRuleContext(EParser.Mutable_category_typeContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFetchManyAsync" ):
                listener.enterFetchManyAsync(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFetchManyAsync" ):
                listener.exitFetchManyAsync(self)


    class FetchOneAsyncContext(Fetch_statementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a EParser.Fetch_statementContext
            super().__init__(parser)
            self.typ = None # Mutable_category_typeContext
            self.predicate = None # ExpressionContext
            self.name = None # Variable_identifierContext
            self.stmts = None # Statement_listContext
            self.copyFrom(ctx)

        def FETCH(self):
            return self.getToken(EParser.FETCH, 0)
        def ONE(self):
            return self.getToken(EParser.ONE, 0)
        def WHERE(self):
            return self.getToken(EParser.WHERE, 0)
        def THEN(self):
            return self.getToken(EParser.THEN, 0)
        def WITH(self):
            return self.getToken(EParser.WITH, 0)
        def COLON(self):
            return self.getToken(EParser.COLON, 0)
        def indent(self):
            return self.getTypedRuleContext(EParser.IndentContext,0)

        def dedent(self):
            return self.getTypedRuleContext(EParser.DedentContext,0)

        def expression(self):
            return self.getTypedRuleContext(EParser.ExpressionContext,0)

        def variable_identifier(self):
            return self.getTypedRuleContext(EParser.Variable_identifierContext,0)

        def statement_list(self):
            return self.getTypedRuleContext(EParser.Statement_listContext,0)

        def mutable_category_type(self):
            return self.getTypedRuleContext(EParser.Mutable_category_typeContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFetchOneAsync" ):
                listener.enterFetchOneAsync(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFetchOneAsync" ):
                listener.exitFetchOneAsync(self)



    def fetch_statement(self):

        localctx = EParser.Fetch_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_fetch_statement)
        self._la = 0 # Token type
        try:
            self.state = 1524
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,91,self._ctx)
            if la_ == 1:
                localctx = EParser.FetchOneAsyncContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1472
                self.match(EParser.FETCH)
                self.state = 1473
                self.match(EParser.ONE)

                self.state = 1475
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==EParser.MUTABLE or _la==EParser.TYPE_IDENTIFIER:
                    self.state = 1474
                    localctx.typ = self.mutable_category_type()


                self.state = 1477
                self.match(EParser.WHERE)
                self.state = 1478
                localctx.predicate = self.expression(0)
                self.state = 1479
                self.match(EParser.THEN)
                self.state = 1480
                self.match(EParser.WITH)
                self.state = 1481
                localctx.name = self.variable_identifier()
                self.state = 1482
                self.match(EParser.COLON)
                self.state = 1483
                self.indent()
                self.state = 1484
                localctx.stmts = self.statement_list()
                self.state = 1485
                self.dedent()
                pass

            elif la_ == 2:
                localctx = EParser.FetchManyAsyncContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1487
                self.match(EParser.FETCH)
                self.state = 1505
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [EParser.ALL]:
                    self.state = 1488
                    self.match(EParser.ALL)
                    self.state = 1490
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==EParser.MUTABLE or _la==EParser.TYPE_IDENTIFIER:
                        self.state = 1489
                        localctx.typ = self.mutable_category_type()


                    pass
                elif token in [EParser.MUTABLE, EParser.TYPE_IDENTIFIER]:
                    self.state = 1492
                    localctx.typ = self.mutable_category_type()
                    self.state = 1494
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==EParser.ROWS:
                        self.state = 1493
                        self.match(EParser.ROWS)


                    self.state = 1496
                    localctx.xstart = self.expression(0)
                    self.state = 1497
                    self.match(EParser.TO)
                    self.state = 1498
                    localctx.xstop = self.expression(0)
                    pass
                elif token in [EParser.ROWS]:
                    self.state = 1500
                    self.match(EParser.ROWS)
                    self.state = 1501
                    localctx.xstart = self.expression(0)
                    self.state = 1502
                    self.match(EParser.TO)
                    self.state = 1503
                    localctx.xstop = self.expression(0)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1509
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==EParser.WHERE:
                    self.state = 1507
                    self.match(EParser.WHERE)
                    self.state = 1508
                    localctx.predicate = self.expression(0)


                self.state = 1514
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==EParser.ORDER:
                    self.state = 1511
                    self.match(EParser.ORDER)
                    self.state = 1512
                    self.match(EParser.BY)
                    self.state = 1513
                    localctx.orderby = self.order_by_list()


                self.state = 1516
                self.match(EParser.THEN)
                self.state = 1517
                self.match(EParser.WITH)
                self.state = 1518
                localctx.name = self.variable_identifier()
                self.state = 1519
                self.match(EParser.COLON)
                self.state = 1520
                self.indent()
                self.state = 1521
                localctx.stmts = self.statement_list()
                self.state = 1522
                self.dedent()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Sorted_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.source = None # Instance_expressionContext
            self.key = None # Sorted_keyContext

        def SORTED(self):
            return self.getToken(EParser.SORTED, 0)

        def instance_expression(self):
            return self.getTypedRuleContext(EParser.Instance_expressionContext,0)


        def DESC(self):
            return self.getToken(EParser.DESC, 0)

        def WITH(self):
            return self.getToken(EParser.WITH, 0)

        def AS(self):
            return self.getToken(EParser.AS, 0)

        def key_token(self):
            return self.getTypedRuleContext(EParser.Key_tokenContext,0)


        def sorted_key(self):
            return self.getTypedRuleContext(EParser.Sorted_keyContext,0)


        def getRuleIndex(self):
            return EParser.RULE_sorted_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSorted_expression" ):
                listener.enterSorted_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSorted_expression" ):
                listener.exitSorted_expression(self)




    def sorted_expression(self):

        localctx = EParser.Sorted_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_sorted_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1526
            self.match(EParser.SORTED)
            self.state = 1528
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==EParser.DESC:
                self.state = 1527
                self.match(EParser.DESC)


            self.state = 1530
            localctx.source = self.instance_expression(0)
            self.state = 1536
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,93,self._ctx)
            if la_ == 1:
                self.state = 1531
                self.match(EParser.WITH)
                self.state = 1532
                localctx.key = self.sorted_key()
                self.state = 1533
                self.match(EParser.AS)
                self.state = 1534
                self.key_token()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Argument_assignment_listContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return EParser.RULE_argument_assignment_list

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class ArgumentAssignmentListExpressionContext(Argument_assignment_listContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a EParser.Argument_assignment_listContext
            super().__init__(parser)
            self.exp = None # ExpressionContext
            self.items = None # With_argument_assignment_listContext
            self.item = None # Argument_assignmentContext
            self.copyFrom(ctx)

        def expression(self):
            return self.getTypedRuleContext(EParser.ExpressionContext,0)

        def with_argument_assignment_list(self):
            return self.getTypedRuleContext(EParser.With_argument_assignment_listContext,0)

        def AND(self):
            return self.getToken(EParser.AND, 0)
        def argument_assignment(self):
            return self.getTypedRuleContext(EParser.Argument_assignmentContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArgumentAssignmentListExpression" ):
                listener.enterArgumentAssignmentListExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArgumentAssignmentListExpression" ):
                listener.exitArgumentAssignmentListExpression(self)


    class ArgumentAssignmentListNoExpressionContext(Argument_assignment_listContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a EParser.Argument_assignment_listContext
            super().__init__(parser)
            self.items = None # With_argument_assignment_listContext
            self.item = None # Argument_assignmentContext
            self.copyFrom(ctx)

        def with_argument_assignment_list(self):
            return self.getTypedRuleContext(EParser.With_argument_assignment_listContext,0)

        def AND(self):
            return self.getToken(EParser.AND, 0)
        def argument_assignment(self):
            return self.getTypedRuleContext(EParser.Argument_assignmentContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArgumentAssignmentListNoExpression" ):
                listener.enterArgumentAssignmentListNoExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArgumentAssignmentListNoExpression" ):
                listener.exitArgumentAssignmentListNoExpression(self)



    def argument_assignment_list(self):

        localctx = EParser.Argument_assignment_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_argument_assignment_list)
        try:
            self.state = 1552
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,97,self._ctx)
            if la_ == 1:
                localctx = EParser.ArgumentAssignmentListExpressionContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1538
                if not self.was(EParser.WS):
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "$parser.was(EParser.WS)")
                self.state = 1539
                localctx.exp = self.expression(0)
                self.state = 1545
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,95,self._ctx)
                if la_ == 1:
                    self.state = 1540
                    localctx.items = self.with_argument_assignment_list(0)
                    self.state = 1543
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,94,self._ctx)
                    if la_ == 1:
                        self.state = 1541
                        self.match(EParser.AND)
                        self.state = 1542
                        localctx.item = self.argument_assignment()




                pass

            elif la_ == 2:
                localctx = EParser.ArgumentAssignmentListNoExpressionContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1547
                localctx.items = self.with_argument_assignment_list(0)
                self.state = 1550
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,96,self._ctx)
                if la_ == 1:
                    self.state = 1548
                    self.match(EParser.AND)
                    self.state = 1549
                    localctx.item = self.argument_assignment()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class With_argument_assignment_listContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return EParser.RULE_with_argument_assignment_list

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class ArgumentAssignmentListContext(With_argument_assignment_listContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a EParser.With_argument_assignment_listContext
            super().__init__(parser)
            self.item = None # Argument_assignmentContext
            self.copyFrom(ctx)

        def WITH(self):
            return self.getToken(EParser.WITH, 0)
        def argument_assignment(self):
            return self.getTypedRuleContext(EParser.Argument_assignmentContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArgumentAssignmentList" ):
                listener.enterArgumentAssignmentList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArgumentAssignmentList" ):
                listener.exitArgumentAssignmentList(self)


    class ArgumentAssignmentListItemContext(With_argument_assignment_listContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a EParser.With_argument_assignment_listContext
            super().__init__(parser)
            self.items = None # With_argument_assignment_listContext
            self.item = None # Argument_assignmentContext
            self.copyFrom(ctx)

        def COMMA(self):
            return self.getToken(EParser.COMMA, 0)
        def with_argument_assignment_list(self):
            return self.getTypedRuleContext(EParser.With_argument_assignment_listContext,0)

        def argument_assignment(self):
            return self.getTypedRuleContext(EParser.Argument_assignmentContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArgumentAssignmentListItem" ):
                listener.enterArgumentAssignmentListItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArgumentAssignmentListItem" ):
                listener.exitArgumentAssignmentListItem(self)



    def with_argument_assignment_list(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = EParser.With_argument_assignment_listContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 128
        self.enterRecursionRule(localctx, 128, self.RULE_with_argument_assignment_list, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            localctx = EParser.ArgumentAssignmentListContext(self, localctx)
            self._ctx = localctx
            _prevctx = localctx

            self.state = 1555
            self.match(EParser.WITH)
            self.state = 1556
            localctx.item = self.argument_assignment()
            self._ctx.stop = self._input.LT(-1)
            self.state = 1563
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,98,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = EParser.ArgumentAssignmentListItemContext(self, EParser.With_argument_assignment_listContext(self, _parentctx, _parentState))
                    localctx.items = _prevctx
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_with_argument_assignment_list)
                    self.state = 1558
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 1559
                    self.match(EParser.COMMA)
                    self.state = 1560
                    localctx.item = self.argument_assignment() 
                self.state = 1565
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,98,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class Argument_assignmentContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.exp = None # ExpressionContext
            self.name = None # Variable_identifierContext

        def variable_identifier(self):
            return self.getTypedRuleContext(EParser.Variable_identifierContext,0)


        def AS(self):
            return self.getToken(EParser.AS, 0)

        def expression(self):
            return self.getTypedRuleContext(EParser.ExpressionContext,0)


        def getRuleIndex(self):
            return EParser.RULE_argument_assignment

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArgument_assignment" ):
                listener.enterArgument_assignment(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArgument_assignment" ):
                listener.exitArgument_assignment(self)




    def argument_assignment(self):

        localctx = EParser.Argument_assignmentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_argument_assignment)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1569
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,99,self._ctx)
            if la_ == 1:
                self.state = 1566
                localctx.exp = self.expression(0)
                self.state = 1567
                self.match(EParser.AS)


            self.state = 1571
            localctx.name = self.variable_identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Assign_instance_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.inst = None # Assignable_instanceContext
            self.exp = None # ExpressionContext

        def assign(self):
            return self.getTypedRuleContext(EParser.AssignContext,0)


        def assignable_instance(self):
            return self.getTypedRuleContext(EParser.Assignable_instanceContext,0)


        def expression(self):
            return self.getTypedRuleContext(EParser.ExpressionContext,0)


        def getRuleIndex(self):
            return EParser.RULE_assign_instance_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssign_instance_statement" ):
                listener.enterAssign_instance_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssign_instance_statement" ):
                listener.exitAssign_instance_statement(self)




    def assign_instance_statement(self):

        localctx = EParser.Assign_instance_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_assign_instance_statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1573
            localctx.inst = self.assignable_instance(0)
            self.state = 1574
            self.assign()
            self.state = 1575
            localctx.exp = self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Child_instanceContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return EParser.RULE_child_instance

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class MemberInstanceContext(Child_instanceContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a EParser.Child_instanceContext
            super().__init__(parser)
            self.name = None # Variable_identifierContext
            self.copyFrom(ctx)

        def DOT(self):
            return self.getToken(EParser.DOT, 0)
        def variable_identifier(self):
            return self.getTypedRuleContext(EParser.Variable_identifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMemberInstance" ):
                listener.enterMemberInstance(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMemberInstance" ):
                listener.exitMemberInstance(self)


    class ItemInstanceContext(Child_instanceContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a EParser.Child_instanceContext
            super().__init__(parser)
            self.exp = None # ExpressionContext
            self.copyFrom(ctx)

        def LBRAK(self):
            return self.getToken(EParser.LBRAK, 0)
        def RBRAK(self):
            return self.getToken(EParser.RBRAK, 0)
        def expression(self):
            return self.getTypedRuleContext(EParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterItemInstance" ):
                listener.enterItemInstance(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitItemInstance" ):
                listener.exitItemInstance(self)



    def child_instance(self):

        localctx = EParser.Child_instanceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_child_instance)
        try:
            self.state = 1585
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,100,self._ctx)
            if la_ == 1:
                localctx = EParser.MemberInstanceContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1577
                if not self.wasNot(EParser.WS):
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "$parser.wasNot(EParser.WS)")
                self.state = 1578
                self.match(EParser.DOT)
                self.state = 1579
                localctx.name = self.variable_identifier()
                pass

            elif la_ == 2:
                localctx = EParser.ItemInstanceContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1580
                if not self.wasNot(EParser.WS):
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "$parser.wasNot(EParser.WS)")
                self.state = 1581
                self.match(EParser.LBRAK)
                self.state = 1582
                localctx.exp = self.expression(0)
                self.state = 1583
                self.match(EParser.RBRAK)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Assign_tuple_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.items = None # Variable_identifier_listContext
            self.exp = None # ExpressionContext

        def assign(self):
            return self.getTypedRuleContext(EParser.AssignContext,0)


        def variable_identifier_list(self):
            return self.getTypedRuleContext(EParser.Variable_identifier_listContext,0)


        def expression(self):
            return self.getTypedRuleContext(EParser.ExpressionContext,0)


        def getRuleIndex(self):
            return EParser.RULE_assign_tuple_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssign_tuple_statement" ):
                listener.enterAssign_tuple_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssign_tuple_statement" ):
                listener.exitAssign_tuple_statement(self)




    def assign_tuple_statement(self):

        localctx = EParser.Assign_tuple_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_assign_tuple_statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1587
            localctx.items = self.variable_identifier_list()
            self.state = 1588
            self.assign()
            self.state = 1589
            localctx.exp = self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class LfsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LF(self, i:int=None):
            if i is None:
                return self.getTokens(EParser.LF)
            else:
                return self.getToken(EParser.LF, i)

        def getRuleIndex(self):
            return EParser.RULE_lfs

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLfs" ):
                listener.enterLfs(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLfs" ):
                listener.exitLfs(self)




    def lfs(self):

        localctx = EParser.LfsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_lfs)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1594
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,101,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1591
                    self.match(EParser.LF) 
                self.state = 1596
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,101,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class LfpContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LF(self, i:int=None):
            if i is None:
                return self.getTokens(EParser.LF)
            else:
                return self.getToken(EParser.LF, i)

        def getRuleIndex(self):
            return EParser.RULE_lfp

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLfp" ):
                listener.enterLfp(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLfp" ):
                listener.exitLfp(self)




    def lfp(self):

        localctx = EParser.LfpContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_lfp)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1598 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1597
                self.match(EParser.LF)
                self.state = 1600 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==EParser.LF):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Ws_plusContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LF(self, i:int=None):
            if i is None:
                return self.getTokens(EParser.LF)
            else:
                return self.getToken(EParser.LF, i)

        def TAB(self, i:int=None):
            if i is None:
                return self.getTokens(EParser.TAB)
            else:
                return self.getToken(EParser.TAB, i)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(EParser.WS)
            else:
                return self.getToken(EParser.WS, i)

        def INDENT(self, i:int=None):
            if i is None:
                return self.getTokens(EParser.INDENT)
            else:
                return self.getToken(EParser.INDENT, i)

        def getRuleIndex(self):
            return EParser.RULE_ws_plus

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWs_plus" ):
                listener.enterWs_plus(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWs_plus" ):
                listener.exitWs_plus(self)




    def ws_plus(self):

        localctx = EParser.Ws_plusContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_ws_plus)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1605
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << EParser.INDENT) | (1 << EParser.LF) | (1 << EParser.TAB) | (1 << EParser.WS))) != 0):
                self.state = 1602
                _la = self._input.LA(1)
                if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << EParser.INDENT) | (1 << EParser.LF) | (1 << EParser.TAB) | (1 << EParser.WS))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1607
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class IndentContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INDENT(self):
            return self.getToken(EParser.INDENT, 0)

        def LF(self, i:int=None):
            if i is None:
                return self.getTokens(EParser.LF)
            else:
                return self.getToken(EParser.LF, i)

        def getRuleIndex(self):
            return EParser.RULE_indent

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndent" ):
                listener.enterIndent(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndent" ):
                listener.exitIndent(self)




    def indent(self):

        localctx = EParser.IndentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_indent)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1609 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1608
                self.match(EParser.LF)
                self.state = 1611 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==EParser.LF):
                    break

            self.state = 1613
            self.match(EParser.INDENT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DedentContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DEDENT(self):
            return self.getToken(EParser.DEDENT, 0)

        def LF(self, i:int=None):
            if i is None:
                return self.getTokens(EParser.LF)
            else:
                return self.getToken(EParser.LF, i)

        def getRuleIndex(self):
            return EParser.RULE_dedent

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDedent" ):
                listener.enterDedent(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDedent" ):
                listener.exitDedent(self)




    def dedent(self):

        localctx = EParser.DedentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_dedent)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1618
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==EParser.LF:
                self.state = 1615
                self.match(EParser.LF)
                self.state = 1620
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1621
            self.match(EParser.DEDENT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Type_literalContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TYPE(self):
            return self.getToken(EParser.TYPE, 0)

        def COLON(self):
            return self.getToken(EParser.COLON, 0)

        def category_or_any_type(self):
            return self.getTypedRuleContext(EParser.Category_or_any_typeContext,0)


        def getRuleIndex(self):
            return EParser.RULE_type_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterType_literal" ):
                listener.enterType_literal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitType_literal" ):
                listener.exitType_literal(self)




    def type_literal(self):

        localctx = EParser.Type_literalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_type_literal)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1623
            self.match(EParser.TYPE)
            self.state = 1624
            self.match(EParser.COLON)
            self.state = 1625
            self.category_or_any_type()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Null_literalContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NOTHING(self):
            return self.getToken(EParser.NOTHING, 0)

        def getRuleIndex(self):
            return EParser.RULE_null_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNull_literal" ):
                listener.enterNull_literal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNull_literal" ):
                listener.exitNull_literal(self)




    def null_literal(self):

        localctx = EParser.Null_literalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_null_literal)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1627
            self.match(EParser.NOTHING)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ReplContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declaration(self):
            return self.getTypedRuleContext(EParser.DeclarationContext,0)


        def statement(self):
            return self.getTypedRuleContext(EParser.StatementContext,0)


        def expression(self):
            return self.getTypedRuleContext(EParser.ExpressionContext,0)


        def getRuleIndex(self):
            return EParser.RULE_repl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRepl" ):
                listener.enterRepl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRepl" ):
                listener.exitRepl(self)




    def repl(self):

        localctx = EParser.ReplContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_repl)
        try:
            self.state = 1632
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,106,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1629
                self.declaration()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1630
                self.statement()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1631
                self.expression(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Declaration_listContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return EParser.RULE_declaration_list

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class FullDeclarationListContext(Declaration_listContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a EParser.Declaration_listContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def lfs(self):
            return self.getTypedRuleContext(EParser.LfsContext,0)

        def EOF(self):
            return self.getToken(EParser.EOF, 0)
        def declarations(self):
            return self.getTypedRuleContext(EParser.DeclarationsContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFullDeclarationList" ):
                listener.enterFullDeclarationList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFullDeclarationList" ):
                listener.exitFullDeclarationList(self)



    def declaration_list(self):

        localctx = EParser.Declaration_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_declaration_list)
        self._la = 0 # Token type
        try:
            localctx = EParser.FullDeclarationListContext(self, localctx)
            self.enterOuterAlt(localctx, 1)
            self.state = 1635
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==EParser.COMMENT or _la==EParser.DEFINE or _la==EParser.ARONDBASE_IDENTIFIER:
                self.state = 1634
                self.declarations()


            self.state = 1637
            self.lfs()
            self.state = 1638
            self.match(EParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DeclarationsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(EParser.DeclarationContext)
            else:
                return self.getTypedRuleContext(EParser.DeclarationContext,i)


        def lfp(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(EParser.LfpContext)
            else:
                return self.getTypedRuleContext(EParser.LfpContext,i)


        def getRuleIndex(self):
            return EParser.RULE_declarations

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclarations" ):
                listener.enterDeclarations(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclarations" ):
                listener.exitDeclarations(self)




    def declarations(self):

        localctx = EParser.DeclarationsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_declarations)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1640
            self.declaration()
            self.state = 1646
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,108,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1641
                    self.lfp()
                    self.state = 1642
                    self.declaration() 
                self.state = 1648
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,108,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def attribute_declaration(self):
            return self.getTypedRuleContext(EParser.Attribute_declarationContext,0)


        def category_declaration(self):
            return self.getTypedRuleContext(EParser.Category_declarationContext,0)


        def resource_declaration(self):
            return self.getTypedRuleContext(EParser.Resource_declarationContext,0)


        def enum_declaration(self):
            return self.getTypedRuleContext(EParser.Enum_declarationContext,0)


        def widget_declaration(self):
            return self.getTypedRuleContext(EParser.Widget_declarationContext,0)


        def method_declaration(self):
            return self.getTypedRuleContext(EParser.Method_declarationContext,0)


        def comment_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(EParser.Comment_statementContext)
            else:
                return self.getTypedRuleContext(EParser.Comment_statementContext,i)


        def lfp(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(EParser.LfpContext)
            else:
                return self.getTypedRuleContext(EParser.LfpContext,i)


        def annotation_constructor(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(EParser.Annotation_constructorContext)
            else:
                return self.getTypedRuleContext(EParser.Annotation_constructorContext,i)


        def getRuleIndex(self):
            return EParser.RULE_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclaration" ):
                listener.enterDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclaration" ):
                listener.exitDeclaration(self)




    def declaration(self):

        localctx = EParser.DeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1654
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==EParser.COMMENT:
                self.state = 1649
                self.comment_statement()
                self.state = 1650
                self.lfp()
                self.state = 1656
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1662
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==EParser.ARONDBASE_IDENTIFIER:
                self.state = 1657
                self.annotation_constructor()
                self.state = 1658
                self.lfp()
                self.state = 1664
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1671
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,111,self._ctx)
            if la_ == 1:
                self.state = 1665
                self.attribute_declaration()
                pass

            elif la_ == 2:
                self.state = 1666
                self.category_declaration()
                pass

            elif la_ == 3:
                self.state = 1667
                self.resource_declaration()
                pass

            elif la_ == 4:
                self.state = 1668
                self.enum_declaration()
                pass

            elif la_ == 5:
                self.state = 1669
                self.widget_declaration()
                pass

            elif la_ == 6:
                self.state = 1670
                self.method_declaration()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Annotation_constructorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # Annotation_identifierContext
            self.exp = None # Annotation_argument_valueContext

        def annotation_identifier(self):
            return self.getTypedRuleContext(EParser.Annotation_identifierContext,0)


        def LPAR(self):
            return self.getToken(EParser.LPAR, 0)

        def RPAR(self):
            return self.getToken(EParser.RPAR, 0)

        def annotation_argument_value(self):
            return self.getTypedRuleContext(EParser.Annotation_argument_valueContext,0)


        def annotation_argument(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(EParser.Annotation_argumentContext)
            else:
                return self.getTypedRuleContext(EParser.Annotation_argumentContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(EParser.COMMA)
            else:
                return self.getToken(EParser.COMMA, i)

        def getRuleIndex(self):
            return EParser.RULE_annotation_constructor

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnnotation_constructor" ):
                listener.enterAnnotation_constructor(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnnotation_constructor" ):
                listener.exitAnnotation_constructor(self)




    def annotation_constructor(self):

        localctx = EParser.Annotation_constructorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_annotation_constructor)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1673
            localctx.name = self.annotation_identifier()
            self.state = 1688
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==EParser.LPAR:
                self.state = 1674
                self.match(EParser.LPAR)
                self.state = 1684
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [EParser.LPAR, EParser.LBRAK, EParser.LCURL, EParser.LT, EParser.LTCOLONGT, EParser.BOOLEAN, EParser.CHARACTER, EParser.TEXT, EParser.INTEGER, EParser.DECIMAL, EParser.DATE, EParser.TIME, EParser.DATETIME, EParser.PERIOD, EParser.VERSION, EParser.CODE, EParser.DOCUMENT, EParser.BLOB, EParser.IMAGE, EParser.UUID, EParser.HTML, EParser.TYPE, EParser.MUTABLE, EParser.NOTHING, EParser.BOOLEAN_LITERAL, EParser.CHAR_LITERAL, EParser.MIN_INTEGER, EParser.MAX_INTEGER, EParser.TYPE_IDENTIFIER, EParser.TEXT_LITERAL, EParser.UUID_LITERAL, EParser.INTEGER_LITERAL, EParser.HEXA_LITERAL, EParser.DECIMAL_LITERAL, EParser.DATETIME_LITERAL, EParser.TIME_LITERAL, EParser.DATE_LITERAL, EParser.PERIOD_LITERAL, EParser.VERSION_LITERAL]:
                    self.state = 1675
                    localctx.exp = self.annotation_argument_value()
                    pass
                elif token in [EParser.GETTER, EParser.SETTER, EParser.VARIABLE_IDENTIFIER]:
                    self.state = 1676
                    self.annotation_argument()
                    self.state = 1681
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==EParser.COMMA:
                        self.state = 1677
                        self.match(EParser.COMMA)
                        self.state = 1678
                        self.annotation_argument()
                        self.state = 1683
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1686
                self.match(EParser.RPAR)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Annotation_identifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ARONDBASE_IDENTIFIER(self):
            return self.getToken(EParser.ARONDBASE_IDENTIFIER, 0)

        def getRuleIndex(self):
            return EParser.RULE_annotation_identifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnnotation_identifier" ):
                listener.enterAnnotation_identifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnnotation_identifier" ):
                listener.exitAnnotation_identifier(self)




    def annotation_identifier(self):

        localctx = EParser.Annotation_identifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_annotation_identifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1690
            self.match(EParser.ARONDBASE_IDENTIFIER)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Annotation_argumentContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # Annotation_argument_nameContext
            self.exp = None # Annotation_argument_valueContext

        def EQ(self):
            return self.getToken(EParser.EQ, 0)

        def annotation_argument_name(self):
            return self.getTypedRuleContext(EParser.Annotation_argument_nameContext,0)


        def annotation_argument_value(self):
            return self.getTypedRuleContext(EParser.Annotation_argument_valueContext,0)


        def getRuleIndex(self):
            return EParser.RULE_annotation_argument

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnnotation_argument" ):
                listener.enterAnnotation_argument(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnnotation_argument" ):
                listener.exitAnnotation_argument(self)




    def annotation_argument(self):

        localctx = EParser.Annotation_argumentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_annotation_argument)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1692
            localctx.name = self.annotation_argument_name()
            self.state = 1693
            self.match(EParser.EQ)
            self.state = 1694
            localctx.exp = self.annotation_argument_value()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Annotation_argument_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VARIABLE_IDENTIFIER(self):
            return self.getToken(EParser.VARIABLE_IDENTIFIER, 0)

        def GETTER(self):
            return self.getToken(EParser.GETTER, 0)

        def SETTER(self):
            return self.getToken(EParser.SETTER, 0)

        def getRuleIndex(self):
            return EParser.RULE_annotation_argument_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnnotation_argument_name" ):
                listener.enterAnnotation_argument_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnnotation_argument_name" ):
                listener.exitAnnotation_argument_name(self)




    def annotation_argument_name(self):

        localctx = EParser.Annotation_argument_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_annotation_argument_name)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1696
            _la = self._input.LA(1)
            if not(((((_la - 112)) & ~0x3f) == 0 and ((1 << (_la - 112)) & ((1 << (EParser.GETTER - 112)) | (1 << (EParser.SETTER - 112)) | (1 << (EParser.VARIABLE_IDENTIFIER - 112)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Annotation_argument_valueContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return EParser.RULE_annotation_argument_value

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class AnnotationLiteralValueContext(Annotation_argument_valueContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a EParser.Annotation_argument_valueContext
            super().__init__(parser)
            self.exp = None # Literal_expressionContext
            self.copyFrom(ctx)

        def literal_expression(self):
            return self.getTypedRuleContext(EParser.Literal_expressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnnotationLiteralValue" ):
                listener.enterAnnotationLiteralValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnnotationLiteralValue" ):
                listener.exitAnnotationLiteralValue(self)


    class AnnotationTypeValueContext(Annotation_argument_valueContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a EParser.Annotation_argument_valueContext
            super().__init__(parser)
            self.typ = None # Primary_typeContext
            self.copyFrom(ctx)

        def primary_type(self):
            return self.getTypedRuleContext(EParser.Primary_typeContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnnotationTypeValue" ):
                listener.enterAnnotationTypeValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnnotationTypeValue" ):
                listener.exitAnnotationTypeValue(self)



    def annotation_argument_value(self):

        localctx = EParser.Annotation_argument_valueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_annotation_argument_value)
        try:
            self.state = 1700
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [EParser.LPAR, EParser.LBRAK, EParser.LCURL, EParser.LT, EParser.LTCOLONGT, EParser.TYPE, EParser.MUTABLE, EParser.NOTHING, EParser.BOOLEAN_LITERAL, EParser.CHAR_LITERAL, EParser.MIN_INTEGER, EParser.MAX_INTEGER, EParser.TEXT_LITERAL, EParser.UUID_LITERAL, EParser.INTEGER_LITERAL, EParser.HEXA_LITERAL, EParser.DECIMAL_LITERAL, EParser.DATETIME_LITERAL, EParser.TIME_LITERAL, EParser.DATE_LITERAL, EParser.PERIOD_LITERAL, EParser.VERSION_LITERAL]:
                localctx = EParser.AnnotationLiteralValueContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1698
                localctx.exp = self.literal_expression()
                pass
            elif token in [EParser.BOOLEAN, EParser.CHARACTER, EParser.TEXT, EParser.INTEGER, EParser.DECIMAL, EParser.DATE, EParser.TIME, EParser.DATETIME, EParser.PERIOD, EParser.VERSION, EParser.CODE, EParser.DOCUMENT, EParser.BLOB, EParser.IMAGE, EParser.UUID, EParser.HTML, EParser.TYPE_IDENTIFIER]:
                localctx = EParser.AnnotationTypeValueContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1699
                localctx.typ = self.primary_type()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Resource_declarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def native_resource_declaration(self):
            return self.getTypedRuleContext(EParser.Native_resource_declarationContext,0)


        def getRuleIndex(self):
            return EParser.RULE_resource_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterResource_declaration" ):
                listener.enterResource_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitResource_declaration" ):
                listener.exitResource_declaration(self)




    def resource_declaration(self):

        localctx = EParser.Resource_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_resource_declaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1702
            self.native_resource_declaration()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Enum_declarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def enum_category_declaration(self):
            return self.getTypedRuleContext(EParser.Enum_category_declarationContext,0)


        def enum_native_declaration(self):
            return self.getTypedRuleContext(EParser.Enum_native_declarationContext,0)


        def getRuleIndex(self):
            return EParser.RULE_enum_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnum_declaration" ):
                listener.enterEnum_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnum_declaration" ):
                listener.exitEnum_declaration(self)




    def enum_declaration(self):

        localctx = EParser.Enum_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_enum_declaration)
        try:
            self.state = 1706
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,116,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1704
                self.enum_category_declaration()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1705
                self.enum_native_declaration()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Native_symbol_listContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def native_symbol(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(EParser.Native_symbolContext)
            else:
                return self.getTypedRuleContext(EParser.Native_symbolContext,i)


        def lfp(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(EParser.LfpContext)
            else:
                return self.getTypedRuleContext(EParser.LfpContext,i)


        def getRuleIndex(self):
            return EParser.RULE_native_symbol_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNative_symbol_list" ):
                listener.enterNative_symbol_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNative_symbol_list" ):
                listener.exitNative_symbol_list(self)




    def native_symbol_list(self):

        localctx = EParser.Native_symbol_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_native_symbol_list)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1708
            self.native_symbol()
            self.state = 1714
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,117,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1709
                    self.lfp()
                    self.state = 1710
                    self.native_symbol() 
                self.state = 1716
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,117,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Category_symbol_listContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def category_symbol(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(EParser.Category_symbolContext)
            else:
                return self.getTypedRuleContext(EParser.Category_symbolContext,i)


        def lfp(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(EParser.LfpContext)
            else:
                return self.getTypedRuleContext(EParser.LfpContext,i)


        def getRuleIndex(self):
            return EParser.RULE_category_symbol_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCategory_symbol_list" ):
                listener.enterCategory_symbol_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCategory_symbol_list" ):
                listener.exitCategory_symbol_list(self)




    def category_symbol_list(self):

        localctx = EParser.Category_symbol_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_category_symbol_list)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1717
            self.category_symbol()
            self.state = 1723
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,118,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1718
                    self.lfp()
                    self.state = 1719
                    self.category_symbol() 
                self.state = 1725
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,118,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Symbol_listContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def symbol_identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(EParser.Symbol_identifierContext)
            else:
                return self.getTypedRuleContext(EParser.Symbol_identifierContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(EParser.COMMA)
            else:
                return self.getToken(EParser.COMMA, i)

        def getRuleIndex(self):
            return EParser.RULE_symbol_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSymbol_list" ):
                listener.enterSymbol_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSymbol_list" ):
                listener.exitSymbol_list(self)




    def symbol_list(self):

        localctx = EParser.Symbol_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_symbol_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1726
            self.symbol_identifier()
            self.state = 1731
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==EParser.COMMA:
                self.state = 1727
                self.match(EParser.COMMA)
                self.state = 1728
                self.symbol_identifier()
                self.state = 1733
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Attribute_constraintContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return EParser.RULE_attribute_constraint

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class MatchingSetContext(Attribute_constraintContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a EParser.Attribute_constraintContext
            super().__init__(parser)
            self.source = None # Set_literalContext
            self.copyFrom(ctx)

        def IN(self):
            return self.getToken(EParser.IN, 0)
        def set_literal(self):
            return self.getTypedRuleContext(EParser.Set_literalContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMatchingSet" ):
                listener.enterMatchingSet(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMatchingSet" ):
                listener.exitMatchingSet(self)


    class MatchingPatternContext(Attribute_constraintContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a EParser.Attribute_constraintContext
            super().__init__(parser)
            self.text = None # Token
            self.copyFrom(ctx)

        def MATCHING(self):
            return self.getToken(EParser.MATCHING, 0)
        def TEXT_LITERAL(self):
            return self.getToken(EParser.TEXT_LITERAL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMatchingPattern" ):
                listener.enterMatchingPattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMatchingPattern" ):
                listener.exitMatchingPattern(self)


    class MatchingListContext(Attribute_constraintContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a EParser.Attribute_constraintContext
            super().__init__(parser)
            self.source = None # List_literalContext
            self.copyFrom(ctx)

        def IN(self):
            return self.getToken(EParser.IN, 0)
        def list_literal(self):
            return self.getTypedRuleContext(EParser.List_literalContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMatchingList" ):
                listener.enterMatchingList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMatchingList" ):
                listener.exitMatchingList(self)


    class MatchingRangeContext(Attribute_constraintContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a EParser.Attribute_constraintContext
            super().__init__(parser)
            self.source = None # Range_literalContext
            self.copyFrom(ctx)

        def IN(self):
            return self.getToken(EParser.IN, 0)
        def range_literal(self):
            return self.getTypedRuleContext(EParser.Range_literalContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMatchingRange" ):
                listener.enterMatchingRange(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMatchingRange" ):
                listener.exitMatchingRange(self)


    class MatchingExpressionContext(Attribute_constraintContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a EParser.Attribute_constraintContext
            super().__init__(parser)
            self.exp = None # ExpressionContext
            self.copyFrom(ctx)

        def MATCHING(self):
            return self.getToken(EParser.MATCHING, 0)
        def expression(self):
            return self.getTypedRuleContext(EParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMatchingExpression" ):
                listener.enterMatchingExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMatchingExpression" ):
                listener.exitMatchingExpression(self)



    def attribute_constraint(self):

        localctx = EParser.Attribute_constraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_attribute_constraint)
        try:
            self.state = 1744
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,120,self._ctx)
            if la_ == 1:
                localctx = EParser.MatchingListContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1734
                self.match(EParser.IN)
                self.state = 1735
                localctx.source = self.list_literal()
                pass

            elif la_ == 2:
                localctx = EParser.MatchingSetContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1736
                self.match(EParser.IN)
                self.state = 1737
                localctx.source = self.set_literal()
                pass

            elif la_ == 3:
                localctx = EParser.MatchingRangeContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 1738
                self.match(EParser.IN)
                self.state = 1739
                localctx.source = self.range_literal()
                pass

            elif la_ == 4:
                localctx = EParser.MatchingPatternContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 1740
                self.match(EParser.MATCHING)
                self.state = 1741
                localctx.text = self.match(EParser.TEXT_LITERAL)
                pass

            elif la_ == 5:
                localctx = EParser.MatchingExpressionContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 1742
                self.match(EParser.MATCHING)
                self.state = 1743
                localctx.exp = self.expression(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class List_literalContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRAK(self):
            return self.getToken(EParser.LBRAK, 0)

        def RBRAK(self):
            return self.getToken(EParser.RBRAK, 0)

        def MUTABLE(self):
            return self.getToken(EParser.MUTABLE, 0)

        def expression_list(self):
            return self.getTypedRuleContext(EParser.Expression_listContext,0)


        def getRuleIndex(self):
            return EParser.RULE_list_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterList_literal" ):
                listener.enterList_literal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitList_literal" ):
                listener.exitList_literal(self)




    def list_literal(self):

        localctx = EParser.List_literalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_list_literal)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1747
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==EParser.MUTABLE:
                self.state = 1746
                self.match(EParser.MUTABLE)


            self.state = 1749
            self.match(EParser.LBRAK)
            self.state = 1751
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << EParser.LPAR) | (1 << EParser.LBRAK) | (1 << EParser.LCURL) | (1 << EParser.MINUS) | (1 << EParser.LT) | (1 << EParser.LTGT) | (1 << EParser.LTCOLONGT) | (1 << EParser.METHOD_COLON) | (1 << EParser.CODE))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (EParser.DOCUMENT - 64)) | (1 << (EParser.BLOB - 64)) | (1 << (EParser.TYPE - 64)) | (1 << (EParser.EXECUTE - 64)) | (1 << (EParser.FETCH - 64)) | (1 << (EParser.INVOKE_COLON - 64)) | (1 << (EParser.MUTABLE - 64)) | (1 << (EParser.NOT - 64)) | (1 << (EParser.NOTHING - 64)))) != 0) or ((((_la - 138)) & ~0x3f) == 0 and ((1 << (_la - 138)) & ((1 << (EParser.READ - 138)) | (1 << (EParser.SELF - 138)) | (1 << (EParser.SORTED - 138)) | (1 << (EParser.THIS - 138)) | (1 << (EParser.BOOLEAN_LITERAL - 138)) | (1 << (EParser.CHAR_LITERAL - 138)) | (1 << (EParser.MIN_INTEGER - 138)) | (1 << (EParser.MAX_INTEGER - 138)) | (1 << (EParser.SYMBOL_IDENTIFIER - 138)) | (1 << (EParser.TYPE_IDENTIFIER - 138)) | (1 << (EParser.VARIABLE_IDENTIFIER - 138)) | (1 << (EParser.TEXT_LITERAL - 138)) | (1 << (EParser.UUID_LITERAL - 138)) | (1 << (EParser.INTEGER_LITERAL - 138)) | (1 << (EParser.HEXA_LITERAL - 138)) | (1 << (EParser.DECIMAL_LITERAL - 138)) | (1 << (EParser.DATETIME_LITERAL - 138)) | (1 << (EParser.TIME_LITERAL - 138)) | (1 << (EParser.DATE_LITERAL - 138)) | (1 << (EParser.PERIOD_LITERAL - 138)) | (1 << (EParser.VERSION_LITERAL - 138)))) != 0):
                self.state = 1750
                self.expression_list()


            self.state = 1753
            self.match(EParser.RBRAK)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Set_literalContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LT(self):
            return self.getToken(EParser.LT, 0)

        def GT(self):
            return self.getToken(EParser.GT, 0)

        def MUTABLE(self):
            return self.getToken(EParser.MUTABLE, 0)

        def expression_list(self):
            return self.getTypedRuleContext(EParser.Expression_listContext,0)


        def getRuleIndex(self):
            return EParser.RULE_set_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSet_literal" ):
                listener.enterSet_literal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSet_literal" ):
                listener.exitSet_literal(self)




    def set_literal(self):

        localctx = EParser.Set_literalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_set_literal)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1756
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==EParser.MUTABLE:
                self.state = 1755
                self.match(EParser.MUTABLE)


            self.state = 1758
            self.match(EParser.LT)
            self.state = 1760
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << EParser.LPAR) | (1 << EParser.LBRAK) | (1 << EParser.LCURL) | (1 << EParser.MINUS) | (1 << EParser.LT) | (1 << EParser.LTGT) | (1 << EParser.LTCOLONGT) | (1 << EParser.METHOD_COLON) | (1 << EParser.CODE))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (EParser.DOCUMENT - 64)) | (1 << (EParser.BLOB - 64)) | (1 << (EParser.TYPE - 64)) | (1 << (EParser.EXECUTE - 64)) | (1 << (EParser.FETCH - 64)) | (1 << (EParser.INVOKE_COLON - 64)) | (1 << (EParser.MUTABLE - 64)) | (1 << (EParser.NOT - 64)) | (1 << (EParser.NOTHING - 64)))) != 0) or ((((_la - 138)) & ~0x3f) == 0 and ((1 << (_la - 138)) & ((1 << (EParser.READ - 138)) | (1 << (EParser.SELF - 138)) | (1 << (EParser.SORTED - 138)) | (1 << (EParser.THIS - 138)) | (1 << (EParser.BOOLEAN_LITERAL - 138)) | (1 << (EParser.CHAR_LITERAL - 138)) | (1 << (EParser.MIN_INTEGER - 138)) | (1 << (EParser.MAX_INTEGER - 138)) | (1 << (EParser.SYMBOL_IDENTIFIER - 138)) | (1 << (EParser.TYPE_IDENTIFIER - 138)) | (1 << (EParser.VARIABLE_IDENTIFIER - 138)) | (1 << (EParser.TEXT_LITERAL - 138)) | (1 << (EParser.UUID_LITERAL - 138)) | (1 << (EParser.INTEGER_LITERAL - 138)) | (1 << (EParser.HEXA_LITERAL - 138)) | (1 << (EParser.DECIMAL_LITERAL - 138)) | (1 << (EParser.DATETIME_LITERAL - 138)) | (1 << (EParser.TIME_LITERAL - 138)) | (1 << (EParser.DATE_LITERAL - 138)) | (1 << (EParser.PERIOD_LITERAL - 138)) | (1 << (EParser.VERSION_LITERAL - 138)))) != 0):
                self.state = 1759
                self.expression_list()


            self.state = 1762
            self.match(EParser.GT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Expression_listContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(EParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(EParser.ExpressionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(EParser.COMMA)
            else:
                return self.getToken(EParser.COMMA, i)

        def getRuleIndex(self):
            return EParser.RULE_expression_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpression_list" ):
                listener.enterExpression_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpression_list" ):
                listener.exitExpression_list(self)




    def expression_list(self):

        localctx = EParser.Expression_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 186, self.RULE_expression_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1764
            self.expression(0)
            self.state = 1769
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==EParser.COMMA:
                self.state = 1765
                self.match(EParser.COMMA)
                self.state = 1766
                self.expression(0)
                self.state = 1771
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Range_literalContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.low = None # ExpressionContext
            self.high = None # ExpressionContext

        def LBRAK(self):
            return self.getToken(EParser.LBRAK, 0)

        def RANGE(self):
            return self.getToken(EParser.RANGE, 0)

        def RBRAK(self):
            return self.getToken(EParser.RBRAK, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(EParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(EParser.ExpressionContext,i)


        def getRuleIndex(self):
            return EParser.RULE_range_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRange_literal" ):
                listener.enterRange_literal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRange_literal" ):
                listener.exitRange_literal(self)




    def range_literal(self):

        localctx = EParser.Range_literalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 188, self.RULE_range_literal)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1772
            self.match(EParser.LBRAK)
            self.state = 1773
            localctx.low = self.expression(0)
            self.state = 1774
            self.match(EParser.RANGE)
            self.state = 1775
            localctx.high = self.expression(0)
            self.state = 1776
            self.match(EParser.RBRAK)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TypedefContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return EParser.RULE_typedef

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class IteratorTypeContext(TypedefContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a EParser.TypedefContext
            super().__init__(parser)
            self.i = None # TypedefContext
            self.copyFrom(ctx)

        def ITERATOR(self):
            return self.getToken(EParser.ITERATOR, 0)
        def LT(self):
            return self.getToken(EParser.LT, 0)
        def GT(self):
            return self.getToken(EParser.GT, 0)
        def typedef(self):
            return self.getTypedRuleContext(EParser.TypedefContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIteratorType" ):
                listener.enterIteratorType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIteratorType" ):
                listener.exitIteratorType(self)


    class SetTypeContext(TypedefContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a EParser.TypedefContext
            super().__init__(parser)
            self.s = None # TypedefContext
            self.copyFrom(ctx)

        def LTGT(self):
            return self.getToken(EParser.LTGT, 0)
        def typedef(self):
            return self.getTypedRuleContext(EParser.TypedefContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetType" ):
                listener.enterSetType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetType" ):
                listener.exitSetType(self)


    class ListTypeContext(TypedefContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a EParser.TypedefContext
            super().__init__(parser)
            self.l = None # TypedefContext
            self.copyFrom(ctx)

        def LBRAK(self):
            return self.getToken(EParser.LBRAK, 0)
        def RBRAK(self):
            return self.getToken(EParser.RBRAK, 0)
        def typedef(self):
            return self.getTypedRuleContext(EParser.TypedefContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterListType" ):
                listener.enterListType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitListType" ):
                listener.exitListType(self)


    class DictTypeContext(TypedefContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a EParser.TypedefContext
            super().__init__(parser)
            self.d = None # TypedefContext
            self.copyFrom(ctx)

        def LTCOLONGT(self):
            return self.getToken(EParser.LTCOLONGT, 0)
        def typedef(self):
            return self.getTypedRuleContext(EParser.TypedefContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDictType" ):
                listener.enterDictType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDictType" ):
                listener.exitDictType(self)


    class CursorTypeContext(TypedefContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a EParser.TypedefContext
            super().__init__(parser)
            self.c = None # TypedefContext
            self.copyFrom(ctx)

        def CURSOR(self):
            return self.getToken(EParser.CURSOR, 0)
        def LT(self):
            return self.getToken(EParser.LT, 0)
        def GT(self):
            return self.getToken(EParser.GT, 0)
        def typedef(self):
            return self.getTypedRuleContext(EParser.TypedefContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCursorType" ):
                listener.enterCursorType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCursorType" ):
                listener.exitCursorType(self)


    class PrimaryTypeContext(TypedefContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a EParser.TypedefContext
            super().__init__(parser)
            self.p = None # Primary_typeContext
            self.copyFrom(ctx)

        def primary_type(self):
            return self.getTypedRuleContext(EParser.Primary_typeContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrimaryType" ):
                listener.enterPrimaryType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrimaryType" ):
                listener.exitPrimaryType(self)



    def typedef(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = EParser.TypedefContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 190
        self.enterRecursionRule(localctx, 190, self.RULE_typedef, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1790
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [EParser.BOOLEAN, EParser.CHARACTER, EParser.TEXT, EParser.INTEGER, EParser.DECIMAL, EParser.DATE, EParser.TIME, EParser.DATETIME, EParser.PERIOD, EParser.VERSION, EParser.CODE, EParser.DOCUMENT, EParser.BLOB, EParser.IMAGE, EParser.UUID, EParser.HTML, EParser.TYPE_IDENTIFIER]:
                localctx = EParser.PrimaryTypeContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx

                self.state = 1779
                localctx.p = self.primary_type()
                pass
            elif token in [EParser.CURSOR]:
                localctx = EParser.CursorTypeContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1780
                self.match(EParser.CURSOR)
                self.state = 1781
                self.match(EParser.LT)
                self.state = 1782
                localctx.c = self.typedef(0)
                self.state = 1783
                self.match(EParser.GT)
                pass
            elif token in [EParser.ITERATOR]:
                localctx = EParser.IteratorTypeContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1785
                self.match(EParser.ITERATOR)
                self.state = 1786
                self.match(EParser.LT)
                self.state = 1787
                localctx.i = self.typedef(0)
                self.state = 1788
                self.match(EParser.GT)
                pass
            else:
                raise NoViableAltException(self)

            self._ctx.stop = self._input.LT(-1)
            self.state = 1801
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,128,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 1799
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,127,self._ctx)
                    if la_ == 1:
                        localctx = EParser.SetTypeContext(self, EParser.TypedefContext(self, _parentctx, _parentState))
                        localctx.s = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_typedef)
                        self.state = 1792
                        if not self.precpred(self._ctx, 5):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 5)")
                        self.state = 1793
                        self.match(EParser.LTGT)
                        pass

                    elif la_ == 2:
                        localctx = EParser.ListTypeContext(self, EParser.TypedefContext(self, _parentctx, _parentState))
                        localctx.l = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_typedef)
                        self.state = 1794
                        if not self.precpred(self._ctx, 4):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 4)")
                        self.state = 1795
                        self.match(EParser.LBRAK)
                        self.state = 1796
                        self.match(EParser.RBRAK)
                        pass

                    elif la_ == 3:
                        localctx = EParser.DictTypeContext(self, EParser.TypedefContext(self, _parentctx, _parentState))
                        localctx.d = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_typedef)
                        self.state = 1797
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 1798
                        self.match(EParser.LTCOLONGT)
                        pass

             
                self.state = 1803
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,128,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class Primary_typeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return EParser.RULE_primary_type

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class NativeTypeContext(Primary_typeContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a EParser.Primary_typeContext
            super().__init__(parser)
            self.n = None # Native_typeContext
            self.copyFrom(ctx)

        def native_type(self):
            return self.getTypedRuleContext(EParser.Native_typeContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNativeType" ):
                listener.enterNativeType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNativeType" ):
                listener.exitNativeType(self)


    class CategoryTypeContext(Primary_typeContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a EParser.Primary_typeContext
            super().__init__(parser)
            self.c = None # Category_typeContext
            self.copyFrom(ctx)

        def category_type(self):
            return self.getTypedRuleContext(EParser.Category_typeContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCategoryType" ):
                listener.enterCategoryType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCategoryType" ):
                listener.exitCategoryType(self)



    def primary_type(self):

        localctx = EParser.Primary_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 192, self.RULE_primary_type)
        try:
            self.state = 1806
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [EParser.BOOLEAN, EParser.CHARACTER, EParser.TEXT, EParser.INTEGER, EParser.DECIMAL, EParser.DATE, EParser.TIME, EParser.DATETIME, EParser.PERIOD, EParser.VERSION, EParser.CODE, EParser.DOCUMENT, EParser.BLOB, EParser.IMAGE, EParser.UUID, EParser.HTML]:
                localctx = EParser.NativeTypeContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1804
                localctx.n = self.native_type()
                pass
            elif token in [EParser.TYPE_IDENTIFIER]:
                localctx = EParser.CategoryTypeContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1805
                localctx.c = self.category_type()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Native_typeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return EParser.RULE_native_type

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class PeriodTypeContext(Native_typeContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a EParser.Native_typeContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def PERIOD(self):
            return self.getToken(EParser.PERIOD, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPeriodType" ):
                listener.enterPeriodType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPeriodType" ):
                listener.exitPeriodType(self)


    class HtmlTypeContext(Native_typeContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a EParser.Native_typeContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def HTML(self):
            return self.getToken(EParser.HTML, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHtmlType" ):
                listener.enterHtmlType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHtmlType" ):
                listener.exitHtmlType(self)


    class BooleanTypeContext(Native_typeContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a EParser.Native_typeContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def BOOLEAN(self):
            return self.getToken(EParser.BOOLEAN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBooleanType" ):
                listener.enterBooleanType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBooleanType" ):
                listener.exitBooleanType(self)


    class DocumentTypeContext(Native_typeContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a EParser.Native_typeContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DOCUMENT(self):
            return self.getToken(EParser.DOCUMENT, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDocumentType" ):
                listener.enterDocumentType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDocumentType" ):
                listener.exitDocumentType(self)


    class CharacterTypeContext(Native_typeContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a EParser.Native_typeContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CHARACTER(self):
            return self.getToken(EParser.CHARACTER, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCharacterType" ):
                listener.enterCharacterType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCharacterType" ):
                listener.exitCharacterType(self)


    class VersionTypeContext(Native_typeContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a EParser.Native_typeContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def VERSION(self):
            return self.getToken(EParser.VERSION, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVersionType" ):
                listener.enterVersionType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVersionType" ):
                listener.exitVersionType(self)


    class TextTypeContext(Native_typeContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a EParser.Native_typeContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def TEXT(self):
            return self.getToken(EParser.TEXT, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTextType" ):
                listener.enterTextType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTextType" ):
                listener.exitTextType(self)


    class ImageTypeContext(Native_typeContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a EParser.Native_typeContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def IMAGE(self):
            return self.getToken(EParser.IMAGE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImageType" ):
                listener.enterImageType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImageType" ):
                listener.exitImageType(self)


    class TimeTypeContext(Native_typeContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a EParser.Native_typeContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def TIME(self):
            return self.getToken(EParser.TIME, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTimeType" ):
                listener.enterTimeType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTimeType" ):
                listener.exitTimeType(self)


    class IntegerTypeContext(Native_typeContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a EParser.Native_typeContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def INTEGER(self):
            return self.getToken(EParser.INTEGER, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIntegerType" ):
                listener.enterIntegerType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIntegerType" ):
                listener.exitIntegerType(self)


    class DateTimeTypeContext(Native_typeContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a EParser.Native_typeContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DATETIME(self):
            return self.getToken(EParser.DATETIME, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDateTimeType" ):
                listener.enterDateTimeType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDateTimeType" ):
                listener.exitDateTimeType(self)


    class BlobTypeContext(Native_typeContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a EParser.Native_typeContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def BLOB(self):
            return self.getToken(EParser.BLOB, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBlobType" ):
                listener.enterBlobType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBlobType" ):
                listener.exitBlobType(self)


    class UUIDTypeContext(Native_typeContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a EParser.Native_typeContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def UUID(self):
            return self.getToken(EParser.UUID, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUUIDType" ):
                listener.enterUUIDType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUUIDType" ):
                listener.exitUUIDType(self)


    class DecimalTypeContext(Native_typeContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a EParser.Native_typeContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DECIMAL(self):
            return self.getToken(EParser.DECIMAL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDecimalType" ):
                listener.enterDecimalType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDecimalType" ):
                listener.exitDecimalType(self)


    class CodeTypeContext(Native_typeContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a EParser.Native_typeContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CODE(self):
            return self.getToken(EParser.CODE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCodeType" ):
                listener.enterCodeType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCodeType" ):
                listener.exitCodeType(self)


    class DateTypeContext(Native_typeContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a EParser.Native_typeContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DATE(self):
            return self.getToken(EParser.DATE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDateType" ):
                listener.enterDateType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDateType" ):
                listener.exitDateType(self)



    def native_type(self):

        localctx = EParser.Native_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 194, self.RULE_native_type)
        try:
            self.state = 1824
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [EParser.BOOLEAN]:
                localctx = EParser.BooleanTypeContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1808
                self.match(EParser.BOOLEAN)
                pass
            elif token in [EParser.CHARACTER]:
                localctx = EParser.CharacterTypeContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1809
                self.match(EParser.CHARACTER)
                pass
            elif token in [EParser.TEXT]:
                localctx = EParser.TextTypeContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 1810
                self.match(EParser.TEXT)
                pass
            elif token in [EParser.IMAGE]:
                localctx = EParser.ImageTypeContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 1811
                self.match(EParser.IMAGE)
                pass
            elif token in [EParser.INTEGER]:
                localctx = EParser.IntegerTypeContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 1812
                self.match(EParser.INTEGER)
                pass
            elif token in [EParser.DECIMAL]:
                localctx = EParser.DecimalTypeContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 1813
                self.match(EParser.DECIMAL)
                pass
            elif token in [EParser.DOCUMENT]:
                localctx = EParser.DocumentTypeContext(self, localctx)
                self.enterOuterAlt(localctx, 7)
                self.state = 1814
                self.match(EParser.DOCUMENT)
                pass
            elif token in [EParser.DATE]:
                localctx = EParser.DateTypeContext(self, localctx)
                self.enterOuterAlt(localctx, 8)
                self.state = 1815
                self.match(EParser.DATE)
                pass
            elif token in [EParser.DATETIME]:
                localctx = EParser.DateTimeTypeContext(self, localctx)
                self.enterOuterAlt(localctx, 9)
                self.state = 1816
                self.match(EParser.DATETIME)
                pass
            elif token in [EParser.TIME]:
                localctx = EParser.TimeTypeContext(self, localctx)
                self.enterOuterAlt(localctx, 10)
                self.state = 1817
                self.match(EParser.TIME)
                pass
            elif token in [EParser.PERIOD]:
                localctx = EParser.PeriodTypeContext(self, localctx)
                self.enterOuterAlt(localctx, 11)
                self.state = 1818
                self.match(EParser.PERIOD)
                pass
            elif token in [EParser.VERSION]:
                localctx = EParser.VersionTypeContext(self, localctx)
                self.enterOuterAlt(localctx, 12)
                self.state = 1819
                self.match(EParser.VERSION)
                pass
            elif token in [EParser.CODE]:
                localctx = EParser.CodeTypeContext(self, localctx)
                self.enterOuterAlt(localctx, 13)
                self.state = 1820
                self.match(EParser.CODE)
                pass
            elif token in [EParser.BLOB]:
                localctx = EParser.BlobTypeContext(self, localctx)
                self.enterOuterAlt(localctx, 14)
                self.state = 1821
                self.match(EParser.BLOB)
                pass
            elif token in [EParser.UUID]:
                localctx = EParser.UUIDTypeContext(self, localctx)
                self.enterOuterAlt(localctx, 15)
                self.state = 1822
                self.match(EParser.UUID)
                pass
            elif token in [EParser.HTML]:
                localctx = EParser.HtmlTypeContext(self, localctx)
                self.enterOuterAlt(localctx, 16)
                self.state = 1823
                self.match(EParser.HTML)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Category_typeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.t1 = None # Token

        def TYPE_IDENTIFIER(self):
            return self.getToken(EParser.TYPE_IDENTIFIER, 0)

        def getRuleIndex(self):
            return EParser.RULE_category_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCategory_type" ):
                listener.enterCategory_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCategory_type" ):
                listener.exitCategory_type(self)




    def category_type(self):

        localctx = EParser.Category_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 196, self.RULE_category_type)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1826
            localctx.t1 = self.match(EParser.TYPE_IDENTIFIER)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Mutable_category_typeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def category_type(self):
            return self.getTypedRuleContext(EParser.Category_typeContext,0)


        def MUTABLE(self):
            return self.getToken(EParser.MUTABLE, 0)

        def getRuleIndex(self):
            return EParser.RULE_mutable_category_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMutable_category_type" ):
                listener.enterMutable_category_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMutable_category_type" ):
                listener.exitMutable_category_type(self)




    def mutable_category_type(self):

        localctx = EParser.Mutable_category_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 198, self.RULE_mutable_category_type)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1829
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==EParser.MUTABLE:
                self.state = 1828
                self.match(EParser.MUTABLE)


            self.state = 1831
            self.category_type()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Code_typeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.t1 = None # Token

        def CODE(self):
            return self.getToken(EParser.CODE, 0)

        def getRuleIndex(self):
            return EParser.RULE_code_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCode_type" ):
                listener.enterCode_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCode_type" ):
                listener.exitCode_type(self)




    def code_type(self):

        localctx = EParser.Code_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 200, self.RULE_code_type)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1833
            localctx.t1 = self.match(EParser.CODE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Category_declarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return EParser.RULE_category_declaration

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class ConcreteCategoryDeclarationContext(Category_declarationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a EParser.Category_declarationContext
            super().__init__(parser)
            self.decl = None # Concrete_category_declarationContext
            self.copyFrom(ctx)

        def concrete_category_declaration(self):
            return self.getTypedRuleContext(EParser.Concrete_category_declarationContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConcreteCategoryDeclaration" ):
                listener.enterConcreteCategoryDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConcreteCategoryDeclaration" ):
                listener.exitConcreteCategoryDeclaration(self)


    class NativeCategoryDeclarationContext(Category_declarationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a EParser.Category_declarationContext
            super().__init__(parser)
            self.decl = None # Native_category_declarationContext
            self.copyFrom(ctx)

        def native_category_declaration(self):
            return self.getTypedRuleContext(EParser.Native_category_declarationContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNativeCategoryDeclaration" ):
                listener.enterNativeCategoryDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNativeCategoryDeclaration" ):
                listener.exitNativeCategoryDeclaration(self)


    class SingletonCategoryDeclarationContext(Category_declarationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a EParser.Category_declarationContext
            super().__init__(parser)
            self.decl = None # Singleton_category_declarationContext
            self.copyFrom(ctx)

        def singleton_category_declaration(self):
            return self.getTypedRuleContext(EParser.Singleton_category_declarationContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSingletonCategoryDeclaration" ):
                listener.enterSingletonCategoryDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSingletonCategoryDeclaration" ):
                listener.exitSingletonCategoryDeclaration(self)



    def category_declaration(self):

        localctx = EParser.Category_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 202, self.RULE_category_declaration)
        try:
            self.state = 1838
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,132,self._ctx)
            if la_ == 1:
                localctx = EParser.ConcreteCategoryDeclarationContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1835
                localctx.decl = self.concrete_category_declaration()
                pass

            elif la_ == 2:
                localctx = EParser.NativeCategoryDeclarationContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1836
                localctx.decl = self.native_category_declaration()
                pass

            elif la_ == 3:
                localctx = EParser.SingletonCategoryDeclarationContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 1837
                localctx.decl = self.singleton_category_declaration()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Widget_declarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return EParser.RULE_widget_declaration

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class ConcreteWidgetDeclarationContext(Widget_declarationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a EParser.Widget_declarationContext
            super().__init__(parser)
            self.decl = None # Concrete_widget_declarationContext
            self.copyFrom(ctx)

        def concrete_widget_declaration(self):
            return self.getTypedRuleContext(EParser.Concrete_widget_declarationContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConcreteWidgetDeclaration" ):
                listener.enterConcreteWidgetDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConcreteWidgetDeclaration" ):
                listener.exitConcreteWidgetDeclaration(self)


    class NativeWidgetDeclarationContext(Widget_declarationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a EParser.Widget_declarationContext
            super().__init__(parser)
            self.decl = None # Native_widget_declarationContext
            self.copyFrom(ctx)

        def native_widget_declaration(self):
            return self.getTypedRuleContext(EParser.Native_widget_declarationContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNativeWidgetDeclaration" ):
                listener.enterNativeWidgetDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNativeWidgetDeclaration" ):
                listener.exitNativeWidgetDeclaration(self)



    def widget_declaration(self):

        localctx = EParser.Widget_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 204, self.RULE_widget_declaration)
        try:
            self.state = 1842
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,133,self._ctx)
            if la_ == 1:
                localctx = EParser.ConcreteWidgetDeclarationContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1840
                localctx.decl = self.concrete_widget_declaration()
                pass

            elif la_ == 2:
                localctx = EParser.NativeWidgetDeclarationContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1841
                localctx.decl = self.native_widget_declaration()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Type_identifier_listContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def type_identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(EParser.Type_identifierContext)
            else:
                return self.getTypedRuleContext(EParser.Type_identifierContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(EParser.COMMA)
            else:
                return self.getToken(EParser.COMMA, i)

        def getRuleIndex(self):
            return EParser.RULE_type_identifier_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterType_identifier_list" ):
                listener.enterType_identifier_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitType_identifier_list" ):
                listener.exitType_identifier_list(self)




    def type_identifier_list(self):

        localctx = EParser.Type_identifier_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 206, self.RULE_type_identifier_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1844
            self.type_identifier()
            self.state = 1849
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==EParser.COMMA:
                self.state = 1845
                self.match(EParser.COMMA)
                self.state = 1846
                self.type_identifier()
                self.state = 1851
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Method_identifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variable_identifier(self):
            return self.getTypedRuleContext(EParser.Variable_identifierContext,0)


        def type_identifier(self):
            return self.getTypedRuleContext(EParser.Type_identifierContext,0)


        def getRuleIndex(self):
            return EParser.RULE_method_identifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMethod_identifier" ):
                listener.enterMethod_identifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMethod_identifier" ):
                listener.exitMethod_identifier(self)




    def method_identifier(self):

        localctx = EParser.Method_identifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 208, self.RULE_method_identifier)
        try:
            self.state = 1854
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [EParser.VARIABLE_IDENTIFIER]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1852
                self.variable_identifier()
                pass
            elif token in [EParser.TYPE_IDENTIFIER]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1853
                self.type_identifier()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Identifier_or_keywordContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(EParser.IdentifierContext,0)


        def keyword(self):
            return self.getTypedRuleContext(EParser.KeywordContext,0)


        def getRuleIndex(self):
            return EParser.RULE_identifier_or_keyword

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentifier_or_keyword" ):
                listener.enterIdentifier_or_keyword(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentifier_or_keyword" ):
                listener.exitIdentifier_or_keyword(self)




    def identifier_or_keyword(self):

        localctx = EParser.Identifier_or_keywordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 210, self.RULE_identifier_or_keyword)
        try:
            self.state = 1858
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [EParser.SYMBOL_IDENTIFIER, EParser.TYPE_IDENTIFIER, EParser.VARIABLE_IDENTIFIER]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1856
                self.identifier()
                pass
            elif token in [EParser.JAVA, EParser.CSHARP, EParser.PYTHON2, EParser.PYTHON3, EParser.JAVASCRIPT, EParser.SWIFT, EParser.BOOLEAN, EParser.CHARACTER, EParser.TEXT, EParser.INTEGER, EParser.DECIMAL, EParser.DATE, EParser.TIME, EParser.DATETIME, EParser.PERIOD, EParser.VERSION, EParser.CODE, EParser.DOCUMENT, EParser.BLOB, EParser.IMAGE, EParser.UUID, EParser.ITERATOR, EParser.CURSOR, EParser.HTML, EParser.ABSTRACT, EParser.ALL, EParser.ALWAYS, EParser.AND, EParser.ANY, EParser.AS, EParser.ASC, EParser.ATTR, EParser.ATTRIBUTE, EParser.ATTRIBUTES, EParser.BINDINGS, EParser.BREAK, EParser.BY, EParser.CASE, EParser.CATCH, EParser.CATEGORY, EParser.CLASS, EParser.CLOSE, EParser.CONTAINS, EParser.DEF, EParser.DEFAULT, EParser.DEFINE, EParser.DELETE, EParser.DESC, EParser.DO, EParser.DOING, EParser.EACH, EParser.ELSE, EParser.ENUM, EParser.ENUMERATED, EParser.EXCEPT, EParser.EXECUTE, EParser.EXPECTING, EParser.EXTENDS, EParser.FETCH, EParser.FILTERED, EParser.FINALLY, EParser.FLUSH, EParser.FOR, EParser.FROM, EParser.GETTER, EParser.HAS, EParser.IF, EParser.IN, EParser.INDEX, EParser.IS, EParser.MATCHING, EParser.METHOD, EParser.METHODS, EParser.MODULO, EParser.MUTABLE, EParser.NATIVE, EParser.NONE, EParser.NOT, EParser.NOTHING, EParser.NULL, EParser.ON, EParser.ONE, EParser.OPEN, EParser.OPERATOR, EParser.OR, EParser.ORDER, EParser.OTHERWISE, EParser.PASS, EParser.RAISE, EParser.READ, EParser.RECEIVING, EParser.RESOURCE, EParser.RETURN, EParser.RETURNING, EParser.ROWS, EParser.SELF, EParser.SETTER, EParser.SINGLETON, EParser.SORTED, EParser.STORABLE, EParser.STORE, EParser.SWITCH, EParser.TEST, EParser.THIS, EParser.THROW, EParser.TO, EParser.TRY, EParser.VERIFYING, EParser.WIDGET, EParser.WITH, EParser.WHEN, EParser.WHERE, EParser.WHILE, EParser.WRITE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1857
                self.keyword()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Nospace_hyphen_identifier_or_keywordContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MINUS(self):
            return self.getToken(EParser.MINUS, 0)

        def nospace_identifier_or_keyword(self):
            return self.getTypedRuleContext(EParser.Nospace_identifier_or_keywordContext,0)


        def getRuleIndex(self):
            return EParser.RULE_nospace_hyphen_identifier_or_keyword

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNospace_hyphen_identifier_or_keyword" ):
                listener.enterNospace_hyphen_identifier_or_keyword(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNospace_hyphen_identifier_or_keyword" ):
                listener.exitNospace_hyphen_identifier_or_keyword(self)




    def nospace_hyphen_identifier_or_keyword(self):

        localctx = EParser.Nospace_hyphen_identifier_or_keywordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 212, self.RULE_nospace_hyphen_identifier_or_keyword)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1860
            if not self.wasNotWhiteSpace():
                from antlr4.error.Errors import FailedPredicateException
                raise FailedPredicateException(self, "$parser.wasNotWhiteSpace()")
            self.state = 1861
            self.match(EParser.MINUS)
            self.state = 1862
            self.nospace_identifier_or_keyword()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Nospace_identifier_or_keywordContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier_or_keyword(self):
            return self.getTypedRuleContext(EParser.Identifier_or_keywordContext,0)


        def getRuleIndex(self):
            return EParser.RULE_nospace_identifier_or_keyword

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNospace_identifier_or_keyword" ):
                listener.enterNospace_identifier_or_keyword(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNospace_identifier_or_keyword" ):
                listener.exitNospace_identifier_or_keyword(self)




    def nospace_identifier_or_keyword(self):

        localctx = EParser.Nospace_identifier_or_keywordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 214, self.RULE_nospace_identifier_or_keyword)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1864
            if not self.wasNotWhiteSpace():
                from antlr4.error.Errors import FailedPredicateException
                raise FailedPredicateException(self, "$parser.wasNotWhiteSpace()")
            self.state = 1865
            self.identifier_or_keyword()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class IdentifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return EParser.RULE_identifier

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class TypeIdentifierContext(IdentifierContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a EParser.IdentifierContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def type_identifier(self):
            return self.getTypedRuleContext(EParser.Type_identifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeIdentifier" ):
                listener.enterTypeIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeIdentifier" ):
                listener.exitTypeIdentifier(self)


    class SymbolIdentifierContext(IdentifierContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a EParser.IdentifierContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def symbol_identifier(self):
            return self.getTypedRuleContext(EParser.Symbol_identifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSymbolIdentifier" ):
                listener.enterSymbolIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSymbolIdentifier" ):
                listener.exitSymbolIdentifier(self)


    class VariableIdentifierContext(IdentifierContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a EParser.IdentifierContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def variable_identifier(self):
            return self.getTypedRuleContext(EParser.Variable_identifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariableIdentifier" ):
                listener.enterVariableIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariableIdentifier" ):
                listener.exitVariableIdentifier(self)



    def identifier(self):

        localctx = EParser.IdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 216, self.RULE_identifier)
        try:
            self.state = 1870
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [EParser.VARIABLE_IDENTIFIER]:
                localctx = EParser.VariableIdentifierContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1867
                self.variable_identifier()
                pass
            elif token in [EParser.TYPE_IDENTIFIER]:
                localctx = EParser.TypeIdentifierContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1868
                self.type_identifier()
                pass
            elif token in [EParser.SYMBOL_IDENTIFIER]:
                localctx = EParser.SymbolIdentifierContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 1869
                self.symbol_identifier()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Variable_identifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VARIABLE_IDENTIFIER(self):
            return self.getToken(EParser.VARIABLE_IDENTIFIER, 0)

        def getRuleIndex(self):
            return EParser.RULE_variable_identifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariable_identifier" ):
                listener.enterVariable_identifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariable_identifier" ):
                listener.exitVariable_identifier(self)




    def variable_identifier(self):

        localctx = EParser.Variable_identifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 218, self.RULE_variable_identifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1872
            self.match(EParser.VARIABLE_IDENTIFIER)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Attribute_identifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VARIABLE_IDENTIFIER(self):
            return self.getToken(EParser.VARIABLE_IDENTIFIER, 0)

        def STORABLE(self):
            return self.getToken(EParser.STORABLE, 0)

        def getRuleIndex(self):
            return EParser.RULE_attribute_identifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttribute_identifier" ):
                listener.enterAttribute_identifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttribute_identifier" ):
                listener.exitAttribute_identifier(self)




    def attribute_identifier(self):

        localctx = EParser.Attribute_identifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 220, self.RULE_attribute_identifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1874
            _la = self._input.LA(1)
            if not(_la==EParser.STORABLE or _la==EParser.VARIABLE_IDENTIFIER):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Type_identifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TYPE_IDENTIFIER(self):
            return self.getToken(EParser.TYPE_IDENTIFIER, 0)

        def getRuleIndex(self):
            return EParser.RULE_type_identifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterType_identifier" ):
                listener.enterType_identifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitType_identifier" ):
                listener.exitType_identifier(self)




    def type_identifier(self):

        localctx = EParser.Type_identifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 222, self.RULE_type_identifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1876
            self.match(EParser.TYPE_IDENTIFIER)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Symbol_identifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SYMBOL_IDENTIFIER(self):
            return self.getToken(EParser.SYMBOL_IDENTIFIER, 0)

        def getRuleIndex(self):
            return EParser.RULE_symbol_identifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSymbol_identifier" ):
                listener.enterSymbol_identifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSymbol_identifier" ):
                listener.exitSymbol_identifier(self)




    def symbol_identifier(self):

        localctx = EParser.Symbol_identifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 224, self.RULE_symbol_identifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1878
            self.match(EParser.SYMBOL_IDENTIFIER)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Any_identifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VARIABLE_IDENTIFIER(self):
            return self.getToken(EParser.VARIABLE_IDENTIFIER, 0)

        def TYPE_IDENTIFIER(self):
            return self.getToken(EParser.TYPE_IDENTIFIER, 0)

        def SYMBOL_IDENTIFIER(self):
            return self.getToken(EParser.SYMBOL_IDENTIFIER, 0)

        def getRuleIndex(self):
            return EParser.RULE_any_identifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAny_identifier" ):
                listener.enterAny_identifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAny_identifier" ):
                listener.exitAny_identifier(self)




    def any_identifier(self):

        localctx = EParser.Any_identifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 226, self.RULE_any_identifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1880
            _la = self._input.LA(1)
            if not(((((_la - 168)) & ~0x3f) == 0 and ((1 << (_la - 168)) & ((1 << (EParser.SYMBOL_IDENTIFIER - 168)) | (1 << (EParser.TYPE_IDENTIFIER - 168)) | (1 << (EParser.VARIABLE_IDENTIFIER - 168)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Argument_listContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def argument(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(EParser.ArgumentContext)
            else:
                return self.getTypedRuleContext(EParser.ArgumentContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(EParser.COMMA)
            else:
                return self.getToken(EParser.COMMA, i)

        def getRuleIndex(self):
            return EParser.RULE_argument_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArgument_list" ):
                listener.enterArgument_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArgument_list" ):
                listener.exitArgument_list(self)




    def argument_list(self):

        localctx = EParser.Argument_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 228, self.RULE_argument_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1882
            self.argument()
            self.state = 1887
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==EParser.COMMA:
                self.state = 1883
                self.match(EParser.COMMA)
                self.state = 1884
                self.argument()
                self.state = 1889
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ArgumentContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return EParser.RULE_argument

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class OperatorArgumentContext(ArgumentContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a EParser.ArgumentContext
            super().__init__(parser)
            self.arg = None # Operator_argumentContext
            self.copyFrom(ctx)

        def operator_argument(self):
            return self.getTypedRuleContext(EParser.Operator_argumentContext,0)

        def MUTABLE(self):
            return self.getToken(EParser.MUTABLE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOperatorArgument" ):
                listener.enterOperatorArgument(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOperatorArgument" ):
                listener.exitOperatorArgument(self)


    class CodeArgumentContext(ArgumentContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a EParser.ArgumentContext
            super().__init__(parser)
            self.arg = None # Code_argumentContext
            self.copyFrom(ctx)

        def code_argument(self):
            return self.getTypedRuleContext(EParser.Code_argumentContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCodeArgument" ):
                listener.enterCodeArgument(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCodeArgument" ):
                listener.exitCodeArgument(self)



    def argument(self):

        localctx = EParser.ArgumentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 230, self.RULE_argument)
        self._la = 0 # Token type
        try:
            self.state = 1895
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,140,self._ctx)
            if la_ == 1:
                localctx = EParser.CodeArgumentContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1890
                localctx.arg = self.code_argument()
                pass

            elif la_ == 2:
                localctx = EParser.OperatorArgumentContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1892
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==EParser.MUTABLE:
                    self.state = 1891
                    self.match(EParser.MUTABLE)


                self.state = 1894
                localctx.arg = self.operator_argument()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Operator_argumentContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def named_argument(self):
            return self.getTypedRuleContext(EParser.Named_argumentContext,0)


        def typed_argument(self):
            return self.getTypedRuleContext(EParser.Typed_argumentContext,0)


        def getRuleIndex(self):
            return EParser.RULE_operator_argument

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOperator_argument" ):
                listener.enterOperator_argument(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOperator_argument" ):
                listener.exitOperator_argument(self)




    def operator_argument(self):

        localctx = EParser.Operator_argumentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 232, self.RULE_operator_argument)
        try:
            self.state = 1899
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [EParser.VARIABLE_IDENTIFIER]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1897
                self.named_argument()
                pass
            elif token in [EParser.BOOLEAN, EParser.CHARACTER, EParser.TEXT, EParser.INTEGER, EParser.DECIMAL, EParser.DATE, EParser.TIME, EParser.DATETIME, EParser.PERIOD, EParser.VERSION, EParser.CODE, EParser.DOCUMENT, EParser.BLOB, EParser.IMAGE, EParser.UUID, EParser.ITERATOR, EParser.CURSOR, EParser.HTML, EParser.ANY, EParser.TYPE_IDENTIFIER]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1898
                self.typed_argument()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Named_argumentContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variable_identifier(self):
            return self.getTypedRuleContext(EParser.Variable_identifierContext,0)


        def EQ(self):
            return self.getToken(EParser.EQ, 0)

        def literal_expression(self):
            return self.getTypedRuleContext(EParser.Literal_expressionContext,0)


        def getRuleIndex(self):
            return EParser.RULE_named_argument

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNamed_argument" ):
                listener.enterNamed_argument(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNamed_argument" ):
                listener.exitNamed_argument(self)




    def named_argument(self):

        localctx = EParser.Named_argumentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 234, self.RULE_named_argument)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1901
            self.variable_identifier()
            self.state = 1904
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==EParser.EQ:
                self.state = 1902
                self.match(EParser.EQ)
                self.state = 1903
                self.literal_expression()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Code_argumentContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # Variable_identifierContext

        def code_type(self):
            return self.getTypedRuleContext(EParser.Code_typeContext,0)


        def variable_identifier(self):
            return self.getTypedRuleContext(EParser.Variable_identifierContext,0)


        def getRuleIndex(self):
            return EParser.RULE_code_argument

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCode_argument" ):
                listener.enterCode_argument(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCode_argument" ):
                listener.exitCode_argument(self)




    def code_argument(self):

        localctx = EParser.Code_argumentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 236, self.RULE_code_argument)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1906
            self.code_type()
            self.state = 1907
            localctx.name = self.variable_identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Category_or_any_typeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typedef(self):
            return self.getTypedRuleContext(EParser.TypedefContext,0)


        def any_type(self):
            return self.getTypedRuleContext(EParser.Any_typeContext,0)


        def getRuleIndex(self):
            return EParser.RULE_category_or_any_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCategory_or_any_type" ):
                listener.enterCategory_or_any_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCategory_or_any_type" ):
                listener.exitCategory_or_any_type(self)




    def category_or_any_type(self):

        localctx = EParser.Category_or_any_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 238, self.RULE_category_or_any_type)
        try:
            self.state = 1911
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [EParser.BOOLEAN, EParser.CHARACTER, EParser.TEXT, EParser.INTEGER, EParser.DECIMAL, EParser.DATE, EParser.TIME, EParser.DATETIME, EParser.PERIOD, EParser.VERSION, EParser.CODE, EParser.DOCUMENT, EParser.BLOB, EParser.IMAGE, EParser.UUID, EParser.ITERATOR, EParser.CURSOR, EParser.HTML, EParser.TYPE_IDENTIFIER]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1909
                self.typedef(0)
                pass
            elif token in [EParser.ANY]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1910
                self.any_type(0)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Any_typeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return EParser.RULE_any_type

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class AnyListTypeContext(Any_typeContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a EParser.Any_typeContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def any_type(self):
            return self.getTypedRuleContext(EParser.Any_typeContext,0)

        def LBRAK(self):
            return self.getToken(EParser.LBRAK, 0)
        def RBRAK(self):
            return self.getToken(EParser.RBRAK, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnyListType" ):
                listener.enterAnyListType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnyListType" ):
                listener.exitAnyListType(self)


    class AnyTypeContext(Any_typeContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a EParser.Any_typeContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ANY(self):
            return self.getToken(EParser.ANY, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnyType" ):
                listener.enterAnyType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnyType" ):
                listener.exitAnyType(self)


    class AnyDictTypeContext(Any_typeContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a EParser.Any_typeContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def any_type(self):
            return self.getTypedRuleContext(EParser.Any_typeContext,0)

        def LCURL(self):
            return self.getToken(EParser.LCURL, 0)
        def RCURL(self):
            return self.getToken(EParser.RCURL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnyDictType" ):
                listener.enterAnyDictType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnyDictType" ):
                listener.exitAnyDictType(self)



    def any_type(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = EParser.Any_typeContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 240
        self.enterRecursionRule(localctx, 240, self.RULE_any_type, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            localctx = EParser.AnyTypeContext(self, localctx)
            self._ctx = localctx
            _prevctx = localctx

            self.state = 1914
            self.match(EParser.ANY)
            self._ctx.stop = self._input.LT(-1)
            self.state = 1924
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,145,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 1922
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,144,self._ctx)
                    if la_ == 1:
                        localctx = EParser.AnyListTypeContext(self, EParser.Any_typeContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_any_type)
                        self.state = 1916
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 1917
                        self.match(EParser.LBRAK)
                        self.state = 1918
                        self.match(EParser.RBRAK)
                        pass

                    elif la_ == 2:
                        localctx = EParser.AnyDictTypeContext(self, EParser.Any_typeContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_any_type)
                        self.state = 1919
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 1920
                        self.match(EParser.LCURL)
                        self.state = 1921
                        self.match(EParser.RCURL)
                        pass

             
                self.state = 1926
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,145,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class Member_method_declaration_listContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def member_method_declaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(EParser.Member_method_declarationContext)
            else:
                return self.getTypedRuleContext(EParser.Member_method_declarationContext,i)


        def lfp(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(EParser.LfpContext)
            else:
                return self.getTypedRuleContext(EParser.LfpContext,i)


        def getRuleIndex(self):
            return EParser.RULE_member_method_declaration_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMember_method_declaration_list" ):
                listener.enterMember_method_declaration_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMember_method_declaration_list" ):
                listener.exitMember_method_declaration_list(self)




    def member_method_declaration_list(self):

        localctx = EParser.Member_method_declaration_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 242, self.RULE_member_method_declaration_list)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1927
            self.member_method_declaration()
            self.state = 1933
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,146,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1928
                    self.lfp()
                    self.state = 1929
                    self.member_method_declaration() 
                self.state = 1935
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,146,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Member_method_declarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def setter_method_declaration(self):
            return self.getTypedRuleContext(EParser.Setter_method_declarationContext,0)


        def getter_method_declaration(self):
            return self.getTypedRuleContext(EParser.Getter_method_declarationContext,0)


        def concrete_method_declaration(self):
            return self.getTypedRuleContext(EParser.Concrete_method_declarationContext,0)


        def abstract_method_declaration(self):
            return self.getTypedRuleContext(EParser.Abstract_method_declarationContext,0)


        def operator_method_declaration(self):
            return self.getTypedRuleContext(EParser.Operator_method_declarationContext,0)


        def comment_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(EParser.Comment_statementContext)
            else:
                return self.getTypedRuleContext(EParser.Comment_statementContext,i)


        def lfp(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(EParser.LfpContext)
            else:
                return self.getTypedRuleContext(EParser.LfpContext,i)


        def annotation_constructor(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(EParser.Annotation_constructorContext)
            else:
                return self.getTypedRuleContext(EParser.Annotation_constructorContext,i)


        def getRuleIndex(self):
            return EParser.RULE_member_method_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMember_method_declaration" ):
                listener.enterMember_method_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMember_method_declaration" ):
                listener.exitMember_method_declaration(self)




    def member_method_declaration(self):

        localctx = EParser.Member_method_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 244, self.RULE_member_method_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1941
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==EParser.COMMENT:
                self.state = 1936
                self.comment_statement()
                self.state = 1937
                self.lfp()
                self.state = 1943
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1949
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==EParser.ARONDBASE_IDENTIFIER:
                self.state = 1944
                self.annotation_constructor()
                self.state = 1945
                self.lfp()
                self.state = 1951
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1957
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,149,self._ctx)
            if la_ == 1:
                self.state = 1952
                self.setter_method_declaration()
                pass

            elif la_ == 2:
                self.state = 1953
                self.getter_method_declaration()
                pass

            elif la_ == 3:
                self.state = 1954
                self.concrete_method_declaration()
                pass

            elif la_ == 4:
                self.state = 1955
                self.abstract_method_declaration()
                pass

            elif la_ == 5:
                self.state = 1956
                self.operator_method_declaration()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Native_member_method_declaration_listContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def native_member_method_declaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(EParser.Native_member_method_declarationContext)
            else:
                return self.getTypedRuleContext(EParser.Native_member_method_declarationContext,i)


        def lfp(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(EParser.LfpContext)
            else:
                return self.getTypedRuleContext(EParser.LfpContext,i)


        def getRuleIndex(self):
            return EParser.RULE_native_member_method_declaration_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNative_member_method_declaration_list" ):
                listener.enterNative_member_method_declaration_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNative_member_method_declaration_list" ):
                listener.exitNative_member_method_declaration_list(self)




    def native_member_method_declaration_list(self):

        localctx = EParser.Native_member_method_declaration_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 246, self.RULE_native_member_method_declaration_list)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1959
            self.native_member_method_declaration()
            self.state = 1965
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,150,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1960
                    self.lfp()
                    self.state = 1961
                    self.native_member_method_declaration() 
                self.state = 1967
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,150,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Native_member_method_declarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def native_getter_declaration(self):
            return self.getTypedRuleContext(EParser.Native_getter_declarationContext,0)


        def native_setter_declaration(self):
            return self.getTypedRuleContext(EParser.Native_setter_declarationContext,0)


        def native_method_declaration(self):
            return self.getTypedRuleContext(EParser.Native_method_declarationContext,0)


        def getRuleIndex(self):
            return EParser.RULE_native_member_method_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNative_member_method_declaration" ):
                listener.enterNative_member_method_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNative_member_method_declaration" ):
                listener.exitNative_member_method_declaration(self)




    def native_member_method_declaration(self):

        localctx = EParser.Native_member_method_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 248, self.RULE_native_member_method_declaration)
        try:
            self.state = 1971
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,151,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1968
                self.native_getter_declaration()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1969
                self.native_setter_declaration()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1970
                self.native_method_declaration()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Native_category_bindingContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return EParser.RULE_native_category_binding

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Python2CategoryBindingContext(Native_category_bindingContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a EParser.Native_category_bindingContext
            super().__init__(parser)
            self.binding = None # Python_category_bindingContext
            self.copyFrom(ctx)

        def PYTHON2(self):
            return self.getToken(EParser.PYTHON2, 0)
        def python_category_binding(self):
            return self.getTypedRuleContext(EParser.Python_category_bindingContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPython2CategoryBinding" ):
                listener.enterPython2CategoryBinding(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPython2CategoryBinding" ):
                listener.exitPython2CategoryBinding(self)


    class Python3CategoryBindingContext(Native_category_bindingContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a EParser.Native_category_bindingContext
            super().__init__(parser)
            self.binding = None # Python_category_bindingContext
            self.copyFrom(ctx)

        def PYTHON3(self):
            return self.getToken(EParser.PYTHON3, 0)
        def python_category_binding(self):
            return self.getTypedRuleContext(EParser.Python_category_bindingContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPython3CategoryBinding" ):
                listener.enterPython3CategoryBinding(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPython3CategoryBinding" ):
                listener.exitPython3CategoryBinding(self)


    class JavaCategoryBindingContext(Native_category_bindingContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a EParser.Native_category_bindingContext
            super().__init__(parser)
            self.binding = None # Java_class_identifier_expressionContext
            self.copyFrom(ctx)

        def JAVA(self):
            return self.getToken(EParser.JAVA, 0)
        def java_class_identifier_expression(self):
            return self.getTypedRuleContext(EParser.Java_class_identifier_expressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJavaCategoryBinding" ):
                listener.enterJavaCategoryBinding(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJavaCategoryBinding" ):
                listener.exitJavaCategoryBinding(self)


    class CSharpCategoryBindingContext(Native_category_bindingContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a EParser.Native_category_bindingContext
            super().__init__(parser)
            self.binding = None # Csharp_identifier_expressionContext
            self.copyFrom(ctx)

        def CSHARP(self):
            return self.getToken(EParser.CSHARP, 0)
        def csharp_identifier_expression(self):
            return self.getTypedRuleContext(EParser.Csharp_identifier_expressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCSharpCategoryBinding" ):
                listener.enterCSharpCategoryBinding(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCSharpCategoryBinding" ):
                listener.exitCSharpCategoryBinding(self)


    class JavaScriptCategoryBindingContext(Native_category_bindingContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a EParser.Native_category_bindingContext
            super().__init__(parser)
            self.binding = None # Javascript_category_bindingContext
            self.copyFrom(ctx)

        def JAVASCRIPT(self):
            return self.getToken(EParser.JAVASCRIPT, 0)
        def javascript_category_binding(self):
            return self.getTypedRuleContext(EParser.Javascript_category_bindingContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJavaScriptCategoryBinding" ):
                listener.enterJavaScriptCategoryBinding(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJavaScriptCategoryBinding" ):
                listener.exitJavaScriptCategoryBinding(self)



    def native_category_binding(self):

        localctx = EParser.Native_category_bindingContext(self, self._ctx, self.state)
        self.enterRule(localctx, 250, self.RULE_native_category_binding)
        try:
            self.state = 1983
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [EParser.JAVA]:
                localctx = EParser.JavaCategoryBindingContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1973
                self.match(EParser.JAVA)
                self.state = 1974
                localctx.binding = self.java_class_identifier_expression(0)
                pass
            elif token in [EParser.CSHARP]:
                localctx = EParser.CSharpCategoryBindingContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1975
                self.match(EParser.CSHARP)
                self.state = 1976
                localctx.binding = self.csharp_identifier_expression(0)
                pass
            elif token in [EParser.PYTHON2]:
                localctx = EParser.Python2CategoryBindingContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 1977
                self.match(EParser.PYTHON2)
                self.state = 1978
                localctx.binding = self.python_category_binding()
                pass
            elif token in [EParser.PYTHON3]:
                localctx = EParser.Python3CategoryBindingContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 1979
                self.match(EParser.PYTHON3)
                self.state = 1980
                localctx.binding = self.python_category_binding()
                pass
            elif token in [EParser.JAVASCRIPT]:
                localctx = EParser.JavaScriptCategoryBindingContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 1981
                self.match(EParser.JAVASCRIPT)
                self.state = 1982
                localctx.binding = self.javascript_category_binding()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Python_category_bindingContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(EParser.IdentifierContext,0)


        def python_module(self):
            return self.getTypedRuleContext(EParser.Python_moduleContext,0)


        def getRuleIndex(self):
            return EParser.RULE_python_category_binding

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPython_category_binding" ):
                listener.enterPython_category_binding(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPython_category_binding" ):
                listener.exitPython_category_binding(self)




    def python_category_binding(self):

        localctx = EParser.Python_category_bindingContext(self, self._ctx, self.state)
        self.enterRule(localctx, 252, self.RULE_python_category_binding)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1985
            self.identifier()
            self.state = 1987
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,153,self._ctx)
            if la_ == 1:
                self.state = 1986
                self.python_module()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Python_moduleContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FROM(self):
            return self.getToken(EParser.FROM, 0)

        def module_token(self):
            return self.getTypedRuleContext(EParser.Module_tokenContext,0)


        def COLON(self):
            return self.getToken(EParser.COLON, 0)

        def python_identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(EParser.Python_identifierContext)
            else:
                return self.getTypedRuleContext(EParser.Python_identifierContext,i)


        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(EParser.DOT)
            else:
                return self.getToken(EParser.DOT, i)

        def getRuleIndex(self):
            return EParser.RULE_python_module

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPython_module" ):
                listener.enterPython_module(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPython_module" ):
                listener.exitPython_module(self)




    def python_module(self):

        localctx = EParser.Python_moduleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 254, self.RULE_python_module)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1989
            self.match(EParser.FROM)
            self.state = 1990
            self.module_token()
            self.state = 1991
            self.match(EParser.COLON)
            self.state = 1992
            self.python_identifier()
            self.state = 1997
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,154,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1993
                    self.match(EParser.DOT)
                    self.state = 1994
                    self.python_identifier() 
                self.state = 1999
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,154,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Javascript_category_bindingContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def javascript_identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(EParser.Javascript_identifierContext)
            else:
                return self.getTypedRuleContext(EParser.Javascript_identifierContext,i)


        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(EParser.DOT)
            else:
                return self.getToken(EParser.DOT, i)

        def javascript_module(self):
            return self.getTypedRuleContext(EParser.Javascript_moduleContext,0)


        def getRuleIndex(self):
            return EParser.RULE_javascript_category_binding

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJavascript_category_binding" ):
                listener.enterJavascript_category_binding(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJavascript_category_binding" ):
                listener.exitJavascript_category_binding(self)




    def javascript_category_binding(self):

        localctx = EParser.Javascript_category_bindingContext(self, self._ctx, self.state)
        self.enterRule(localctx, 256, self.RULE_javascript_category_binding)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2000
            self.javascript_identifier()
            self.state = 2005
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,155,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2001
                    self.match(EParser.DOT)
                    self.state = 2002
                    self.javascript_identifier() 
                self.state = 2007
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,155,self._ctx)

            self.state = 2009
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,156,self._ctx)
            if la_ == 1:
                self.state = 2008
                self.javascript_module()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Javascript_moduleContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FROM(self):
            return self.getToken(EParser.FROM, 0)

        def module_token(self):
            return self.getTypedRuleContext(EParser.Module_tokenContext,0)


        def COLON(self):
            return self.getToken(EParser.COLON, 0)

        def javascript_identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(EParser.Javascript_identifierContext)
            else:
                return self.getTypedRuleContext(EParser.Javascript_identifierContext,i)


        def SLASH(self, i:int=None):
            if i is None:
                return self.getTokens(EParser.SLASH)
            else:
                return self.getToken(EParser.SLASH, i)

        def DOT(self):
            return self.getToken(EParser.DOT, 0)

        def getRuleIndex(self):
            return EParser.RULE_javascript_module

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJavascript_module" ):
                listener.enterJavascript_module(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJavascript_module" ):
                listener.exitJavascript_module(self)




    def javascript_module(self):

        localctx = EParser.Javascript_moduleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 258, self.RULE_javascript_module)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2011
            self.match(EParser.FROM)
            self.state = 2012
            self.module_token()
            self.state = 2013
            self.match(EParser.COLON)
            self.state = 2015
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==EParser.SLASH:
                self.state = 2014
                self.match(EParser.SLASH)


            self.state = 2017
            self.javascript_identifier()
            self.state = 2022
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,158,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2018
                    self.match(EParser.SLASH)
                    self.state = 2019
                    self.javascript_identifier() 
                self.state = 2024
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,158,self._ctx)

            self.state = 2027
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,159,self._ctx)
            if la_ == 1:
                self.state = 2025
                self.match(EParser.DOT)
                self.state = 2026
                self.javascript_identifier()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Variable_identifier_listContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variable_identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(EParser.Variable_identifierContext)
            else:
                return self.getTypedRuleContext(EParser.Variable_identifierContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(EParser.COMMA)
            else:
                return self.getToken(EParser.COMMA, i)

        def getRuleIndex(self):
            return EParser.RULE_variable_identifier_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariable_identifier_list" ):
                listener.enterVariable_identifier_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariable_identifier_list" ):
                listener.exitVariable_identifier_list(self)




    def variable_identifier_list(self):

        localctx = EParser.Variable_identifier_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 260, self.RULE_variable_identifier_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2029
            self.variable_identifier()
            self.state = 2034
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==EParser.COMMA:
                self.state = 2030
                self.match(EParser.COMMA)
                self.state = 2031
                self.variable_identifier()
                self.state = 2036
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Attribute_identifier_listContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def attribute_identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(EParser.Attribute_identifierContext)
            else:
                return self.getTypedRuleContext(EParser.Attribute_identifierContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(EParser.COMMA)
            else:
                return self.getToken(EParser.COMMA, i)

        def getRuleIndex(self):
            return EParser.RULE_attribute_identifier_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttribute_identifier_list" ):
                listener.enterAttribute_identifier_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttribute_identifier_list" ):
                listener.exitAttribute_identifier_list(self)




    def attribute_identifier_list(self):

        localctx = EParser.Attribute_identifier_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 262, self.RULE_attribute_identifier_list)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2037
            self.attribute_identifier()
            self.state = 2042
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,161,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2038
                    self.match(EParser.COMMA)
                    self.state = 2039
                    self.attribute_identifier() 
                self.state = 2044
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,161,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Method_declarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def abstract_method_declaration(self):
            return self.getTypedRuleContext(EParser.Abstract_method_declarationContext,0)


        def concrete_method_declaration(self):
            return self.getTypedRuleContext(EParser.Concrete_method_declarationContext,0)


        def native_method_declaration(self):
            return self.getTypedRuleContext(EParser.Native_method_declarationContext,0)


        def test_method_declaration(self):
            return self.getTypedRuleContext(EParser.Test_method_declarationContext,0)


        def getRuleIndex(self):
            return EParser.RULE_method_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMethod_declaration" ):
                listener.enterMethod_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMethod_declaration" ):
                listener.exitMethod_declaration(self)




    def method_declaration(self):

        localctx = EParser.Method_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 264, self.RULE_method_declaration)
        try:
            self.state = 2049
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,162,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2045
                self.abstract_method_declaration()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2046
                self.concrete_method_declaration()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2047
                self.native_method_declaration()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2048
                self.test_method_declaration()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Comment_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COMMENT(self):
            return self.getToken(EParser.COMMENT, 0)

        def getRuleIndex(self):
            return EParser.RULE_comment_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComment_statement" ):
                listener.enterComment_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComment_statement" ):
                listener.exitComment_statement(self)




    def comment_statement(self):

        localctx = EParser.Comment_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 266, self.RULE_comment_statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2051
            self.match(EParser.COMMENT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Native_statement_listContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def native_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(EParser.Native_statementContext)
            else:
                return self.getTypedRuleContext(EParser.Native_statementContext,i)


        def lfp(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(EParser.LfpContext)
            else:
                return self.getTypedRuleContext(EParser.LfpContext,i)


        def getRuleIndex(self):
            return EParser.RULE_native_statement_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNative_statement_list" ):
                listener.enterNative_statement_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNative_statement_list" ):
                listener.exitNative_statement_list(self)




    def native_statement_list(self):

        localctx = EParser.Native_statement_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 268, self.RULE_native_statement_list)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2053
            self.native_statement()
            self.state = 2059
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,163,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2054
                    self.lfp()
                    self.state = 2055
                    self.native_statement() 
                self.state = 2061
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,163,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Native_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return EParser.RULE_native_statement

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class CSharpNativeStatementContext(Native_statementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a EParser.Native_statementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CSHARP(self):
            return self.getToken(EParser.CSHARP, 0)
        def csharp_statement(self):
            return self.getTypedRuleContext(EParser.Csharp_statementContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCSharpNativeStatement" ):
                listener.enterCSharpNativeStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCSharpNativeStatement" ):
                listener.exitCSharpNativeStatement(self)


    class JavaNativeStatementContext(Native_statementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a EParser.Native_statementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def JAVA(self):
            return self.getToken(EParser.JAVA, 0)
        def java_statement(self):
            return self.getTypedRuleContext(EParser.Java_statementContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJavaNativeStatement" ):
                listener.enterJavaNativeStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJavaNativeStatement" ):
                listener.exitJavaNativeStatement(self)


    class JavaScriptNativeStatementContext(Native_statementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a EParser.Native_statementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def JAVASCRIPT(self):
            return self.getToken(EParser.JAVASCRIPT, 0)
        def javascript_native_statement(self):
            return self.getTypedRuleContext(EParser.Javascript_native_statementContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJavaScriptNativeStatement" ):
                listener.enterJavaScriptNativeStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJavaScriptNativeStatement" ):
                listener.exitJavaScriptNativeStatement(self)


    class Python2NativeStatementContext(Native_statementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a EParser.Native_statementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def PYTHON2(self):
            return self.getToken(EParser.PYTHON2, 0)
        def python_native_statement(self):
            return self.getTypedRuleContext(EParser.Python_native_statementContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPython2NativeStatement" ):
                listener.enterPython2NativeStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPython2NativeStatement" ):
                listener.exitPython2NativeStatement(self)


    class Python3NativeStatementContext(Native_statementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a EParser.Native_statementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def PYTHON3(self):
            return self.getToken(EParser.PYTHON3, 0)
        def python_native_statement(self):
            return self.getTypedRuleContext(EParser.Python_native_statementContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPython3NativeStatement" ):
                listener.enterPython3NativeStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPython3NativeStatement" ):
                listener.exitPython3NativeStatement(self)



    def native_statement(self):

        localctx = EParser.Native_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 270, self.RULE_native_statement)
        try:
            self.state = 2072
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [EParser.JAVA]:
                localctx = EParser.JavaNativeStatementContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2062
                self.match(EParser.JAVA)
                self.state = 2063
                self.java_statement()
                pass
            elif token in [EParser.CSHARP]:
                localctx = EParser.CSharpNativeStatementContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2064
                self.match(EParser.CSHARP)
                self.state = 2065
                self.csharp_statement()
                pass
            elif token in [EParser.PYTHON2]:
                localctx = EParser.Python2NativeStatementContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 2066
                self.match(EParser.PYTHON2)
                self.state = 2067
                self.python_native_statement()
                pass
            elif token in [EParser.PYTHON3]:
                localctx = EParser.Python3NativeStatementContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 2068
                self.match(EParser.PYTHON3)
                self.state = 2069
                self.python_native_statement()
                pass
            elif token in [EParser.JAVASCRIPT]:
                localctx = EParser.JavaScriptNativeStatementContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 2070
                self.match(EParser.JAVASCRIPT)
                self.state = 2071
                self.javascript_native_statement()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Python_native_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def python_statement(self):
            return self.getTypedRuleContext(EParser.Python_statementContext,0)


        def SEMI(self):
            return self.getToken(EParser.SEMI, 0)

        def python_module(self):
            return self.getTypedRuleContext(EParser.Python_moduleContext,0)


        def getRuleIndex(self):
            return EParser.RULE_python_native_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPython_native_statement" ):
                listener.enterPython_native_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPython_native_statement" ):
                listener.exitPython_native_statement(self)




    def python_native_statement(self):

        localctx = EParser.Python_native_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 272, self.RULE_python_native_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2074
            self.python_statement()
            self.state = 2076
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==EParser.SEMI:
                self.state = 2075
                self.match(EParser.SEMI)


            self.state = 2079
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==EParser.FROM:
                self.state = 2078
                self.python_module()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Javascript_native_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def javascript_statement(self):
            return self.getTypedRuleContext(EParser.Javascript_statementContext,0)


        def SEMI(self):
            return self.getToken(EParser.SEMI, 0)

        def javascript_module(self):
            return self.getTypedRuleContext(EParser.Javascript_moduleContext,0)


        def getRuleIndex(self):
            return EParser.RULE_javascript_native_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJavascript_native_statement" ):
                listener.enterJavascript_native_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJavascript_native_statement" ):
                listener.exitJavascript_native_statement(self)




    def javascript_native_statement(self):

        localctx = EParser.Javascript_native_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 274, self.RULE_javascript_native_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2081
            self.javascript_statement()
            self.state = 2083
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==EParser.SEMI:
                self.state = 2082
                self.match(EParser.SEMI)


            self.state = 2086
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==EParser.FROM:
                self.state = 2085
                self.javascript_module()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Statement_listContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(EParser.StatementContext)
            else:
                return self.getTypedRuleContext(EParser.StatementContext,i)


        def lfp(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(EParser.LfpContext)
            else:
                return self.getTypedRuleContext(EParser.LfpContext,i)


        def getRuleIndex(self):
            return EParser.RULE_statement_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatement_list" ):
                listener.enterStatement_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatement_list" ):
                listener.exitStatement_list(self)




    def statement_list(self):

        localctx = EParser.Statement_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 276, self.RULE_statement_list)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2088
            self.statement()
            self.state = 2094
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,169,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2089
                    self.lfp()
                    self.state = 2090
                    self.statement() 
                self.state = 2096
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,169,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Assertion_listContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assertion(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(EParser.AssertionContext)
            else:
                return self.getTypedRuleContext(EParser.AssertionContext,i)


        def lfp(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(EParser.LfpContext)
            else:
                return self.getTypedRuleContext(EParser.LfpContext,i)


        def getRuleIndex(self):
            return EParser.RULE_assertion_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssertion_list" ):
                listener.enterAssertion_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssertion_list" ):
                listener.exitAssertion_list(self)




    def assertion_list(self):

        localctx = EParser.Assertion_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 278, self.RULE_assertion_list)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2097
            self.assertion()
            self.state = 2103
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,170,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2098
                    self.lfp()
                    self.state = 2099
                    self.assertion() 
                self.state = 2105
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,170,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Switch_case_statement_listContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def switch_case_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(EParser.Switch_case_statementContext)
            else:
                return self.getTypedRuleContext(EParser.Switch_case_statementContext,i)


        def lfp(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(EParser.LfpContext)
            else:
                return self.getTypedRuleContext(EParser.LfpContext,i)


        def getRuleIndex(self):
            return EParser.RULE_switch_case_statement_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSwitch_case_statement_list" ):
                listener.enterSwitch_case_statement_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSwitch_case_statement_list" ):
                listener.exitSwitch_case_statement_list(self)




    def switch_case_statement_list(self):

        localctx = EParser.Switch_case_statement_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 280, self.RULE_switch_case_statement_list)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2106
            self.switch_case_statement()
            self.state = 2112
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,171,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2107
                    self.lfp()
                    self.state = 2108
                    self.switch_case_statement() 
                self.state = 2114
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,171,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Catch_statement_listContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def catch_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(EParser.Catch_statementContext)
            else:
                return self.getTypedRuleContext(EParser.Catch_statementContext,i)


        def lfp(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(EParser.LfpContext)
            else:
                return self.getTypedRuleContext(EParser.LfpContext,i)


        def getRuleIndex(self):
            return EParser.RULE_catch_statement_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCatch_statement_list" ):
                listener.enterCatch_statement_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCatch_statement_list" ):
                listener.exitCatch_statement_list(self)




    def catch_statement_list(self):

        localctx = EParser.Catch_statement_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 282, self.RULE_catch_statement_list)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2115
            self.catch_statement()
            self.state = 2121
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,172,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2116
                    self.lfp()
                    self.state = 2117
                    self.catch_statement() 
                self.state = 2123
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,172,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Literal_collectionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return EParser.RULE_literal_collection

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class LiteralListLiteralContext(Literal_collectionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a EParser.Literal_collectionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LBRAK(self):
            return self.getToken(EParser.LBRAK, 0)
        def literal_list_literal(self):
            return self.getTypedRuleContext(EParser.Literal_list_literalContext,0)

        def RBRAK(self):
            return self.getToken(EParser.RBRAK, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLiteralListLiteral" ):
                listener.enterLiteralListLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLiteralListLiteral" ):
                listener.exitLiteralListLiteral(self)


    class LiteralRangeLiteralContext(Literal_collectionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a EParser.Literal_collectionContext
            super().__init__(parser)
            self.low = None # Atomic_literalContext
            self.high = None # Atomic_literalContext
            self.copyFrom(ctx)

        def LBRAK(self):
            return self.getToken(EParser.LBRAK, 0)
        def RANGE(self):
            return self.getToken(EParser.RANGE, 0)
        def RBRAK(self):
            return self.getToken(EParser.RBRAK, 0)
        def atomic_literal(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(EParser.Atomic_literalContext)
            else:
                return self.getTypedRuleContext(EParser.Atomic_literalContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLiteralRangeLiteral" ):
                listener.enterLiteralRangeLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLiteralRangeLiteral" ):
                listener.exitLiteralRangeLiteral(self)


    class LiteralSetLiteralContext(Literal_collectionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a EParser.Literal_collectionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LT(self):
            return self.getToken(EParser.LT, 0)
        def literal_list_literal(self):
            return self.getTypedRuleContext(EParser.Literal_list_literalContext,0)

        def GT(self):
            return self.getToken(EParser.GT, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLiteralSetLiteral" ):
                listener.enterLiteralSetLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLiteralSetLiteral" ):
                listener.exitLiteralSetLiteral(self)



    def literal_collection(self):

        localctx = EParser.Literal_collectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 284, self.RULE_literal_collection)
        try:
            self.state = 2138
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,173,self._ctx)
            if la_ == 1:
                localctx = EParser.LiteralRangeLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2124
                self.match(EParser.LBRAK)
                self.state = 2125
                localctx.low = self.atomic_literal()
                self.state = 2126
                self.match(EParser.RANGE)
                self.state = 2127
                localctx.high = self.atomic_literal()
                self.state = 2128
                self.match(EParser.RBRAK)
                pass

            elif la_ == 2:
                localctx = EParser.LiteralListLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2130
                self.match(EParser.LBRAK)
                self.state = 2131
                self.literal_list_literal()
                self.state = 2132
                self.match(EParser.RBRAK)
                pass

            elif la_ == 3:
                localctx = EParser.LiteralSetLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 2134
                self.match(EParser.LT)
                self.state = 2135
                self.literal_list_literal()
                self.state = 2136
                self.match(EParser.GT)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Atomic_literalContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return EParser.RULE_atomic_literal

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class MinIntegerLiteralContext(Atomic_literalContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a EParser.Atomic_literalContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def MIN_INTEGER(self):
            return self.getToken(EParser.MIN_INTEGER, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMinIntegerLiteral" ):
                listener.enterMinIntegerLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMinIntegerLiteral" ):
                listener.exitMinIntegerLiteral(self)


    class DateLiteralContext(Atomic_literalContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a EParser.Atomic_literalContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DATE_LITERAL(self):
            return self.getToken(EParser.DATE_LITERAL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDateLiteral" ):
                listener.enterDateLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDateLiteral" ):
                listener.exitDateLiteral(self)


    class BooleanLiteralContext(Atomic_literalContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a EParser.Atomic_literalContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def BOOLEAN_LITERAL(self):
            return self.getToken(EParser.BOOLEAN_LITERAL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBooleanLiteral" ):
                listener.enterBooleanLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBooleanLiteral" ):
                listener.exitBooleanLiteral(self)


    class VersionLiteralContext(Atomic_literalContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a EParser.Atomic_literalContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def VERSION_LITERAL(self):
            return self.getToken(EParser.VERSION_LITERAL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVersionLiteral" ):
                listener.enterVersionLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVersionLiteral" ):
                listener.exitVersionLiteral(self)


    class HexadecimalLiteralContext(Atomic_literalContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a EParser.Atomic_literalContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def HEXA_LITERAL(self):
            return self.getToken(EParser.HEXA_LITERAL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHexadecimalLiteral" ):
                listener.enterHexadecimalLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHexadecimalLiteral" ):
                listener.exitHexadecimalLiteral(self)


    class UUIDLiteralContext(Atomic_literalContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a EParser.Atomic_literalContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def UUID_LITERAL(self):
            return self.getToken(EParser.UUID_LITERAL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUUIDLiteral" ):
                listener.enterUUIDLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUUIDLiteral" ):
                listener.exitUUIDLiteral(self)


    class MaxIntegerLiteralContext(Atomic_literalContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a EParser.Atomic_literalContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def MAX_INTEGER(self):
            return self.getToken(EParser.MAX_INTEGER, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMaxIntegerLiteral" ):
                listener.enterMaxIntegerLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMaxIntegerLiteral" ):
                listener.exitMaxIntegerLiteral(self)


    class TypeLiteralContext(Atomic_literalContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a EParser.Atomic_literalContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def type_literal(self):
            return self.getTypedRuleContext(EParser.Type_literalContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeLiteral" ):
                listener.enterTypeLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeLiteral" ):
                listener.exitTypeLiteral(self)


    class DateTimeLiteralContext(Atomic_literalContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a EParser.Atomic_literalContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DATETIME_LITERAL(self):
            return self.getToken(EParser.DATETIME_LITERAL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDateTimeLiteral" ):
                listener.enterDateTimeLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDateTimeLiteral" ):
                listener.exitDateTimeLiteral(self)


    class PeriodLiteralContext(Atomic_literalContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a EParser.Atomic_literalContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def PERIOD_LITERAL(self):
            return self.getToken(EParser.PERIOD_LITERAL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPeriodLiteral" ):
                listener.enterPeriodLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPeriodLiteral" ):
                listener.exitPeriodLiteral(self)


    class DecimalLiteralContext(Atomic_literalContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a EParser.Atomic_literalContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DECIMAL_LITERAL(self):
            return self.getToken(EParser.DECIMAL_LITERAL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDecimalLiteral" ):
                listener.enterDecimalLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDecimalLiteral" ):
                listener.exitDecimalLiteral(self)


    class TextLiteralContext(Atomic_literalContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a EParser.Atomic_literalContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def TEXT_LITERAL(self):
            return self.getToken(EParser.TEXT_LITERAL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTextLiteral" ):
                listener.enterTextLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTextLiteral" ):
                listener.exitTextLiteral(self)


    class NullLiteralContext(Atomic_literalContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a EParser.Atomic_literalContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def null_literal(self):
            return self.getTypedRuleContext(EParser.Null_literalContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNullLiteral" ):
                listener.enterNullLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNullLiteral" ):
                listener.exitNullLiteral(self)


    class IntegerLiteralContext(Atomic_literalContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a EParser.Atomic_literalContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def INTEGER_LITERAL(self):
            return self.getToken(EParser.INTEGER_LITERAL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIntegerLiteral" ):
                listener.enterIntegerLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIntegerLiteral" ):
                listener.exitIntegerLiteral(self)


    class TimeLiteralContext(Atomic_literalContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a EParser.Atomic_literalContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def TIME_LITERAL(self):
            return self.getToken(EParser.TIME_LITERAL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTimeLiteral" ):
                listener.enterTimeLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTimeLiteral" ):
                listener.exitTimeLiteral(self)


    class CharacterLiteralContext(Atomic_literalContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a EParser.Atomic_literalContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CHAR_LITERAL(self):
            return self.getToken(EParser.CHAR_LITERAL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCharacterLiteral" ):
                listener.enterCharacterLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCharacterLiteral" ):
                listener.exitCharacterLiteral(self)



    def atomic_literal(self):

        localctx = EParser.Atomic_literalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 286, self.RULE_atomic_literal)
        try:
            self.state = 2156
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [EParser.MIN_INTEGER]:
                localctx = EParser.MinIntegerLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2140
                self.match(EParser.MIN_INTEGER)
                pass
            elif token in [EParser.MAX_INTEGER]:
                localctx = EParser.MaxIntegerLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2141
                self.match(EParser.MAX_INTEGER)
                pass
            elif token in [EParser.INTEGER_LITERAL]:
                localctx = EParser.IntegerLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 2142
                self.match(EParser.INTEGER_LITERAL)
                pass
            elif token in [EParser.HEXA_LITERAL]:
                localctx = EParser.HexadecimalLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 2143
                self.match(EParser.HEXA_LITERAL)
                pass
            elif token in [EParser.CHAR_LITERAL]:
                localctx = EParser.CharacterLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 2144
                self.match(EParser.CHAR_LITERAL)
                pass
            elif token in [EParser.DATE_LITERAL]:
                localctx = EParser.DateLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 2145
                self.match(EParser.DATE_LITERAL)
                pass
            elif token in [EParser.TIME_LITERAL]:
                localctx = EParser.TimeLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 7)
                self.state = 2146
                self.match(EParser.TIME_LITERAL)
                pass
            elif token in [EParser.TEXT_LITERAL]:
                localctx = EParser.TextLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 8)
                self.state = 2147
                self.match(EParser.TEXT_LITERAL)
                pass
            elif token in [EParser.DECIMAL_LITERAL]:
                localctx = EParser.DecimalLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 9)
                self.state = 2148
                self.match(EParser.DECIMAL_LITERAL)
                pass
            elif token in [EParser.DATETIME_LITERAL]:
                localctx = EParser.DateTimeLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 10)
                self.state = 2149
                self.match(EParser.DATETIME_LITERAL)
                pass
            elif token in [EParser.BOOLEAN_LITERAL]:
                localctx = EParser.BooleanLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 11)
                self.state = 2150
                self.match(EParser.BOOLEAN_LITERAL)
                pass
            elif token in [EParser.PERIOD_LITERAL]:
                localctx = EParser.PeriodLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 12)
                self.state = 2151
                self.match(EParser.PERIOD_LITERAL)
                pass
            elif token in [EParser.VERSION_LITERAL]:
                localctx = EParser.VersionLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 13)
                self.state = 2152
                self.match(EParser.VERSION_LITERAL)
                pass
            elif token in [EParser.UUID_LITERAL]:
                localctx = EParser.UUIDLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 14)
                self.state = 2153
                self.match(EParser.UUID_LITERAL)
                pass
            elif token in [EParser.TYPE]:
                localctx = EParser.TypeLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 15)
                self.state = 2154
                self.type_literal()
                pass
            elif token in [EParser.NOTHING]:
                localctx = EParser.NullLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 16)
                self.state = 2155
                self.null_literal()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Literal_list_literalContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def atomic_literal(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(EParser.Atomic_literalContext)
            else:
                return self.getTypedRuleContext(EParser.Atomic_literalContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(EParser.COMMA)
            else:
                return self.getToken(EParser.COMMA, i)

        def getRuleIndex(self):
            return EParser.RULE_literal_list_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLiteral_list_literal" ):
                listener.enterLiteral_list_literal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLiteral_list_literal" ):
                listener.exitLiteral_list_literal(self)




    def literal_list_literal(self):

        localctx = EParser.Literal_list_literalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 288, self.RULE_literal_list_literal)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2158
            self.atomic_literal()
            self.state = 2163
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==EParser.COMMA:
                self.state = 2159
                self.match(EParser.COMMA)
                self.state = 2160
                self.atomic_literal()
                self.state = 2165
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class This_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SELF(self):
            return self.getToken(EParser.SELF, 0)

        def THIS(self):
            return self.getToken(EParser.THIS, 0)

        def getRuleIndex(self):
            return EParser.RULE_this_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterThis_expression" ):
                listener.enterThis_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitThis_expression" ):
                listener.exitThis_expression(self)




    def this_expression(self):

        localctx = EParser.This_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 290, self.RULE_this_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2166
            _la = self._input.LA(1)
            if not(_la==EParser.SELF or _la==EParser.THIS):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Parenthesis_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAR(self):
            return self.getToken(EParser.LPAR, 0)

        def expression(self):
            return self.getTypedRuleContext(EParser.ExpressionContext,0)


        def RPAR(self):
            return self.getToken(EParser.RPAR, 0)

        def getRuleIndex(self):
            return EParser.RULE_parenthesis_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParenthesis_expression" ):
                listener.enterParenthesis_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParenthesis_expression" ):
                listener.exitParenthesis_expression(self)




    def parenthesis_expression(self):

        localctx = EParser.Parenthesis_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 292, self.RULE_parenthesis_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2168
            self.match(EParser.LPAR)
            self.state = 2169
            self.expression(0)
            self.state = 2170
            self.match(EParser.RPAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Literal_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def atomic_literal(self):
            return self.getTypedRuleContext(EParser.Atomic_literalContext,0)


        def collection_literal(self):
            return self.getTypedRuleContext(EParser.Collection_literalContext,0)


        def getRuleIndex(self):
            return EParser.RULE_literal_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLiteral_expression" ):
                listener.enterLiteral_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLiteral_expression" ):
                listener.exitLiteral_expression(self)




    def literal_expression(self):

        localctx = EParser.Literal_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 294, self.RULE_literal_expression)
        try:
            self.state = 2174
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [EParser.TYPE, EParser.NOTHING, EParser.BOOLEAN_LITERAL, EParser.CHAR_LITERAL, EParser.MIN_INTEGER, EParser.MAX_INTEGER, EParser.TEXT_LITERAL, EParser.UUID_LITERAL, EParser.INTEGER_LITERAL, EParser.HEXA_LITERAL, EParser.DECIMAL_LITERAL, EParser.DATETIME_LITERAL, EParser.TIME_LITERAL, EParser.DATE_LITERAL, EParser.PERIOD_LITERAL, EParser.VERSION_LITERAL]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2172
                self.atomic_literal()
                pass
            elif token in [EParser.LPAR, EParser.LBRAK, EParser.LCURL, EParser.LT, EParser.LTCOLONGT, EParser.MUTABLE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2173
                self.collection_literal()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Collection_literalContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def range_literal(self):
            return self.getTypedRuleContext(EParser.Range_literalContext,0)


        def list_literal(self):
            return self.getTypedRuleContext(EParser.List_literalContext,0)


        def set_literal(self):
            return self.getTypedRuleContext(EParser.Set_literalContext,0)


        def dict_literal(self):
            return self.getTypedRuleContext(EParser.Dict_literalContext,0)


        def document_literal(self):
            return self.getTypedRuleContext(EParser.Document_literalContext,0)


        def tuple_literal(self):
            return self.getTypedRuleContext(EParser.Tuple_literalContext,0)


        def getRuleIndex(self):
            return EParser.RULE_collection_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCollection_literal" ):
                listener.enterCollection_literal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCollection_literal" ):
                listener.exitCollection_literal(self)




    def collection_literal(self):

        localctx = EParser.Collection_literalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 296, self.RULE_collection_literal)
        try:
            self.state = 2182
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,177,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2176
                self.range_literal()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2177
                self.list_literal()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2178
                self.set_literal()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2179
                self.dict_literal()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 2180
                self.document_literal()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 2181
                self.tuple_literal()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Tuple_literalContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAR(self):
            return self.getToken(EParser.LPAR, 0)

        def RPAR(self):
            return self.getToken(EParser.RPAR, 0)

        def MUTABLE(self):
            return self.getToken(EParser.MUTABLE, 0)

        def expression_tuple(self):
            return self.getTypedRuleContext(EParser.Expression_tupleContext,0)


        def getRuleIndex(self):
            return EParser.RULE_tuple_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTuple_literal" ):
                listener.enterTuple_literal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTuple_literal" ):
                listener.exitTuple_literal(self)




    def tuple_literal(self):

        localctx = EParser.Tuple_literalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 298, self.RULE_tuple_literal)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2185
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==EParser.MUTABLE:
                self.state = 2184
                self.match(EParser.MUTABLE)


            self.state = 2187
            self.match(EParser.LPAR)
            self.state = 2189
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << EParser.LPAR) | (1 << EParser.LBRAK) | (1 << EParser.LCURL) | (1 << EParser.MINUS) | (1 << EParser.LT) | (1 << EParser.LTGT) | (1 << EParser.LTCOLONGT) | (1 << EParser.METHOD_COLON) | (1 << EParser.CODE))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (EParser.DOCUMENT - 64)) | (1 << (EParser.BLOB - 64)) | (1 << (EParser.TYPE - 64)) | (1 << (EParser.EXECUTE - 64)) | (1 << (EParser.FETCH - 64)) | (1 << (EParser.INVOKE_COLON - 64)) | (1 << (EParser.MUTABLE - 64)) | (1 << (EParser.NOT - 64)) | (1 << (EParser.NOTHING - 64)))) != 0) or ((((_la - 138)) & ~0x3f) == 0 and ((1 << (_la - 138)) & ((1 << (EParser.READ - 138)) | (1 << (EParser.SELF - 138)) | (1 << (EParser.SORTED - 138)) | (1 << (EParser.THIS - 138)) | (1 << (EParser.BOOLEAN_LITERAL - 138)) | (1 << (EParser.CHAR_LITERAL - 138)) | (1 << (EParser.MIN_INTEGER - 138)) | (1 << (EParser.MAX_INTEGER - 138)) | (1 << (EParser.SYMBOL_IDENTIFIER - 138)) | (1 << (EParser.TYPE_IDENTIFIER - 138)) | (1 << (EParser.VARIABLE_IDENTIFIER - 138)) | (1 << (EParser.TEXT_LITERAL - 138)) | (1 << (EParser.UUID_LITERAL - 138)) | (1 << (EParser.INTEGER_LITERAL - 138)) | (1 << (EParser.HEXA_LITERAL - 138)) | (1 << (EParser.DECIMAL_LITERAL - 138)) | (1 << (EParser.DATETIME_LITERAL - 138)) | (1 << (EParser.TIME_LITERAL - 138)) | (1 << (EParser.DATE_LITERAL - 138)) | (1 << (EParser.PERIOD_LITERAL - 138)) | (1 << (EParser.VERSION_LITERAL - 138)))) != 0):
                self.state = 2188
                self.expression_tuple()


            self.state = 2191
            self.match(EParser.RPAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Dict_literalContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LTCOLONGT(self):
            return self.getToken(EParser.LTCOLONGT, 0)

        def MUTABLE(self):
            return self.getToken(EParser.MUTABLE, 0)

        def LT(self):
            return self.getToken(EParser.LT, 0)

        def dict_entry_list(self):
            return self.getTypedRuleContext(EParser.Dict_entry_listContext,0)


        def GT(self):
            return self.getToken(EParser.GT, 0)

        def COLON(self):
            return self.getToken(EParser.COLON, 0)

        def getRuleIndex(self):
            return EParser.RULE_dict_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDict_literal" ):
                listener.enterDict_literal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDict_literal" ):
                listener.exitDict_literal(self)




    def dict_literal(self):

        localctx = EParser.Dict_literalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 300, self.RULE_dict_literal)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2194
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==EParser.MUTABLE:
                self.state = 2193
                self.match(EParser.MUTABLE)


            self.state = 2204
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,181,self._ctx)
            if la_ == 1:
                self.state = 2196
                self.match(EParser.LT)
                self.state = 2197
                self.dict_entry_list()
                self.state = 2198
                self.match(EParser.GT)
                pass

            elif la_ == 2:
                self.state = 2200
                self.match(EParser.LTCOLONGT)
                pass

            elif la_ == 3:
                self.state = 2201
                self.match(EParser.LT)
                self.state = 2202
                self.match(EParser.COLON)
                self.state = 2203
                self.match(EParser.GT)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Document_literalContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LCURL(self):
            return self.getToken(EParser.LCURL, 0)

        def RCURL(self):
            return self.getToken(EParser.RCURL, 0)

        def dict_entry_list(self):
            return self.getTypedRuleContext(EParser.Dict_entry_listContext,0)


        def getRuleIndex(self):
            return EParser.RULE_document_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDocument_literal" ):
                listener.enterDocument_literal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDocument_literal" ):
                listener.exitDocument_literal(self)




    def document_literal(self):

        localctx = EParser.Document_literalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 302, self.RULE_document_literal)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2206
            self.match(EParser.LCURL)
            self.state = 2208
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 168)) & ~0x3f) == 0 and ((1 << (_la - 168)) & ((1 << (EParser.SYMBOL_IDENTIFIER - 168)) | (1 << (EParser.TYPE_IDENTIFIER - 168)) | (1 << (EParser.VARIABLE_IDENTIFIER - 168)) | (1 << (EParser.TEXT_LITERAL - 168)))) != 0):
                self.state = 2207
                self.dict_entry_list()


            self.state = 2210
            self.match(EParser.RCURL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Expression_tupleContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(EParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(EParser.ExpressionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(EParser.COMMA)
            else:
                return self.getToken(EParser.COMMA, i)

        def getRuleIndex(self):
            return EParser.RULE_expression_tuple

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpression_tuple" ):
                listener.enterExpression_tuple(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpression_tuple" ):
                listener.exitExpression_tuple(self)




    def expression_tuple(self):

        localctx = EParser.Expression_tupleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 304, self.RULE_expression_tuple)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2212
            self.expression(0)
            self.state = 2213
            self.match(EParser.COMMA)
            self.state = 2222
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << EParser.LPAR) | (1 << EParser.LBRAK) | (1 << EParser.LCURL) | (1 << EParser.MINUS) | (1 << EParser.LT) | (1 << EParser.LTGT) | (1 << EParser.LTCOLONGT) | (1 << EParser.METHOD_COLON) | (1 << EParser.CODE))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (EParser.DOCUMENT - 64)) | (1 << (EParser.BLOB - 64)) | (1 << (EParser.TYPE - 64)) | (1 << (EParser.EXECUTE - 64)) | (1 << (EParser.FETCH - 64)) | (1 << (EParser.INVOKE_COLON - 64)) | (1 << (EParser.MUTABLE - 64)) | (1 << (EParser.NOT - 64)) | (1 << (EParser.NOTHING - 64)))) != 0) or ((((_la - 138)) & ~0x3f) == 0 and ((1 << (_la - 138)) & ((1 << (EParser.READ - 138)) | (1 << (EParser.SELF - 138)) | (1 << (EParser.SORTED - 138)) | (1 << (EParser.THIS - 138)) | (1 << (EParser.BOOLEAN_LITERAL - 138)) | (1 << (EParser.CHAR_LITERAL - 138)) | (1 << (EParser.MIN_INTEGER - 138)) | (1 << (EParser.MAX_INTEGER - 138)) | (1 << (EParser.SYMBOL_IDENTIFIER - 138)) | (1 << (EParser.TYPE_IDENTIFIER - 138)) | (1 << (EParser.VARIABLE_IDENTIFIER - 138)) | (1 << (EParser.TEXT_LITERAL - 138)) | (1 << (EParser.UUID_LITERAL - 138)) | (1 << (EParser.INTEGER_LITERAL - 138)) | (1 << (EParser.HEXA_LITERAL - 138)) | (1 << (EParser.DECIMAL_LITERAL - 138)) | (1 << (EParser.DATETIME_LITERAL - 138)) | (1 << (EParser.TIME_LITERAL - 138)) | (1 << (EParser.DATE_LITERAL - 138)) | (1 << (EParser.PERIOD_LITERAL - 138)) | (1 << (EParser.VERSION_LITERAL - 138)))) != 0):
                self.state = 2214
                self.expression(0)
                self.state = 2219
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==EParser.COMMA:
                    self.state = 2215
                    self.match(EParser.COMMA)
                    self.state = 2216
                    self.expression(0)
                    self.state = 2221
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Dict_entry_listContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dict_entry(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(EParser.Dict_entryContext)
            else:
                return self.getTypedRuleContext(EParser.Dict_entryContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(EParser.COMMA)
            else:
                return self.getToken(EParser.COMMA, i)

        def getRuleIndex(self):
            return EParser.RULE_dict_entry_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDict_entry_list" ):
                listener.enterDict_entry_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDict_entry_list" ):
                listener.exitDict_entry_list(self)




    def dict_entry_list(self):

        localctx = EParser.Dict_entry_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 306, self.RULE_dict_entry_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2224
            self.dict_entry()
            self.state = 2229
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==EParser.COMMA:
                self.state = 2225
                self.match(EParser.COMMA)
                self.state = 2226
                self.dict_entry()
                self.state = 2231
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Dict_entryContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.key = None # Dict_keyContext
            self.value = None # ExpressionContext

        def COLON(self):
            return self.getToken(EParser.COLON, 0)

        def dict_key(self):
            return self.getTypedRuleContext(EParser.Dict_keyContext,0)


        def expression(self):
            return self.getTypedRuleContext(EParser.ExpressionContext,0)


        def getRuleIndex(self):
            return EParser.RULE_dict_entry

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDict_entry" ):
                listener.enterDict_entry(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDict_entry" ):
                listener.exitDict_entry(self)




    def dict_entry(self):

        localctx = EParser.Dict_entryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 308, self.RULE_dict_entry)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2232
            localctx.key = self.dict_key()
            self.state = 2233
            self.match(EParser.COLON)
            self.state = 2234
            localctx.value = self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Dict_keyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return EParser.RULE_dict_key

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class DictKeyIdentifierContext(Dict_keyContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a EParser.Dict_keyContext
            super().__init__(parser)
            self.name = None # Any_identifierContext
            self.copyFrom(ctx)

        def any_identifier(self):
            return self.getTypedRuleContext(EParser.Any_identifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDictKeyIdentifier" ):
                listener.enterDictKeyIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDictKeyIdentifier" ):
                listener.exitDictKeyIdentifier(self)


    class DictKeyTextContext(Dict_keyContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a EParser.Dict_keyContext
            super().__init__(parser)
            self.name = None # Token
            self.copyFrom(ctx)

        def TEXT_LITERAL(self):
            return self.getToken(EParser.TEXT_LITERAL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDictKeyText" ):
                listener.enterDictKeyText(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDictKeyText" ):
                listener.exitDictKeyText(self)



    def dict_key(self):

        localctx = EParser.Dict_keyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 310, self.RULE_dict_key)
        try:
            self.state = 2238
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [EParser.SYMBOL_IDENTIFIER, EParser.TYPE_IDENTIFIER, EParser.VARIABLE_IDENTIFIER]:
                localctx = EParser.DictKeyIdentifierContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2236
                localctx.name = self.any_identifier()
                pass
            elif token in [EParser.TEXT_LITERAL]:
                localctx = EParser.DictKeyTextContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2237
                localctx.name = self.match(EParser.TEXT_LITERAL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Slice_argumentsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return EParser.RULE_slice_arguments

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class SliceFirstAndLastContext(Slice_argumentsContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a EParser.Slice_argumentsContext
            super().__init__(parser)
            self.first = None # ExpressionContext
            self.last = None # ExpressionContext
            self.copyFrom(ctx)

        def COLON(self):
            return self.getToken(EParser.COLON, 0)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(EParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(EParser.ExpressionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSliceFirstAndLast" ):
                listener.enterSliceFirstAndLast(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSliceFirstAndLast" ):
                listener.exitSliceFirstAndLast(self)


    class SliceLastOnlyContext(Slice_argumentsContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a EParser.Slice_argumentsContext
            super().__init__(parser)
            self.last = None # ExpressionContext
            self.copyFrom(ctx)

        def COLON(self):
            return self.getToken(EParser.COLON, 0)
        def expression(self):
            return self.getTypedRuleContext(EParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSliceLastOnly" ):
                listener.enterSliceLastOnly(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSliceLastOnly" ):
                listener.exitSliceLastOnly(self)


    class SliceFirstOnlyContext(Slice_argumentsContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a EParser.Slice_argumentsContext
            super().__init__(parser)
            self.first = None # ExpressionContext
            self.copyFrom(ctx)

        def COLON(self):
            return self.getToken(EParser.COLON, 0)
        def expression(self):
            return self.getTypedRuleContext(EParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSliceFirstOnly" ):
                listener.enterSliceFirstOnly(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSliceFirstOnly" ):
                listener.exitSliceFirstOnly(self)



    def slice_arguments(self):

        localctx = EParser.Slice_argumentsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 312, self.RULE_slice_arguments)
        try:
            self.state = 2249
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,187,self._ctx)
            if la_ == 1:
                localctx = EParser.SliceFirstAndLastContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2240
                localctx.first = self.expression(0)
                self.state = 2241
                self.match(EParser.COLON)
                self.state = 2242
                localctx.last = self.expression(0)
                pass

            elif la_ == 2:
                localctx = EParser.SliceFirstOnlyContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2244
                localctx.first = self.expression(0)
                self.state = 2245
                self.match(EParser.COLON)
                pass

            elif la_ == 3:
                localctx = EParser.SliceLastOnlyContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 2247
                self.match(EParser.COLON)
                self.state = 2248
                localctx.last = self.expression(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Assign_variable_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variable_identifier(self):
            return self.getTypedRuleContext(EParser.Variable_identifierContext,0)


        def assign(self):
            return self.getTypedRuleContext(EParser.AssignContext,0)


        def expression(self):
            return self.getTypedRuleContext(EParser.ExpressionContext,0)


        def getRuleIndex(self):
            return EParser.RULE_assign_variable_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssign_variable_statement" ):
                listener.enterAssign_variable_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssign_variable_statement" ):
                listener.exitAssign_variable_statement(self)




    def assign_variable_statement(self):

        localctx = EParser.Assign_variable_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 314, self.RULE_assign_variable_statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2251
            self.variable_identifier()
            self.state = 2252
            self.assign()
            self.state = 2253
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Assignable_instanceContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return EParser.RULE_assignable_instance

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class ChildInstanceContext(Assignable_instanceContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a EParser.Assignable_instanceContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def assignable_instance(self):
            return self.getTypedRuleContext(EParser.Assignable_instanceContext,0)

        def child_instance(self):
            return self.getTypedRuleContext(EParser.Child_instanceContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterChildInstance" ):
                listener.enterChildInstance(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitChildInstance" ):
                listener.exitChildInstance(self)


    class RootInstanceContext(Assignable_instanceContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a EParser.Assignable_instanceContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def variable_identifier(self):
            return self.getTypedRuleContext(EParser.Variable_identifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRootInstance" ):
                listener.enterRootInstance(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRootInstance" ):
                listener.exitRootInstance(self)



    def assignable_instance(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = EParser.Assignable_instanceContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 316
        self.enterRecursionRule(localctx, 316, self.RULE_assignable_instance, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            localctx = EParser.RootInstanceContext(self, localctx)
            self._ctx = localctx
            _prevctx = localctx

            self.state = 2256
            self.variable_identifier()
            self._ctx.stop = self._input.LT(-1)
            self.state = 2262
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,188,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = EParser.ChildInstanceContext(self, EParser.Assignable_instanceContext(self, _parentctx, _parentState))
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_assignable_instance)
                    self.state = 2258
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 2259
                    self.child_instance() 
                self.state = 2264
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,188,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class Is_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return EParser.RULE_is_expression

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class IsATypeExpressionContext(Is_expressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a EParser.Is_expressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def VARIABLE_IDENTIFIER(self):
            return self.getToken(EParser.VARIABLE_IDENTIFIER, 0)
        def category_or_any_type(self):
            return self.getTypedRuleContext(EParser.Category_or_any_typeContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIsATypeExpression" ):
                listener.enterIsATypeExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIsATypeExpression" ):
                listener.exitIsATypeExpression(self)


    class IsOtherExpressionContext(Is_expressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a EParser.Is_expressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self):
            return self.getTypedRuleContext(EParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIsOtherExpression" ):
                listener.enterIsOtherExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIsOtherExpression" ):
                listener.exitIsOtherExpression(self)



    def is_expression(self):

        localctx = EParser.Is_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 318, self.RULE_is_expression)
        try:
            self.state = 2269
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,189,self._ctx)
            if la_ == 1:
                localctx = EParser.IsATypeExpressionContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2265
                if not self.willBeAOrAn():
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "$parser.willBeAOrAn()")
                self.state = 2266
                self.match(EParser.VARIABLE_IDENTIFIER)
                self.state = 2267
                self.category_or_any_type()
                pass

            elif la_ == 2:
                localctx = EParser.IsOtherExpressionContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2268
                self.expression(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Arrow_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return EParser.RULE_arrow_expression

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class ArrowExpressionBodyContext(Arrow_expressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a EParser.Arrow_expressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def arrow_prefix(self):
            return self.getTypedRuleContext(EParser.Arrow_prefixContext,0)

        def expression(self):
            return self.getTypedRuleContext(EParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArrowExpressionBody" ):
                listener.enterArrowExpressionBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArrowExpressionBody" ):
                listener.exitArrowExpressionBody(self)


    class ArrowStatementsBodyContext(Arrow_expressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a EParser.Arrow_expressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def arrow_prefix(self):
            return self.getTypedRuleContext(EParser.Arrow_prefixContext,0)

        def LCURL(self):
            return self.getToken(EParser.LCURL, 0)
        def statement_list(self):
            return self.getTypedRuleContext(EParser.Statement_listContext,0)

        def RCURL(self):
            return self.getToken(EParser.RCURL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArrowStatementsBody" ):
                listener.enterArrowStatementsBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArrowStatementsBody" ):
                listener.exitArrowStatementsBody(self)



    def arrow_expression(self):

        localctx = EParser.Arrow_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 320, self.RULE_arrow_expression)
        try:
            self.state = 2279
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,190,self._ctx)
            if la_ == 1:
                localctx = EParser.ArrowExpressionBodyContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2271
                self.arrow_prefix()
                self.state = 2272
                self.expression(0)
                pass

            elif la_ == 2:
                localctx = EParser.ArrowStatementsBodyContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2274
                self.arrow_prefix()
                self.state = 2275
                self.match(EParser.LCURL)
                self.state = 2276
                self.statement_list()
                self.state = 2277
                self.match(EParser.RCURL)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Arrow_prefixContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.s1 = None # Ws_plusContext
            self.s2 = None # Ws_plusContext

        def arrow_args(self):
            return self.getTypedRuleContext(EParser.Arrow_argsContext,0)


        def EGT(self):
            return self.getToken(EParser.EGT, 0)

        def ws_plus(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(EParser.Ws_plusContext)
            else:
                return self.getTypedRuleContext(EParser.Ws_plusContext,i)


        def getRuleIndex(self):
            return EParser.RULE_arrow_prefix

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArrow_prefix" ):
                listener.enterArrow_prefix(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArrow_prefix" ):
                listener.exitArrow_prefix(self)




    def arrow_prefix(self):

        localctx = EParser.Arrow_prefixContext(self, self._ctx, self.state)
        self.enterRule(localctx, 322, self.RULE_arrow_prefix)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2281
            self.arrow_args()
            self.state = 2282
            localctx.s1 = self.ws_plus()
            self.state = 2283
            self.match(EParser.EGT)
            self.state = 2284
            localctx.s2 = self.ws_plus()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Arrow_argsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return EParser.RULE_arrow_args

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class ArrowListArgContext(Arrow_argsContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a EParser.Arrow_argsContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LPAR(self):
            return self.getToken(EParser.LPAR, 0)
        def RPAR(self):
            return self.getToken(EParser.RPAR, 0)
        def variable_identifier_list(self):
            return self.getTypedRuleContext(EParser.Variable_identifier_listContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArrowListArg" ):
                listener.enterArrowListArg(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArrowListArg" ):
                listener.exitArrowListArg(self)


    class ArrowSingleArgContext(Arrow_argsContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a EParser.Arrow_argsContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def variable_identifier(self):
            return self.getTypedRuleContext(EParser.Variable_identifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArrowSingleArg" ):
                listener.enterArrowSingleArg(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArrowSingleArg" ):
                listener.exitArrowSingleArg(self)



    def arrow_args(self):

        localctx = EParser.Arrow_argsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 324, self.RULE_arrow_args)
        self._la = 0 # Token type
        try:
            self.state = 2292
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [EParser.VARIABLE_IDENTIFIER]:
                localctx = EParser.ArrowSingleArgContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2286
                self.variable_identifier()
                pass
            elif token in [EParser.LPAR]:
                localctx = EParser.ArrowListArgContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2287
                self.match(EParser.LPAR)
                self.state = 2289
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==EParser.VARIABLE_IDENTIFIER:
                    self.state = 2288
                    self.variable_identifier_list()


                self.state = 2291
                self.match(EParser.RPAR)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Sorted_keyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def instance_expression(self):
            return self.getTypedRuleContext(EParser.Instance_expressionContext,0)


        def arrow_expression(self):
            return self.getTypedRuleContext(EParser.Arrow_expressionContext,0)


        def getRuleIndex(self):
            return EParser.RULE_sorted_key

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSorted_key" ):
                listener.enterSorted_key(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSorted_key" ):
                listener.exitSorted_key(self)




    def sorted_key(self):

        localctx = EParser.Sorted_keyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 326, self.RULE_sorted_key)
        try:
            self.state = 2296
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,193,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2294
                self.instance_expression(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2295
                self.arrow_expression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Read_all_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.source = None # ExpressionContext

        def READ(self):
            return self.getToken(EParser.READ, 0)

        def ALL(self):
            return self.getToken(EParser.ALL, 0)

        def FROM(self):
            return self.getToken(EParser.FROM, 0)

        def expression(self):
            return self.getTypedRuleContext(EParser.ExpressionContext,0)


        def getRuleIndex(self):
            return EParser.RULE_read_all_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRead_all_expression" ):
                listener.enterRead_all_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRead_all_expression" ):
                listener.exitRead_all_expression(self)




    def read_all_expression(self):

        localctx = EParser.Read_all_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 328, self.RULE_read_all_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2298
            self.match(EParser.READ)
            self.state = 2299
            self.match(EParser.ALL)
            self.state = 2300
            self.match(EParser.FROM)
            self.state = 2301
            localctx.source = self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Read_one_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.source = None # ExpressionContext

        def READ(self):
            return self.getToken(EParser.READ, 0)

        def ONE(self):
            return self.getToken(EParser.ONE, 0)

        def FROM(self):
            return self.getToken(EParser.FROM, 0)

        def expression(self):
            return self.getTypedRuleContext(EParser.ExpressionContext,0)


        def getRuleIndex(self):
            return EParser.RULE_read_one_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRead_one_expression" ):
                listener.enterRead_one_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRead_one_expression" ):
                listener.exitRead_one_expression(self)




    def read_one_expression(self):

        localctx = EParser.Read_one_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 330, self.RULE_read_one_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2303
            self.match(EParser.READ)
            self.state = 2304
            self.match(EParser.ONE)
            self.state = 2305
            self.match(EParser.FROM)
            self.state = 2306
            localctx.source = self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Order_by_listContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def order_by(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(EParser.Order_byContext)
            else:
                return self.getTypedRuleContext(EParser.Order_byContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(EParser.COMMA)
            else:
                return self.getToken(EParser.COMMA, i)

        def getRuleIndex(self):
            return EParser.RULE_order_by_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOrder_by_list" ):
                listener.enterOrder_by_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOrder_by_list" ):
                listener.exitOrder_by_list(self)




    def order_by_list(self):

        localctx = EParser.Order_by_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 332, self.RULE_order_by_list)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2308
            self.order_by()
            self.state = 2313
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,194,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2309
                    self.match(EParser.COMMA)
                    self.state = 2310
                    self.order_by() 
                self.state = 2315
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,194,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Order_byContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variable_identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(EParser.Variable_identifierContext)
            else:
                return self.getTypedRuleContext(EParser.Variable_identifierContext,i)


        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(EParser.DOT)
            else:
                return self.getToken(EParser.DOT, i)

        def ASC(self):
            return self.getToken(EParser.ASC, 0)

        def DESC(self):
            return self.getToken(EParser.DESC, 0)

        def getRuleIndex(self):
            return EParser.RULE_order_by

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOrder_by" ):
                listener.enterOrder_by(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOrder_by" ):
                listener.exitOrder_by(self)




    def order_by(self):

        localctx = EParser.Order_byContext(self, self._ctx, self.state)
        self.enterRule(localctx, 334, self.RULE_order_by)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2316
            self.variable_identifier()
            self.state = 2321
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,195,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2317
                    self.match(EParser.DOT)
                    self.state = 2318
                    self.variable_identifier() 
                self.state = 2323
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,195,self._ctx)

            self.state = 2325
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,196,self._ctx)
            if la_ == 1:
                self.state = 2324
                _la = self._input.LA(1)
                if not(_la==EParser.ASC or _la==EParser.DESC):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class OperatorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return EParser.RULE_operator

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class OperatorPlusContext(OperatorContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a EParser.OperatorContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def PLUS(self):
            return self.getToken(EParser.PLUS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOperatorPlus" ):
                listener.enterOperatorPlus(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOperatorPlus" ):
                listener.exitOperatorPlus(self)


    class OperatorDivideContext(OperatorContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a EParser.OperatorContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def divide(self):
            return self.getTypedRuleContext(EParser.DivideContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOperatorDivide" ):
                listener.enterOperatorDivide(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOperatorDivide" ):
                listener.exitOperatorDivide(self)


    class OperatorIDivideContext(OperatorContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a EParser.OperatorContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def idivide(self):
            return self.getTypedRuleContext(EParser.IdivideContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOperatorIDivide" ):
                listener.enterOperatorIDivide(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOperatorIDivide" ):
                listener.exitOperatorIDivide(self)


    class OperatorMultiplyContext(OperatorContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a EParser.OperatorContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def multiply(self):
            return self.getTypedRuleContext(EParser.MultiplyContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOperatorMultiply" ):
                listener.enterOperatorMultiply(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOperatorMultiply" ):
                listener.exitOperatorMultiply(self)


    class OperatorMinusContext(OperatorContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a EParser.OperatorContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def MINUS(self):
            return self.getToken(EParser.MINUS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOperatorMinus" ):
                listener.enterOperatorMinus(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOperatorMinus" ):
                listener.exitOperatorMinus(self)


    class OperatorModuloContext(OperatorContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a EParser.OperatorContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def modulo(self):
            return self.getTypedRuleContext(EParser.ModuloContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOperatorModulo" ):
                listener.enterOperatorModulo(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOperatorModulo" ):
                listener.exitOperatorModulo(self)



    def operator(self):

        localctx = EParser.OperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 336, self.RULE_operator)
        try:
            self.state = 2333
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [EParser.PLUS]:
                localctx = EParser.OperatorPlusContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2327
                self.match(EParser.PLUS)
                pass
            elif token in [EParser.MINUS]:
                localctx = EParser.OperatorMinusContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2328
                self.match(EParser.MINUS)
                pass
            elif token in [EParser.STAR]:
                localctx = EParser.OperatorMultiplyContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 2329
                self.multiply()
                pass
            elif token in [EParser.SLASH]:
                localctx = EParser.OperatorDivideContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 2330
                self.divide()
                pass
            elif token in [EParser.BSLASH]:
                localctx = EParser.OperatorIDivideContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 2331
                self.idivide()
                pass
            elif token in [EParser.PERCENT, EParser.MODULO]:
                localctx = EParser.OperatorModuloContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 2332
                self.modulo()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class KeywordContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def JAVA(self):
            return self.getToken(EParser.JAVA, 0)

        def CSHARP(self):
            return self.getToken(EParser.CSHARP, 0)

        def PYTHON2(self):
            return self.getToken(EParser.PYTHON2, 0)

        def PYTHON3(self):
            return self.getToken(EParser.PYTHON3, 0)

        def JAVASCRIPT(self):
            return self.getToken(EParser.JAVASCRIPT, 0)

        def SWIFT(self):
            return self.getToken(EParser.SWIFT, 0)

        def BOOLEAN(self):
            return self.getToken(EParser.BOOLEAN, 0)

        def CHARACTER(self):
            return self.getToken(EParser.CHARACTER, 0)

        def TEXT(self):
            return self.getToken(EParser.TEXT, 0)

        def INTEGER(self):
            return self.getToken(EParser.INTEGER, 0)

        def DECIMAL(self):
            return self.getToken(EParser.DECIMAL, 0)

        def DATE(self):
            return self.getToken(EParser.DATE, 0)

        def TIME(self):
            return self.getToken(EParser.TIME, 0)

        def DATETIME(self):
            return self.getToken(EParser.DATETIME, 0)

        def PERIOD(self):
            return self.getToken(EParser.PERIOD, 0)

        def VERSION(self):
            return self.getToken(EParser.VERSION, 0)

        def CODE(self):
            return self.getToken(EParser.CODE, 0)

        def DOCUMENT(self):
            return self.getToken(EParser.DOCUMENT, 0)

        def BLOB(self):
            return self.getToken(EParser.BLOB, 0)

        def IMAGE(self):
            return self.getToken(EParser.IMAGE, 0)

        def UUID(self):
            return self.getToken(EParser.UUID, 0)

        def ITERATOR(self):
            return self.getToken(EParser.ITERATOR, 0)

        def CURSOR(self):
            return self.getToken(EParser.CURSOR, 0)

        def HTML(self):
            return self.getToken(EParser.HTML, 0)

        def ABSTRACT(self):
            return self.getToken(EParser.ABSTRACT, 0)

        def ALL(self):
            return self.getToken(EParser.ALL, 0)

        def ALWAYS(self):
            return self.getToken(EParser.ALWAYS, 0)

        def AND(self):
            return self.getToken(EParser.AND, 0)

        def ANY(self):
            return self.getToken(EParser.ANY, 0)

        def AS(self):
            return self.getToken(EParser.AS, 0)

        def ASC(self):
            return self.getToken(EParser.ASC, 0)

        def ATTR(self):
            return self.getToken(EParser.ATTR, 0)

        def ATTRIBUTE(self):
            return self.getToken(EParser.ATTRIBUTE, 0)

        def ATTRIBUTES(self):
            return self.getToken(EParser.ATTRIBUTES, 0)

        def BINDINGS(self):
            return self.getToken(EParser.BINDINGS, 0)

        def BREAK(self):
            return self.getToken(EParser.BREAK, 0)

        def BY(self):
            return self.getToken(EParser.BY, 0)

        def CASE(self):
            return self.getToken(EParser.CASE, 0)

        def CATCH(self):
            return self.getToken(EParser.CATCH, 0)

        def CATEGORY(self):
            return self.getToken(EParser.CATEGORY, 0)

        def CLASS(self):
            return self.getToken(EParser.CLASS, 0)

        def CLOSE(self):
            return self.getToken(EParser.CLOSE, 0)

        def CONTAINS(self):
            return self.getToken(EParser.CONTAINS, 0)

        def DEF(self):
            return self.getToken(EParser.DEF, 0)

        def DEFAULT(self):
            return self.getToken(EParser.DEFAULT, 0)

        def DEFINE(self):
            return self.getToken(EParser.DEFINE, 0)

        def DELETE(self):
            return self.getToken(EParser.DELETE, 0)

        def DESC(self):
            return self.getToken(EParser.DESC, 0)

        def DO(self):
            return self.getToken(EParser.DO, 0)

        def DOING(self):
            return self.getToken(EParser.DOING, 0)

        def EACH(self):
            return self.getToken(EParser.EACH, 0)

        def ELSE(self):
            return self.getToken(EParser.ELSE, 0)

        def ENUM(self):
            return self.getToken(EParser.ENUM, 0)

        def ENUMERATED(self):
            return self.getToken(EParser.ENUMERATED, 0)

        def EXCEPT(self):
            return self.getToken(EParser.EXCEPT, 0)

        def EXECUTE(self):
            return self.getToken(EParser.EXECUTE, 0)

        def EXPECTING(self):
            return self.getToken(EParser.EXPECTING, 0)

        def EXTENDS(self):
            return self.getToken(EParser.EXTENDS, 0)

        def FETCH(self):
            return self.getToken(EParser.FETCH, 0)

        def FILTERED(self):
            return self.getToken(EParser.FILTERED, 0)

        def FINALLY(self):
            return self.getToken(EParser.FINALLY, 0)

        def FLUSH(self):
            return self.getToken(EParser.FLUSH, 0)

        def FOR(self):
            return self.getToken(EParser.FOR, 0)

        def FROM(self):
            return self.getToken(EParser.FROM, 0)

        def GETTER(self):
            return self.getToken(EParser.GETTER, 0)

        def HAS(self):
            return self.getToken(EParser.HAS, 0)

        def IF(self):
            return self.getToken(EParser.IF, 0)

        def IN(self):
            return self.getToken(EParser.IN, 0)

        def INDEX(self):
            return self.getToken(EParser.INDEX, 0)

        def IS(self):
            return self.getToken(EParser.IS, 0)

        def MATCHING(self):
            return self.getToken(EParser.MATCHING, 0)

        def METHOD(self):
            return self.getToken(EParser.METHOD, 0)

        def METHODS(self):
            return self.getToken(EParser.METHODS, 0)

        def MODULO(self):
            return self.getToken(EParser.MODULO, 0)

        def MUTABLE(self):
            return self.getToken(EParser.MUTABLE, 0)

        def NATIVE(self):
            return self.getToken(EParser.NATIVE, 0)

        def NONE(self):
            return self.getToken(EParser.NONE, 0)

        def NOT(self):
            return self.getToken(EParser.NOT, 0)

        def NOTHING(self):
            return self.getToken(EParser.NOTHING, 0)

        def NULL(self):
            return self.getToken(EParser.NULL, 0)

        def ON(self):
            return self.getToken(EParser.ON, 0)

        def ONE(self):
            return self.getToken(EParser.ONE, 0)

        def OPEN(self):
            return self.getToken(EParser.OPEN, 0)

        def OPERATOR(self):
            return self.getToken(EParser.OPERATOR, 0)

        def OR(self):
            return self.getToken(EParser.OR, 0)

        def ORDER(self):
            return self.getToken(EParser.ORDER, 0)

        def OTHERWISE(self):
            return self.getToken(EParser.OTHERWISE, 0)

        def PASS(self):
            return self.getToken(EParser.PASS, 0)

        def RAISE(self):
            return self.getToken(EParser.RAISE, 0)

        def READ(self):
            return self.getToken(EParser.READ, 0)

        def RECEIVING(self):
            return self.getToken(EParser.RECEIVING, 0)

        def RESOURCE(self):
            return self.getToken(EParser.RESOURCE, 0)

        def RETURN(self):
            return self.getToken(EParser.RETURN, 0)

        def RETURNING(self):
            return self.getToken(EParser.RETURNING, 0)

        def ROWS(self):
            return self.getToken(EParser.ROWS, 0)

        def SELF(self):
            return self.getToken(EParser.SELF, 0)

        def SETTER(self):
            return self.getToken(EParser.SETTER, 0)

        def SINGLETON(self):
            return self.getToken(EParser.SINGLETON, 0)

        def SORTED(self):
            return self.getToken(EParser.SORTED, 0)

        def STORABLE(self):
            return self.getToken(EParser.STORABLE, 0)

        def STORE(self):
            return self.getToken(EParser.STORE, 0)

        def SWITCH(self):
            return self.getToken(EParser.SWITCH, 0)

        def TEST(self):
            return self.getToken(EParser.TEST, 0)

        def THIS(self):
            return self.getToken(EParser.THIS, 0)

        def THROW(self):
            return self.getToken(EParser.THROW, 0)

        def TO(self):
            return self.getToken(EParser.TO, 0)

        def TRY(self):
            return self.getToken(EParser.TRY, 0)

        def VERIFYING(self):
            return self.getToken(EParser.VERIFYING, 0)

        def WIDGET(self):
            return self.getToken(EParser.WIDGET, 0)

        def WITH(self):
            return self.getToken(EParser.WITH, 0)

        def WHEN(self):
            return self.getToken(EParser.WHEN, 0)

        def WHERE(self):
            return self.getToken(EParser.WHERE, 0)

        def WHILE(self):
            return self.getToken(EParser.WHILE, 0)

        def WRITE(self):
            return self.getToken(EParser.WRITE, 0)

        def getRuleIndex(self):
            return EParser.RULE_keyword

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterKeyword" ):
                listener.enterKeyword(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitKeyword" ):
                listener.exitKeyword(self)




    def keyword(self):

        localctx = EParser.KeywordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 338, self.RULE_keyword)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2335
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << EParser.JAVA) | (1 << EParser.CSHARP) | (1 << EParser.PYTHON2) | (1 << EParser.PYTHON3) | (1 << EParser.JAVASCRIPT) | (1 << EParser.SWIFT) | (1 << EParser.BOOLEAN) | (1 << EParser.CHARACTER) | (1 << EParser.TEXT) | (1 << EParser.INTEGER) | (1 << EParser.DECIMAL) | (1 << EParser.DATE) | (1 << EParser.TIME) | (1 << EParser.DATETIME) | (1 << EParser.PERIOD) | (1 << EParser.VERSION) | (1 << EParser.CODE))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (EParser.DOCUMENT - 64)) | (1 << (EParser.BLOB - 64)) | (1 << (EParser.IMAGE - 64)) | (1 << (EParser.UUID - 64)) | (1 << (EParser.ITERATOR - 64)) | (1 << (EParser.CURSOR - 64)) | (1 << (EParser.HTML - 64)) | (1 << (EParser.ABSTRACT - 64)) | (1 << (EParser.ALL - 64)) | (1 << (EParser.ALWAYS - 64)) | (1 << (EParser.AND - 64)) | (1 << (EParser.ANY - 64)) | (1 << (EParser.AS - 64)) | (1 << (EParser.ASC - 64)) | (1 << (EParser.ATTR - 64)) | (1 << (EParser.ATTRIBUTE - 64)) | (1 << (EParser.ATTRIBUTES - 64)) | (1 << (EParser.BINDINGS - 64)) | (1 << (EParser.BREAK - 64)) | (1 << (EParser.BY - 64)) | (1 << (EParser.CASE - 64)) | (1 << (EParser.CATCH - 64)) | (1 << (EParser.CATEGORY - 64)) | (1 << (EParser.CLASS - 64)) | (1 << (EParser.CLOSE - 64)) | (1 << (EParser.CONTAINS - 64)) | (1 << (EParser.DEF - 64)) | (1 << (EParser.DEFAULT - 64)) | (1 << (EParser.DEFINE - 64)) | (1 << (EParser.DELETE - 64)) | (1 << (EParser.DESC - 64)) | (1 << (EParser.DO - 64)) | (1 << (EParser.DOING - 64)) | (1 << (EParser.EACH - 64)) | (1 << (EParser.ELSE - 64)) | (1 << (EParser.ENUM - 64)) | (1 << (EParser.ENUMERATED - 64)) | (1 << (EParser.EXCEPT - 64)) | (1 << (EParser.EXECUTE - 64)) | (1 << (EParser.EXPECTING - 64)) | (1 << (EParser.EXTENDS - 64)) | (1 << (EParser.FETCH - 64)) | (1 << (EParser.FILTERED - 64)) | (1 << (EParser.FINALLY - 64)) | (1 << (EParser.FLUSH - 64)) | (1 << (EParser.FOR - 64)) | (1 << (EParser.FROM - 64)) | (1 << (EParser.GETTER - 64)) | (1 << (EParser.HAS - 64)) | (1 << (EParser.IF - 64)) | (1 << (EParser.IN - 64)) | (1 << (EParser.INDEX - 64)) | (1 << (EParser.IS - 64)) | (1 << (EParser.MATCHING - 64)) | (1 << (EParser.METHOD - 64)) | (1 << (EParser.METHODS - 64)) | (1 << (EParser.MODULO - 64)) | (1 << (EParser.MUTABLE - 64)) | (1 << (EParser.NATIVE - 64)) | (1 << (EParser.NONE - 64)) | (1 << (EParser.NOT - 64)) | (1 << (EParser.NOTHING - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (EParser.NULL - 128)) | (1 << (EParser.ON - 128)) | (1 << (EParser.ONE - 128)) | (1 << (EParser.OPEN - 128)) | (1 << (EParser.OPERATOR - 128)) | (1 << (EParser.OR - 128)) | (1 << (EParser.ORDER - 128)) | (1 << (EParser.OTHERWISE - 128)) | (1 << (EParser.PASS - 128)) | (1 << (EParser.RAISE - 128)) | (1 << (EParser.READ - 128)) | (1 << (EParser.RECEIVING - 128)) | (1 << (EParser.RESOURCE - 128)) | (1 << (EParser.RETURN - 128)) | (1 << (EParser.RETURNING - 128)) | (1 << (EParser.ROWS - 128)) | (1 << (EParser.SELF - 128)) | (1 << (EParser.SETTER - 128)) | (1 << (EParser.SINGLETON - 128)) | (1 << (EParser.SORTED - 128)) | (1 << (EParser.STORABLE - 128)) | (1 << (EParser.STORE - 128)) | (1 << (EParser.SWITCH - 128)) | (1 << (EParser.TEST - 128)) | (1 << (EParser.THIS - 128)) | (1 << (EParser.THROW - 128)) | (1 << (EParser.TO - 128)) | (1 << (EParser.TRY - 128)) | (1 << (EParser.VERIFYING - 128)) | (1 << (EParser.WIDGET - 128)) | (1 << (EParser.WITH - 128)) | (1 << (EParser.WHEN - 128)) | (1 << (EParser.WHERE - 128)) | (1 << (EParser.WHILE - 128)) | (1 << (EParser.WRITE - 128)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class New_tokenContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.i1 = None # Token

        def VARIABLE_IDENTIFIER(self):
            return self.getToken(EParser.VARIABLE_IDENTIFIER, 0)

        def getRuleIndex(self):
            return EParser.RULE_new_token

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNew_token" ):
                listener.enterNew_token(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNew_token" ):
                listener.exitNew_token(self)




    def new_token(self):

        localctx = EParser.New_tokenContext(self, self._ctx, self.state)
        self.enterRule(localctx, 340, self.RULE_new_token)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2337
            localctx.i1 = self.match(EParser.VARIABLE_IDENTIFIER)
            self.state = 2338
            if not self.isText(localctx.i1,"new"):
                from antlr4.error.Errors import FailedPredicateException
                raise FailedPredicateException(self, "$parser.isText($i1,\"new\")")
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Key_tokenContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.i1 = None # Token

        def VARIABLE_IDENTIFIER(self):
            return self.getToken(EParser.VARIABLE_IDENTIFIER, 0)

        def getRuleIndex(self):
            return EParser.RULE_key_token

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterKey_token" ):
                listener.enterKey_token(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitKey_token" ):
                listener.exitKey_token(self)




    def key_token(self):

        localctx = EParser.Key_tokenContext(self, self._ctx, self.state)
        self.enterRule(localctx, 342, self.RULE_key_token)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2340
            localctx.i1 = self.match(EParser.VARIABLE_IDENTIFIER)
            self.state = 2341
            if not self.isText(localctx.i1,"key"):
                from antlr4.error.Errors import FailedPredicateException
                raise FailedPredicateException(self, "$parser.isText($i1,\"key\")")
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Module_tokenContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.i1 = None # Token

        def VARIABLE_IDENTIFIER(self):
            return self.getToken(EParser.VARIABLE_IDENTIFIER, 0)

        def getRuleIndex(self):
            return EParser.RULE_module_token

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModule_token" ):
                listener.enterModule_token(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModule_token" ):
                listener.exitModule_token(self)




    def module_token(self):

        localctx = EParser.Module_tokenContext(self, self._ctx, self.state)
        self.enterRule(localctx, 344, self.RULE_module_token)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2343
            localctx.i1 = self.match(EParser.VARIABLE_IDENTIFIER)
            self.state = 2344
            if not self.isText(localctx.i1,"module"):
                from antlr4.error.Errors import FailedPredicateException
                raise FailedPredicateException(self, "$parser.isText($i1,\"module\")")
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Value_tokenContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.i1 = None # Token

        def VARIABLE_IDENTIFIER(self):
            return self.getToken(EParser.VARIABLE_IDENTIFIER, 0)

        def getRuleIndex(self):
            return EParser.RULE_value_token

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterValue_token" ):
                listener.enterValue_token(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitValue_token" ):
                listener.exitValue_token(self)




    def value_token(self):

        localctx = EParser.Value_tokenContext(self, self._ctx, self.state)
        self.enterRule(localctx, 346, self.RULE_value_token)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2346
            localctx.i1 = self.match(EParser.VARIABLE_IDENTIFIER)
            self.state = 2347
            if not self.isText(localctx.i1,"value"):
                from antlr4.error.Errors import FailedPredicateException
                raise FailedPredicateException(self, "$parser.isText($i1,\"value\")")
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Symbols_tokenContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.i1 = None # Token

        def VARIABLE_IDENTIFIER(self):
            return self.getToken(EParser.VARIABLE_IDENTIFIER, 0)

        def getRuleIndex(self):
            return EParser.RULE_symbols_token

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSymbols_token" ):
                listener.enterSymbols_token(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSymbols_token" ):
                listener.exitSymbols_token(self)




    def symbols_token(self):

        localctx = EParser.Symbols_tokenContext(self, self._ctx, self.state)
        self.enterRule(localctx, 348, self.RULE_symbols_token)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2349
            localctx.i1 = self.match(EParser.VARIABLE_IDENTIFIER)
            self.state = 2350
            if not self.isText(localctx.i1,"symbols"):
                from antlr4.error.Errors import FailedPredicateException
                raise FailedPredicateException(self, "$parser.isText($i1,\"symbols\")")
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AssignContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EQ(self):
            return self.getToken(EParser.EQ, 0)

        def getRuleIndex(self):
            return EParser.RULE_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssign" ):
                listener.enterAssign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssign" ):
                listener.exitAssign(self)




    def assign(self):

        localctx = EParser.AssignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 350, self.RULE_assign)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2352
            self.match(EParser.EQ)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class MultiplyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STAR(self):
            return self.getToken(EParser.STAR, 0)

        def getRuleIndex(self):
            return EParser.RULE_multiply

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMultiply" ):
                listener.enterMultiply(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMultiply" ):
                listener.exitMultiply(self)




    def multiply(self):

        localctx = EParser.MultiplyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 352, self.RULE_multiply)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2354
            self.match(EParser.STAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DivideContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SLASH(self):
            return self.getToken(EParser.SLASH, 0)

        def getRuleIndex(self):
            return EParser.RULE_divide

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDivide" ):
                listener.enterDivide(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDivide" ):
                listener.exitDivide(self)




    def divide(self):

        localctx = EParser.DivideContext(self, self._ctx, self.state)
        self.enterRule(localctx, 354, self.RULE_divide)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2356
            self.match(EParser.SLASH)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class IdivideContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BSLASH(self):
            return self.getToken(EParser.BSLASH, 0)

        def getRuleIndex(self):
            return EParser.RULE_idivide

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdivide" ):
                listener.enterIdivide(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdivide" ):
                listener.exitIdivide(self)




    def idivide(self):

        localctx = EParser.IdivideContext(self, self._ctx, self.state)
        self.enterRule(localctx, 356, self.RULE_idivide)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2358
            self.match(EParser.BSLASH)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ModuloContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PERCENT(self):
            return self.getToken(EParser.PERCENT, 0)

        def MODULO(self):
            return self.getToken(EParser.MODULO, 0)

        def getRuleIndex(self):
            return EParser.RULE_modulo

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModulo" ):
                listener.enterModulo(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModulo" ):
                listener.exitModulo(self)




    def modulo(self):

        localctx = EParser.ModuloContext(self, self._ctx, self.state)
        self.enterRule(localctx, 358, self.RULE_modulo)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2360
            _la = self._input.LA(1)
            if not(_la==EParser.PERCENT or _la==EParser.MODULO):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Javascript_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return EParser.RULE_javascript_statement

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class JavascriptStatementContext(Javascript_statementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a EParser.Javascript_statementContext
            super().__init__(parser)
            self.exp = None # Javascript_expressionContext
            self.copyFrom(ctx)

        def SEMI(self):
            return self.getToken(EParser.SEMI, 0)
        def javascript_expression(self):
            return self.getTypedRuleContext(EParser.Javascript_expressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJavascriptStatement" ):
                listener.enterJavascriptStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJavascriptStatement" ):
                listener.exitJavascriptStatement(self)


    class JavascriptReturnStatementContext(Javascript_statementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a EParser.Javascript_statementContext
            super().__init__(parser)
            self.exp = None # Javascript_expressionContext
            self.copyFrom(ctx)

        def RETURN(self):
            return self.getToken(EParser.RETURN, 0)
        def SEMI(self):
            return self.getToken(EParser.SEMI, 0)
        def javascript_expression(self):
            return self.getTypedRuleContext(EParser.Javascript_expressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJavascriptReturnStatement" ):
                listener.enterJavascriptReturnStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJavascriptReturnStatement" ):
                listener.exitJavascriptReturnStatement(self)



    def javascript_statement(self):

        localctx = EParser.Javascript_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 360, self.RULE_javascript_statement)
        try:
            self.state = 2369
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [EParser.RETURN]:
                localctx = EParser.JavascriptReturnStatementContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2362
                self.match(EParser.RETURN)
                self.state = 2363
                localctx.exp = self.javascript_expression(0)
                self.state = 2364
                self.match(EParser.SEMI)
                pass
            elif token in [EParser.LPAR, EParser.LBRAK, EParser.BOOLEAN, EParser.CHARACTER, EParser.TEXT, EParser.INTEGER, EParser.DECIMAL, EParser.DATE, EParser.TIME, EParser.DATETIME, EParser.PERIOD, EParser.VERSION, EParser.UUID, EParser.HTML, EParser.NONE, EParser.NULL, EParser.READ, EParser.SELF, EParser.TEST, EParser.THIS, EParser.WRITE, EParser.BOOLEAN_LITERAL, EParser.CHAR_LITERAL, EParser.SYMBOL_IDENTIFIER, EParser.TYPE_IDENTIFIER, EParser.VARIABLE_IDENTIFIER, EParser.DOLLAR_IDENTIFIER, EParser.TEXT_LITERAL, EParser.INTEGER_LITERAL, EParser.DECIMAL_LITERAL]:
                localctx = EParser.JavascriptStatementContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2366
                localctx.exp = self.javascript_expression(0)
                self.state = 2367
                self.match(EParser.SEMI)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Javascript_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return EParser.RULE_javascript_expression

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class JavascriptSelectorExpressionContext(Javascript_expressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a EParser.Javascript_expressionContext
            super().__init__(parser)
            self.parent = None # Javascript_expressionContext
            self.child = None # Javascript_selector_expressionContext
            self.copyFrom(ctx)

        def javascript_expression(self):
            return self.getTypedRuleContext(EParser.Javascript_expressionContext,0)

        def javascript_selector_expression(self):
            return self.getTypedRuleContext(EParser.Javascript_selector_expressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJavascriptSelectorExpression" ):
                listener.enterJavascriptSelectorExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJavascriptSelectorExpression" ):
                listener.exitJavascriptSelectorExpression(self)


    class JavascriptPrimaryExpressionContext(Javascript_expressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a EParser.Javascript_expressionContext
            super().__init__(parser)
            self.exp = None # Javascript_primary_expressionContext
            self.copyFrom(ctx)

        def javascript_primary_expression(self):
            return self.getTypedRuleContext(EParser.Javascript_primary_expressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJavascriptPrimaryExpression" ):
                listener.enterJavascriptPrimaryExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJavascriptPrimaryExpression" ):
                listener.exitJavascriptPrimaryExpression(self)



    def javascript_expression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = EParser.Javascript_expressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 362
        self.enterRecursionRule(localctx, 362, self.RULE_javascript_expression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            localctx = EParser.JavascriptPrimaryExpressionContext(self, localctx)
            self._ctx = localctx
            _prevctx = localctx

            self.state = 2372
            localctx.exp = self.javascript_primary_expression()
            self._ctx.stop = self._input.LT(-1)
            self.state = 2378
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,199,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = EParser.JavascriptSelectorExpressionContext(self, EParser.Javascript_expressionContext(self, _parentctx, _parentState))
                    localctx.parent = _prevctx
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_javascript_expression)
                    self.state = 2374
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 2375
                    localctx.child = self.javascript_selector_expression() 
                self.state = 2380
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,199,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class Javascript_primary_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def javascript_this_expression(self):
            return self.getTypedRuleContext(EParser.Javascript_this_expressionContext,0)


        def javascript_new_expression(self):
            return self.getTypedRuleContext(EParser.Javascript_new_expressionContext,0)


        def javascript_parenthesis_expression(self):
            return self.getTypedRuleContext(EParser.Javascript_parenthesis_expressionContext,0)


        def javascript_identifier_expression(self):
            return self.getTypedRuleContext(EParser.Javascript_identifier_expressionContext,0)


        def javascript_literal_expression(self):
            return self.getTypedRuleContext(EParser.Javascript_literal_expressionContext,0)


        def javascript_method_expression(self):
            return self.getTypedRuleContext(EParser.Javascript_method_expressionContext,0)


        def javascript_item_expression(self):
            return self.getTypedRuleContext(EParser.Javascript_item_expressionContext,0)


        def getRuleIndex(self):
            return EParser.RULE_javascript_primary_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJavascript_primary_expression" ):
                listener.enterJavascript_primary_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJavascript_primary_expression" ):
                listener.exitJavascript_primary_expression(self)




    def javascript_primary_expression(self):

        localctx = EParser.Javascript_primary_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 364, self.RULE_javascript_primary_expression)
        try:
            self.state = 2388
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,200,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2381
                self.javascript_this_expression()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2382
                self.javascript_new_expression()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2383
                self.javascript_parenthesis_expression()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2384
                self.javascript_identifier_expression()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 2385
                self.javascript_literal_expression()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 2386
                self.javascript_method_expression()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 2387
                self.javascript_item_expression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Javascript_this_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def this_expression(self):
            return self.getTypedRuleContext(EParser.This_expressionContext,0)


        def getRuleIndex(self):
            return EParser.RULE_javascript_this_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJavascript_this_expression" ):
                listener.enterJavascript_this_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJavascript_this_expression" ):
                listener.exitJavascript_this_expression(self)




    def javascript_this_expression(self):

        localctx = EParser.Javascript_this_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 366, self.RULE_javascript_this_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2390
            self.this_expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Javascript_new_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def new_token(self):
            return self.getTypedRuleContext(EParser.New_tokenContext,0)


        def javascript_method_expression(self):
            return self.getTypedRuleContext(EParser.Javascript_method_expressionContext,0)


        def getRuleIndex(self):
            return EParser.RULE_javascript_new_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJavascript_new_expression" ):
                listener.enterJavascript_new_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJavascript_new_expression" ):
                listener.exitJavascript_new_expression(self)




    def javascript_new_expression(self):

        localctx = EParser.Javascript_new_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 368, self.RULE_javascript_new_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2392
            self.new_token()
            self.state = 2393
            self.javascript_method_expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Javascript_selector_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return EParser.RULE_javascript_selector_expression

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class JavaScriptMemberExpressionContext(Javascript_selector_expressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a EParser.Javascript_selector_expressionContext
            super().__init__(parser)
            self.name = None # Javascript_identifierContext
            self.copyFrom(ctx)

        def DOT(self):
            return self.getToken(EParser.DOT, 0)
        def javascript_identifier(self):
            return self.getTypedRuleContext(EParser.Javascript_identifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJavaScriptMemberExpression" ):
                listener.enterJavaScriptMemberExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJavaScriptMemberExpression" ):
                listener.exitJavaScriptMemberExpression(self)


    class JavaScriptItemExpressionContext(Javascript_selector_expressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a EParser.Javascript_selector_expressionContext
            super().__init__(parser)
            self.exp = None # Javascript_item_expressionContext
            self.copyFrom(ctx)

        def javascript_item_expression(self):
            return self.getTypedRuleContext(EParser.Javascript_item_expressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJavaScriptItemExpression" ):
                listener.enterJavaScriptItemExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJavaScriptItemExpression" ):
                listener.exitJavaScriptItemExpression(self)


    class JavaScriptMethodExpressionContext(Javascript_selector_expressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a EParser.Javascript_selector_expressionContext
            super().__init__(parser)
            self.method = None # Javascript_method_expressionContext
            self.copyFrom(ctx)

        def DOT(self):
            return self.getToken(EParser.DOT, 0)
        def javascript_method_expression(self):
            return self.getTypedRuleContext(EParser.Javascript_method_expressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJavaScriptMethodExpression" ):
                listener.enterJavaScriptMethodExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJavaScriptMethodExpression" ):
                listener.exitJavaScriptMethodExpression(self)



    def javascript_selector_expression(self):

        localctx = EParser.Javascript_selector_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 370, self.RULE_javascript_selector_expression)
        try:
            self.state = 2400
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,201,self._ctx)
            if la_ == 1:
                localctx = EParser.JavaScriptMethodExpressionContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2395
                self.match(EParser.DOT)
                self.state = 2396
                localctx.method = self.javascript_method_expression()
                pass

            elif la_ == 2:
                localctx = EParser.JavaScriptMemberExpressionContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2397
                self.match(EParser.DOT)
                self.state = 2398
                localctx.name = self.javascript_identifier()
                pass

            elif la_ == 3:
                localctx = EParser.JavaScriptItemExpressionContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 2399
                localctx.exp = self.javascript_item_expression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Javascript_method_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # Javascript_identifierContext
            self.args = None # Javascript_argumentsContext

        def LPAR(self):
            return self.getToken(EParser.LPAR, 0)

        def RPAR(self):
            return self.getToken(EParser.RPAR, 0)

        def javascript_identifier(self):
            return self.getTypedRuleContext(EParser.Javascript_identifierContext,0)


        def javascript_arguments(self):
            return self.getTypedRuleContext(EParser.Javascript_argumentsContext,0)


        def getRuleIndex(self):
            return EParser.RULE_javascript_method_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJavascript_method_expression" ):
                listener.enterJavascript_method_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJavascript_method_expression" ):
                listener.exitJavascript_method_expression(self)




    def javascript_method_expression(self):

        localctx = EParser.Javascript_method_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 372, self.RULE_javascript_method_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2402
            localctx.name = self.javascript_identifier()
            self.state = 2403
            self.match(EParser.LPAR)
            self.state = 2405
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 20)) & ~0x3f) == 0 and ((1 << (_la - 20)) & ((1 << (EParser.LPAR - 20)) | (1 << (EParser.LBRAK - 20)) | (1 << (EParser.BOOLEAN - 20)) | (1 << (EParser.CHARACTER - 20)) | (1 << (EParser.TEXT - 20)) | (1 << (EParser.INTEGER - 20)) | (1 << (EParser.DECIMAL - 20)) | (1 << (EParser.DATE - 20)) | (1 << (EParser.TIME - 20)) | (1 << (EParser.DATETIME - 20)) | (1 << (EParser.PERIOD - 20)) | (1 << (EParser.VERSION - 20)) | (1 << (EParser.UUID - 20)) | (1 << (EParser.HTML - 20)))) != 0) or ((((_la - 125)) & ~0x3f) == 0 and ((1 << (_la - 125)) & ((1 << (EParser.NONE - 125)) | (1 << (EParser.NULL - 125)) | (1 << (EParser.READ - 125)) | (1 << (EParser.SELF - 125)) | (1 << (EParser.TEST - 125)) | (1 << (EParser.THIS - 125)) | (1 << (EParser.WRITE - 125)) | (1 << (EParser.BOOLEAN_LITERAL - 125)) | (1 << (EParser.CHAR_LITERAL - 125)) | (1 << (EParser.SYMBOL_IDENTIFIER - 125)) | (1 << (EParser.TYPE_IDENTIFIER - 125)) | (1 << (EParser.VARIABLE_IDENTIFIER - 125)) | (1 << (EParser.DOLLAR_IDENTIFIER - 125)) | (1 << (EParser.TEXT_LITERAL - 125)) | (1 << (EParser.INTEGER_LITERAL - 125)) | (1 << (EParser.DECIMAL_LITERAL - 125)))) != 0):
                self.state = 2404
                localctx.args = self.javascript_arguments(0)


            self.state = 2407
            self.match(EParser.RPAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Javascript_argumentsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return EParser.RULE_javascript_arguments

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class JavascriptArgumentListContext(Javascript_argumentsContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a EParser.Javascript_argumentsContext
            super().__init__(parser)
            self.item = None # Javascript_expressionContext
            self.copyFrom(ctx)

        def javascript_expression(self):
            return self.getTypedRuleContext(EParser.Javascript_expressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJavascriptArgumentList" ):
                listener.enterJavascriptArgumentList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJavascriptArgumentList" ):
                listener.exitJavascriptArgumentList(self)


    class JavascriptArgumentListItemContext(Javascript_argumentsContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a EParser.Javascript_argumentsContext
            super().__init__(parser)
            self.items = None # Javascript_argumentsContext
            self.item = None # Javascript_expressionContext
            self.copyFrom(ctx)

        def COMMA(self):
            return self.getToken(EParser.COMMA, 0)
        def javascript_arguments(self):
            return self.getTypedRuleContext(EParser.Javascript_argumentsContext,0)

        def javascript_expression(self):
            return self.getTypedRuleContext(EParser.Javascript_expressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJavascriptArgumentListItem" ):
                listener.enterJavascriptArgumentListItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJavascriptArgumentListItem" ):
                listener.exitJavascriptArgumentListItem(self)



    def javascript_arguments(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = EParser.Javascript_argumentsContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 374
        self.enterRecursionRule(localctx, 374, self.RULE_javascript_arguments, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            localctx = EParser.JavascriptArgumentListContext(self, localctx)
            self._ctx = localctx
            _prevctx = localctx

            self.state = 2410
            localctx.item = self.javascript_expression(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 2417
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,203,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = EParser.JavascriptArgumentListItemContext(self, EParser.Javascript_argumentsContext(self, _parentctx, _parentState))
                    localctx.items = _prevctx
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_javascript_arguments)
                    self.state = 2412
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 2413
                    self.match(EParser.COMMA)
                    self.state = 2414
                    localctx.item = self.javascript_expression(0) 
                self.state = 2419
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,203,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class Javascript_item_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.exp = None # Javascript_expressionContext

        def LBRAK(self):
            return self.getToken(EParser.LBRAK, 0)

        def RBRAK(self):
            return self.getToken(EParser.RBRAK, 0)

        def javascript_expression(self):
            return self.getTypedRuleContext(EParser.Javascript_expressionContext,0)


        def getRuleIndex(self):
            return EParser.RULE_javascript_item_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJavascript_item_expression" ):
                listener.enterJavascript_item_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJavascript_item_expression" ):
                listener.exitJavascript_item_expression(self)




    def javascript_item_expression(self):

        localctx = EParser.Javascript_item_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 376, self.RULE_javascript_item_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2420
            self.match(EParser.LBRAK)
            self.state = 2421
            localctx.exp = self.javascript_expression(0)
            self.state = 2422
            self.match(EParser.RBRAK)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Javascript_parenthesis_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.exp = None # Javascript_expressionContext

        def LPAR(self):
            return self.getToken(EParser.LPAR, 0)

        def RPAR(self):
            return self.getToken(EParser.RPAR, 0)

        def javascript_expression(self):
            return self.getTypedRuleContext(EParser.Javascript_expressionContext,0)


        def getRuleIndex(self):
            return EParser.RULE_javascript_parenthesis_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJavascript_parenthesis_expression" ):
                listener.enterJavascript_parenthesis_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJavascript_parenthesis_expression" ):
                listener.exitJavascript_parenthesis_expression(self)




    def javascript_parenthesis_expression(self):

        localctx = EParser.Javascript_parenthesis_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 378, self.RULE_javascript_parenthesis_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2424
            self.match(EParser.LPAR)
            self.state = 2425
            localctx.exp = self.javascript_expression(0)
            self.state = 2426
            self.match(EParser.RPAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Javascript_identifier_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # Javascript_identifierContext

        def javascript_identifier(self):
            return self.getTypedRuleContext(EParser.Javascript_identifierContext,0)


        def getRuleIndex(self):
            return EParser.RULE_javascript_identifier_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJavascript_identifier_expression" ):
                listener.enterJavascript_identifier_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJavascript_identifier_expression" ):
                listener.exitJavascript_identifier_expression(self)




    def javascript_identifier_expression(self):

        localctx = EParser.Javascript_identifier_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 380, self.RULE_javascript_identifier_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2428
            localctx.name = self.javascript_identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Javascript_literal_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return EParser.RULE_javascript_literal_expression

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class JavascriptIntegerLiteralContext(Javascript_literal_expressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a EParser.Javascript_literal_expressionContext
            super().__init__(parser)
            self.t = None # Token
            self.copyFrom(ctx)

        def INTEGER_LITERAL(self):
            return self.getToken(EParser.INTEGER_LITERAL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJavascriptIntegerLiteral" ):
                listener.enterJavascriptIntegerLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJavascriptIntegerLiteral" ):
                listener.exitJavascriptIntegerLiteral(self)


    class JavascriptBooleanLiteralContext(Javascript_literal_expressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a EParser.Javascript_literal_expressionContext
            super().__init__(parser)
            self.t = None # Token
            self.copyFrom(ctx)

        def BOOLEAN_LITERAL(self):
            return self.getToken(EParser.BOOLEAN_LITERAL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJavascriptBooleanLiteral" ):
                listener.enterJavascriptBooleanLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJavascriptBooleanLiteral" ):
                listener.exitJavascriptBooleanLiteral(self)


    class JavascriptCharacterLiteralContext(Javascript_literal_expressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a EParser.Javascript_literal_expressionContext
            super().__init__(parser)
            self.t = None # Token
            self.copyFrom(ctx)

        def CHAR_LITERAL(self):
            return self.getToken(EParser.CHAR_LITERAL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJavascriptCharacterLiteral" ):
                listener.enterJavascriptCharacterLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJavascriptCharacterLiteral" ):
                listener.exitJavascriptCharacterLiteral(self)


    class JavascriptTextLiteralContext(Javascript_literal_expressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a EParser.Javascript_literal_expressionContext
            super().__init__(parser)
            self.t = None # Token
            self.copyFrom(ctx)

        def TEXT_LITERAL(self):
            return self.getToken(EParser.TEXT_LITERAL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJavascriptTextLiteral" ):
                listener.enterJavascriptTextLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJavascriptTextLiteral" ):
                listener.exitJavascriptTextLiteral(self)


    class JavascriptDecimalLiteralContext(Javascript_literal_expressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a EParser.Javascript_literal_expressionContext
            super().__init__(parser)
            self.t = None # Token
            self.copyFrom(ctx)

        def DECIMAL_LITERAL(self):
            return self.getToken(EParser.DECIMAL_LITERAL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJavascriptDecimalLiteral" ):
                listener.enterJavascriptDecimalLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJavascriptDecimalLiteral" ):
                listener.exitJavascriptDecimalLiteral(self)



    def javascript_literal_expression(self):

        localctx = EParser.Javascript_literal_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 382, self.RULE_javascript_literal_expression)
        try:
            self.state = 2435
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [EParser.INTEGER_LITERAL]:
                localctx = EParser.JavascriptIntegerLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2430
                localctx.t = self.match(EParser.INTEGER_LITERAL)
                pass
            elif token in [EParser.DECIMAL_LITERAL]:
                localctx = EParser.JavascriptDecimalLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2431
                localctx.t = self.match(EParser.DECIMAL_LITERAL)
                pass
            elif token in [EParser.TEXT_LITERAL]:
                localctx = EParser.JavascriptTextLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 2432
                localctx.t = self.match(EParser.TEXT_LITERAL)
                pass
            elif token in [EParser.BOOLEAN_LITERAL]:
                localctx = EParser.JavascriptBooleanLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 2433
                localctx.t = self.match(EParser.BOOLEAN_LITERAL)
                pass
            elif token in [EParser.CHAR_LITERAL]:
                localctx = EParser.JavascriptCharacterLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 2434
                localctx.t = self.match(EParser.CHAR_LITERAL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Javascript_identifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VARIABLE_IDENTIFIER(self):
            return self.getToken(EParser.VARIABLE_IDENTIFIER, 0)

        def SYMBOL_IDENTIFIER(self):
            return self.getToken(EParser.SYMBOL_IDENTIFIER, 0)

        def DOLLAR_IDENTIFIER(self):
            return self.getToken(EParser.DOLLAR_IDENTIFIER, 0)

        def TYPE_IDENTIFIER(self):
            return self.getToken(EParser.TYPE_IDENTIFIER, 0)

        def BOOLEAN(self):
            return self.getToken(EParser.BOOLEAN, 0)

        def CHARACTER(self):
            return self.getToken(EParser.CHARACTER, 0)

        def TEXT(self):
            return self.getToken(EParser.TEXT, 0)

        def INTEGER(self):
            return self.getToken(EParser.INTEGER, 0)

        def DECIMAL(self):
            return self.getToken(EParser.DECIMAL, 0)

        def DATE(self):
            return self.getToken(EParser.DATE, 0)

        def TIME(self):
            return self.getToken(EParser.TIME, 0)

        def DATETIME(self):
            return self.getToken(EParser.DATETIME, 0)

        def PERIOD(self):
            return self.getToken(EParser.PERIOD, 0)

        def VERSION(self):
            return self.getToken(EParser.VERSION, 0)

        def UUID(self):
            return self.getToken(EParser.UUID, 0)

        def HTML(self):
            return self.getToken(EParser.HTML, 0)

        def READ(self):
            return self.getToken(EParser.READ, 0)

        def WRITE(self):
            return self.getToken(EParser.WRITE, 0)

        def TEST(self):
            return self.getToken(EParser.TEST, 0)

        def SELF(self):
            return self.getToken(EParser.SELF, 0)

        def NONE(self):
            return self.getToken(EParser.NONE, 0)

        def NULL(self):
            return self.getToken(EParser.NULL, 0)

        def getRuleIndex(self):
            return EParser.RULE_javascript_identifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJavascript_identifier" ):
                listener.enterJavascript_identifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJavascript_identifier" ):
                listener.exitJavascript_identifier(self)




    def javascript_identifier(self):

        localctx = EParser.Javascript_identifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 384, self.RULE_javascript_identifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2437
            _la = self._input.LA(1)
            if not(((((_la - 52)) & ~0x3f) == 0 and ((1 << (_la - 52)) & ((1 << (EParser.BOOLEAN - 52)) | (1 << (EParser.CHARACTER - 52)) | (1 << (EParser.TEXT - 52)) | (1 << (EParser.INTEGER - 52)) | (1 << (EParser.DECIMAL - 52)) | (1 << (EParser.DATE - 52)) | (1 << (EParser.TIME - 52)) | (1 << (EParser.DATETIME - 52)) | (1 << (EParser.PERIOD - 52)) | (1 << (EParser.VERSION - 52)) | (1 << (EParser.UUID - 52)) | (1 << (EParser.HTML - 52)))) != 0) or ((((_la - 125)) & ~0x3f) == 0 and ((1 << (_la - 125)) & ((1 << (EParser.NONE - 125)) | (1 << (EParser.NULL - 125)) | (1 << (EParser.READ - 125)) | (1 << (EParser.SELF - 125)) | (1 << (EParser.TEST - 125)) | (1 << (EParser.WRITE - 125)) | (1 << (EParser.SYMBOL_IDENTIFIER - 125)) | (1 << (EParser.TYPE_IDENTIFIER - 125)) | (1 << (EParser.VARIABLE_IDENTIFIER - 125)) | (1 << (EParser.DOLLAR_IDENTIFIER - 125)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Python_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return EParser.RULE_python_statement

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class PythonStatementContext(Python_statementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a EParser.Python_statementContext
            super().__init__(parser)
            self.exp = None # Python_expressionContext
            self.copyFrom(ctx)

        def python_expression(self):
            return self.getTypedRuleContext(EParser.Python_expressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPythonStatement" ):
                listener.enterPythonStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPythonStatement" ):
                listener.exitPythonStatement(self)


    class PythonReturnStatementContext(Python_statementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a EParser.Python_statementContext
            super().__init__(parser)
            self.exp = None # Python_expressionContext
            self.copyFrom(ctx)

        def RETURN(self):
            return self.getToken(EParser.RETURN, 0)
        def python_expression(self):
            return self.getTypedRuleContext(EParser.Python_expressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPythonReturnStatement" ):
                listener.enterPythonReturnStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPythonReturnStatement" ):
                listener.exitPythonReturnStatement(self)



    def python_statement(self):

        localctx = EParser.Python_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 386, self.RULE_python_statement)
        try:
            self.state = 2442
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [EParser.RETURN]:
                localctx = EParser.PythonReturnStatementContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2439
                self.match(EParser.RETURN)
                self.state = 2440
                localctx.exp = self.python_expression(0)
                pass
            elif token in [EParser.LPAR, EParser.BOOLEAN, EParser.CHARACTER, EParser.TEXT, EParser.INTEGER, EParser.DECIMAL, EParser.DATE, EParser.TIME, EParser.DATETIME, EParser.PERIOD, EParser.VERSION, EParser.UUID, EParser.HTML, EParser.NONE, EParser.NULL, EParser.READ, EParser.SELF, EParser.TEST, EParser.THIS, EParser.WRITE, EParser.BOOLEAN_LITERAL, EParser.CHAR_LITERAL, EParser.SYMBOL_IDENTIFIER, EParser.TYPE_IDENTIFIER, EParser.VARIABLE_IDENTIFIER, EParser.DOLLAR_IDENTIFIER, EParser.TEXT_LITERAL, EParser.INTEGER_LITERAL, EParser.DECIMAL_LITERAL]:
                localctx = EParser.PythonStatementContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2441
                localctx.exp = self.python_expression(0)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Python_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return EParser.RULE_python_expression

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class PythonSelectorExpressionContext(Python_expressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a EParser.Python_expressionContext
            super().__init__(parser)
            self.parent = None # Python_expressionContext
            self.child = None # Python_selector_expressionContext
            self.copyFrom(ctx)

        def python_expression(self):
            return self.getTypedRuleContext(EParser.Python_expressionContext,0)

        def python_selector_expression(self):
            return self.getTypedRuleContext(EParser.Python_selector_expressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPythonSelectorExpression" ):
                listener.enterPythonSelectorExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPythonSelectorExpression" ):
                listener.exitPythonSelectorExpression(self)


    class PythonPrimaryExpressionContext(Python_expressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a EParser.Python_expressionContext
            super().__init__(parser)
            self.exp = None # Python_primary_expressionContext
            self.copyFrom(ctx)

        def python_primary_expression(self):
            return self.getTypedRuleContext(EParser.Python_primary_expressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPythonPrimaryExpression" ):
                listener.enterPythonPrimaryExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPythonPrimaryExpression" ):
                listener.exitPythonPrimaryExpression(self)



    def python_expression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = EParser.Python_expressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 388
        self.enterRecursionRule(localctx, 388, self.RULE_python_expression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            localctx = EParser.PythonPrimaryExpressionContext(self, localctx)
            self._ctx = localctx
            _prevctx = localctx

            self.state = 2445
            localctx.exp = self.python_primary_expression()
            self._ctx.stop = self._input.LT(-1)
            self.state = 2451
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,206,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = EParser.PythonSelectorExpressionContext(self, EParser.Python_expressionContext(self, _parentctx, _parentState))
                    localctx.parent = _prevctx
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_python_expression)
                    self.state = 2447
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 2448
                    localctx.child = self.python_selector_expression() 
                self.state = 2453
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,206,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class Python_primary_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return EParser.RULE_python_primary_expression

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class PythonParenthesisExpressionContext(Python_primary_expressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a EParser.Python_primary_expressionContext
            super().__init__(parser)
            self.exp = None # Python_parenthesis_expressionContext
            self.copyFrom(ctx)

        def python_parenthesis_expression(self):
            return self.getTypedRuleContext(EParser.Python_parenthesis_expressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPythonParenthesisExpression" ):
                listener.enterPythonParenthesisExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPythonParenthesisExpression" ):
                listener.exitPythonParenthesisExpression(self)


    class PythonIdentifierExpressionContext(Python_primary_expressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a EParser.Python_primary_expressionContext
            super().__init__(parser)
            self.exp = None # Python_identifier_expressionContext
            self.copyFrom(ctx)

        def python_identifier_expression(self):
            return self.getTypedRuleContext(EParser.Python_identifier_expressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPythonIdentifierExpression" ):
                listener.enterPythonIdentifierExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPythonIdentifierExpression" ):
                listener.exitPythonIdentifierExpression(self)


    class PythonSelfExpressionContext(Python_primary_expressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a EParser.Python_primary_expressionContext
            super().__init__(parser)
            self.exp = None # Python_self_expressionContext
            self.copyFrom(ctx)

        def python_self_expression(self):
            return self.getTypedRuleContext(EParser.Python_self_expressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPythonSelfExpression" ):
                listener.enterPythonSelfExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPythonSelfExpression" ):
                listener.exitPythonSelfExpression(self)


    class PythonLiteralExpressionContext(Python_primary_expressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a EParser.Python_primary_expressionContext
            super().__init__(parser)
            self.exp = None # Python_literal_expressionContext
            self.copyFrom(ctx)

        def python_literal_expression(self):
            return self.getTypedRuleContext(EParser.Python_literal_expressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPythonLiteralExpression" ):
                listener.enterPythonLiteralExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPythonLiteralExpression" ):
                listener.exitPythonLiteralExpression(self)


    class PythonGlobalMethodExpressionContext(Python_primary_expressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a EParser.Python_primary_expressionContext
            super().__init__(parser)
            self.exp = None # Python_method_expressionContext
            self.copyFrom(ctx)

        def python_method_expression(self):
            return self.getTypedRuleContext(EParser.Python_method_expressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPythonGlobalMethodExpression" ):
                listener.enterPythonGlobalMethodExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPythonGlobalMethodExpression" ):
                listener.exitPythonGlobalMethodExpression(self)



    def python_primary_expression(self):

        localctx = EParser.Python_primary_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 390, self.RULE_python_primary_expression)
        try:
            self.state = 2459
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,207,self._ctx)
            if la_ == 1:
                localctx = EParser.PythonSelfExpressionContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2454
                localctx.exp = self.python_self_expression()
                pass

            elif la_ == 2:
                localctx = EParser.PythonParenthesisExpressionContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2455
                localctx.exp = self.python_parenthesis_expression()
                pass

            elif la_ == 3:
                localctx = EParser.PythonIdentifierExpressionContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 2456
                localctx.exp = self.python_identifier_expression(0)
                pass

            elif la_ == 4:
                localctx = EParser.PythonLiteralExpressionContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 2457
                localctx.exp = self.python_literal_expression()
                pass

            elif la_ == 5:
                localctx = EParser.PythonGlobalMethodExpressionContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 2458
                localctx.exp = self.python_method_expression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Python_self_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def this_expression(self):
            return self.getTypedRuleContext(EParser.This_expressionContext,0)


        def getRuleIndex(self):
            return EParser.RULE_python_self_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPython_self_expression" ):
                listener.enterPython_self_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPython_self_expression" ):
                listener.exitPython_self_expression(self)




    def python_self_expression(self):

        localctx = EParser.Python_self_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 392, self.RULE_python_self_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2461
            self.this_expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Python_selector_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return EParser.RULE_python_selector_expression

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class PythonMethodExpressionContext(Python_selector_expressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a EParser.Python_selector_expressionContext
            super().__init__(parser)
            self.exp = None # Python_method_expressionContext
            self.copyFrom(ctx)

        def DOT(self):
            return self.getToken(EParser.DOT, 0)
        def python_method_expression(self):
            return self.getTypedRuleContext(EParser.Python_method_expressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPythonMethodExpression" ):
                listener.enterPythonMethodExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPythonMethodExpression" ):
                listener.exitPythonMethodExpression(self)


    class PythonItemExpressionContext(Python_selector_expressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a EParser.Python_selector_expressionContext
            super().__init__(parser)
            self.exp = None # Python_expressionContext
            self.copyFrom(ctx)

        def LBRAK(self):
            return self.getToken(EParser.LBRAK, 0)
        def RBRAK(self):
            return self.getToken(EParser.RBRAK, 0)
        def python_expression(self):
            return self.getTypedRuleContext(EParser.Python_expressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPythonItemExpression" ):
                listener.enterPythonItemExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPythonItemExpression" ):
                listener.exitPythonItemExpression(self)



    def python_selector_expression(self):

        localctx = EParser.Python_selector_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 394, self.RULE_python_selector_expression)
        try:
            self.state = 2469
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [EParser.DOT]:
                localctx = EParser.PythonMethodExpressionContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2463
                self.match(EParser.DOT)
                self.state = 2464
                localctx.exp = self.python_method_expression()
                pass
            elif token in [EParser.LBRAK]:
                localctx = EParser.PythonItemExpressionContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2465
                self.match(EParser.LBRAK)
                self.state = 2466
                localctx.exp = self.python_expression(0)
                self.state = 2467
                self.match(EParser.RBRAK)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Python_method_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # Python_identifierContext
            self.args = None # Python_argument_listContext

        def LPAR(self):
            return self.getToken(EParser.LPAR, 0)

        def RPAR(self):
            return self.getToken(EParser.RPAR, 0)

        def python_identifier(self):
            return self.getTypedRuleContext(EParser.Python_identifierContext,0)


        def python_argument_list(self):
            return self.getTypedRuleContext(EParser.Python_argument_listContext,0)


        def getRuleIndex(self):
            return EParser.RULE_python_method_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPython_method_expression" ):
                listener.enterPython_method_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPython_method_expression" ):
                listener.exitPython_method_expression(self)




    def python_method_expression(self):

        localctx = EParser.Python_method_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 396, self.RULE_python_method_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2471
            localctx.name = self.python_identifier()
            self.state = 2472
            self.match(EParser.LPAR)
            self.state = 2474
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 20)) & ~0x3f) == 0 and ((1 << (_la - 20)) & ((1 << (EParser.LPAR - 20)) | (1 << (EParser.BOOLEAN - 20)) | (1 << (EParser.CHARACTER - 20)) | (1 << (EParser.TEXT - 20)) | (1 << (EParser.INTEGER - 20)) | (1 << (EParser.DECIMAL - 20)) | (1 << (EParser.DATE - 20)) | (1 << (EParser.TIME - 20)) | (1 << (EParser.DATETIME - 20)) | (1 << (EParser.PERIOD - 20)) | (1 << (EParser.VERSION - 20)) | (1 << (EParser.UUID - 20)) | (1 << (EParser.HTML - 20)))) != 0) or ((((_la - 125)) & ~0x3f) == 0 and ((1 << (_la - 125)) & ((1 << (EParser.NONE - 125)) | (1 << (EParser.NULL - 125)) | (1 << (EParser.READ - 125)) | (1 << (EParser.SELF - 125)) | (1 << (EParser.TEST - 125)) | (1 << (EParser.THIS - 125)) | (1 << (EParser.WRITE - 125)) | (1 << (EParser.BOOLEAN_LITERAL - 125)) | (1 << (EParser.CHAR_LITERAL - 125)) | (1 << (EParser.SYMBOL_IDENTIFIER - 125)) | (1 << (EParser.TYPE_IDENTIFIER - 125)) | (1 << (EParser.VARIABLE_IDENTIFIER - 125)) | (1 << (EParser.DOLLAR_IDENTIFIER - 125)) | (1 << (EParser.TEXT_LITERAL - 125)) | (1 << (EParser.INTEGER_LITERAL - 125)) | (1 << (EParser.DECIMAL_LITERAL - 125)))) != 0):
                self.state = 2473
                localctx.args = self.python_argument_list()


            self.state = 2476
            self.match(EParser.RPAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Python_argument_listContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return EParser.RULE_python_argument_list

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class PythonOrdinalOnlyArgumentListContext(Python_argument_listContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a EParser.Python_argument_listContext
            super().__init__(parser)
            self.ordinal = None # Python_ordinal_argument_listContext
            self.copyFrom(ctx)

        def python_ordinal_argument_list(self):
            return self.getTypedRuleContext(EParser.Python_ordinal_argument_listContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPythonOrdinalOnlyArgumentList" ):
                listener.enterPythonOrdinalOnlyArgumentList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPythonOrdinalOnlyArgumentList" ):
                listener.exitPythonOrdinalOnlyArgumentList(self)


    class PythonNamedOnlyArgumentListContext(Python_argument_listContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a EParser.Python_argument_listContext
            super().__init__(parser)
            self.named = None # Python_named_argument_listContext
            self.copyFrom(ctx)

        def python_named_argument_list(self):
            return self.getTypedRuleContext(EParser.Python_named_argument_listContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPythonNamedOnlyArgumentList" ):
                listener.enterPythonNamedOnlyArgumentList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPythonNamedOnlyArgumentList" ):
                listener.exitPythonNamedOnlyArgumentList(self)


    class PythonArgumentListContext(Python_argument_listContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a EParser.Python_argument_listContext
            super().__init__(parser)
            self.ordinal = None # Python_ordinal_argument_listContext
            self.named = None # Python_named_argument_listContext
            self.copyFrom(ctx)

        def COMMA(self):
            return self.getToken(EParser.COMMA, 0)
        def python_ordinal_argument_list(self):
            return self.getTypedRuleContext(EParser.Python_ordinal_argument_listContext,0)

        def python_named_argument_list(self):
            return self.getTypedRuleContext(EParser.Python_named_argument_listContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPythonArgumentList" ):
                listener.enterPythonArgumentList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPythonArgumentList" ):
                listener.exitPythonArgumentList(self)



    def python_argument_list(self):

        localctx = EParser.Python_argument_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 398, self.RULE_python_argument_list)
        try:
            self.state = 2484
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,210,self._ctx)
            if la_ == 1:
                localctx = EParser.PythonOrdinalOnlyArgumentListContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2478
                localctx.ordinal = self.python_ordinal_argument_list(0)
                pass

            elif la_ == 2:
                localctx = EParser.PythonNamedOnlyArgumentListContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2479
                localctx.named = self.python_named_argument_list(0)
                pass

            elif la_ == 3:
                localctx = EParser.PythonArgumentListContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 2480
                localctx.ordinal = self.python_ordinal_argument_list(0)
                self.state = 2481
                self.match(EParser.COMMA)
                self.state = 2482
                localctx.named = self.python_named_argument_list(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Python_ordinal_argument_listContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return EParser.RULE_python_ordinal_argument_list

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class PythonOrdinalArgumentListContext(Python_ordinal_argument_listContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a EParser.Python_ordinal_argument_listContext
            super().__init__(parser)
            self.item = None # Python_expressionContext
            self.copyFrom(ctx)

        def python_expression(self):
            return self.getTypedRuleContext(EParser.Python_expressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPythonOrdinalArgumentList" ):
                listener.enterPythonOrdinalArgumentList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPythonOrdinalArgumentList" ):
                listener.exitPythonOrdinalArgumentList(self)


    class PythonOrdinalArgumentListItemContext(Python_ordinal_argument_listContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a EParser.Python_ordinal_argument_listContext
            super().__init__(parser)
            self.items = None # Python_ordinal_argument_listContext
            self.item = None # Python_expressionContext
            self.copyFrom(ctx)

        def COMMA(self):
            return self.getToken(EParser.COMMA, 0)
        def python_ordinal_argument_list(self):
            return self.getTypedRuleContext(EParser.Python_ordinal_argument_listContext,0)

        def python_expression(self):
            return self.getTypedRuleContext(EParser.Python_expressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPythonOrdinalArgumentListItem" ):
                listener.enterPythonOrdinalArgumentListItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPythonOrdinalArgumentListItem" ):
                listener.exitPythonOrdinalArgumentListItem(self)



    def python_ordinal_argument_list(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = EParser.Python_ordinal_argument_listContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 400
        self.enterRecursionRule(localctx, 400, self.RULE_python_ordinal_argument_list, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            localctx = EParser.PythonOrdinalArgumentListContext(self, localctx)
            self._ctx = localctx
            _prevctx = localctx

            self.state = 2487
            localctx.item = self.python_expression(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 2494
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,211,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = EParser.PythonOrdinalArgumentListItemContext(self, EParser.Python_ordinal_argument_listContext(self, _parentctx, _parentState))
                    localctx.items = _prevctx
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_python_ordinal_argument_list)
                    self.state = 2489
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 2490
                    self.match(EParser.COMMA)
                    self.state = 2491
                    localctx.item = self.python_expression(0) 
                self.state = 2496
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,211,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class Python_named_argument_listContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return EParser.RULE_python_named_argument_list

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class PythonNamedArgumentListContext(Python_named_argument_listContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a EParser.Python_named_argument_listContext
            super().__init__(parser)
            self.name = None # Python_identifierContext
            self.exp = None # Python_expressionContext
            self.copyFrom(ctx)

        def EQ(self):
            return self.getToken(EParser.EQ, 0)
        def python_identifier(self):
            return self.getTypedRuleContext(EParser.Python_identifierContext,0)

        def python_expression(self):
            return self.getTypedRuleContext(EParser.Python_expressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPythonNamedArgumentList" ):
                listener.enterPythonNamedArgumentList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPythonNamedArgumentList" ):
                listener.exitPythonNamedArgumentList(self)


    class PythonNamedArgumentListItemContext(Python_named_argument_listContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a EParser.Python_named_argument_listContext
            super().__init__(parser)
            self.items = None # Python_named_argument_listContext
            self.name = None # Python_identifierContext
            self.exp = None # Python_expressionContext
            self.copyFrom(ctx)

        def COMMA(self):
            return self.getToken(EParser.COMMA, 0)
        def EQ(self):
            return self.getToken(EParser.EQ, 0)
        def python_named_argument_list(self):
            return self.getTypedRuleContext(EParser.Python_named_argument_listContext,0)

        def python_identifier(self):
            return self.getTypedRuleContext(EParser.Python_identifierContext,0)

        def python_expression(self):
            return self.getTypedRuleContext(EParser.Python_expressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPythonNamedArgumentListItem" ):
                listener.enterPythonNamedArgumentListItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPythonNamedArgumentListItem" ):
                listener.exitPythonNamedArgumentListItem(self)



    def python_named_argument_list(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = EParser.Python_named_argument_listContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 402
        self.enterRecursionRule(localctx, 402, self.RULE_python_named_argument_list, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            localctx = EParser.PythonNamedArgumentListContext(self, localctx)
            self._ctx = localctx
            _prevctx = localctx

            self.state = 2498
            localctx.name = self.python_identifier()
            self.state = 2499
            self.match(EParser.EQ)
            self.state = 2500
            localctx.exp = self.python_expression(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 2510
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,212,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = EParser.PythonNamedArgumentListItemContext(self, EParser.Python_named_argument_listContext(self, _parentctx, _parentState))
                    localctx.items = _prevctx
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_python_named_argument_list)
                    self.state = 2502
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 2503
                    self.match(EParser.COMMA)
                    self.state = 2504
                    localctx.name = self.python_identifier()
                    self.state = 2505
                    self.match(EParser.EQ)
                    self.state = 2506
                    localctx.exp = self.python_expression(0) 
                self.state = 2512
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,212,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class Python_parenthesis_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.exp = None # Python_expressionContext

        def LPAR(self):
            return self.getToken(EParser.LPAR, 0)

        def RPAR(self):
            return self.getToken(EParser.RPAR, 0)

        def python_expression(self):
            return self.getTypedRuleContext(EParser.Python_expressionContext,0)


        def getRuleIndex(self):
            return EParser.RULE_python_parenthesis_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPython_parenthesis_expression" ):
                listener.enterPython_parenthesis_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPython_parenthesis_expression" ):
                listener.exitPython_parenthesis_expression(self)




    def python_parenthesis_expression(self):

        localctx = EParser.Python_parenthesis_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 404, self.RULE_python_parenthesis_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2513
            self.match(EParser.LPAR)
            self.state = 2514
            localctx.exp = self.python_expression(0)
            self.state = 2515
            self.match(EParser.RPAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Python_identifier_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return EParser.RULE_python_identifier_expression

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class PythonChildIdentifierContext(Python_identifier_expressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a EParser.Python_identifier_expressionContext
            super().__init__(parser)
            self.parent = None # Python_identifier_expressionContext
            self.name = None # Python_identifierContext
            self.copyFrom(ctx)

        def DOT(self):
            return self.getToken(EParser.DOT, 0)
        def python_identifier_expression(self):
            return self.getTypedRuleContext(EParser.Python_identifier_expressionContext,0)

        def python_identifier(self):
            return self.getTypedRuleContext(EParser.Python_identifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPythonChildIdentifier" ):
                listener.enterPythonChildIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPythonChildIdentifier" ):
                listener.exitPythonChildIdentifier(self)


    class PythonPromptoIdentifierContext(Python_identifier_expressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a EParser.Python_identifier_expressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DOLLAR_IDENTIFIER(self):
            return self.getToken(EParser.DOLLAR_IDENTIFIER, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPythonPromptoIdentifier" ):
                listener.enterPythonPromptoIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPythonPromptoIdentifier" ):
                listener.exitPythonPromptoIdentifier(self)


    class PythonIdentifierContext(Python_identifier_expressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a EParser.Python_identifier_expressionContext
            super().__init__(parser)
            self.name = None # Python_identifierContext
            self.copyFrom(ctx)

        def python_identifier(self):
            return self.getTypedRuleContext(EParser.Python_identifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPythonIdentifier" ):
                listener.enterPythonIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPythonIdentifier" ):
                listener.exitPythonIdentifier(self)



    def python_identifier_expression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = EParser.Python_identifier_expressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 406
        self.enterRecursionRule(localctx, 406, self.RULE_python_identifier_expression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2520
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [EParser.DOLLAR_IDENTIFIER]:
                localctx = EParser.PythonPromptoIdentifierContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx

                self.state = 2518
                self.match(EParser.DOLLAR_IDENTIFIER)
                pass
            elif token in [EParser.BOOLEAN, EParser.CHARACTER, EParser.TEXT, EParser.INTEGER, EParser.DECIMAL, EParser.DATE, EParser.TIME, EParser.DATETIME, EParser.PERIOD, EParser.VERSION, EParser.UUID, EParser.HTML, EParser.NONE, EParser.NULL, EParser.READ, EParser.TEST, EParser.THIS, EParser.WRITE, EParser.SYMBOL_IDENTIFIER, EParser.TYPE_IDENTIFIER, EParser.VARIABLE_IDENTIFIER]:
                localctx = EParser.PythonIdentifierContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2519
                localctx.name = self.python_identifier()
                pass
            else:
                raise NoViableAltException(self)

            self._ctx.stop = self._input.LT(-1)
            self.state = 2527
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,214,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = EParser.PythonChildIdentifierContext(self, EParser.Python_identifier_expressionContext(self, _parentctx, _parentState))
                    localctx.parent = _prevctx
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_python_identifier_expression)
                    self.state = 2522
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 2523
                    self.match(EParser.DOT)
                    self.state = 2524
                    localctx.name = self.python_identifier() 
                self.state = 2529
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,214,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class Python_literal_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return EParser.RULE_python_literal_expression

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class PythonIntegerLiteralContext(Python_literal_expressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a EParser.Python_literal_expressionContext
            super().__init__(parser)
            self.t = None # Token
            self.copyFrom(ctx)

        def INTEGER_LITERAL(self):
            return self.getToken(EParser.INTEGER_LITERAL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPythonIntegerLiteral" ):
                listener.enterPythonIntegerLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPythonIntegerLiteral" ):
                listener.exitPythonIntegerLiteral(self)


    class PythonBooleanLiteralContext(Python_literal_expressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a EParser.Python_literal_expressionContext
            super().__init__(parser)
            self.t = None # Token
            self.copyFrom(ctx)

        def BOOLEAN_LITERAL(self):
            return self.getToken(EParser.BOOLEAN_LITERAL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPythonBooleanLiteral" ):
                listener.enterPythonBooleanLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPythonBooleanLiteral" ):
                listener.exitPythonBooleanLiteral(self)


    class PythonCharacterLiteralContext(Python_literal_expressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a EParser.Python_literal_expressionContext
            super().__init__(parser)
            self.t = None # Token
            self.copyFrom(ctx)

        def CHAR_LITERAL(self):
            return self.getToken(EParser.CHAR_LITERAL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPythonCharacterLiteral" ):
                listener.enterPythonCharacterLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPythonCharacterLiteral" ):
                listener.exitPythonCharacterLiteral(self)


    class PythonTextLiteralContext(Python_literal_expressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a EParser.Python_literal_expressionContext
            super().__init__(parser)
            self.t = None # Token
            self.copyFrom(ctx)

        def TEXT_LITERAL(self):
            return self.getToken(EParser.TEXT_LITERAL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPythonTextLiteral" ):
                listener.enterPythonTextLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPythonTextLiteral" ):
                listener.exitPythonTextLiteral(self)


    class PythonDecimalLiteralContext(Python_literal_expressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a EParser.Python_literal_expressionContext
            super().__init__(parser)
            self.t = None # Token
            self.copyFrom(ctx)

        def DECIMAL_LITERAL(self):
            return self.getToken(EParser.DECIMAL_LITERAL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPythonDecimalLiteral" ):
                listener.enterPythonDecimalLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPythonDecimalLiteral" ):
                listener.exitPythonDecimalLiteral(self)



    def python_literal_expression(self):

        localctx = EParser.Python_literal_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 408, self.RULE_python_literal_expression)
        try:
            self.state = 2535
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [EParser.INTEGER_LITERAL]:
                localctx = EParser.PythonIntegerLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2530
                localctx.t = self.match(EParser.INTEGER_LITERAL)
                pass
            elif token in [EParser.DECIMAL_LITERAL]:
                localctx = EParser.PythonDecimalLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2531
                localctx.t = self.match(EParser.DECIMAL_LITERAL)
                pass
            elif token in [EParser.TEXT_LITERAL]:
                localctx = EParser.PythonTextLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 2532
                localctx.t = self.match(EParser.TEXT_LITERAL)
                pass
            elif token in [EParser.BOOLEAN_LITERAL]:
                localctx = EParser.PythonBooleanLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 2533
                localctx.t = self.match(EParser.BOOLEAN_LITERAL)
                pass
            elif token in [EParser.CHAR_LITERAL]:
                localctx = EParser.PythonCharacterLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 2534
                localctx.t = self.match(EParser.CHAR_LITERAL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Python_identifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VARIABLE_IDENTIFIER(self):
            return self.getToken(EParser.VARIABLE_IDENTIFIER, 0)

        def SYMBOL_IDENTIFIER(self):
            return self.getToken(EParser.SYMBOL_IDENTIFIER, 0)

        def TYPE_IDENTIFIER(self):
            return self.getToken(EParser.TYPE_IDENTIFIER, 0)

        def BOOLEAN(self):
            return self.getToken(EParser.BOOLEAN, 0)

        def CHARACTER(self):
            return self.getToken(EParser.CHARACTER, 0)

        def TEXT(self):
            return self.getToken(EParser.TEXT, 0)

        def INTEGER(self):
            return self.getToken(EParser.INTEGER, 0)

        def DECIMAL(self):
            return self.getToken(EParser.DECIMAL, 0)

        def DATE(self):
            return self.getToken(EParser.DATE, 0)

        def TIME(self):
            return self.getToken(EParser.TIME, 0)

        def DATETIME(self):
            return self.getToken(EParser.DATETIME, 0)

        def PERIOD(self):
            return self.getToken(EParser.PERIOD, 0)

        def VERSION(self):
            return self.getToken(EParser.VERSION, 0)

        def UUID(self):
            return self.getToken(EParser.UUID, 0)

        def HTML(self):
            return self.getToken(EParser.HTML, 0)

        def READ(self):
            return self.getToken(EParser.READ, 0)

        def WRITE(self):
            return self.getToken(EParser.WRITE, 0)

        def TEST(self):
            return self.getToken(EParser.TEST, 0)

        def THIS(self):
            return self.getToken(EParser.THIS, 0)

        def NONE(self):
            return self.getToken(EParser.NONE, 0)

        def NULL(self):
            return self.getToken(EParser.NULL, 0)

        def getRuleIndex(self):
            return EParser.RULE_python_identifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPython_identifier" ):
                listener.enterPython_identifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPython_identifier" ):
                listener.exitPython_identifier(self)




    def python_identifier(self):

        localctx = EParser.Python_identifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 410, self.RULE_python_identifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2537
            _la = self._input.LA(1)
            if not(((((_la - 52)) & ~0x3f) == 0 and ((1 << (_la - 52)) & ((1 << (EParser.BOOLEAN - 52)) | (1 << (EParser.CHARACTER - 52)) | (1 << (EParser.TEXT - 52)) | (1 << (EParser.INTEGER - 52)) | (1 << (EParser.DECIMAL - 52)) | (1 << (EParser.DATE - 52)) | (1 << (EParser.TIME - 52)) | (1 << (EParser.DATETIME - 52)) | (1 << (EParser.PERIOD - 52)) | (1 << (EParser.VERSION - 52)) | (1 << (EParser.UUID - 52)) | (1 << (EParser.HTML - 52)))) != 0) or ((((_la - 125)) & ~0x3f) == 0 and ((1 << (_la - 125)) & ((1 << (EParser.NONE - 125)) | (1 << (EParser.NULL - 125)) | (1 << (EParser.READ - 125)) | (1 << (EParser.TEST - 125)) | (1 << (EParser.THIS - 125)) | (1 << (EParser.WRITE - 125)) | (1 << (EParser.SYMBOL_IDENTIFIER - 125)) | (1 << (EParser.TYPE_IDENTIFIER - 125)) | (1 << (EParser.VARIABLE_IDENTIFIER - 125)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Java_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return EParser.RULE_java_statement

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class JavaReturnStatementContext(Java_statementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a EParser.Java_statementContext
            super().__init__(parser)
            self.exp = None # Java_expressionContext
            self.copyFrom(ctx)

        def RETURN(self):
            return self.getToken(EParser.RETURN, 0)
        def SEMI(self):
            return self.getToken(EParser.SEMI, 0)
        def java_expression(self):
            return self.getTypedRuleContext(EParser.Java_expressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJavaReturnStatement" ):
                listener.enterJavaReturnStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJavaReturnStatement" ):
                listener.exitJavaReturnStatement(self)


    class JavaStatementContext(Java_statementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a EParser.Java_statementContext
            super().__init__(parser)
            self.exp = None # Java_expressionContext
            self.copyFrom(ctx)

        def SEMI(self):
            return self.getToken(EParser.SEMI, 0)
        def java_expression(self):
            return self.getTypedRuleContext(EParser.Java_expressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJavaStatement" ):
                listener.enterJavaStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJavaStatement" ):
                listener.exitJavaStatement(self)



    def java_statement(self):

        localctx = EParser.Java_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 412, self.RULE_java_statement)
        try:
            self.state = 2546
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [EParser.RETURN]:
                localctx = EParser.JavaReturnStatementContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2539
                self.match(EParser.RETURN)
                self.state = 2540
                localctx.exp = self.java_expression(0)
                self.state = 2541
                self.match(EParser.SEMI)
                pass
            elif token in [EParser.LPAR, EParser.BOOLEAN, EParser.CHARACTER, EParser.TEXT, EParser.INTEGER, EParser.DECIMAL, EParser.DATE, EParser.TIME, EParser.DATETIME, EParser.PERIOD, EParser.VERSION, EParser.UUID, EParser.HTML, EParser.NONE, EParser.NULL, EParser.READ, EParser.SELF, EParser.TEST, EParser.THIS, EParser.WRITE, EParser.BOOLEAN_LITERAL, EParser.CHAR_LITERAL, EParser.SYMBOL_IDENTIFIER, EParser.TYPE_IDENTIFIER, EParser.VARIABLE_IDENTIFIER, EParser.NATIVE_IDENTIFIER, EParser.DOLLAR_IDENTIFIER, EParser.TEXT_LITERAL, EParser.INTEGER_LITERAL, EParser.DECIMAL_LITERAL]:
                localctx = EParser.JavaStatementContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2543
                localctx.exp = self.java_expression(0)
                self.state = 2544
                self.match(EParser.SEMI)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Java_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return EParser.RULE_java_expression

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class JavaSelectorExpressionContext(Java_expressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a EParser.Java_expressionContext
            super().__init__(parser)
            self.parent = None # Java_expressionContext
            self.child = None # Java_selector_expressionContext
            self.copyFrom(ctx)

        def java_expression(self):
            return self.getTypedRuleContext(EParser.Java_expressionContext,0)

        def java_selector_expression(self):
            return self.getTypedRuleContext(EParser.Java_selector_expressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJavaSelectorExpression" ):
                listener.enterJavaSelectorExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJavaSelectorExpression" ):
                listener.exitJavaSelectorExpression(self)


    class JavaPrimaryExpressionContext(Java_expressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a EParser.Java_expressionContext
            super().__init__(parser)
            self.exp = None # Java_primary_expressionContext
            self.copyFrom(ctx)

        def java_primary_expression(self):
            return self.getTypedRuleContext(EParser.Java_primary_expressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJavaPrimaryExpression" ):
                listener.enterJavaPrimaryExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJavaPrimaryExpression" ):
                listener.exitJavaPrimaryExpression(self)



    def java_expression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = EParser.Java_expressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 414
        self.enterRecursionRule(localctx, 414, self.RULE_java_expression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            localctx = EParser.JavaPrimaryExpressionContext(self, localctx)
            self._ctx = localctx
            _prevctx = localctx

            self.state = 2549
            localctx.exp = self.java_primary_expression()
            self._ctx.stop = self._input.LT(-1)
            self.state = 2555
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,217,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = EParser.JavaSelectorExpressionContext(self, EParser.Java_expressionContext(self, _parentctx, _parentState))
                    localctx.parent = _prevctx
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_java_expression)
                    self.state = 2551
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 2552
                    localctx.child = self.java_selector_expression() 
                self.state = 2557
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,217,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class Java_primary_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def java_this_expression(self):
            return self.getTypedRuleContext(EParser.Java_this_expressionContext,0)


        def java_new_expression(self):
            return self.getTypedRuleContext(EParser.Java_new_expressionContext,0)


        def java_parenthesis_expression(self):
            return self.getTypedRuleContext(EParser.Java_parenthesis_expressionContext,0)


        def java_identifier_expression(self):
            return self.getTypedRuleContext(EParser.Java_identifier_expressionContext,0)


        def java_literal_expression(self):
            return self.getTypedRuleContext(EParser.Java_literal_expressionContext,0)


        def getRuleIndex(self):
            return EParser.RULE_java_primary_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJava_primary_expression" ):
                listener.enterJava_primary_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJava_primary_expression" ):
                listener.exitJava_primary_expression(self)




    def java_primary_expression(self):

        localctx = EParser.Java_primary_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 416, self.RULE_java_primary_expression)
        try:
            self.state = 2563
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,218,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2558
                self.java_this_expression()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2559
                self.java_new_expression()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2560
                self.java_parenthesis_expression()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2561
                self.java_identifier_expression(0)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 2562
                self.java_literal_expression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Java_this_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def this_expression(self):
            return self.getTypedRuleContext(EParser.This_expressionContext,0)


        def getRuleIndex(self):
            return EParser.RULE_java_this_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJava_this_expression" ):
                listener.enterJava_this_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJava_this_expression" ):
                listener.exitJava_this_expression(self)




    def java_this_expression(self):

        localctx = EParser.Java_this_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 418, self.RULE_java_this_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2565
            self.this_expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Java_new_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def new_token(self):
            return self.getTypedRuleContext(EParser.New_tokenContext,0)


        def java_method_expression(self):
            return self.getTypedRuleContext(EParser.Java_method_expressionContext,0)


        def getRuleIndex(self):
            return EParser.RULE_java_new_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJava_new_expression" ):
                listener.enterJava_new_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJava_new_expression" ):
                listener.exitJava_new_expression(self)




    def java_new_expression(self):

        localctx = EParser.Java_new_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 420, self.RULE_java_new_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2567
            self.new_token()
            self.state = 2568
            self.java_method_expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Java_selector_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return EParser.RULE_java_selector_expression

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class JavaItemExpressionContext(Java_selector_expressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a EParser.Java_selector_expressionContext
            super().__init__(parser)
            self.exp = None # Java_item_expressionContext
            self.copyFrom(ctx)

        def java_item_expression(self):
            return self.getTypedRuleContext(EParser.Java_item_expressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJavaItemExpression" ):
                listener.enterJavaItemExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJavaItemExpression" ):
                listener.exitJavaItemExpression(self)


    class JavaMethodExpressionContext(Java_selector_expressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a EParser.Java_selector_expressionContext
            super().__init__(parser)
            self.exp = None # Java_method_expressionContext
            self.copyFrom(ctx)

        def DOT(self):
            return self.getToken(EParser.DOT, 0)
        def java_method_expression(self):
            return self.getTypedRuleContext(EParser.Java_method_expressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJavaMethodExpression" ):
                listener.enterJavaMethodExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJavaMethodExpression" ):
                listener.exitJavaMethodExpression(self)



    def java_selector_expression(self):

        localctx = EParser.Java_selector_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 422, self.RULE_java_selector_expression)
        try:
            self.state = 2573
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [EParser.DOT]:
                localctx = EParser.JavaMethodExpressionContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2570
                self.match(EParser.DOT)
                self.state = 2571
                localctx.exp = self.java_method_expression()
                pass
            elif token in [EParser.LBRAK]:
                localctx = EParser.JavaItemExpressionContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2572
                localctx.exp = self.java_item_expression()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Java_method_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # Java_identifierContext
            self.args = None # Java_argumentsContext

        def LPAR(self):
            return self.getToken(EParser.LPAR, 0)

        def RPAR(self):
            return self.getToken(EParser.RPAR, 0)

        def java_identifier(self):
            return self.getTypedRuleContext(EParser.Java_identifierContext,0)


        def java_arguments(self):
            return self.getTypedRuleContext(EParser.Java_argumentsContext,0)


        def getRuleIndex(self):
            return EParser.RULE_java_method_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJava_method_expression" ):
                listener.enterJava_method_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJava_method_expression" ):
                listener.exitJava_method_expression(self)




    def java_method_expression(self):

        localctx = EParser.Java_method_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 424, self.RULE_java_method_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2575
            localctx.name = self.java_identifier()
            self.state = 2576
            self.match(EParser.LPAR)
            self.state = 2578
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 20)) & ~0x3f) == 0 and ((1 << (_la - 20)) & ((1 << (EParser.LPAR - 20)) | (1 << (EParser.BOOLEAN - 20)) | (1 << (EParser.CHARACTER - 20)) | (1 << (EParser.TEXT - 20)) | (1 << (EParser.INTEGER - 20)) | (1 << (EParser.DECIMAL - 20)) | (1 << (EParser.DATE - 20)) | (1 << (EParser.TIME - 20)) | (1 << (EParser.DATETIME - 20)) | (1 << (EParser.PERIOD - 20)) | (1 << (EParser.VERSION - 20)) | (1 << (EParser.UUID - 20)) | (1 << (EParser.HTML - 20)))) != 0) or ((((_la - 125)) & ~0x3f) == 0 and ((1 << (_la - 125)) & ((1 << (EParser.NONE - 125)) | (1 << (EParser.NULL - 125)) | (1 << (EParser.READ - 125)) | (1 << (EParser.SELF - 125)) | (1 << (EParser.TEST - 125)) | (1 << (EParser.THIS - 125)) | (1 << (EParser.WRITE - 125)) | (1 << (EParser.BOOLEAN_LITERAL - 125)) | (1 << (EParser.CHAR_LITERAL - 125)) | (1 << (EParser.SYMBOL_IDENTIFIER - 125)) | (1 << (EParser.TYPE_IDENTIFIER - 125)) | (1 << (EParser.VARIABLE_IDENTIFIER - 125)) | (1 << (EParser.NATIVE_IDENTIFIER - 125)) | (1 << (EParser.DOLLAR_IDENTIFIER - 125)) | (1 << (EParser.TEXT_LITERAL - 125)) | (1 << (EParser.INTEGER_LITERAL - 125)) | (1 << (EParser.DECIMAL_LITERAL - 125)))) != 0):
                self.state = 2577
                localctx.args = self.java_arguments(0)


            self.state = 2580
            self.match(EParser.RPAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Java_argumentsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return EParser.RULE_java_arguments

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class JavaArgumentListItemContext(Java_argumentsContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a EParser.Java_argumentsContext
            super().__init__(parser)
            self.items = None # Java_argumentsContext
            self.item = None # Java_expressionContext
            self.copyFrom(ctx)

        def COMMA(self):
            return self.getToken(EParser.COMMA, 0)
        def java_arguments(self):
            return self.getTypedRuleContext(EParser.Java_argumentsContext,0)

        def java_expression(self):
            return self.getTypedRuleContext(EParser.Java_expressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJavaArgumentListItem" ):
                listener.enterJavaArgumentListItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJavaArgumentListItem" ):
                listener.exitJavaArgumentListItem(self)


    class JavaArgumentListContext(Java_argumentsContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a EParser.Java_argumentsContext
            super().__init__(parser)
            self.item = None # Java_expressionContext
            self.copyFrom(ctx)

        def java_expression(self):
            return self.getTypedRuleContext(EParser.Java_expressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJavaArgumentList" ):
                listener.enterJavaArgumentList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJavaArgumentList" ):
                listener.exitJavaArgumentList(self)



    def java_arguments(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = EParser.Java_argumentsContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 426
        self.enterRecursionRule(localctx, 426, self.RULE_java_arguments, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            localctx = EParser.JavaArgumentListContext(self, localctx)
            self._ctx = localctx
            _prevctx = localctx

            self.state = 2583
            localctx.item = self.java_expression(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 2590
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,221,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = EParser.JavaArgumentListItemContext(self, EParser.Java_argumentsContext(self, _parentctx, _parentState))
                    localctx.items = _prevctx
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_java_arguments)
                    self.state = 2585
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 2586
                    self.match(EParser.COMMA)
                    self.state = 2587
                    localctx.item = self.java_expression(0) 
                self.state = 2592
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,221,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class Java_item_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.exp = None # Java_expressionContext

        def LBRAK(self):
            return self.getToken(EParser.LBRAK, 0)

        def RBRAK(self):
            return self.getToken(EParser.RBRAK, 0)

        def java_expression(self):
            return self.getTypedRuleContext(EParser.Java_expressionContext,0)


        def getRuleIndex(self):
            return EParser.RULE_java_item_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJava_item_expression" ):
                listener.enterJava_item_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJava_item_expression" ):
                listener.exitJava_item_expression(self)




    def java_item_expression(self):

        localctx = EParser.Java_item_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 428, self.RULE_java_item_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2593
            self.match(EParser.LBRAK)
            self.state = 2594
            localctx.exp = self.java_expression(0)
            self.state = 2595
            self.match(EParser.RBRAK)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Java_parenthesis_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.exp = None # Java_expressionContext

        def LPAR(self):
            return self.getToken(EParser.LPAR, 0)

        def RPAR(self):
            return self.getToken(EParser.RPAR, 0)

        def java_expression(self):
            return self.getTypedRuleContext(EParser.Java_expressionContext,0)


        def getRuleIndex(self):
            return EParser.RULE_java_parenthesis_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJava_parenthesis_expression" ):
                listener.enterJava_parenthesis_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJava_parenthesis_expression" ):
                listener.exitJava_parenthesis_expression(self)




    def java_parenthesis_expression(self):

        localctx = EParser.Java_parenthesis_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 430, self.RULE_java_parenthesis_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2597
            self.match(EParser.LPAR)
            self.state = 2598
            localctx.exp = self.java_expression(0)
            self.state = 2599
            self.match(EParser.RPAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Java_identifier_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return EParser.RULE_java_identifier_expression

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class JavaIdentifierContext(Java_identifier_expressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a EParser.Java_identifier_expressionContext
            super().__init__(parser)
            self.name = None # Java_identifierContext
            self.copyFrom(ctx)

        def java_identifier(self):
            return self.getTypedRuleContext(EParser.Java_identifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJavaIdentifier" ):
                listener.enterJavaIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJavaIdentifier" ):
                listener.exitJavaIdentifier(self)


    class JavaChildIdentifierContext(Java_identifier_expressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a EParser.Java_identifier_expressionContext
            super().__init__(parser)
            self.parent = None # Java_identifier_expressionContext
            self.name = None # Java_identifierContext
            self.copyFrom(ctx)

        def DOT(self):
            return self.getToken(EParser.DOT, 0)
        def java_identifier_expression(self):
            return self.getTypedRuleContext(EParser.Java_identifier_expressionContext,0)

        def java_identifier(self):
            return self.getTypedRuleContext(EParser.Java_identifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJavaChildIdentifier" ):
                listener.enterJavaChildIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJavaChildIdentifier" ):
                listener.exitJavaChildIdentifier(self)



    def java_identifier_expression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = EParser.Java_identifier_expressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 432
        self.enterRecursionRule(localctx, 432, self.RULE_java_identifier_expression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            localctx = EParser.JavaIdentifierContext(self, localctx)
            self._ctx = localctx
            _prevctx = localctx

            self.state = 2602
            localctx.name = self.java_identifier()
            self._ctx.stop = self._input.LT(-1)
            self.state = 2609
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,222,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = EParser.JavaChildIdentifierContext(self, EParser.Java_identifier_expressionContext(self, _parentctx, _parentState))
                    localctx.parent = _prevctx
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_java_identifier_expression)
                    self.state = 2604
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 2605
                    self.match(EParser.DOT)
                    self.state = 2606
                    localctx.name = self.java_identifier() 
                self.state = 2611
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,222,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class Java_class_identifier_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return EParser.RULE_java_class_identifier_expression

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class JavaClassIdentifierContext(Java_class_identifier_expressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a EParser.Java_class_identifier_expressionContext
            super().__init__(parser)
            self.klass = None # Java_identifier_expressionContext
            self.copyFrom(ctx)

        def java_identifier_expression(self):
            return self.getTypedRuleContext(EParser.Java_identifier_expressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJavaClassIdentifier" ):
                listener.enterJavaClassIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJavaClassIdentifier" ):
                listener.exitJavaClassIdentifier(self)


    class JavaChildClassIdentifierContext(Java_class_identifier_expressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a EParser.Java_class_identifier_expressionContext
            super().__init__(parser)
            self.parent = None # Java_class_identifier_expressionContext
            self.name = None # Token
            self.copyFrom(ctx)

        def java_class_identifier_expression(self):
            return self.getTypedRuleContext(EParser.Java_class_identifier_expressionContext,0)

        def DOLLAR_IDENTIFIER(self):
            return self.getToken(EParser.DOLLAR_IDENTIFIER, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJavaChildClassIdentifier" ):
                listener.enterJavaChildClassIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJavaChildClassIdentifier" ):
                listener.exitJavaChildClassIdentifier(self)



    def java_class_identifier_expression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = EParser.Java_class_identifier_expressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 434
        self.enterRecursionRule(localctx, 434, self.RULE_java_class_identifier_expression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            localctx = EParser.JavaClassIdentifierContext(self, localctx)
            self._ctx = localctx
            _prevctx = localctx

            self.state = 2613
            localctx.klass = self.java_identifier_expression(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 2619
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,223,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = EParser.JavaChildClassIdentifierContext(self, EParser.Java_class_identifier_expressionContext(self, _parentctx, _parentState))
                    localctx.parent = _prevctx
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_java_class_identifier_expression)
                    self.state = 2615
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 2616
                    localctx.name = self.match(EParser.DOLLAR_IDENTIFIER) 
                self.state = 2621
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,223,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class Java_literal_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return EParser.RULE_java_literal_expression

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class JavaBooleanLiteralContext(Java_literal_expressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a EParser.Java_literal_expressionContext
            super().__init__(parser)
            self.t = None # Token
            self.copyFrom(ctx)

        def BOOLEAN_LITERAL(self):
            return self.getToken(EParser.BOOLEAN_LITERAL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJavaBooleanLiteral" ):
                listener.enterJavaBooleanLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJavaBooleanLiteral" ):
                listener.exitJavaBooleanLiteral(self)


    class JavaCharacterLiteralContext(Java_literal_expressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a EParser.Java_literal_expressionContext
            super().__init__(parser)
            self.t = None # Token
            self.copyFrom(ctx)

        def CHAR_LITERAL(self):
            return self.getToken(EParser.CHAR_LITERAL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJavaCharacterLiteral" ):
                listener.enterJavaCharacterLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJavaCharacterLiteral" ):
                listener.exitJavaCharacterLiteral(self)


    class JavaIntegerLiteralContext(Java_literal_expressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a EParser.Java_literal_expressionContext
            super().__init__(parser)
            self.t = None # Token
            self.copyFrom(ctx)

        def INTEGER_LITERAL(self):
            return self.getToken(EParser.INTEGER_LITERAL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJavaIntegerLiteral" ):
                listener.enterJavaIntegerLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJavaIntegerLiteral" ):
                listener.exitJavaIntegerLiteral(self)


    class JavaTextLiteralContext(Java_literal_expressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a EParser.Java_literal_expressionContext
            super().__init__(parser)
            self.t = None # Token
            self.copyFrom(ctx)

        def TEXT_LITERAL(self):
            return self.getToken(EParser.TEXT_LITERAL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJavaTextLiteral" ):
                listener.enterJavaTextLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJavaTextLiteral" ):
                listener.exitJavaTextLiteral(self)


    class JavaDecimalLiteralContext(Java_literal_expressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a EParser.Java_literal_expressionContext
            super().__init__(parser)
            self.t = None # Token
            self.copyFrom(ctx)

        def DECIMAL_LITERAL(self):
            return self.getToken(EParser.DECIMAL_LITERAL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJavaDecimalLiteral" ):
                listener.enterJavaDecimalLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJavaDecimalLiteral" ):
                listener.exitJavaDecimalLiteral(self)



    def java_literal_expression(self):

        localctx = EParser.Java_literal_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 436, self.RULE_java_literal_expression)
        try:
            self.state = 2627
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [EParser.INTEGER_LITERAL]:
                localctx = EParser.JavaIntegerLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2622
                localctx.t = self.match(EParser.INTEGER_LITERAL)
                pass
            elif token in [EParser.DECIMAL_LITERAL]:
                localctx = EParser.JavaDecimalLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2623
                localctx.t = self.match(EParser.DECIMAL_LITERAL)
                pass
            elif token in [EParser.TEXT_LITERAL]:
                localctx = EParser.JavaTextLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 2624
                localctx.t = self.match(EParser.TEXT_LITERAL)
                pass
            elif token in [EParser.BOOLEAN_LITERAL]:
                localctx = EParser.JavaBooleanLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 2625
                localctx.t = self.match(EParser.BOOLEAN_LITERAL)
                pass
            elif token in [EParser.CHAR_LITERAL]:
                localctx = EParser.JavaCharacterLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 2626
                localctx.t = self.match(EParser.CHAR_LITERAL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Java_identifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VARIABLE_IDENTIFIER(self):
            return self.getToken(EParser.VARIABLE_IDENTIFIER, 0)

        def SYMBOL_IDENTIFIER(self):
            return self.getToken(EParser.SYMBOL_IDENTIFIER, 0)

        def NATIVE_IDENTIFIER(self):
            return self.getToken(EParser.NATIVE_IDENTIFIER, 0)

        def DOLLAR_IDENTIFIER(self):
            return self.getToken(EParser.DOLLAR_IDENTIFIER, 0)

        def TYPE_IDENTIFIER(self):
            return self.getToken(EParser.TYPE_IDENTIFIER, 0)

        def BOOLEAN(self):
            return self.getToken(EParser.BOOLEAN, 0)

        def CHARACTER(self):
            return self.getToken(EParser.CHARACTER, 0)

        def TEXT(self):
            return self.getToken(EParser.TEXT, 0)

        def INTEGER(self):
            return self.getToken(EParser.INTEGER, 0)

        def DECIMAL(self):
            return self.getToken(EParser.DECIMAL, 0)

        def DATE(self):
            return self.getToken(EParser.DATE, 0)

        def TIME(self):
            return self.getToken(EParser.TIME, 0)

        def DATETIME(self):
            return self.getToken(EParser.DATETIME, 0)

        def PERIOD(self):
            return self.getToken(EParser.PERIOD, 0)

        def VERSION(self):
            return self.getToken(EParser.VERSION, 0)

        def UUID(self):
            return self.getToken(EParser.UUID, 0)

        def HTML(self):
            return self.getToken(EParser.HTML, 0)

        def READ(self):
            return self.getToken(EParser.READ, 0)

        def WRITE(self):
            return self.getToken(EParser.WRITE, 0)

        def TEST(self):
            return self.getToken(EParser.TEST, 0)

        def SELF(self):
            return self.getToken(EParser.SELF, 0)

        def NONE(self):
            return self.getToken(EParser.NONE, 0)

        def NULL(self):
            return self.getToken(EParser.NULL, 0)

        def getRuleIndex(self):
            return EParser.RULE_java_identifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJava_identifier" ):
                listener.enterJava_identifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJava_identifier" ):
                listener.exitJava_identifier(self)




    def java_identifier(self):

        localctx = EParser.Java_identifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 438, self.RULE_java_identifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2629
            _la = self._input.LA(1)
            if not(((((_la - 52)) & ~0x3f) == 0 and ((1 << (_la - 52)) & ((1 << (EParser.BOOLEAN - 52)) | (1 << (EParser.CHARACTER - 52)) | (1 << (EParser.TEXT - 52)) | (1 << (EParser.INTEGER - 52)) | (1 << (EParser.DECIMAL - 52)) | (1 << (EParser.DATE - 52)) | (1 << (EParser.TIME - 52)) | (1 << (EParser.DATETIME - 52)) | (1 << (EParser.PERIOD - 52)) | (1 << (EParser.VERSION - 52)) | (1 << (EParser.UUID - 52)) | (1 << (EParser.HTML - 52)))) != 0) or ((((_la - 125)) & ~0x3f) == 0 and ((1 << (_la - 125)) & ((1 << (EParser.NONE - 125)) | (1 << (EParser.NULL - 125)) | (1 << (EParser.READ - 125)) | (1 << (EParser.SELF - 125)) | (1 << (EParser.TEST - 125)) | (1 << (EParser.WRITE - 125)) | (1 << (EParser.SYMBOL_IDENTIFIER - 125)) | (1 << (EParser.TYPE_IDENTIFIER - 125)) | (1 << (EParser.VARIABLE_IDENTIFIER - 125)) | (1 << (EParser.NATIVE_IDENTIFIER - 125)) | (1 << (EParser.DOLLAR_IDENTIFIER - 125)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Csharp_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return EParser.RULE_csharp_statement

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class CSharpReturnStatementContext(Csharp_statementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a EParser.Csharp_statementContext
            super().__init__(parser)
            self.exp = None # Csharp_expressionContext
            self.copyFrom(ctx)

        def RETURN(self):
            return self.getToken(EParser.RETURN, 0)
        def SEMI(self):
            return self.getToken(EParser.SEMI, 0)
        def csharp_expression(self):
            return self.getTypedRuleContext(EParser.Csharp_expressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCSharpReturnStatement" ):
                listener.enterCSharpReturnStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCSharpReturnStatement" ):
                listener.exitCSharpReturnStatement(self)


    class CSharpStatementContext(Csharp_statementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a EParser.Csharp_statementContext
            super().__init__(parser)
            self.exp = None # Csharp_expressionContext
            self.copyFrom(ctx)

        def SEMI(self):
            return self.getToken(EParser.SEMI, 0)
        def csharp_expression(self):
            return self.getTypedRuleContext(EParser.Csharp_expressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCSharpStatement" ):
                listener.enterCSharpStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCSharpStatement" ):
                listener.exitCSharpStatement(self)



    def csharp_statement(self):

        localctx = EParser.Csharp_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 440, self.RULE_csharp_statement)
        try:
            self.state = 2638
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [EParser.RETURN]:
                localctx = EParser.CSharpReturnStatementContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2631
                self.match(EParser.RETURN)
                self.state = 2632
                localctx.exp = self.csharp_expression(0)
                self.state = 2633
                self.match(EParser.SEMI)
                pass
            elif token in [EParser.LPAR, EParser.BOOLEAN, EParser.CHARACTER, EParser.TEXT, EParser.INTEGER, EParser.DECIMAL, EParser.DATE, EParser.TIME, EParser.DATETIME, EParser.PERIOD, EParser.VERSION, EParser.UUID, EParser.HTML, EParser.NONE, EParser.NULL, EParser.READ, EParser.SELF, EParser.TEST, EParser.THIS, EParser.WRITE, EParser.BOOLEAN_LITERAL, EParser.CHAR_LITERAL, EParser.SYMBOL_IDENTIFIER, EParser.TYPE_IDENTIFIER, EParser.VARIABLE_IDENTIFIER, EParser.DOLLAR_IDENTIFIER, EParser.TEXT_LITERAL, EParser.INTEGER_LITERAL, EParser.DECIMAL_LITERAL]:
                localctx = EParser.CSharpStatementContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2635
                localctx.exp = self.csharp_expression(0)
                self.state = 2636
                self.match(EParser.SEMI)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Csharp_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return EParser.RULE_csharp_expression

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class CSharpSelectorExpressionContext(Csharp_expressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a EParser.Csharp_expressionContext
            super().__init__(parser)
            self.parent = None # Csharp_expressionContext
            self.child = None # Csharp_selector_expressionContext
            self.copyFrom(ctx)

        def csharp_expression(self):
            return self.getTypedRuleContext(EParser.Csharp_expressionContext,0)

        def csharp_selector_expression(self):
            return self.getTypedRuleContext(EParser.Csharp_selector_expressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCSharpSelectorExpression" ):
                listener.enterCSharpSelectorExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCSharpSelectorExpression" ):
                listener.exitCSharpSelectorExpression(self)


    class CSharpPrimaryExpressionContext(Csharp_expressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a EParser.Csharp_expressionContext
            super().__init__(parser)
            self.exp = None # Csharp_primary_expressionContext
            self.copyFrom(ctx)

        def csharp_primary_expression(self):
            return self.getTypedRuleContext(EParser.Csharp_primary_expressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCSharpPrimaryExpression" ):
                listener.enterCSharpPrimaryExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCSharpPrimaryExpression" ):
                listener.exitCSharpPrimaryExpression(self)



    def csharp_expression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = EParser.Csharp_expressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 442
        self.enterRecursionRule(localctx, 442, self.RULE_csharp_expression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            localctx = EParser.CSharpPrimaryExpressionContext(self, localctx)
            self._ctx = localctx
            _prevctx = localctx

            self.state = 2641
            localctx.exp = self.csharp_primary_expression()
            self._ctx.stop = self._input.LT(-1)
            self.state = 2647
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,226,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = EParser.CSharpSelectorExpressionContext(self, EParser.Csharp_expressionContext(self, _parentctx, _parentState))
                    localctx.parent = _prevctx
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_csharp_expression)
                    self.state = 2643
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 2644
                    localctx.child = self.csharp_selector_expression() 
                self.state = 2649
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,226,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class Csharp_primary_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def csharp_this_expression(self):
            return self.getTypedRuleContext(EParser.Csharp_this_expressionContext,0)


        def csharp_new_expression(self):
            return self.getTypedRuleContext(EParser.Csharp_new_expressionContext,0)


        def csharp_parenthesis_expression(self):
            return self.getTypedRuleContext(EParser.Csharp_parenthesis_expressionContext,0)


        def csharp_identifier_expression(self):
            return self.getTypedRuleContext(EParser.Csharp_identifier_expressionContext,0)


        def csharp_literal_expression(self):
            return self.getTypedRuleContext(EParser.Csharp_literal_expressionContext,0)


        def getRuleIndex(self):
            return EParser.RULE_csharp_primary_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCsharp_primary_expression" ):
                listener.enterCsharp_primary_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCsharp_primary_expression" ):
                listener.exitCsharp_primary_expression(self)




    def csharp_primary_expression(self):

        localctx = EParser.Csharp_primary_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 444, self.RULE_csharp_primary_expression)
        try:
            self.state = 2655
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,227,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2650
                self.csharp_this_expression()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2651
                self.csharp_new_expression()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2652
                self.csharp_parenthesis_expression()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2653
                self.csharp_identifier_expression(0)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 2654
                self.csharp_literal_expression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Csharp_this_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def this_expression(self):
            return self.getTypedRuleContext(EParser.This_expressionContext,0)


        def getRuleIndex(self):
            return EParser.RULE_csharp_this_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCsharp_this_expression" ):
                listener.enterCsharp_this_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCsharp_this_expression" ):
                listener.exitCsharp_this_expression(self)




    def csharp_this_expression(self):

        localctx = EParser.Csharp_this_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 446, self.RULE_csharp_this_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2657
            self.this_expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Csharp_new_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def new_token(self):
            return self.getTypedRuleContext(EParser.New_tokenContext,0)


        def csharp_method_expression(self):
            return self.getTypedRuleContext(EParser.Csharp_method_expressionContext,0)


        def getRuleIndex(self):
            return EParser.RULE_csharp_new_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCsharp_new_expression" ):
                listener.enterCsharp_new_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCsharp_new_expression" ):
                listener.exitCsharp_new_expression(self)




    def csharp_new_expression(self):

        localctx = EParser.Csharp_new_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 448, self.RULE_csharp_new_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2659
            self.new_token()
            self.state = 2660
            self.csharp_method_expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Csharp_selector_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return EParser.RULE_csharp_selector_expression

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class CSharpMethodExpressionContext(Csharp_selector_expressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a EParser.Csharp_selector_expressionContext
            super().__init__(parser)
            self.exp = None # Csharp_method_expressionContext
            self.copyFrom(ctx)

        def DOT(self):
            return self.getToken(EParser.DOT, 0)
        def csharp_method_expression(self):
            return self.getTypedRuleContext(EParser.Csharp_method_expressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCSharpMethodExpression" ):
                listener.enterCSharpMethodExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCSharpMethodExpression" ):
                listener.exitCSharpMethodExpression(self)


    class CSharpItemExpressionContext(Csharp_selector_expressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a EParser.Csharp_selector_expressionContext
            super().__init__(parser)
            self.exp = None # Csharp_item_expressionContext
            self.copyFrom(ctx)

        def csharp_item_expression(self):
            return self.getTypedRuleContext(EParser.Csharp_item_expressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCSharpItemExpression" ):
                listener.enterCSharpItemExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCSharpItemExpression" ):
                listener.exitCSharpItemExpression(self)



    def csharp_selector_expression(self):

        localctx = EParser.Csharp_selector_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 450, self.RULE_csharp_selector_expression)
        try:
            self.state = 2665
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [EParser.DOT]:
                localctx = EParser.CSharpMethodExpressionContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2662
                self.match(EParser.DOT)
                self.state = 2663
                localctx.exp = self.csharp_method_expression()
                pass
            elif token in [EParser.LBRAK]:
                localctx = EParser.CSharpItemExpressionContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2664
                localctx.exp = self.csharp_item_expression()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Csharp_method_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # Csharp_identifierContext
            self.args = None # Csharp_argumentsContext

        def LPAR(self):
            return self.getToken(EParser.LPAR, 0)

        def RPAR(self):
            return self.getToken(EParser.RPAR, 0)

        def csharp_identifier(self):
            return self.getTypedRuleContext(EParser.Csharp_identifierContext,0)


        def csharp_arguments(self):
            return self.getTypedRuleContext(EParser.Csharp_argumentsContext,0)


        def getRuleIndex(self):
            return EParser.RULE_csharp_method_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCsharp_method_expression" ):
                listener.enterCsharp_method_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCsharp_method_expression" ):
                listener.exitCsharp_method_expression(self)




    def csharp_method_expression(self):

        localctx = EParser.Csharp_method_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 452, self.RULE_csharp_method_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2667
            localctx.name = self.csharp_identifier()
            self.state = 2668
            self.match(EParser.LPAR)
            self.state = 2670
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 20)) & ~0x3f) == 0 and ((1 << (_la - 20)) & ((1 << (EParser.LPAR - 20)) | (1 << (EParser.BOOLEAN - 20)) | (1 << (EParser.CHARACTER - 20)) | (1 << (EParser.TEXT - 20)) | (1 << (EParser.INTEGER - 20)) | (1 << (EParser.DECIMAL - 20)) | (1 << (EParser.DATE - 20)) | (1 << (EParser.TIME - 20)) | (1 << (EParser.DATETIME - 20)) | (1 << (EParser.PERIOD - 20)) | (1 << (EParser.VERSION - 20)) | (1 << (EParser.UUID - 20)) | (1 << (EParser.HTML - 20)))) != 0) or ((((_la - 125)) & ~0x3f) == 0 and ((1 << (_la - 125)) & ((1 << (EParser.NONE - 125)) | (1 << (EParser.NULL - 125)) | (1 << (EParser.READ - 125)) | (1 << (EParser.SELF - 125)) | (1 << (EParser.TEST - 125)) | (1 << (EParser.THIS - 125)) | (1 << (EParser.WRITE - 125)) | (1 << (EParser.BOOLEAN_LITERAL - 125)) | (1 << (EParser.CHAR_LITERAL - 125)) | (1 << (EParser.SYMBOL_IDENTIFIER - 125)) | (1 << (EParser.TYPE_IDENTIFIER - 125)) | (1 << (EParser.VARIABLE_IDENTIFIER - 125)) | (1 << (EParser.DOLLAR_IDENTIFIER - 125)) | (1 << (EParser.TEXT_LITERAL - 125)) | (1 << (EParser.INTEGER_LITERAL - 125)) | (1 << (EParser.DECIMAL_LITERAL - 125)))) != 0):
                self.state = 2669
                localctx.args = self.csharp_arguments(0)


            self.state = 2672
            self.match(EParser.RPAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Csharp_argumentsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return EParser.RULE_csharp_arguments

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class CSharpArgumentListContext(Csharp_argumentsContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a EParser.Csharp_argumentsContext
            super().__init__(parser)
            self.item = None # Csharp_expressionContext
            self.copyFrom(ctx)

        def csharp_expression(self):
            return self.getTypedRuleContext(EParser.Csharp_expressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCSharpArgumentList" ):
                listener.enterCSharpArgumentList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCSharpArgumentList" ):
                listener.exitCSharpArgumentList(self)


    class CSharpArgumentListItemContext(Csharp_argumentsContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a EParser.Csharp_argumentsContext
            super().__init__(parser)
            self.items = None # Csharp_argumentsContext
            self.item = None # Csharp_expressionContext
            self.copyFrom(ctx)

        def COMMA(self):
            return self.getToken(EParser.COMMA, 0)
        def csharp_arguments(self):
            return self.getTypedRuleContext(EParser.Csharp_argumentsContext,0)

        def csharp_expression(self):
            return self.getTypedRuleContext(EParser.Csharp_expressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCSharpArgumentListItem" ):
                listener.enterCSharpArgumentListItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCSharpArgumentListItem" ):
                listener.exitCSharpArgumentListItem(self)



    def csharp_arguments(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = EParser.Csharp_argumentsContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 454
        self.enterRecursionRule(localctx, 454, self.RULE_csharp_arguments, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            localctx = EParser.CSharpArgumentListContext(self, localctx)
            self._ctx = localctx
            _prevctx = localctx

            self.state = 2675
            localctx.item = self.csharp_expression(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 2682
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,230,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = EParser.CSharpArgumentListItemContext(self, EParser.Csharp_argumentsContext(self, _parentctx, _parentState))
                    localctx.items = _prevctx
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_csharp_arguments)
                    self.state = 2677
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 2678
                    self.match(EParser.COMMA)
                    self.state = 2679
                    localctx.item = self.csharp_expression(0) 
                self.state = 2684
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,230,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class Csharp_item_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.exp = None # Csharp_expressionContext

        def LBRAK(self):
            return self.getToken(EParser.LBRAK, 0)

        def RBRAK(self):
            return self.getToken(EParser.RBRAK, 0)

        def csharp_expression(self):
            return self.getTypedRuleContext(EParser.Csharp_expressionContext,0)


        def getRuleIndex(self):
            return EParser.RULE_csharp_item_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCsharp_item_expression" ):
                listener.enterCsharp_item_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCsharp_item_expression" ):
                listener.exitCsharp_item_expression(self)




    def csharp_item_expression(self):

        localctx = EParser.Csharp_item_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 456, self.RULE_csharp_item_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2685
            self.match(EParser.LBRAK)
            self.state = 2686
            localctx.exp = self.csharp_expression(0)
            self.state = 2687
            self.match(EParser.RBRAK)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Csharp_parenthesis_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.exp = None # Csharp_expressionContext

        def LPAR(self):
            return self.getToken(EParser.LPAR, 0)

        def RPAR(self):
            return self.getToken(EParser.RPAR, 0)

        def csharp_expression(self):
            return self.getTypedRuleContext(EParser.Csharp_expressionContext,0)


        def getRuleIndex(self):
            return EParser.RULE_csharp_parenthesis_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCsharp_parenthesis_expression" ):
                listener.enterCsharp_parenthesis_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCsharp_parenthesis_expression" ):
                listener.exitCsharp_parenthesis_expression(self)




    def csharp_parenthesis_expression(self):

        localctx = EParser.Csharp_parenthesis_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 458, self.RULE_csharp_parenthesis_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2689
            self.match(EParser.LPAR)
            self.state = 2690
            localctx.exp = self.csharp_expression(0)
            self.state = 2691
            self.match(EParser.RPAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Csharp_identifier_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return EParser.RULE_csharp_identifier_expression

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class CSharpIdentifierContext(Csharp_identifier_expressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a EParser.Csharp_identifier_expressionContext
            super().__init__(parser)
            self.name = None # Csharp_identifierContext
            self.copyFrom(ctx)

        def csharp_identifier(self):
            return self.getTypedRuleContext(EParser.Csharp_identifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCSharpIdentifier" ):
                listener.enterCSharpIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCSharpIdentifier" ):
                listener.exitCSharpIdentifier(self)


    class CSharpChildIdentifierContext(Csharp_identifier_expressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a EParser.Csharp_identifier_expressionContext
            super().__init__(parser)
            self.parent = None # Csharp_identifier_expressionContext
            self.name = None # Csharp_identifierContext
            self.copyFrom(ctx)

        def DOT(self):
            return self.getToken(EParser.DOT, 0)
        def csharp_identifier_expression(self):
            return self.getTypedRuleContext(EParser.Csharp_identifier_expressionContext,0)

        def csharp_identifier(self):
            return self.getTypedRuleContext(EParser.Csharp_identifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCSharpChildIdentifier" ):
                listener.enterCSharpChildIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCSharpChildIdentifier" ):
                listener.exitCSharpChildIdentifier(self)


    class CSharpPromptoIdentifierContext(Csharp_identifier_expressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a EParser.Csharp_identifier_expressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DOLLAR_IDENTIFIER(self):
            return self.getToken(EParser.DOLLAR_IDENTIFIER, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCSharpPromptoIdentifier" ):
                listener.enterCSharpPromptoIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCSharpPromptoIdentifier" ):
                listener.exitCSharpPromptoIdentifier(self)



    def csharp_identifier_expression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = EParser.Csharp_identifier_expressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 460
        self.enterRecursionRule(localctx, 460, self.RULE_csharp_identifier_expression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2696
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [EParser.DOLLAR_IDENTIFIER]:
                localctx = EParser.CSharpPromptoIdentifierContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx

                self.state = 2694
                self.match(EParser.DOLLAR_IDENTIFIER)
                pass
            elif token in [EParser.BOOLEAN, EParser.CHARACTER, EParser.TEXT, EParser.INTEGER, EParser.DECIMAL, EParser.DATE, EParser.TIME, EParser.DATETIME, EParser.PERIOD, EParser.VERSION, EParser.UUID, EParser.HTML, EParser.NONE, EParser.NULL, EParser.READ, EParser.SELF, EParser.TEST, EParser.WRITE, EParser.SYMBOL_IDENTIFIER, EParser.TYPE_IDENTIFIER, EParser.VARIABLE_IDENTIFIER]:
                localctx = EParser.CSharpIdentifierContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2695
                localctx.name = self.csharp_identifier()
                pass
            else:
                raise NoViableAltException(self)

            self._ctx.stop = self._input.LT(-1)
            self.state = 2703
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,232,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = EParser.CSharpChildIdentifierContext(self, EParser.Csharp_identifier_expressionContext(self, _parentctx, _parentState))
                    localctx.parent = _prevctx
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_csharp_identifier_expression)
                    self.state = 2698
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 2699
                    self.match(EParser.DOT)
                    self.state = 2700
                    localctx.name = self.csharp_identifier() 
                self.state = 2705
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,232,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class Csharp_literal_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return EParser.RULE_csharp_literal_expression

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class CSharpBooleanLiteralContext(Csharp_literal_expressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a EParser.Csharp_literal_expressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def BOOLEAN_LITERAL(self):
            return self.getToken(EParser.BOOLEAN_LITERAL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCSharpBooleanLiteral" ):
                listener.enterCSharpBooleanLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCSharpBooleanLiteral" ):
                listener.exitCSharpBooleanLiteral(self)


    class CSharpIntegerLiteralContext(Csharp_literal_expressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a EParser.Csharp_literal_expressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def INTEGER_LITERAL(self):
            return self.getToken(EParser.INTEGER_LITERAL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCSharpIntegerLiteral" ):
                listener.enterCSharpIntegerLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCSharpIntegerLiteral" ):
                listener.exitCSharpIntegerLiteral(self)


    class CSharpDecimalLiteralContext(Csharp_literal_expressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a EParser.Csharp_literal_expressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DECIMAL_LITERAL(self):
            return self.getToken(EParser.DECIMAL_LITERAL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCSharpDecimalLiteral" ):
                listener.enterCSharpDecimalLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCSharpDecimalLiteral" ):
                listener.exitCSharpDecimalLiteral(self)


    class CSharpCharacterLiteralContext(Csharp_literal_expressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a EParser.Csharp_literal_expressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CHAR_LITERAL(self):
            return self.getToken(EParser.CHAR_LITERAL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCSharpCharacterLiteral" ):
                listener.enterCSharpCharacterLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCSharpCharacterLiteral" ):
                listener.exitCSharpCharacterLiteral(self)


    class CSharpTextLiteralContext(Csharp_literal_expressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a EParser.Csharp_literal_expressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def TEXT_LITERAL(self):
            return self.getToken(EParser.TEXT_LITERAL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCSharpTextLiteral" ):
                listener.enterCSharpTextLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCSharpTextLiteral" ):
                listener.exitCSharpTextLiteral(self)



    def csharp_literal_expression(self):

        localctx = EParser.Csharp_literal_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 462, self.RULE_csharp_literal_expression)
        try:
            self.state = 2711
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [EParser.INTEGER_LITERAL]:
                localctx = EParser.CSharpIntegerLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2706
                self.match(EParser.INTEGER_LITERAL)
                pass
            elif token in [EParser.DECIMAL_LITERAL]:
                localctx = EParser.CSharpDecimalLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2707
                self.match(EParser.DECIMAL_LITERAL)
                pass
            elif token in [EParser.TEXT_LITERAL]:
                localctx = EParser.CSharpTextLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 2708
                self.match(EParser.TEXT_LITERAL)
                pass
            elif token in [EParser.BOOLEAN_LITERAL]:
                localctx = EParser.CSharpBooleanLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 2709
                self.match(EParser.BOOLEAN_LITERAL)
                pass
            elif token in [EParser.CHAR_LITERAL]:
                localctx = EParser.CSharpCharacterLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 2710
                self.match(EParser.CHAR_LITERAL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Csharp_identifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VARIABLE_IDENTIFIER(self):
            return self.getToken(EParser.VARIABLE_IDENTIFIER, 0)

        def SYMBOL_IDENTIFIER(self):
            return self.getToken(EParser.SYMBOL_IDENTIFIER, 0)

        def TYPE_IDENTIFIER(self):
            return self.getToken(EParser.TYPE_IDENTIFIER, 0)

        def BOOLEAN(self):
            return self.getToken(EParser.BOOLEAN, 0)

        def CHARACTER(self):
            return self.getToken(EParser.CHARACTER, 0)

        def TEXT(self):
            return self.getToken(EParser.TEXT, 0)

        def INTEGER(self):
            return self.getToken(EParser.INTEGER, 0)

        def DECIMAL(self):
            return self.getToken(EParser.DECIMAL, 0)

        def DATE(self):
            return self.getToken(EParser.DATE, 0)

        def TIME(self):
            return self.getToken(EParser.TIME, 0)

        def DATETIME(self):
            return self.getToken(EParser.DATETIME, 0)

        def PERIOD(self):
            return self.getToken(EParser.PERIOD, 0)

        def VERSION(self):
            return self.getToken(EParser.VERSION, 0)

        def UUID(self):
            return self.getToken(EParser.UUID, 0)

        def HTML(self):
            return self.getToken(EParser.HTML, 0)

        def READ(self):
            return self.getToken(EParser.READ, 0)

        def WRITE(self):
            return self.getToken(EParser.WRITE, 0)

        def TEST(self):
            return self.getToken(EParser.TEST, 0)

        def SELF(self):
            return self.getToken(EParser.SELF, 0)

        def NONE(self):
            return self.getToken(EParser.NONE, 0)

        def NULL(self):
            return self.getToken(EParser.NULL, 0)

        def getRuleIndex(self):
            return EParser.RULE_csharp_identifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCsharp_identifier" ):
                listener.enterCsharp_identifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCsharp_identifier" ):
                listener.exitCsharp_identifier(self)




    def csharp_identifier(self):

        localctx = EParser.Csharp_identifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 464, self.RULE_csharp_identifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2713
            _la = self._input.LA(1)
            if not(((((_la - 52)) & ~0x3f) == 0 and ((1 << (_la - 52)) & ((1 << (EParser.BOOLEAN - 52)) | (1 << (EParser.CHARACTER - 52)) | (1 << (EParser.TEXT - 52)) | (1 << (EParser.INTEGER - 52)) | (1 << (EParser.DECIMAL - 52)) | (1 << (EParser.DATE - 52)) | (1 << (EParser.TIME - 52)) | (1 << (EParser.DATETIME - 52)) | (1 << (EParser.PERIOD - 52)) | (1 << (EParser.VERSION - 52)) | (1 << (EParser.UUID - 52)) | (1 << (EParser.HTML - 52)))) != 0) or ((((_la - 125)) & ~0x3f) == 0 and ((1 << (_la - 125)) & ((1 << (EParser.NONE - 125)) | (1 << (EParser.NULL - 125)) | (1 << (EParser.READ - 125)) | (1 << (EParser.SELF - 125)) | (1 << (EParser.TEST - 125)) | (1 << (EParser.WRITE - 125)) | (1 << (EParser.SYMBOL_IDENTIFIER - 125)) | (1 << (EParser.TYPE_IDENTIFIER - 125)) | (1 << (EParser.VARIABLE_IDENTIFIER - 125)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Jsx_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def jsx_element(self):
            return self.getTypedRuleContext(EParser.Jsx_elementContext,0)


        def jsx_fragment(self):
            return self.getTypedRuleContext(EParser.Jsx_fragmentContext,0)


        def getRuleIndex(self):
            return EParser.RULE_jsx_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJsx_expression" ):
                listener.enterJsx_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJsx_expression" ):
                listener.exitJsx_expression(self)




    def jsx_expression(self):

        localctx = EParser.Jsx_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 466, self.RULE_jsx_expression)
        try:
            self.state = 2717
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,234,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2715
                self.jsx_element()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2716
                self.jsx_fragment()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Jsx_elementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return EParser.RULE_jsx_element

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class JsxSelfClosingContext(Jsx_elementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a EParser.Jsx_elementContext
            super().__init__(parser)
            self.jsx = None # Jsx_self_closingContext
            self.copyFrom(ctx)

        def jsx_self_closing(self):
            return self.getTypedRuleContext(EParser.Jsx_self_closingContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJsxSelfClosing" ):
                listener.enterJsxSelfClosing(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJsxSelfClosing" ):
                listener.exitJsxSelfClosing(self)


    class JsxElementContext(Jsx_elementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a EParser.Jsx_elementContext
            super().__init__(parser)
            self.opening = None # Jsx_openingContext
            self.children_ = None # Jsx_childrenContext
            self.closing = None # Jsx_closingContext
            self.copyFrom(ctx)

        def jsx_opening(self):
            return self.getTypedRuleContext(EParser.Jsx_openingContext,0)

        def jsx_closing(self):
            return self.getTypedRuleContext(EParser.Jsx_closingContext,0)

        def jsx_children(self):
            return self.getTypedRuleContext(EParser.Jsx_childrenContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJsxElement" ):
                listener.enterJsxElement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJsxElement" ):
                listener.exitJsxElement(self)



    def jsx_element(self):

        localctx = EParser.Jsx_elementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 468, self.RULE_jsx_element)
        try:
            self.state = 2726
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,236,self._ctx)
            if la_ == 1:
                localctx = EParser.JsxSelfClosingContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2719
                localctx.jsx = self.jsx_self_closing()
                pass

            elif la_ == 2:
                localctx = EParser.JsxElementContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2720
                localctx.opening = self.jsx_opening()
                self.state = 2722
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,235,self._ctx)
                if la_ == 1:
                    self.state = 2721
                    localctx.children_ = self.jsx_children()


                self.state = 2724
                localctx.closing = self.jsx_closing()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Jsx_fragmentContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.children_ = None # Jsx_childrenContext

        def jsx_fragment_start(self):
            return self.getTypedRuleContext(EParser.Jsx_fragment_startContext,0)


        def jsx_fragment_end(self):
            return self.getTypedRuleContext(EParser.Jsx_fragment_endContext,0)


        def jsx_children(self):
            return self.getTypedRuleContext(EParser.Jsx_childrenContext,0)


        def getRuleIndex(self):
            return EParser.RULE_jsx_fragment

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJsx_fragment" ):
                listener.enterJsx_fragment(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJsx_fragment" ):
                listener.exitJsx_fragment(self)




    def jsx_fragment(self):

        localctx = EParser.Jsx_fragmentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 470, self.RULE_jsx_fragment)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2728
            self.jsx_fragment_start()
            self.state = 2730
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,237,self._ctx)
            if la_ == 1:
                self.state = 2729
                localctx.children_ = self.jsx_children()


            self.state = 2732
            self.jsx_fragment_end()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Jsx_fragment_startContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LT(self):
            return self.getToken(EParser.LT, 0)

        def GT(self):
            return self.getToken(EParser.GT, 0)

        def LTGT(self):
            return self.getToken(EParser.LTGT, 0)

        def getRuleIndex(self):
            return EParser.RULE_jsx_fragment_start

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJsx_fragment_start" ):
                listener.enterJsx_fragment_start(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJsx_fragment_start" ):
                listener.exitJsx_fragment_start(self)




    def jsx_fragment_start(self):

        localctx = EParser.Jsx_fragment_startContext(self, self._ctx, self.state)
        self.enterRule(localctx, 472, self.RULE_jsx_fragment_start)
        try:
            self.state = 2737
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [EParser.LT]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2734
                self.match(EParser.LT)
                self.state = 2735
                self.match(EParser.GT)
                pass
            elif token in [EParser.LTGT]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2736
                self.match(EParser.LTGT)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Jsx_fragment_endContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LT(self):
            return self.getToken(EParser.LT, 0)

        def SLASH(self):
            return self.getToken(EParser.SLASH, 0)

        def GT(self):
            return self.getToken(EParser.GT, 0)

        def getRuleIndex(self):
            return EParser.RULE_jsx_fragment_end

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJsx_fragment_end" ):
                listener.enterJsx_fragment_end(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJsx_fragment_end" ):
                listener.exitJsx_fragment_end(self)




    def jsx_fragment_end(self):

        localctx = EParser.Jsx_fragment_endContext(self, self._ctx, self.state)
        self.enterRule(localctx, 474, self.RULE_jsx_fragment_end)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2739
            self.match(EParser.LT)
            self.state = 2740
            self.match(EParser.SLASH)
            self.state = 2741
            self.match(EParser.GT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Jsx_self_closingContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # Jsx_element_nameContext
            self.attributes = None # Jsx_attributeContext

        def LT(self):
            return self.getToken(EParser.LT, 0)

        def ws_plus(self):
            return self.getTypedRuleContext(EParser.Ws_plusContext,0)


        def SLASH(self):
            return self.getToken(EParser.SLASH, 0)

        def GT(self):
            return self.getToken(EParser.GT, 0)

        def jsx_element_name(self):
            return self.getTypedRuleContext(EParser.Jsx_element_nameContext,0)


        def jsx_attribute(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(EParser.Jsx_attributeContext)
            else:
                return self.getTypedRuleContext(EParser.Jsx_attributeContext,i)


        def getRuleIndex(self):
            return EParser.RULE_jsx_self_closing

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJsx_self_closing" ):
                listener.enterJsx_self_closing(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJsx_self_closing" ):
                listener.exitJsx_self_closing(self)




    def jsx_self_closing(self):

        localctx = EParser.Jsx_self_closingContext(self, self._ctx, self.state)
        self.enterRule(localctx, 476, self.RULE_jsx_self_closing)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2743
            self.match(EParser.LT)
            self.state = 2744
            localctx.name = self.jsx_element_name()
            self.state = 2745
            self.ws_plus()
            self.state = 2749
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << EParser.JAVA) | (1 << EParser.CSHARP) | (1 << EParser.PYTHON2) | (1 << EParser.PYTHON3) | (1 << EParser.JAVASCRIPT) | (1 << EParser.SWIFT) | (1 << EParser.BOOLEAN) | (1 << EParser.CHARACTER) | (1 << EParser.TEXT) | (1 << EParser.INTEGER) | (1 << EParser.DECIMAL) | (1 << EParser.DATE) | (1 << EParser.TIME) | (1 << EParser.DATETIME) | (1 << EParser.PERIOD) | (1 << EParser.VERSION) | (1 << EParser.CODE))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (EParser.DOCUMENT - 64)) | (1 << (EParser.BLOB - 64)) | (1 << (EParser.IMAGE - 64)) | (1 << (EParser.UUID - 64)) | (1 << (EParser.ITERATOR - 64)) | (1 << (EParser.CURSOR - 64)) | (1 << (EParser.HTML - 64)) | (1 << (EParser.ABSTRACT - 64)) | (1 << (EParser.ALL - 64)) | (1 << (EParser.ALWAYS - 64)) | (1 << (EParser.AND - 64)) | (1 << (EParser.ANY - 64)) | (1 << (EParser.AS - 64)) | (1 << (EParser.ASC - 64)) | (1 << (EParser.ATTR - 64)) | (1 << (EParser.ATTRIBUTE - 64)) | (1 << (EParser.ATTRIBUTES - 64)) | (1 << (EParser.BINDINGS - 64)) | (1 << (EParser.BREAK - 64)) | (1 << (EParser.BY - 64)) | (1 << (EParser.CASE - 64)) | (1 << (EParser.CATCH - 64)) | (1 << (EParser.CATEGORY - 64)) | (1 << (EParser.CLASS - 64)) | (1 << (EParser.CLOSE - 64)) | (1 << (EParser.CONTAINS - 64)) | (1 << (EParser.DEF - 64)) | (1 << (EParser.DEFAULT - 64)) | (1 << (EParser.DEFINE - 64)) | (1 << (EParser.DELETE - 64)) | (1 << (EParser.DESC - 64)) | (1 << (EParser.DO - 64)) | (1 << (EParser.DOING - 64)) | (1 << (EParser.EACH - 64)) | (1 << (EParser.ELSE - 64)) | (1 << (EParser.ENUM - 64)) | (1 << (EParser.ENUMERATED - 64)) | (1 << (EParser.EXCEPT - 64)) | (1 << (EParser.EXECUTE - 64)) | (1 << (EParser.EXPECTING - 64)) | (1 << (EParser.EXTENDS - 64)) | (1 << (EParser.FETCH - 64)) | (1 << (EParser.FILTERED - 64)) | (1 << (EParser.FINALLY - 64)) | (1 << (EParser.FLUSH - 64)) | (1 << (EParser.FOR - 64)) | (1 << (EParser.FROM - 64)) | (1 << (EParser.GETTER - 64)) | (1 << (EParser.HAS - 64)) | (1 << (EParser.IF - 64)) | (1 << (EParser.IN - 64)) | (1 << (EParser.INDEX - 64)) | (1 << (EParser.IS - 64)) | (1 << (EParser.MATCHING - 64)) | (1 << (EParser.METHOD - 64)) | (1 << (EParser.METHODS - 64)) | (1 << (EParser.MODULO - 64)) | (1 << (EParser.MUTABLE - 64)) | (1 << (EParser.NATIVE - 64)) | (1 << (EParser.NONE - 64)) | (1 << (EParser.NOT - 64)) | (1 << (EParser.NOTHING - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (EParser.NULL - 128)) | (1 << (EParser.ON - 128)) | (1 << (EParser.ONE - 128)) | (1 << (EParser.OPEN - 128)) | (1 << (EParser.OPERATOR - 128)) | (1 << (EParser.OR - 128)) | (1 << (EParser.ORDER - 128)) | (1 << (EParser.OTHERWISE - 128)) | (1 << (EParser.PASS - 128)) | (1 << (EParser.RAISE - 128)) | (1 << (EParser.READ - 128)) | (1 << (EParser.RECEIVING - 128)) | (1 << (EParser.RESOURCE - 128)) | (1 << (EParser.RETURN - 128)) | (1 << (EParser.RETURNING - 128)) | (1 << (EParser.ROWS - 128)) | (1 << (EParser.SELF - 128)) | (1 << (EParser.SETTER - 128)) | (1 << (EParser.SINGLETON - 128)) | (1 << (EParser.SORTED - 128)) | (1 << (EParser.STORABLE - 128)) | (1 << (EParser.STORE - 128)) | (1 << (EParser.SWITCH - 128)) | (1 << (EParser.TEST - 128)) | (1 << (EParser.THIS - 128)) | (1 << (EParser.THROW - 128)) | (1 << (EParser.TO - 128)) | (1 << (EParser.TRY - 128)) | (1 << (EParser.VERIFYING - 128)) | (1 << (EParser.WIDGET - 128)) | (1 << (EParser.WITH - 128)) | (1 << (EParser.WHEN - 128)) | (1 << (EParser.WHERE - 128)) | (1 << (EParser.WHILE - 128)) | (1 << (EParser.WRITE - 128)) | (1 << (EParser.SYMBOL_IDENTIFIER - 128)) | (1 << (EParser.TYPE_IDENTIFIER - 128)) | (1 << (EParser.VARIABLE_IDENTIFIER - 128)))) != 0):
                self.state = 2746
                localctx.attributes = self.jsx_attribute()
                self.state = 2751
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2752
            self.match(EParser.SLASH)
            self.state = 2753
            self.match(EParser.GT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Jsx_openingContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # Jsx_element_nameContext
            self.attributes = None # Jsx_attributeContext

        def LT(self):
            return self.getToken(EParser.LT, 0)

        def ws_plus(self):
            return self.getTypedRuleContext(EParser.Ws_plusContext,0)


        def GT(self):
            return self.getToken(EParser.GT, 0)

        def jsx_element_name(self):
            return self.getTypedRuleContext(EParser.Jsx_element_nameContext,0)


        def jsx_attribute(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(EParser.Jsx_attributeContext)
            else:
                return self.getTypedRuleContext(EParser.Jsx_attributeContext,i)


        def getRuleIndex(self):
            return EParser.RULE_jsx_opening

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJsx_opening" ):
                listener.enterJsx_opening(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJsx_opening" ):
                listener.exitJsx_opening(self)




    def jsx_opening(self):

        localctx = EParser.Jsx_openingContext(self, self._ctx, self.state)
        self.enterRule(localctx, 478, self.RULE_jsx_opening)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2755
            self.match(EParser.LT)
            self.state = 2756
            localctx.name = self.jsx_element_name()
            self.state = 2757
            self.ws_plus()
            self.state = 2761
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << EParser.JAVA) | (1 << EParser.CSHARP) | (1 << EParser.PYTHON2) | (1 << EParser.PYTHON3) | (1 << EParser.JAVASCRIPT) | (1 << EParser.SWIFT) | (1 << EParser.BOOLEAN) | (1 << EParser.CHARACTER) | (1 << EParser.TEXT) | (1 << EParser.INTEGER) | (1 << EParser.DECIMAL) | (1 << EParser.DATE) | (1 << EParser.TIME) | (1 << EParser.DATETIME) | (1 << EParser.PERIOD) | (1 << EParser.VERSION) | (1 << EParser.CODE))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (EParser.DOCUMENT - 64)) | (1 << (EParser.BLOB - 64)) | (1 << (EParser.IMAGE - 64)) | (1 << (EParser.UUID - 64)) | (1 << (EParser.ITERATOR - 64)) | (1 << (EParser.CURSOR - 64)) | (1 << (EParser.HTML - 64)) | (1 << (EParser.ABSTRACT - 64)) | (1 << (EParser.ALL - 64)) | (1 << (EParser.ALWAYS - 64)) | (1 << (EParser.AND - 64)) | (1 << (EParser.ANY - 64)) | (1 << (EParser.AS - 64)) | (1 << (EParser.ASC - 64)) | (1 << (EParser.ATTR - 64)) | (1 << (EParser.ATTRIBUTE - 64)) | (1 << (EParser.ATTRIBUTES - 64)) | (1 << (EParser.BINDINGS - 64)) | (1 << (EParser.BREAK - 64)) | (1 << (EParser.BY - 64)) | (1 << (EParser.CASE - 64)) | (1 << (EParser.CATCH - 64)) | (1 << (EParser.CATEGORY - 64)) | (1 << (EParser.CLASS - 64)) | (1 << (EParser.CLOSE - 64)) | (1 << (EParser.CONTAINS - 64)) | (1 << (EParser.DEF - 64)) | (1 << (EParser.DEFAULT - 64)) | (1 << (EParser.DEFINE - 64)) | (1 << (EParser.DELETE - 64)) | (1 << (EParser.DESC - 64)) | (1 << (EParser.DO - 64)) | (1 << (EParser.DOING - 64)) | (1 << (EParser.EACH - 64)) | (1 << (EParser.ELSE - 64)) | (1 << (EParser.ENUM - 64)) | (1 << (EParser.ENUMERATED - 64)) | (1 << (EParser.EXCEPT - 64)) | (1 << (EParser.EXECUTE - 64)) | (1 << (EParser.EXPECTING - 64)) | (1 << (EParser.EXTENDS - 64)) | (1 << (EParser.FETCH - 64)) | (1 << (EParser.FILTERED - 64)) | (1 << (EParser.FINALLY - 64)) | (1 << (EParser.FLUSH - 64)) | (1 << (EParser.FOR - 64)) | (1 << (EParser.FROM - 64)) | (1 << (EParser.GETTER - 64)) | (1 << (EParser.HAS - 64)) | (1 << (EParser.IF - 64)) | (1 << (EParser.IN - 64)) | (1 << (EParser.INDEX - 64)) | (1 << (EParser.IS - 64)) | (1 << (EParser.MATCHING - 64)) | (1 << (EParser.METHOD - 64)) | (1 << (EParser.METHODS - 64)) | (1 << (EParser.MODULO - 64)) | (1 << (EParser.MUTABLE - 64)) | (1 << (EParser.NATIVE - 64)) | (1 << (EParser.NONE - 64)) | (1 << (EParser.NOT - 64)) | (1 << (EParser.NOTHING - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (EParser.NULL - 128)) | (1 << (EParser.ON - 128)) | (1 << (EParser.ONE - 128)) | (1 << (EParser.OPEN - 128)) | (1 << (EParser.OPERATOR - 128)) | (1 << (EParser.OR - 128)) | (1 << (EParser.ORDER - 128)) | (1 << (EParser.OTHERWISE - 128)) | (1 << (EParser.PASS - 128)) | (1 << (EParser.RAISE - 128)) | (1 << (EParser.READ - 128)) | (1 << (EParser.RECEIVING - 128)) | (1 << (EParser.RESOURCE - 128)) | (1 << (EParser.RETURN - 128)) | (1 << (EParser.RETURNING - 128)) | (1 << (EParser.ROWS - 128)) | (1 << (EParser.SELF - 128)) | (1 << (EParser.SETTER - 128)) | (1 << (EParser.SINGLETON - 128)) | (1 << (EParser.SORTED - 128)) | (1 << (EParser.STORABLE - 128)) | (1 << (EParser.STORE - 128)) | (1 << (EParser.SWITCH - 128)) | (1 << (EParser.TEST - 128)) | (1 << (EParser.THIS - 128)) | (1 << (EParser.THROW - 128)) | (1 << (EParser.TO - 128)) | (1 << (EParser.TRY - 128)) | (1 << (EParser.VERIFYING - 128)) | (1 << (EParser.WIDGET - 128)) | (1 << (EParser.WITH - 128)) | (1 << (EParser.WHEN - 128)) | (1 << (EParser.WHERE - 128)) | (1 << (EParser.WHILE - 128)) | (1 << (EParser.WRITE - 128)) | (1 << (EParser.SYMBOL_IDENTIFIER - 128)) | (1 << (EParser.TYPE_IDENTIFIER - 128)) | (1 << (EParser.VARIABLE_IDENTIFIER - 128)))) != 0):
                self.state = 2758
                localctx.attributes = self.jsx_attribute()
                self.state = 2763
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2764
            self.match(EParser.GT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Jsx_closingContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # Jsx_element_nameContext

        def LT(self):
            return self.getToken(EParser.LT, 0)

        def SLASH(self):
            return self.getToken(EParser.SLASH, 0)

        def GT(self):
            return self.getToken(EParser.GT, 0)

        def jsx_element_name(self):
            return self.getTypedRuleContext(EParser.Jsx_element_nameContext,0)


        def getRuleIndex(self):
            return EParser.RULE_jsx_closing

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJsx_closing" ):
                listener.enterJsx_closing(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJsx_closing" ):
                listener.exitJsx_closing(self)




    def jsx_closing(self):

        localctx = EParser.Jsx_closingContext(self, self._ctx, self.state)
        self.enterRule(localctx, 480, self.RULE_jsx_closing)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2766
            self.match(EParser.LT)
            self.state = 2767
            self.match(EParser.SLASH)
            self.state = 2768
            localctx.name = self.jsx_element_name()
            self.state = 2769
            self.match(EParser.GT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Jsx_element_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def jsx_identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(EParser.Jsx_identifierContext)
            else:
                return self.getTypedRuleContext(EParser.Jsx_identifierContext,i)


        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(EParser.DOT)
            else:
                return self.getToken(EParser.DOT, i)

        def getRuleIndex(self):
            return EParser.RULE_jsx_element_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJsx_element_name" ):
                listener.enterJsx_element_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJsx_element_name" ):
                listener.exitJsx_element_name(self)




    def jsx_element_name(self):

        localctx = EParser.Jsx_element_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 482, self.RULE_jsx_element_name)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2771
            self.jsx_identifier()
            self.state = 2776
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==EParser.DOT:
                self.state = 2772
                self.match(EParser.DOT)
                self.state = 2773
                self.jsx_identifier()
                self.state = 2778
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Jsx_identifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier_or_keyword(self):
            return self.getTypedRuleContext(EParser.Identifier_or_keywordContext,0)


        def nospace_hyphen_identifier_or_keyword(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(EParser.Nospace_hyphen_identifier_or_keywordContext)
            else:
                return self.getTypedRuleContext(EParser.Nospace_hyphen_identifier_or_keywordContext,i)


        def getRuleIndex(self):
            return EParser.RULE_jsx_identifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJsx_identifier" ):
                listener.enterJsx_identifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJsx_identifier" ):
                listener.exitJsx_identifier(self)




    def jsx_identifier(self):

        localctx = EParser.Jsx_identifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 484, self.RULE_jsx_identifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2779
            self.identifier_or_keyword()
            self.state = 2783
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,242,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2780
                    self.nospace_hyphen_identifier_or_keyword() 
                self.state = 2785
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,242,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Jsx_attributeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # Jsx_identifierContext
            self.value = None # Jsx_attribute_valueContext

        def ws_plus(self):
            return self.getTypedRuleContext(EParser.Ws_plusContext,0)


        def jsx_identifier(self):
            return self.getTypedRuleContext(EParser.Jsx_identifierContext,0)


        def EQ(self):
            return self.getToken(EParser.EQ, 0)

        def jsx_attribute_value(self):
            return self.getTypedRuleContext(EParser.Jsx_attribute_valueContext,0)


        def getRuleIndex(self):
            return EParser.RULE_jsx_attribute

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJsx_attribute" ):
                listener.enterJsx_attribute(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJsx_attribute" ):
                listener.exitJsx_attribute(self)




    def jsx_attribute(self):

        localctx = EParser.Jsx_attributeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 486, self.RULE_jsx_attribute)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2786
            localctx.name = self.jsx_identifier()
            self.state = 2789
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==EParser.EQ:
                self.state = 2787
                self.match(EParser.EQ)
                self.state = 2788
                localctx.value = self.jsx_attribute_value()


            self.state = 2791
            self.ws_plus()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Jsx_attribute_valueContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return EParser.RULE_jsx_attribute_value

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class JsxValueContext(Jsx_attribute_valueContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a EParser.Jsx_attribute_valueContext
            super().__init__(parser)
            self.exp = None # ExpressionContext
            self.copyFrom(ctx)

        def LCURL(self):
            return self.getToken(EParser.LCURL, 0)
        def RCURL(self):
            return self.getToken(EParser.RCURL, 0)
        def expression(self):
            return self.getTypedRuleContext(EParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJsxValue" ):
                listener.enterJsxValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJsxValue" ):
                listener.exitJsxValue(self)


    class JsxLiteralContext(Jsx_attribute_valueContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a EParser.Jsx_attribute_valueContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def TEXT_LITERAL(self):
            return self.getToken(EParser.TEXT_LITERAL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJsxLiteral" ):
                listener.enterJsxLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJsxLiteral" ):
                listener.exitJsxLiteral(self)



    def jsx_attribute_value(self):

        localctx = EParser.Jsx_attribute_valueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 488, self.RULE_jsx_attribute_value)
        try:
            self.state = 2798
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [EParser.TEXT_LITERAL]:
                localctx = EParser.JsxLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2793
                self.match(EParser.TEXT_LITERAL)
                pass
            elif token in [EParser.LCURL]:
                localctx = EParser.JsxValueContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2794
                self.match(EParser.LCURL)
                self.state = 2795
                localctx.exp = self.expression(0)
                self.state = 2796
                self.match(EParser.RCURL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Jsx_childrenContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def jsx_child(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(EParser.Jsx_childContext)
            else:
                return self.getTypedRuleContext(EParser.Jsx_childContext,i)


        def getRuleIndex(self):
            return EParser.RULE_jsx_children

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJsx_children" ):
                listener.enterJsx_children(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJsx_children" ):
                listener.exitJsx_children(self)




    def jsx_children(self):

        localctx = EParser.Jsx_childrenContext(self, self._ctx, self.state)
        self.enterRule(localctx, 490, self.RULE_jsx_children)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2801 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 2800
                    self.jsx_child()

                else:
                    raise NoViableAltException(self)
                self.state = 2803 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,245,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Jsx_childContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return EParser.RULE_jsx_child

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class JsxTextContext(Jsx_childContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a EParser.Jsx_childContext
            super().__init__(parser)
            self.text = None # Jsx_textContext
            self.copyFrom(ctx)

        def jsx_text(self):
            return self.getTypedRuleContext(EParser.Jsx_textContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJsxText" ):
                listener.enterJsxText(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJsxText" ):
                listener.exitJsxText(self)


    class JsxChildContext(Jsx_childContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a EParser.Jsx_childContext
            super().__init__(parser)
            self.jsx = None # Jsx_elementContext
            self.copyFrom(ctx)

        def jsx_element(self):
            return self.getTypedRuleContext(EParser.Jsx_elementContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJsxChild" ):
                listener.enterJsxChild(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJsxChild" ):
                listener.exitJsxChild(self)


    class JsxCodeContext(Jsx_childContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a EParser.Jsx_childContext
            super().__init__(parser)
            self.exp = None # ExpressionContext
            self.copyFrom(ctx)

        def LCURL(self):
            return self.getToken(EParser.LCURL, 0)
        def RCURL(self):
            return self.getToken(EParser.RCURL, 0)
        def expression(self):
            return self.getTypedRuleContext(EParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJsxCode" ):
                listener.enterJsxCode(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJsxCode" ):
                listener.exitJsxCode(self)



    def jsx_child(self):

        localctx = EParser.Jsx_childContext(self, self._ctx, self.state)
        self.enterRule(localctx, 492, self.RULE_jsx_child)
        self._la = 0 # Token type
        try:
            self.state = 2812
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [EParser.INDENT, EParser.DEDENT, EParser.LF_TAB, EParser.LF_MORE, EParser.LF, EParser.TAB, EParser.WS, EParser.COMMENT, EParser.JAVA, EParser.CSHARP, EParser.PYTHON2, EParser.PYTHON3, EParser.JAVASCRIPT, EParser.SWIFT, EParser.COLON, EParser.SEMI, EParser.COMMA, EParser.RANGE, EParser.DOT, EParser.LPAR, EParser.RPAR, EParser.LBRAK, EParser.RBRAK, EParser.QMARK, EParser.XMARK, EParser.AMP, EParser.AMP2, EParser.PIPE, EParser.PIPE2, EParser.PLUS, EParser.MINUS, EParser.STAR, EParser.SLASH, EParser.BSLASH, EParser.PERCENT, EParser.GTE, EParser.LTE, EParser.LTGT, EParser.LTCOLONGT, EParser.EQ, EParser.XEQ, EParser.EQ2, EParser.TEQ, EParser.TILDE, EParser.LARROW, EParser.RARROW, EParser.EGT, EParser.BOOLEAN, EParser.CHARACTER, EParser.TEXT, EParser.INTEGER, EParser.DECIMAL, EParser.DATE, EParser.TIME, EParser.DATETIME, EParser.PERIOD, EParser.VERSION, EParser.METHOD_COLON, EParser.CODE, EParser.DOCUMENT, EParser.BLOB, EParser.IMAGE, EParser.UUID, EParser.ITERATOR, EParser.CURSOR, EParser.HTML, EParser.TYPE, EParser.ABSTRACT, EParser.ALL, EParser.ALWAYS, EParser.AND, EParser.ANY, EParser.AS, EParser.ASC, EParser.ATTR, EParser.ATTRIBUTE, EParser.ATTRIBUTES, EParser.BINDINGS, EParser.BREAK, EParser.BY, EParser.CASE, EParser.CATCH, EParser.CATEGORY, EParser.CLASS, EParser.CLOSE, EParser.CONTAINS, EParser.DEF, EParser.DEFAULT, EParser.DEFINE, EParser.DELETE, EParser.DESC, EParser.DO, EParser.DOING, EParser.EACH, EParser.ELSE, EParser.ENUM, EParser.ENUMERATED, EParser.EXCEPT, EParser.EXECUTE, EParser.EXPECTING, EParser.EXTENDS, EParser.FETCH, EParser.FILTERED, EParser.FINALLY, EParser.FLUSH, EParser.FOR, EParser.FROM, EParser.GETTER, EParser.HAS, EParser.IF, EParser.IN, EParser.INDEX, EParser.INVOKE_COLON, EParser.IS, EParser.MATCHING, EParser.METHOD, EParser.METHODS, EParser.MODULO, EParser.MUTABLE, EParser.NATIVE, EParser.NONE, EParser.NOT, EParser.NOTHING, EParser.NULL, EParser.ON, EParser.ONE, EParser.OPEN, EParser.OPERATOR, EParser.OR, EParser.ORDER, EParser.OTHERWISE, EParser.PASS, EParser.RAISE, EParser.READ, EParser.RECEIVING, EParser.RESOURCE, EParser.RETURN, EParser.RETURNING, EParser.ROWS, EParser.SELF, EParser.SETTER, EParser.SINGLETON, EParser.SORTED, EParser.STORABLE, EParser.STORE, EParser.SWITCH, EParser.TEST, EParser.THEN, EParser.THIS, EParser.THROW, EParser.TO, EParser.TRY, EParser.VERIFYING, EParser.WIDGET, EParser.WITH, EParser.WHEN, EParser.WHERE, EParser.WHILE, EParser.WRITE, EParser.BOOLEAN_LITERAL, EParser.CHAR_LITERAL, EParser.MIN_INTEGER, EParser.MAX_INTEGER, EParser.SYMBOL_IDENTIFIER, EParser.TYPE_IDENTIFIER, EParser.VARIABLE_IDENTIFIER, EParser.NATIVE_IDENTIFIER, EParser.DOLLAR_IDENTIFIER, EParser.ARONDBASE_IDENTIFIER, EParser.TEXT_LITERAL, EParser.UUID_LITERAL, EParser.INTEGER_LITERAL, EParser.HEXA_LITERAL, EParser.DECIMAL_LITERAL, EParser.DATETIME_LITERAL, EParser.TIME_LITERAL, EParser.DATE_LITERAL, EParser.PERIOD_LITERAL, EParser.VERSION_LITERAL]:
                localctx = EParser.JsxTextContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2805
                localctx.text = self.jsx_text()
                pass
            elif token in [EParser.LT]:
                localctx = EParser.JsxChildContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2806
                localctx.jsx = self.jsx_element()
                pass
            elif token in [EParser.LCURL]:
                localctx = EParser.JsxCodeContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 2807
                self.match(EParser.LCURL)
                self.state = 2809
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << EParser.LPAR) | (1 << EParser.LBRAK) | (1 << EParser.LCURL) | (1 << EParser.MINUS) | (1 << EParser.LT) | (1 << EParser.LTGT) | (1 << EParser.LTCOLONGT) | (1 << EParser.METHOD_COLON) | (1 << EParser.CODE))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (EParser.DOCUMENT - 64)) | (1 << (EParser.BLOB - 64)) | (1 << (EParser.TYPE - 64)) | (1 << (EParser.EXECUTE - 64)) | (1 << (EParser.FETCH - 64)) | (1 << (EParser.INVOKE_COLON - 64)) | (1 << (EParser.MUTABLE - 64)) | (1 << (EParser.NOT - 64)) | (1 << (EParser.NOTHING - 64)))) != 0) or ((((_la - 138)) & ~0x3f) == 0 and ((1 << (_la - 138)) & ((1 << (EParser.READ - 138)) | (1 << (EParser.SELF - 138)) | (1 << (EParser.SORTED - 138)) | (1 << (EParser.THIS - 138)) | (1 << (EParser.BOOLEAN_LITERAL - 138)) | (1 << (EParser.CHAR_LITERAL - 138)) | (1 << (EParser.MIN_INTEGER - 138)) | (1 << (EParser.MAX_INTEGER - 138)) | (1 << (EParser.SYMBOL_IDENTIFIER - 138)) | (1 << (EParser.TYPE_IDENTIFIER - 138)) | (1 << (EParser.VARIABLE_IDENTIFIER - 138)) | (1 << (EParser.TEXT_LITERAL - 138)) | (1 << (EParser.UUID_LITERAL - 138)) | (1 << (EParser.INTEGER_LITERAL - 138)) | (1 << (EParser.HEXA_LITERAL - 138)) | (1 << (EParser.DECIMAL_LITERAL - 138)) | (1 << (EParser.DATETIME_LITERAL - 138)) | (1 << (EParser.TIME_LITERAL - 138)) | (1 << (EParser.DATE_LITERAL - 138)) | (1 << (EParser.PERIOD_LITERAL - 138)) | (1 << (EParser.VERSION_LITERAL - 138)))) != 0):
                    self.state = 2808
                    localctx.exp = self.expression(0)


                self.state = 2811
                self.match(EParser.RCURL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Jsx_textContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LCURL(self, i:int=None):
            if i is None:
                return self.getTokens(EParser.LCURL)
            else:
                return self.getToken(EParser.LCURL, i)

        def RCURL(self, i:int=None):
            if i is None:
                return self.getTokens(EParser.RCURL)
            else:
                return self.getToken(EParser.RCURL, i)

        def LT(self, i:int=None):
            if i is None:
                return self.getTokens(EParser.LT)
            else:
                return self.getToken(EParser.LT, i)

        def GT(self, i:int=None):
            if i is None:
                return self.getTokens(EParser.GT)
            else:
                return self.getToken(EParser.GT, i)

        def getRuleIndex(self):
            return EParser.RULE_jsx_text

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJsx_text" ):
                listener.enterJsx_text(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJsx_text" ):
                listener.exitJsx_text(self)




    def jsx_text(self):

        localctx = EParser.Jsx_textContext(self, self._ctx, self.state)
        self.enterRule(localctx, 494, self.RULE_jsx_text)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2815 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 2814
                    _la = self._input.LA(1)
                    if _la <= 0 or (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << EParser.LCURL) | (1 << EParser.RCURL) | (1 << EParser.GT) | (1 << EParser.LT))) != 0):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()

                else:
                    raise NoViableAltException(self)
                self.state = 2817 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,248,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Css_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.field = None # Css_fieldContext

        def LCURL(self):
            return self.getToken(EParser.LCURL, 0)

        def RCURL(self):
            return self.getToken(EParser.RCURL, 0)

        def css_field(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(EParser.Css_fieldContext)
            else:
                return self.getTypedRuleContext(EParser.Css_fieldContext,i)


        def getRuleIndex(self):
            return EParser.RULE_css_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCss_expression" ):
                listener.enterCss_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCss_expression" ):
                listener.exitCss_expression(self)




    def css_expression(self):

        localctx = EParser.Css_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 496, self.RULE_css_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2819
            self.match(EParser.LCURL)
            self.state = 2821 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 2820
                localctx.field = self.css_field()
                self.state = 2823 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << EParser.JAVA) | (1 << EParser.CSHARP) | (1 << EParser.PYTHON2) | (1 << EParser.PYTHON3) | (1 << EParser.JAVASCRIPT) | (1 << EParser.SWIFT) | (1 << EParser.MINUS) | (1 << EParser.BOOLEAN) | (1 << EParser.CHARACTER) | (1 << EParser.TEXT) | (1 << EParser.INTEGER) | (1 << EParser.DECIMAL) | (1 << EParser.DATE) | (1 << EParser.TIME) | (1 << EParser.DATETIME) | (1 << EParser.PERIOD) | (1 << EParser.VERSION) | (1 << EParser.CODE))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (EParser.DOCUMENT - 64)) | (1 << (EParser.BLOB - 64)) | (1 << (EParser.IMAGE - 64)) | (1 << (EParser.UUID - 64)) | (1 << (EParser.ITERATOR - 64)) | (1 << (EParser.CURSOR - 64)) | (1 << (EParser.HTML - 64)) | (1 << (EParser.ABSTRACT - 64)) | (1 << (EParser.ALL - 64)) | (1 << (EParser.ALWAYS - 64)) | (1 << (EParser.AND - 64)) | (1 << (EParser.ANY - 64)) | (1 << (EParser.AS - 64)) | (1 << (EParser.ASC - 64)) | (1 << (EParser.ATTR - 64)) | (1 << (EParser.ATTRIBUTE - 64)) | (1 << (EParser.ATTRIBUTES - 64)) | (1 << (EParser.BINDINGS - 64)) | (1 << (EParser.BREAK - 64)) | (1 << (EParser.BY - 64)) | (1 << (EParser.CASE - 64)) | (1 << (EParser.CATCH - 64)) | (1 << (EParser.CATEGORY - 64)) | (1 << (EParser.CLASS - 64)) | (1 << (EParser.CLOSE - 64)) | (1 << (EParser.CONTAINS - 64)) | (1 << (EParser.DEF - 64)) | (1 << (EParser.DEFAULT - 64)) | (1 << (EParser.DEFINE - 64)) | (1 << (EParser.DELETE - 64)) | (1 << (EParser.DESC - 64)) | (1 << (EParser.DO - 64)) | (1 << (EParser.DOING - 64)) | (1 << (EParser.EACH - 64)) | (1 << (EParser.ELSE - 64)) | (1 << (EParser.ENUM - 64)) | (1 << (EParser.ENUMERATED - 64)) | (1 << (EParser.EXCEPT - 64)) | (1 << (EParser.EXECUTE - 64)) | (1 << (EParser.EXPECTING - 64)) | (1 << (EParser.EXTENDS - 64)) | (1 << (EParser.FETCH - 64)) | (1 << (EParser.FILTERED - 64)) | (1 << (EParser.FINALLY - 64)) | (1 << (EParser.FLUSH - 64)) | (1 << (EParser.FOR - 64)) | (1 << (EParser.FROM - 64)) | (1 << (EParser.GETTER - 64)) | (1 << (EParser.HAS - 64)) | (1 << (EParser.IF - 64)) | (1 << (EParser.IN - 64)) | (1 << (EParser.INDEX - 64)) | (1 << (EParser.IS - 64)) | (1 << (EParser.MATCHING - 64)) | (1 << (EParser.METHOD - 64)) | (1 << (EParser.METHODS - 64)) | (1 << (EParser.MODULO - 64)) | (1 << (EParser.MUTABLE - 64)) | (1 << (EParser.NATIVE - 64)) | (1 << (EParser.NONE - 64)) | (1 << (EParser.NOT - 64)) | (1 << (EParser.NOTHING - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (EParser.NULL - 128)) | (1 << (EParser.ON - 128)) | (1 << (EParser.ONE - 128)) | (1 << (EParser.OPEN - 128)) | (1 << (EParser.OPERATOR - 128)) | (1 << (EParser.OR - 128)) | (1 << (EParser.ORDER - 128)) | (1 << (EParser.OTHERWISE - 128)) | (1 << (EParser.PASS - 128)) | (1 << (EParser.RAISE - 128)) | (1 << (EParser.READ - 128)) | (1 << (EParser.RECEIVING - 128)) | (1 << (EParser.RESOURCE - 128)) | (1 << (EParser.RETURN - 128)) | (1 << (EParser.RETURNING - 128)) | (1 << (EParser.ROWS - 128)) | (1 << (EParser.SELF - 128)) | (1 << (EParser.SETTER - 128)) | (1 << (EParser.SINGLETON - 128)) | (1 << (EParser.SORTED - 128)) | (1 << (EParser.STORABLE - 128)) | (1 << (EParser.STORE - 128)) | (1 << (EParser.SWITCH - 128)) | (1 << (EParser.TEST - 128)) | (1 << (EParser.THIS - 128)) | (1 << (EParser.THROW - 128)) | (1 << (EParser.TO - 128)) | (1 << (EParser.TRY - 128)) | (1 << (EParser.VERIFYING - 128)) | (1 << (EParser.WIDGET - 128)) | (1 << (EParser.WITH - 128)) | (1 << (EParser.WHEN - 128)) | (1 << (EParser.WHERE - 128)) | (1 << (EParser.WHILE - 128)) | (1 << (EParser.WRITE - 128)) | (1 << (EParser.SYMBOL_IDENTIFIER - 128)) | (1 << (EParser.TYPE_IDENTIFIER - 128)) | (1 << (EParser.VARIABLE_IDENTIFIER - 128)))) != 0)):
                    break

            self.state = 2825
            self.match(EParser.RCURL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Css_fieldContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # Css_identifierContext
            self.value = None # Css_valueContext

        def COLON(self):
            return self.getToken(EParser.COLON, 0)

        def SEMI(self):
            return self.getToken(EParser.SEMI, 0)

        def css_identifier(self):
            return self.getTypedRuleContext(EParser.Css_identifierContext,0)


        def css_value(self):
            return self.getTypedRuleContext(EParser.Css_valueContext,0)


        def getRuleIndex(self):
            return EParser.RULE_css_field

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCss_field" ):
                listener.enterCss_field(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCss_field" ):
                listener.exitCss_field(self)




    def css_field(self):

        localctx = EParser.Css_fieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 498, self.RULE_css_field)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2827
            localctx.name = self.css_identifier(0)
            self.state = 2828
            self.match(EParser.COLON)
            self.state = 2829
            localctx.value = self.css_value()
            self.state = 2830
            self.match(EParser.SEMI)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Css_identifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier_or_keyword(self):
            return self.getTypedRuleContext(EParser.Identifier_or_keywordContext,0)


        def MINUS(self):
            return self.getToken(EParser.MINUS, 0)

        def nospace_identifier_or_keyword(self):
            return self.getTypedRuleContext(EParser.Nospace_identifier_or_keywordContext,0)


        def css_identifier(self):
            return self.getTypedRuleContext(EParser.Css_identifierContext,0)


        def nospace_hyphen_identifier_or_keyword(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(EParser.Nospace_hyphen_identifier_or_keywordContext)
            else:
                return self.getTypedRuleContext(EParser.Nospace_hyphen_identifier_or_keywordContext,i)


        def getRuleIndex(self):
            return EParser.RULE_css_identifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCss_identifier" ):
                listener.enterCss_identifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCss_identifier" ):
                listener.exitCss_identifier(self)



    def css_identifier(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = EParser.Css_identifierContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 500
        self.enterRecursionRule(localctx, 500, self.RULE_css_identifier, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2836
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [EParser.JAVA, EParser.CSHARP, EParser.PYTHON2, EParser.PYTHON3, EParser.JAVASCRIPT, EParser.SWIFT, EParser.BOOLEAN, EParser.CHARACTER, EParser.TEXT, EParser.INTEGER, EParser.DECIMAL, EParser.DATE, EParser.TIME, EParser.DATETIME, EParser.PERIOD, EParser.VERSION, EParser.CODE, EParser.DOCUMENT, EParser.BLOB, EParser.IMAGE, EParser.UUID, EParser.ITERATOR, EParser.CURSOR, EParser.HTML, EParser.ABSTRACT, EParser.ALL, EParser.ALWAYS, EParser.AND, EParser.ANY, EParser.AS, EParser.ASC, EParser.ATTR, EParser.ATTRIBUTE, EParser.ATTRIBUTES, EParser.BINDINGS, EParser.BREAK, EParser.BY, EParser.CASE, EParser.CATCH, EParser.CATEGORY, EParser.CLASS, EParser.CLOSE, EParser.CONTAINS, EParser.DEF, EParser.DEFAULT, EParser.DEFINE, EParser.DELETE, EParser.DESC, EParser.DO, EParser.DOING, EParser.EACH, EParser.ELSE, EParser.ENUM, EParser.ENUMERATED, EParser.EXCEPT, EParser.EXECUTE, EParser.EXPECTING, EParser.EXTENDS, EParser.FETCH, EParser.FILTERED, EParser.FINALLY, EParser.FLUSH, EParser.FOR, EParser.FROM, EParser.GETTER, EParser.HAS, EParser.IF, EParser.IN, EParser.INDEX, EParser.IS, EParser.MATCHING, EParser.METHOD, EParser.METHODS, EParser.MODULO, EParser.MUTABLE, EParser.NATIVE, EParser.NONE, EParser.NOT, EParser.NOTHING, EParser.NULL, EParser.ON, EParser.ONE, EParser.OPEN, EParser.OPERATOR, EParser.OR, EParser.ORDER, EParser.OTHERWISE, EParser.PASS, EParser.RAISE, EParser.READ, EParser.RECEIVING, EParser.RESOURCE, EParser.RETURN, EParser.RETURNING, EParser.ROWS, EParser.SELF, EParser.SETTER, EParser.SINGLETON, EParser.SORTED, EParser.STORABLE, EParser.STORE, EParser.SWITCH, EParser.TEST, EParser.THIS, EParser.THROW, EParser.TO, EParser.TRY, EParser.VERIFYING, EParser.WIDGET, EParser.WITH, EParser.WHEN, EParser.WHERE, EParser.WHILE, EParser.WRITE, EParser.SYMBOL_IDENTIFIER, EParser.TYPE_IDENTIFIER, EParser.VARIABLE_IDENTIFIER]:
                self.state = 2833
                self.identifier_or_keyword()
                pass
            elif token in [EParser.MINUS]:
                self.state = 2834
                self.match(EParser.MINUS)
                self.state = 2835
                self.nospace_identifier_or_keyword()
                pass
            else:
                raise NoViableAltException(self)

            self._ctx.stop = self._input.LT(-1)
            self.state = 2846
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,252,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = EParser.Css_identifierContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_css_identifier)
                    self.state = 2838
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 2840 
                    self._errHandler.sync(self)
                    _alt = 1
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt == 1:
                            self.state = 2839
                            self.nospace_hyphen_identifier_or_keyword()

                        else:
                            raise NoViableAltException(self)
                        self.state = 2842 
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,251,self._ctx)
             
                self.state = 2848
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,252,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class Css_valueContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return EParser.RULE_css_value

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class CssTextContext(Css_valueContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a EParser.Css_valueContext
            super().__init__(parser)
            self.text = None # Css_textContext
            self.copyFrom(ctx)

        def css_text(self):
            return self.getTypedRuleContext(EParser.Css_textContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCssText" ):
                listener.enterCssText(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCssText" ):
                listener.exitCssText(self)


    class CssValueContext(Css_valueContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a EParser.Css_valueContext
            super().__init__(parser)
            self.exp = None # ExpressionContext
            self.copyFrom(ctx)

        def LCURL(self):
            return self.getToken(EParser.LCURL, 0)
        def RCURL(self):
            return self.getToken(EParser.RCURL, 0)
        def expression(self):
            return self.getTypedRuleContext(EParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCssValue" ):
                listener.enterCssValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCssValue" ):
                listener.exitCssValue(self)



    def css_value(self):

        localctx = EParser.Css_valueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 502, self.RULE_css_value)
        try:
            self.state = 2854
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [EParser.LCURL]:
                localctx = EParser.CssValueContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2849
                self.match(EParser.LCURL)
                self.state = 2850
                localctx.exp = self.expression(0)
                self.state = 2851
                self.match(EParser.RCURL)
                pass
            elif token in [EParser.INDENT, EParser.DEDENT, EParser.LF_TAB, EParser.LF_MORE, EParser.LF, EParser.TAB, EParser.COMMENT, EParser.JAVA, EParser.CSHARP, EParser.PYTHON2, EParser.PYTHON3, EParser.JAVASCRIPT, EParser.SWIFT, EParser.COMMA, EParser.RANGE, EParser.DOT, EParser.LPAR, EParser.RPAR, EParser.LBRAK, EParser.RBRAK, EParser.QMARK, EParser.XMARK, EParser.AMP, EParser.AMP2, EParser.PIPE, EParser.PIPE2, EParser.PLUS, EParser.MINUS, EParser.STAR, EParser.SLASH, EParser.BSLASH, EParser.PERCENT, EParser.GT, EParser.GTE, EParser.LT, EParser.LTE, EParser.LTGT, EParser.LTCOLONGT, EParser.EQ, EParser.XEQ, EParser.EQ2, EParser.TEQ, EParser.TILDE, EParser.LARROW, EParser.RARROW, EParser.EGT, EParser.BOOLEAN, EParser.CHARACTER, EParser.TEXT, EParser.INTEGER, EParser.DECIMAL, EParser.DATE, EParser.TIME, EParser.DATETIME, EParser.PERIOD, EParser.VERSION, EParser.METHOD_COLON, EParser.CODE, EParser.DOCUMENT, EParser.BLOB, EParser.IMAGE, EParser.UUID, EParser.ITERATOR, EParser.CURSOR, EParser.HTML, EParser.TYPE, EParser.ABSTRACT, EParser.ALL, EParser.ALWAYS, EParser.AND, EParser.ANY, EParser.AS, EParser.ASC, EParser.ATTR, EParser.ATTRIBUTE, EParser.ATTRIBUTES, EParser.BINDINGS, EParser.BREAK, EParser.BY, EParser.CASE, EParser.CATCH, EParser.CATEGORY, EParser.CLASS, EParser.CLOSE, EParser.CONTAINS, EParser.DEF, EParser.DEFAULT, EParser.DEFINE, EParser.DELETE, EParser.DESC, EParser.DO, EParser.DOING, EParser.EACH, EParser.ELSE, EParser.ENUM, EParser.ENUMERATED, EParser.EXCEPT, EParser.EXECUTE, EParser.EXPECTING, EParser.EXTENDS, EParser.FETCH, EParser.FILTERED, EParser.FINALLY, EParser.FLUSH, EParser.FOR, EParser.FROM, EParser.GETTER, EParser.HAS, EParser.IF, EParser.IN, EParser.INDEX, EParser.INVOKE_COLON, EParser.IS, EParser.MATCHING, EParser.METHOD, EParser.METHODS, EParser.MODULO, EParser.MUTABLE, EParser.NATIVE, EParser.NONE, EParser.NOT, EParser.NOTHING, EParser.NULL, EParser.ON, EParser.ONE, EParser.OPEN, EParser.OPERATOR, EParser.OR, EParser.ORDER, EParser.OTHERWISE, EParser.PASS, EParser.RAISE, EParser.READ, EParser.RECEIVING, EParser.RESOURCE, EParser.RETURN, EParser.RETURNING, EParser.ROWS, EParser.SELF, EParser.SETTER, EParser.SINGLETON, EParser.SORTED, EParser.STORABLE, EParser.STORE, EParser.SWITCH, EParser.TEST, EParser.THEN, EParser.THIS, EParser.THROW, EParser.TO, EParser.TRY, EParser.VERIFYING, EParser.WIDGET, EParser.WITH, EParser.WHEN, EParser.WHERE, EParser.WHILE, EParser.WRITE, EParser.BOOLEAN_LITERAL, EParser.CHAR_LITERAL, EParser.MIN_INTEGER, EParser.MAX_INTEGER, EParser.SYMBOL_IDENTIFIER, EParser.TYPE_IDENTIFIER, EParser.VARIABLE_IDENTIFIER, EParser.NATIVE_IDENTIFIER, EParser.DOLLAR_IDENTIFIER, EParser.ARONDBASE_IDENTIFIER, EParser.TEXT_LITERAL, EParser.UUID_LITERAL, EParser.INTEGER_LITERAL, EParser.HEXA_LITERAL, EParser.DECIMAL_LITERAL, EParser.DATETIME_LITERAL, EParser.TIME_LITERAL, EParser.DATE_LITERAL, EParser.PERIOD_LITERAL, EParser.VERSION_LITERAL]:
                localctx = EParser.CssTextContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2853
                localctx.text = self.css_text()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Css_textContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LCURL(self, i:int=None):
            if i is None:
                return self.getTokens(EParser.LCURL)
            else:
                return self.getToken(EParser.LCURL, i)

        def RCURL(self, i:int=None):
            if i is None:
                return self.getTokens(EParser.RCURL)
            else:
                return self.getToken(EParser.RCURL, i)

        def COLON(self, i:int=None):
            if i is None:
                return self.getTokens(EParser.COLON)
            else:
                return self.getToken(EParser.COLON, i)

        def SEMI(self, i:int=None):
            if i is None:
                return self.getTokens(EParser.SEMI)
            else:
                return self.getToken(EParser.SEMI, i)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(EParser.WS)
            else:
                return self.getToken(EParser.WS, i)

        def getRuleIndex(self):
            return EParser.RULE_css_text

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCss_text" ):
                listener.enterCss_text(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCss_text" ):
                listener.exitCss_text(self)




    def css_text(self):

        localctx = EParser.Css_textContext(self, self._ctx, self.state)
        self.enterRule(localctx, 504, self.RULE_css_text)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2857 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 2856
                _la = self._input.LA(1)
                if _la <= 0 or (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << EParser.WS) | (1 << EParser.COLON) | (1 << EParser.SEMI) | (1 << EParser.LCURL) | (1 << EParser.RCURL))) != 0):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2859 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << EParser.INDENT) | (1 << EParser.DEDENT) | (1 << EParser.LF_TAB) | (1 << EParser.LF_MORE) | (1 << EParser.LF) | (1 << EParser.TAB) | (1 << EParser.COMMENT) | (1 << EParser.JAVA) | (1 << EParser.CSHARP) | (1 << EParser.PYTHON2) | (1 << EParser.PYTHON3) | (1 << EParser.JAVASCRIPT) | (1 << EParser.SWIFT) | (1 << EParser.COMMA) | (1 << EParser.RANGE) | (1 << EParser.DOT) | (1 << EParser.LPAR) | (1 << EParser.RPAR) | (1 << EParser.LBRAK) | (1 << EParser.RBRAK) | (1 << EParser.QMARK) | (1 << EParser.XMARK) | (1 << EParser.AMP) | (1 << EParser.AMP2) | (1 << EParser.PIPE) | (1 << EParser.PIPE2) | (1 << EParser.PLUS) | (1 << EParser.MINUS) | (1 << EParser.STAR) | (1 << EParser.SLASH) | (1 << EParser.BSLASH) | (1 << EParser.PERCENT) | (1 << EParser.GT) | (1 << EParser.GTE) | (1 << EParser.LT) | (1 << EParser.LTE) | (1 << EParser.LTGT) | (1 << EParser.LTCOLONGT) | (1 << EParser.EQ) | (1 << EParser.XEQ) | (1 << EParser.EQ2) | (1 << EParser.TEQ) | (1 << EParser.TILDE) | (1 << EParser.LARROW) | (1 << EParser.RARROW) | (1 << EParser.EGT) | (1 << EParser.BOOLEAN) | (1 << EParser.CHARACTER) | (1 << EParser.TEXT) | (1 << EParser.INTEGER) | (1 << EParser.DECIMAL) | (1 << EParser.DATE) | (1 << EParser.TIME) | (1 << EParser.DATETIME) | (1 << EParser.PERIOD) | (1 << EParser.VERSION) | (1 << EParser.METHOD_COLON) | (1 << EParser.CODE))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (EParser.DOCUMENT - 64)) | (1 << (EParser.BLOB - 64)) | (1 << (EParser.IMAGE - 64)) | (1 << (EParser.UUID - 64)) | (1 << (EParser.ITERATOR - 64)) | (1 << (EParser.CURSOR - 64)) | (1 << (EParser.HTML - 64)) | (1 << (EParser.TYPE - 64)) | (1 << (EParser.ABSTRACT - 64)) | (1 << (EParser.ALL - 64)) | (1 << (EParser.ALWAYS - 64)) | (1 << (EParser.AND - 64)) | (1 << (EParser.ANY - 64)) | (1 << (EParser.AS - 64)) | (1 << (EParser.ASC - 64)) | (1 << (EParser.ATTR - 64)) | (1 << (EParser.ATTRIBUTE - 64)) | (1 << (EParser.ATTRIBUTES - 64)) | (1 << (EParser.BINDINGS - 64)) | (1 << (EParser.BREAK - 64)) | (1 << (EParser.BY - 64)) | (1 << (EParser.CASE - 64)) | (1 << (EParser.CATCH - 64)) | (1 << (EParser.CATEGORY - 64)) | (1 << (EParser.CLASS - 64)) | (1 << (EParser.CLOSE - 64)) | (1 << (EParser.CONTAINS - 64)) | (1 << (EParser.DEF - 64)) | (1 << (EParser.DEFAULT - 64)) | (1 << (EParser.DEFINE - 64)) | (1 << (EParser.DELETE - 64)) | (1 << (EParser.DESC - 64)) | (1 << (EParser.DO - 64)) | (1 << (EParser.DOING - 64)) | (1 << (EParser.EACH - 64)) | (1 << (EParser.ELSE - 64)) | (1 << (EParser.ENUM - 64)) | (1 << (EParser.ENUMERATED - 64)) | (1 << (EParser.EXCEPT - 64)) | (1 << (EParser.EXECUTE - 64)) | (1 << (EParser.EXPECTING - 64)) | (1 << (EParser.EXTENDS - 64)) | (1 << (EParser.FETCH - 64)) | (1 << (EParser.FILTERED - 64)) | (1 << (EParser.FINALLY - 64)) | (1 << (EParser.FLUSH - 64)) | (1 << (EParser.FOR - 64)) | (1 << (EParser.FROM - 64)) | (1 << (EParser.GETTER - 64)) | (1 << (EParser.HAS - 64)) | (1 << (EParser.IF - 64)) | (1 << (EParser.IN - 64)) | (1 << (EParser.INDEX - 64)) | (1 << (EParser.INVOKE_COLON - 64)) | (1 << (EParser.IS - 64)) | (1 << (EParser.MATCHING - 64)) | (1 << (EParser.METHOD - 64)) | (1 << (EParser.METHODS - 64)) | (1 << (EParser.MODULO - 64)) | (1 << (EParser.MUTABLE - 64)) | (1 << (EParser.NATIVE - 64)) | (1 << (EParser.NONE - 64)) | (1 << (EParser.NOT - 64)) | (1 << (EParser.NOTHING - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (EParser.NULL - 128)) | (1 << (EParser.ON - 128)) | (1 << (EParser.ONE - 128)) | (1 << (EParser.OPEN - 128)) | (1 << (EParser.OPERATOR - 128)) | (1 << (EParser.OR - 128)) | (1 << (EParser.ORDER - 128)) | (1 << (EParser.OTHERWISE - 128)) | (1 << (EParser.PASS - 128)) | (1 << (EParser.RAISE - 128)) | (1 << (EParser.READ - 128)) | (1 << (EParser.RECEIVING - 128)) | (1 << (EParser.RESOURCE - 128)) | (1 << (EParser.RETURN - 128)) | (1 << (EParser.RETURNING - 128)) | (1 << (EParser.ROWS - 128)) | (1 << (EParser.SELF - 128)) | (1 << (EParser.SETTER - 128)) | (1 << (EParser.SINGLETON - 128)) | (1 << (EParser.SORTED - 128)) | (1 << (EParser.STORABLE - 128)) | (1 << (EParser.STORE - 128)) | (1 << (EParser.SWITCH - 128)) | (1 << (EParser.TEST - 128)) | (1 << (EParser.THEN - 128)) | (1 << (EParser.THIS - 128)) | (1 << (EParser.THROW - 128)) | (1 << (EParser.TO - 128)) | (1 << (EParser.TRY - 128)) | (1 << (EParser.VERIFYING - 128)) | (1 << (EParser.WIDGET - 128)) | (1 << (EParser.WITH - 128)) | (1 << (EParser.WHEN - 128)) | (1 << (EParser.WHERE - 128)) | (1 << (EParser.WHILE - 128)) | (1 << (EParser.WRITE - 128)) | (1 << (EParser.BOOLEAN_LITERAL - 128)) | (1 << (EParser.CHAR_LITERAL - 128)) | (1 << (EParser.MIN_INTEGER - 128)) | (1 << (EParser.MAX_INTEGER - 128)) | (1 << (EParser.SYMBOL_IDENTIFIER - 128)) | (1 << (EParser.TYPE_IDENTIFIER - 128)) | (1 << (EParser.VARIABLE_IDENTIFIER - 128)) | (1 << (EParser.NATIVE_IDENTIFIER - 128)) | (1 << (EParser.DOLLAR_IDENTIFIER - 128)) | (1 << (EParser.ARONDBASE_IDENTIFIER - 128)) | (1 << (EParser.TEXT_LITERAL - 128)) | (1 << (EParser.UUID_LITERAL - 128)) | (1 << (EParser.INTEGER_LITERAL - 128)) | (1 << (EParser.HEXA_LITERAL - 128)) | (1 << (EParser.DECIMAL_LITERAL - 128)) | (1 << (EParser.DATETIME_LITERAL - 128)) | (1 << (EParser.TIME_LITERAL - 128)) | (1 << (EParser.DATE_LITERAL - 128)) | (1 << (EParser.PERIOD_LITERAL - 128)) | (1 << (EParser.VERSION_LITERAL - 128)))) != 0)):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[18] = self.native_category_binding_list_sempred
        self._predicates[39] = self.else_if_statement_list_sempred
        self._predicates[45] = self.expression_sempred
        self._predicates[46] = self.unresolved_expression_sempred
        self._predicates[47] = self.unresolved_selector_sempred
        self._predicates[49] = self.invocation_trailer_sempred
        self._predicates[51] = self.instance_expression_sempred
        self._predicates[52] = self.instance_selector_sempred
        self._predicates[53] = self.mutable_instance_expression_sempred
        self._predicates[63] = self.argument_assignment_list_sempred
        self._predicates[64] = self.with_argument_assignment_list_sempred
        self._predicates[67] = self.child_instance_sempred
        self._predicates[95] = self.typedef_sempred
        self._predicates[106] = self.nospace_hyphen_identifier_or_keyword_sempred
        self._predicates[107] = self.nospace_identifier_or_keyword_sempred
        self._predicates[120] = self.any_type_sempred
        self._predicates[158] = self.assignable_instance_sempred
        self._predicates[159] = self.is_expression_sempred
        self._predicates[170] = self.new_token_sempred
        self._predicates[171] = self.key_token_sempred
        self._predicates[172] = self.module_token_sempred
        self._predicates[173] = self.value_token_sempred
        self._predicates[174] = self.symbols_token_sempred
        self._predicates[181] = self.javascript_expression_sempred
        self._predicates[187] = self.javascript_arguments_sempred
        self._predicates[194] = self.python_expression_sempred
        self._predicates[200] = self.python_ordinal_argument_list_sempred
        self._predicates[201] = self.python_named_argument_list_sempred
        self._predicates[203] = self.python_identifier_expression_sempred
        self._predicates[207] = self.java_expression_sempred
        self._predicates[213] = self.java_arguments_sempred
        self._predicates[216] = self.java_identifier_expression_sempred
        self._predicates[217] = self.java_class_identifier_expression_sempred
        self._predicates[221] = self.csharp_expression_sempred
        self._predicates[227] = self.csharp_arguments_sempred
        self._predicates[230] = self.csharp_identifier_expression_sempred
        self._predicates[250] = self.css_identifier_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def native_category_binding_list_sempred(self, localctx:Native_category_binding_listContext, predIndex:int):
            if predIndex == 0:
                return self.precpred(self._ctx, 1)
         

    def else_if_statement_list_sempred(self, localctx:Else_if_statement_listContext, predIndex:int):
            if predIndex == 1:
                return self.precpred(self._ctx, 1)
         

    def expression_sempred(self, localctx:ExpressionContext, predIndex:int):
            if predIndex == 2:
                return self.precpred(self._ctx, 42)
         

            if predIndex == 3:
                return self.precpred(self._ctx, 41)
         

            if predIndex == 4:
                return self.precpred(self._ctx, 40)
         

            if predIndex == 5:
                return self.precpred(self._ctx, 39)
         

            if predIndex == 6:
                return self.precpred(self._ctx, 38)
         

            if predIndex == 7:
                return self.precpred(self._ctx, 36)
         

            if predIndex == 8:
                return self.precpred(self._ctx, 35)
         

            if predIndex == 9:
                return self.precpred(self._ctx, 34)
         

            if predIndex == 10:
                return self.precpred(self._ctx, 33)
         

            if predIndex == 11:
                return self.precpred(self._ctx, 30)
         

            if predIndex == 12:
                return self.precpred(self._ctx, 29)
         

            if predIndex == 13:
                return self.precpred(self._ctx, 28)
         

            if predIndex == 14:
                return self.precpred(self._ctx, 27)
         

            if predIndex == 15:
                return self.precpred(self._ctx, 26)
         

            if predIndex == 16:
                return self.precpred(self._ctx, 25)
         

            if predIndex == 17:
                return self.precpred(self._ctx, 24)
         

            if predIndex == 18:
                return self.precpred(self._ctx, 23)
         

            if predIndex == 19:
                return self.precpred(self._ctx, 22)
         

            if predIndex == 20:
                return self.precpred(self._ctx, 21)
         

            if predIndex == 21:
                return self.precpred(self._ctx, 20)
         

            if predIndex == 22:
                return self.precpred(self._ctx, 19)
         

            if predIndex == 23:
                return self.precpred(self._ctx, 18)
         

            if predIndex == 24:
                return self.precpred(self._ctx, 17)
         

            if predIndex == 25:
                return self.precpred(self._ctx, 16)
         

            if predIndex == 26:
                return self.precpred(self._ctx, 15)
         

            if predIndex == 27:
                return self.precpred(self._ctx, 1)
         

            if predIndex == 28:
                return self.precpred(self._ctx, 37)
         

            if predIndex == 29:
                return self.precpred(self._ctx, 32)
         

            if predIndex == 30:
                return self.precpred(self._ctx, 31)
         

            if predIndex == 31:
                return self.precpred(self._ctx, 8)
         

    def unresolved_expression_sempred(self, localctx:Unresolved_expressionContext, predIndex:int):
            if predIndex == 32:
                return self.precpred(self._ctx, 1)
         

    def unresolved_selector_sempred(self, localctx:Unresolved_selectorContext, predIndex:int):
            if predIndex == 33:
                return self.wasNot(EParser.WS)
         

    def invocation_trailer_sempred(self, localctx:Invocation_trailerContext, predIndex:int):
            if predIndex == 34:
                return self.willBe(EParser.LF)
         

    def instance_expression_sempred(self, localctx:Instance_expressionContext, predIndex:int):
            if predIndex == 35:
                return self.precpred(self._ctx, 1)
         

    def instance_selector_sempred(self, localctx:Instance_selectorContext, predIndex:int):
            if predIndex == 36:
                return self.wasNot(EParser.WS)
         

            if predIndex == 37:
                return self.wasNot(EParser.WS)
         

            if predIndex == 38:
                return self.wasNot(EParser.WS)
         

    def mutable_instance_expression_sempred(self, localctx:Mutable_instance_expressionContext, predIndex:int):
            if predIndex == 39:
                return self.precpred(self._ctx, 1)
         

    def argument_assignment_list_sempred(self, localctx:Argument_assignment_listContext, predIndex:int):
            if predIndex == 40:
                return self.was(EParser.WS)
         

    def with_argument_assignment_list_sempred(self, localctx:With_argument_assignment_listContext, predIndex:int):
            if predIndex == 41:
                return self.precpred(self._ctx, 1)
         

    def child_instance_sempred(self, localctx:Child_instanceContext, predIndex:int):
            if predIndex == 42:
                return self.wasNot(EParser.WS)
         

            if predIndex == 43:
                return self.wasNot(EParser.WS)
         

    def typedef_sempred(self, localctx:TypedefContext, predIndex:int):
            if predIndex == 44:
                return self.precpred(self._ctx, 5)
         

            if predIndex == 45:
                return self.precpred(self._ctx, 4)
         

            if predIndex == 46:
                return self.precpred(self._ctx, 3)
         

    def nospace_hyphen_identifier_or_keyword_sempred(self, localctx:Nospace_hyphen_identifier_or_keywordContext, predIndex:int):
            if predIndex == 47:
                return self.wasNotWhiteSpace()
         

    def nospace_identifier_or_keyword_sempred(self, localctx:Nospace_identifier_or_keywordContext, predIndex:int):
            if predIndex == 48:
                return self.wasNotWhiteSpace()
         

    def any_type_sempred(self, localctx:Any_typeContext, predIndex:int):
            if predIndex == 49:
                return self.precpred(self._ctx, 2)
         

            if predIndex == 50:
                return self.precpred(self._ctx, 1)
         

    def assignable_instance_sempred(self, localctx:Assignable_instanceContext, predIndex:int):
            if predIndex == 51:
                return self.precpred(self._ctx, 1)
         

    def is_expression_sempred(self, localctx:Is_expressionContext, predIndex:int):
            if predIndex == 52:
                return self.willBeAOrAn()
         

    def new_token_sempred(self, localctx:New_tokenContext, predIndex:int):
            if predIndex == 53:
                return self.isText(localctx.i1,"new")
         

    def key_token_sempred(self, localctx:Key_tokenContext, predIndex:int):
            if predIndex == 54:
                return self.isText(localctx.i1,"key")
         

    def module_token_sempred(self, localctx:Module_tokenContext, predIndex:int):
            if predIndex == 55:
                return self.isText(localctx.i1,"module")
         

    def value_token_sempred(self, localctx:Value_tokenContext, predIndex:int):
            if predIndex == 56:
                return self.isText(localctx.i1,"value")
         

    def symbols_token_sempred(self, localctx:Symbols_tokenContext, predIndex:int):
            if predIndex == 57:
                return self.isText(localctx.i1,"symbols")
         

    def javascript_expression_sempred(self, localctx:Javascript_expressionContext, predIndex:int):
            if predIndex == 58:
                return self.precpred(self._ctx, 1)
         

    def javascript_arguments_sempred(self, localctx:Javascript_argumentsContext, predIndex:int):
            if predIndex == 59:
                return self.precpred(self._ctx, 1)
         

    def python_expression_sempred(self, localctx:Python_expressionContext, predIndex:int):
            if predIndex == 60:
                return self.precpred(self._ctx, 1)
         

    def python_ordinal_argument_list_sempred(self, localctx:Python_ordinal_argument_listContext, predIndex:int):
            if predIndex == 61:
                return self.precpred(self._ctx, 1)
         

    def python_named_argument_list_sempred(self, localctx:Python_named_argument_listContext, predIndex:int):
            if predIndex == 62:
                return self.precpred(self._ctx, 1)
         

    def python_identifier_expression_sempred(self, localctx:Python_identifier_expressionContext, predIndex:int):
            if predIndex == 63:
                return self.precpred(self._ctx, 1)
         

    def java_expression_sempred(self, localctx:Java_expressionContext, predIndex:int):
            if predIndex == 64:
                return self.precpred(self._ctx, 1)
         

    def java_arguments_sempred(self, localctx:Java_argumentsContext, predIndex:int):
            if predIndex == 65:
                return self.precpred(self._ctx, 1)
         

    def java_identifier_expression_sempred(self, localctx:Java_identifier_expressionContext, predIndex:int):
            if predIndex == 66:
                return self.precpred(self._ctx, 1)
         

    def java_class_identifier_expression_sempred(self, localctx:Java_class_identifier_expressionContext, predIndex:int):
            if predIndex == 67:
                return self.precpred(self._ctx, 1)
         

    def csharp_expression_sempred(self, localctx:Csharp_expressionContext, predIndex:int):
            if predIndex == 68:
                return self.precpred(self._ctx, 1)
         

    def csharp_arguments_sempred(self, localctx:Csharp_argumentsContext, predIndex:int):
            if predIndex == 69:
                return self.precpred(self._ctx, 1)
         

    def csharp_identifier_expression_sempred(self, localctx:Csharp_identifier_expressionContext, predIndex:int):
            if predIndex == 70:
                return self.precpred(self._ctx, 1)
         

    def css_identifier_sempred(self, localctx:Css_identifierContext, predIndex:int):
            if predIndex == 71:
                return self.precpred(self._ctx, 1)
         




