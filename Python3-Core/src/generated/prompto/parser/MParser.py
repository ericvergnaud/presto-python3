# Generated from MParser.g4 by ANTLR 4.7.1
# encoding: utf-8
from antlr4 import *
from io import StringIO
from typing.io import TextIO
import sys

from .AbstractParser import AbstractParser

def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\3\u00b8")
        buf.write("\u0a98\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7")
        buf.write("\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r\4\16")
        buf.write("\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23\t\23")
        buf.write("\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31")
        buf.write("\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36")
        buf.write("\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t")
        buf.write("&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t,\4-\t-\4.\t.\4")
        buf.write("/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64\t\64")
        buf.write("\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\49\t9\4:\t:\4;\t")
        buf.write(";\4<\t<\4=\t=\4>\t>\4?\t?\4@\t@\4A\tA\4B\tB\4C\tC\4D\t")
        buf.write("D\4E\tE\4F\tF\4G\tG\4H\tH\4I\tI\4J\tJ\4K\tK\4L\tL\4M\t")
        buf.write("M\4N\tN\4O\tO\4P\tP\4Q\tQ\4R\tR\4S\tS\4T\tT\4U\tU\4V\t")
        buf.write("V\4W\tW\4X\tX\4Y\tY\4Z\tZ\4[\t[\4\\\t\\\4]\t]\4^\t^\4")
        buf.write("_\t_\4`\t`\4a\ta\4b\tb\4c\tc\4d\td\4e\te\4f\tf\4g\tg\4")
        buf.write("h\th\4i\ti\4j\tj\4k\tk\4l\tl\4m\tm\4n\tn\4o\to\4p\tp\4")
        buf.write("q\tq\4r\tr\4s\ts\4t\tt\4u\tu\4v\tv\4w\tw\4x\tx\4y\ty\4")
        buf.write("z\tz\4{\t{\4|\t|\4}\t}\4~\t~\4\177\t\177\4\u0080\t\u0080")
        buf.write("\4\u0081\t\u0081\4\u0082\t\u0082\4\u0083\t\u0083\4\u0084")
        buf.write("\t\u0084\4\u0085\t\u0085\4\u0086\t\u0086\4\u0087\t\u0087")
        buf.write("\4\u0088\t\u0088\4\u0089\t\u0089\4\u008a\t\u008a\4\u008b")
        buf.write("\t\u008b\4\u008c\t\u008c\4\u008d\t\u008d\4\u008e\t\u008e")
        buf.write("\4\u008f\t\u008f\4\u0090\t\u0090\4\u0091\t\u0091\4\u0092")
        buf.write("\t\u0092\4\u0093\t\u0093\4\u0094\t\u0094\4\u0095\t\u0095")
        buf.write("\4\u0096\t\u0096\4\u0097\t\u0097\4\u0098\t\u0098\4\u0099")
        buf.write("\t\u0099\4\u009a\t\u009a\4\u009b\t\u009b\4\u009c\t\u009c")
        buf.write("\4\u009d\t\u009d\4\u009e\t\u009e\4\u009f\t\u009f\4\u00a0")
        buf.write("\t\u00a0\4\u00a1\t\u00a1\4\u00a2\t\u00a2\4\u00a3\t\u00a3")
        buf.write("\4\u00a4\t\u00a4\4\u00a5\t\u00a5\4\u00a6\t\u00a6\4\u00a7")
        buf.write("\t\u00a7\4\u00a8\t\u00a8\4\u00a9\t\u00a9\4\u00aa\t\u00aa")
        buf.write("\4\u00ab\t\u00ab\4\u00ac\t\u00ac\4\u00ad\t\u00ad\4\u00ae")
        buf.write("\t\u00ae\4\u00af\t\u00af\4\u00b0\t\u00b0\4\u00b1\t\u00b1")
        buf.write("\4\u00b2\t\u00b2\4\u00b3\t\u00b3\4\u00b4\t\u00b4\4\u00b5")
        buf.write("\t\u00b5\4\u00b6\t\u00b6\4\u00b7\t\u00b7\4\u00b8\t\u00b8")
        buf.write("\4\u00b9\t\u00b9\4\u00ba\t\u00ba\4\u00bb\t\u00bb\4\u00bc")
        buf.write("\t\u00bc\4\u00bd\t\u00bd\4\u00be\t\u00be\4\u00bf\t\u00bf")
        buf.write("\4\u00c0\t\u00c0\4\u00c1\t\u00c1\4\u00c2\t\u00c2\4\u00c3")
        buf.write("\t\u00c3\4\u00c4\t\u00c4\4\u00c5\t\u00c5\4\u00c6\t\u00c6")
        buf.write("\4\u00c7\t\u00c7\4\u00c8\t\u00c8\4\u00c9\t\u00c9\4\u00ca")
        buf.write("\t\u00ca\4\u00cb\t\u00cb\4\u00cc\t\u00cc\4\u00cd\t\u00cd")
        buf.write("\4\u00ce\t\u00ce\4\u00cf\t\u00cf\4\u00d0\t\u00d0\4\u00d1")
        buf.write("\t\u00d1\4\u00d2\t\u00d2\4\u00d3\t\u00d3\4\u00d4\t\u00d4")
        buf.write("\4\u00d5\t\u00d5\4\u00d6\t\u00d6\4\u00d7\t\u00d7\4\u00d8")
        buf.write("\t\u00d8\4\u00d9\t\u00d9\4\u00da\t\u00da\4\u00db\t\u00db")
        buf.write("\4\u00dc\t\u00dc\4\u00dd\t\u00dd\4\u00de\t\u00de\4\u00df")
        buf.write("\t\u00df\4\u00e0\t\u00e0\4\u00e1\t\u00e1\4\u00e2\t\u00e2")
        buf.write("\4\u00e3\t\u00e3\4\u00e4\t\u00e4\4\u00e5\t\u00e5\4\u00e6")
        buf.write("\t\u00e6\4\u00e7\t\u00e7\4\u00e8\t\u00e8\4\u00e9\t\u00e9")
        buf.write("\4\u00ea\t\u00ea\4\u00eb\t\u00eb\4\u00ec\t\u00ec\4\u00ed")
        buf.write("\t\u00ed\4\u00ee\t\u00ee\4\u00ef\t\u00ef\4\u00f0\t\u00f0")
        buf.write("\4\u00f1\t\u00f1\4\u00f2\t\u00f2\4\u00f3\t\u00f3\4\u00f4")
        buf.write("\t\u00f4\4\u00f5\t\u00f5\4\u00f6\t\u00f6\3\2\3\2\3\2\3")
        buf.write("\2\3\2\3\2\5\2\u01f3\n\2\3\2\5\2\u01f6\n\2\3\2\3\2\3\2")
        buf.write("\3\2\3\2\3\2\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3")
        buf.write("\4\3\4\3\4\3\4\3\5\3\5\3\5\5\5\u020f\n\5\3\5\3\5\3\6\5")
        buf.write("\6\u0214\n\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3")
        buf.write("\6\3\6\5\6\u0222\n\6\3\6\3\6\3\6\3\6\5\6\u0228\n\6\5\6")
        buf.write("\u022a\n\6\5\6\u022c\n\6\3\6\3\6\3\7\3\7\3\7\5\7\u0233")
        buf.write("\n\7\3\7\3\7\3\b\3\b\3\b\3\b\5\b\u023b\n\b\3\b\3\b\3\b")
        buf.write("\3\b\3\b\5\b\u0242\n\b\3\b\3\b\3\t\3\t\3\t\3\t\3\t\3\t")
        buf.write("\3\t\3\t\3\t\3\t\3\t\3\t\3\n\5\n\u0253\n\n\3\n\3\n\3\n")
        buf.write("\3\n\3\n\3\n\3\n\3\n\3\n\5\n\u025e\n\n\3\n\3\n\3\n\3\n")
        buf.write("\3\n\5\n\u0265\n\n\3\n\3\n\3\13\3\13\3\13\3\13\3\13\3")
        buf.write("\13\3\13\3\13\3\13\5\13\u0272\n\13\3\13\3\13\3\f\3\f\3")
        buf.write("\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\5\r\u0280\n\r\3\r\3\r\3")
        buf.write("\r\3\r\3\r\3\16\3\16\3\16\3\16\3\16\3\16\3\16\3\16\3\16")
        buf.write("\3\16\3\17\3\17\3\17\5\17\u0294\n\17\3\17\3\17\3\17\3")
        buf.write("\17\3\17\3\17\3\17\3\17\3\20\3\20\3\20\3\20\3\20\3\20")
        buf.write("\3\20\3\20\3\20\3\20\3\21\3\21\3\21\5\21\u02ab\n\21\3")
        buf.write("\21\3\21\3\21\3\21\3\21\3\21\3\21\3\21\3\22\5\22\u02b6")
        buf.write("\n\22\3\22\3\22\3\22\3\22\3\22\5\22\u02bd\n\22\3\22\3")
        buf.write("\22\3\22\3\22\3\22\3\22\3\22\5\22\u02c6\n\22\3\22\3\22")
        buf.write("\3\23\5\23\u02cb\n\23\3\23\3\23\3\23\3\23\3\23\5\23\u02d2")
        buf.write("\n\23\3\23\3\23\3\23\3\23\3\23\3\23\3\23\5\23\u02db\n")
        buf.write("\23\3\23\3\23\3\24\3\24\3\24\3\24\3\24\3\24\3\24\3\24")
        buf.write("\3\25\3\25\3\25\3\25\3\25\3\25\3\25\7\25\u02ee\n\25\f")
        buf.write("\25\16\25\u02f1\13\25\3\26\3\26\3\26\3\26\3\26\5\26\u02f8")
        buf.write("\n\26\3\26\3\26\3\26\5\26\u02fd\n\26\3\27\3\27\3\27\3")
        buf.write("\27\5\27\u0303\n\27\3\27\3\27\3\27\5\27\u0308\n\27\3\27")
        buf.write("\3\27\3\27\3\27\5\27\u030e\n\27\3\27\3\27\3\30\3\30\5")
        buf.write("\30\u0314\n\30\3\30\3\30\3\30\5\30\u0319\n\30\3\30\3\30")
        buf.write("\3\30\5\30\u031e\n\30\3\30\3\30\3\30\3\30\3\30\3\31\3")
        buf.write("\31\3\31\3\31\3\31\3\31\3\31\3\31\3\31\3\31\3\31\3\31")
        buf.write("\3\31\3\31\3\31\3\31\3\31\5\31\u0336\n\31\3\32\3\32\3")
        buf.write("\33\3\33\3\33\3\33\3\33\3\33\3\33\5\33\u0341\n\33\3\33")
        buf.write("\3\33\5\33\u0345\n\33\3\34\3\34\3\34\3\34\3\34\3\34\3")
        buf.write("\34\3\34\3\34\3\34\3\34\3\34\3\34\3\34\3\34\3\34\3\34")
        buf.write("\3\34\3\34\3\34\5\34\u035b\n\34\3\35\3\35\3\35\3\35\3")
        buf.write("\36\3\36\3\36\3\36\3\36\3\36\3\36\3\36\3\36\3\36\5\36")
        buf.write("\u036b\n\36\3\36\3\36\3\36\3\36\3\36\5\36\u0372\n\36\3")
        buf.write("\36\3\36\3\36\3\36\3\36\3\36\5\36\u037a\n\36\3\37\3\37")
        buf.write("\3\37\5\37\u037f\n\37\3\37\3\37\3 \3 \3 \5 \u0386\n \3")
        buf.write(" \3 \3 \3 \5 \u038c\n \3 \3 \3 \3 \3 \5 \u0393\n \3!\3")
        buf.write("!\3!\3!\3!\3!\3!\3\"\3\"\3\"\3\"\3\"\3\"\3\"\3#\3#\3#")
        buf.write("\3#\3#\3#\3#\3#\3#\3#\3#\3#\3#\5#\u03b0\n#\3#\3#\3$\3")
        buf.write("$\3$\3$\3$\3$\3$\3$\3$\3$\3$\3$\3$\3$\3$\5$\u03c3\n$\3")
        buf.write("%\3%\3%\3%\5%\u03c9\n%\3%\3%\3%\3%\3%\3%\3%\3&\3&\3&\3")
        buf.write("&\3&\3&\3&\3&\3&\3\'\3\'\3\'\3\'\3\'\3\'\3\'\3(\3(\3(")
        buf.write("\3(\3(\3(\3(\3(\3(\5(\u03eb\n(\3(\3(\3(\3(\3(\3(\3(\5")
        buf.write("(\u03f4\n(\3)\3)\3)\3)\3)\3)\3)\3)\3)\3)\3)\3)\3)\3)\3")
        buf.write(")\3)\3)\3)\3)\7)\u0409\n)\f)\16)\u040c\13)\3*\3*\3*\3")
        buf.write("+\3+\3+\3+\3+\3+\3+\3+\5+\u0419\n+\3+\3+\3+\3+\3+\3+\3")
        buf.write("+\5+\u0422\n+\3+\3+\3+\3+\3+\3+\3+\5+\u042b\n+\3+\3+\3")
        buf.write(",\3,\3,\3,\3,\3,\3,\3,\3,\3,\3,\3,\3,\3,\3,\3,\3,\3,\3")
        buf.write(",\5,\u0442\n,\3-\3-\3.\3.\5.\u0448\n.\3/\3/\3/\3/\3/\3")
        buf.write("/\3/\3/\3/\3/\3/\3/\3/\3/\3/\3/\3/\3/\3/\3/\3/\5/\u045f")
        buf.write("\n/\3/\3/\3/\3/\3/\3/\3/\3/\3/\3/\3/\3/\3/\3/\3/\3/\3")
        buf.write("/\3/\3/\3/\3/\3/\3/\3/\3/\3/\3/\3/\3/\3/\3/\3/\3/\3/\3")
        buf.write("/\3/\3/\3/\3/\3/\3/\3/\3/\3/\3/\3/\3/\3/\3/\3/\3/\3/\3")
        buf.write("/\3/\3/\3/\3/\3/\3/\3/\3/\3/\3/\3/\3/\3/\3/\3/\3/\3/\3")
        buf.write("/\3/\3/\3/\3/\3/\3/\3/\3/\3/\3/\3/\3/\3/\3/\3/\3/\3/\3")
        buf.write("/\3/\3/\3/\3/\3/\3/\3/\3/\3/\3/\3/\3/\3/\3/\3/\3/\3/\3")
        buf.write("/\3/\3/\3/\7/\u04cf\n/\f/\16/\u04d2\13/\3\60\3\60\3\61")
        buf.write("\3\61\3\61\3\61\3\61\5\61\u04db\n\61\3\62\3\62\3\62\3")
        buf.write("\62\3\62\7\62\u04e2\n\62\f\62\16\62\u04e5\13\62\3\63\3")
        buf.write("\63\3\63\3\63\3\63\3\63\7\63\u04ed\n\63\f\63\16\63\u04f0")
        buf.write("\13\63\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\5\64\u04fa")
        buf.write("\n\64\3\65\3\65\3\65\3\65\3\65\3\65\3\65\3\65\3\65\3\65")
        buf.write("\3\65\3\65\5\65\u0508\n\65\3\66\3\66\3\66\5\66\u050d\n")
        buf.write("\66\3\66\3\66\3\67\3\67\3\67\5\67\u0514\n\67\3\67\3\67")
        buf.write("\38\38\38\38\38\58\u051d\n8\38\38\38\38\38\58\u0524\n")
        buf.write("8\38\38\58\u0528\n8\39\39\39\39\39\3:\3:\3:\3:\3:\5:\u0534")
        buf.write("\n:\3:\3:\3:\7:\u0539\n:\f:\16:\u053c\13:\3;\3;\3;\3;")
        buf.write("\5;\u0542\n;\3<\3<\3<\3<\3<\3=\3=\3=\3=\3=\3=\3>\3>\3")
        buf.write(">\5>\u0552\n>\3>\3>\3>\3>\3>\3>\3>\3>\3>\5>\u055d\n>\3")
        buf.write(">\3>\5>\u0561\n>\3>\3>\3>\5>\u0566\n>\3>\3>\3>\5>\u056b")
        buf.write("\n>\5>\u056d\n>\3?\3?\3?\5?\u0572\n?\3?\3?\3?\3?\3?\3")
        buf.write("?\3?\3?\3?\3?\3?\3?\3?\3?\3?\3?\3?\5?\u0585\n?\3?\3?\5")
        buf.write("?\u0589\n?\3?\3?\3?\5?\u058e\n?\3?\3?\3?\5?\u0593\n?\3")
        buf.write("?\3?\3?\3?\3?\3?\3?\3?\5?\u059d\n?\3@\3@\5@\u05a1\n@\3")
        buf.write("@\3@\3@\3@\3@\3@\3@\5@\u05aa\n@\3@\3@\3A\3A\3A\3A\3B\3")
        buf.write("B\3B\3B\3B\3B\3B\3B\5B\u05ba\nB\3C\3C\3C\3C\3D\7D\u05c1")
        buf.write("\nD\fD\16D\u05c4\13D\3E\6E\u05c7\nE\rE\16E\u05c8\3F\7")
        buf.write("F\u05cc\nF\fF\16F\u05cf\13F\3G\6G\u05d2\nG\rG\16G\u05d3")
        buf.write("\3G\3G\3H\7H\u05d9\nH\fH\16H\u05dc\13H\3H\3H\3I\3I\3J")
        buf.write("\5J\u05e3\nJ\3J\3J\3J\3K\3K\3K\3K\7K\u05ec\nK\fK\16K\u05ef")
        buf.write("\13K\3L\3L\3L\7L\u05f4\nL\fL\16L\u05f7\13L\3L\3L\3L\7")
        buf.write("L\u05fc\nL\fL\16L\u05ff\13L\3L\3L\3L\3L\3L\3L\5L\u0607")
        buf.write("\nL\3M\3M\3M\3M\3M\5M\u060e\nM\3N\3N\3O\3O\3P\3P\5P\u0616")
        buf.write("\nP\3Q\3Q\3Q\3Q\7Q\u061c\nQ\fQ\16Q\u061f\13Q\3R\3R\3R")
        buf.write("\3R\7R\u0625\nR\fR\16R\u0628\13R\3S\3S\3S\7S\u062d\nS")
        buf.write("\fS\16S\u0630\13S\3T\3T\3T\3T\3T\3T\3T\3T\3T\3T\5T\u063c")
        buf.write("\nT\3U\5U\u063f\nU\3U\3U\5U\u0643\nU\3U\3U\3V\5V\u0648")
        buf.write("\nV\3V\3V\5V\u064c\nV\3V\3V\3W\3W\3W\7W\u0653\nW\fW\16")
        buf.write("W\u0656\13W\3X\3X\3X\3X\3X\3X\3Y\3Y\3Y\3Y\3Y\3Y\3Y\3Y")
        buf.write("\3Y\3Y\3Y\3Y\5Y\u066a\nY\3Y\3Y\3Y\3Y\3Y\3Y\3Y\7Y\u0673")
        buf.write("\nY\fY\16Y\u0676\13Y\3Z\3Z\5Z\u067a\nZ\3[\3[\3[\3[\3[")
        buf.write("\3[\3[\3[\3[\3[\3[\3[\3[\3[\3[\3[\5[\u068c\n[\3\\\3\\")
        buf.write("\3]\5]\u0691\n]\3]\3]\3^\3^\3_\3_\3_\5_\u069a\n_\3`\3")
        buf.write("`\5`\u069e\n`\3a\3a\3a\7a\u06a3\na\fa\16a\u06a6\13a\3")
        buf.write("b\3b\5b\u06aa\nb\3c\3c\5c\u06ae\nc\3d\3d\3d\3d\3e\3e\3")
        buf.write("e\3f\3f\3f\5f\u06ba\nf\3g\3g\3h\3h\3i\3i\3j\3j\3k\3k\3")
        buf.write("l\3l\3l\7l\u06c9\nl\fl\16l\u06cc\13l\3m\3m\5m\u06d0\n")
        buf.write("m\3m\5m\u06d3\nm\3n\3n\5n\u06d7\nn\3o\3o\3o\5o\u06dc\n")
        buf.write("o\3p\3p\3p\3q\3q\5q\u06e3\nq\3r\3r\3r\3r\3r\3r\3r\3r\3")
        buf.write("r\7r\u06ee\nr\fr\16r\u06f1\13r\3s\3s\3s\3s\7s\u06f7\n")
        buf.write("s\fs\16s\u06fa\13s\3t\3t\3t\7t\u06ff\nt\ft\16t\u0702\13")
        buf.write("t\3t\3t\3t\7t\u0707\nt\ft\16t\u070a\13t\3t\3t\3t\3t\3")
        buf.write("t\5t\u0711\nt\3u\3u\3u\3u\7u\u0717\nu\fu\16u\u071a\13")
        buf.write("u\3v\3v\3v\5v\u071f\nv\3w\3w\3w\3w\3w\3w\3w\3w\3w\3w\5")
        buf.write("w\u072b\nw\3x\3x\5x\u072f\nx\3y\3y\3y\3y\3y\3y\7y\u0737")
        buf.write("\ny\fy\16y\u073a\13y\3z\3z\3z\7z\u073f\nz\fz\16z\u0742")
        buf.write("\13z\3z\5z\u0745\nz\3{\3{\3{\3{\5{\u074b\n{\3{\3{\3{\7")
        buf.write("{\u0750\n{\f{\16{\u0753\13{\3{\3{\5{\u0757\n{\3|\3|\3")
        buf.write("|\7|\u075c\n|\f|\16|\u075f\13|\3}\3}\3}\7}\u0764\n}\f")
        buf.write("}\16}\u0767\13}\3~\3~\3~\3~\5~\u076d\n~\3\177\3\177\3")
        buf.write("\u0080\3\u0080\3\u0080\3\u0080\7\u0080\u0775\n\u0080\f")
        buf.write("\u0080\16\u0080\u0778\13\u0080\3\u0081\3\u0081\3\u0081")
        buf.write("\3\u0081\3\u0081\3\u0081\3\u0081\3\u0081\3\u0081\3\u0081")
        buf.write("\5\u0081\u0784\n\u0081\3\u0082\3\u0082\5\u0082\u0788\n")
        buf.write("\u0082\3\u0082\5\u0082\u078b\n\u0082\3\u0083\3\u0083\5")
        buf.write("\u0083\u078f\n\u0083\3\u0083\5\u0083\u0792\n\u0083\3\u0084")
        buf.write("\3\u0084\3\u0084\3\u0084\7\u0084\u0798\n\u0084\f\u0084")
        buf.write("\16\u0084\u079b\13\u0084\3\u0085\3\u0085\3\u0085\3\u0085")
        buf.write("\7\u0085\u07a1\n\u0085\f\u0085\16\u0085\u07a4\13\u0085")
        buf.write("\3\u0086\3\u0086\3\u0086\3\u0086\7\u0086\u07aa\n\u0086")
        buf.write("\f\u0086\16\u0086\u07ad\13\u0086\3\u0087\3\u0087\3\u0087")
        buf.write("\3\u0087\7\u0087\u07b3\n\u0087\f\u0087\16\u0087\u07b6")
        buf.write("\13\u0087\3\u0088\3\u0088\3\u0088\3\u0088\3\u0088\3\u0088")
        buf.write("\3\u0088\3\u0088\3\u0088\3\u0088\3\u0088\3\u0088\3\u0088")
        buf.write("\3\u0088\5\u0088\u07c6\n\u0088\3\u0089\3\u0089\3\u0089")
        buf.write("\3\u0089\3\u0089\3\u0089\3\u0089\3\u0089\3\u0089\3\u0089")
        buf.write("\3\u0089\3\u0089\3\u0089\3\u0089\3\u0089\5\u0089\u07d7")
        buf.write("\n\u0089\3\u008a\3\u008a\3\u008a\7\u008a\u07dc\n\u008a")
        buf.write("\f\u008a\16\u008a\u07df\13\u008a\3\u008b\3\u008b\3\u008c")
        buf.write("\3\u008c\3\u008c\3\u008c\3\u008d\3\u008d\5\u008d\u07e9")
        buf.write("\n\u008d\3\u008e\3\u008e\3\u008e\3\u008e\3\u008e\3\u008e")
        buf.write("\5\u008e\u07f1\n\u008e\3\u008f\5\u008f\u07f4\n\u008f\3")
        buf.write("\u008f\3\u008f\5\u008f\u07f8\n\u008f\3\u008f\3\u008f\3")
        buf.write("\u0090\5\u0090\u07fd\n\u0090\3\u0090\3\u0090\3\u0090\3")
        buf.write("\u0090\3\u0090\3\u0090\3\u0090\3\u0090\5\u0090\u0807\n")
        buf.write("\u0090\3\u0091\3\u0091\5\u0091\u080b\n\u0091\3\u0091\3")
        buf.write("\u0091\3\u0092\3\u0092\3\u0092\3\u0092\3\u0092\7\u0092")
        buf.write("\u0814\n\u0092\f\u0092\16\u0092\u0817\13\u0092\5\u0092")
        buf.write("\u0819\n\u0092\3\u0093\3\u0093\3\u0093\7\u0093\u081e\n")
        buf.write("\u0093\f\u0093\16\u0093\u0821\13\u0093\3\u0094\3\u0094")
        buf.write("\3\u0094\3\u0094\3\u0095\3\u0095\5\u0095\u0829\n\u0095")
        buf.write("\3\u0096\3\u0096\3\u0096\3\u0096\3\u0096\3\u0096\3\u0096")
        buf.write("\3\u0096\3\u0096\5\u0096\u0834\n\u0096\3\u0097\3\u0097")
        buf.write("\3\u0097\3\u0097\3\u0098\3\u0098\3\u0098\3\u0098\3\u0098")
        buf.write("\7\u0098\u083f\n\u0098\f\u0098\16\u0098\u0842\13\u0098")
        buf.write("\3\u0099\3\u0099\3\u0099\3\u0099\5\u0099\u0848\n\u0099")
        buf.write("\3\u009a\3\u009a\3\u009a\3\u009a\3\u009a\3\u009a\3\u009a")
        buf.write("\3\u009a\5\u009a\u0852\n\u009a\3\u009b\3\u009b\3\u009b")
        buf.write("\3\u009b\3\u009b\3\u009c\3\u009c\3\u009c\5\u009c\u085c")
        buf.write("\n\u009c\3\u009c\5\u009c\u085f\n\u009c\3\u009d\3\u009d")
        buf.write("\5\u009d\u0863\n\u009d\3\u009e\3\u009e\3\u009e\3\u009e")
        buf.write("\3\u009e\3\u009f\3\u009f\3\u009f\3\u009f\3\u009f\3\u00a0")
        buf.write("\3\u00a0\3\u00a0\7\u00a0\u0872\n\u00a0\f\u00a0\16\u00a0")
        buf.write("\u0875\13\u00a0\3\u00a1\3\u00a1\3\u00a1\7\u00a1\u087a")
        buf.write("\n\u00a1\f\u00a1\16\u00a1\u087d\13\u00a1\3\u00a1\5\u00a1")
        buf.write("\u0880\n\u00a1\3\u00a2\3\u00a2\3\u00a2\3\u00a2\3\u00a2")
        buf.write("\3\u00a2\5\u00a2\u0888\n\u00a2\3\u00a3\3\u00a3\3\u00a4")
        buf.write("\3\u00a4\3\u00a4\3\u00a5\3\u00a5\3\u00a5\3\u00a6\3\u00a6")
        buf.write("\3\u00a6\3\u00a7\3\u00a7\3\u00a7\3\u00a8\3\u00a8\3\u00a8")
        buf.write("\3\u00a9\3\u00a9\3\u00aa\3\u00aa\3\u00ab\3\u00ab\3\u00ac")
        buf.write("\3\u00ac\3\u00ad\3\u00ad\3\u00ae\3\u00ae\3\u00ae\3\u00ae")
        buf.write("\3\u00ae\3\u00ae\3\u00ae\5\u00ae\u08ac\n\u00ae\3\u00af")
        buf.write("\3\u00af\3\u00af\3\u00af\3\u00af\7\u00af\u08b3\n\u00af")
        buf.write("\f\u00af\16\u00af\u08b6\13\u00af\3\u00b0\3\u00b0\3\u00b0")
        buf.write("\3\u00b0\3\u00b0\3\u00b0\3\u00b0\5\u00b0\u08bf\n\u00b0")
        buf.write("\3\u00b1\3\u00b1\3\u00b2\3\u00b2\3\u00b2\3\u00b3\3\u00b3")
        buf.write("\3\u00b3\3\u00b3\3\u00b3\5\u00b3\u08cb\n\u00b3\3\u00b4")
        buf.write("\3\u00b4\3\u00b4\5\u00b4\u08d0\n\u00b4\3\u00b4\3\u00b4")
        buf.write("\3\u00b5\3\u00b5\3\u00b5\3\u00b5\3\u00b5\3\u00b5\7\u00b5")
        buf.write("\u08da\n\u00b5\f\u00b5\16\u00b5\u08dd\13\u00b5\3\u00b6")
        buf.write("\3\u00b6\3\u00b6\3\u00b6\3\u00b7\3\u00b7\3\u00b7\3\u00b7")
        buf.write("\3\u00b8\3\u00b8\3\u00b9\3\u00b9\3\u00b9\3\u00b9\3\u00b9")
        buf.write("\5\u00b9\u08ee\n\u00b9\3\u00ba\3\u00ba\3\u00bb\3\u00bb")
        buf.write("\3\u00bb\5\u00bb\u08f5\n\u00bb\3\u00bc\3\u00bc\3\u00bc")
        buf.write("\3\u00bc\3\u00bc\7\u00bc\u08fc\n\u00bc\f\u00bc\16\u00bc")
        buf.write("\u08ff\13\u00bc\3\u00bd\3\u00bd\3\u00bd\3\u00bd\3\u00bd")
        buf.write("\5\u00bd\u0906\n\u00bd\3\u00be\3\u00be\3\u00bf\3\u00bf")
        buf.write("\3\u00bf\3\u00bf\3\u00bf\3\u00bf\5\u00bf\u0910\n\u00bf")
        buf.write("\3\u00c0\3\u00c0\3\u00c0\5\u00c0\u0915\n\u00c0\3\u00c0")
        buf.write("\3\u00c0\3\u00c1\3\u00c1\3\u00c1\3\u00c1\3\u00c1\3\u00c1")
        buf.write("\5\u00c1\u091f\n\u00c1\3\u00c2\3\u00c2\3\u00c2\3\u00c2")
        buf.write("\3\u00c2\3\u00c2\7\u00c2\u0927\n\u00c2\f\u00c2\16\u00c2")
        buf.write("\u092a\13\u00c2\3\u00c3\3\u00c3\3\u00c3\3\u00c3\3\u00c3")
        buf.write("\3\u00c3\3\u00c3\3\u00c3\3\u00c3\3\u00c3\3\u00c3\7\u00c3")
        buf.write("\u0937\n\u00c3\f\u00c3\16\u00c3\u093a\13\u00c3\3\u00c4")
        buf.write("\3\u00c4\3\u00c4\3\u00c4\3\u00c5\3\u00c5\3\u00c5\5\u00c5")
        buf.write("\u0943\n\u00c5\3\u00c5\3\u00c5\3\u00c5\7\u00c5\u0948\n")
        buf.write("\u00c5\f\u00c5\16\u00c5\u094b\13\u00c5\3\u00c6\3\u00c6")
        buf.write("\3\u00c6\3\u00c6\3\u00c6\5\u00c6\u0952\n\u00c6\3\u00c7")
        buf.write("\3\u00c7\3\u00c8\3\u00c8\3\u00c8\3\u00c8\3\u00c8\3\u00c8")
        buf.write("\3\u00c8\5\u00c8\u095d\n\u00c8\3\u00c9\3\u00c9\3\u00c9")
        buf.write("\3\u00c9\3\u00c9\7\u00c9\u0964\n\u00c9\f\u00c9\16\u00c9")
        buf.write("\u0967\13\u00c9\3\u00ca\3\u00ca\3\u00ca\3\u00ca\3\u00ca")
        buf.write("\5\u00ca\u096e\n\u00ca\3\u00cb\3\u00cb\3\u00cc\3\u00cc")
        buf.write("\3\u00cc\3\u00cd\3\u00cd\3\u00cd\5\u00cd\u0978\n\u00cd")
        buf.write("\3\u00ce\3\u00ce\3\u00ce\5\u00ce\u097d\n\u00ce\3\u00ce")
        buf.write("\3\u00ce\3\u00cf\3\u00cf\3\u00cf\3\u00cf\3\u00cf\3\u00cf")
        buf.write("\7\u00cf\u0987\n\u00cf\f\u00cf\16\u00cf\u098a\13\u00cf")
        buf.write("\3\u00d0\3\u00d0\3\u00d0\3\u00d0\3\u00d1\3\u00d1\3\u00d1")
        buf.write("\3\u00d1\3\u00d2\3\u00d2\3\u00d2\3\u00d2\3\u00d2\3\u00d2")
        buf.write("\7\u00d2\u099a\n\u00d2\f\u00d2\16\u00d2\u099d\13\u00d2")
        buf.write("\3\u00d3\3\u00d3\3\u00d3\3\u00d3\3\u00d3\7\u00d3\u09a4")
        buf.write("\n\u00d3\f\u00d3\16\u00d3\u09a7\13\u00d3\3\u00d4\3\u00d4")
        buf.write("\3\u00d4\3\u00d4\3\u00d4\5\u00d4\u09ae\n\u00d4\3\u00d5")
        buf.write("\3\u00d5\3\u00d6\3\u00d6\3\u00d6\3\u00d6\3\u00d6\3\u00d6")
        buf.write("\3\u00d6\5\u00d6\u09b9\n\u00d6\3\u00d7\3\u00d7\3\u00d7")
        buf.write("\3\u00d7\3\u00d7\7\u00d7\u09c0\n\u00d7\f\u00d7\16\u00d7")
        buf.write("\u09c3\13\u00d7\3\u00d8\3\u00d8\3\u00d8\3\u00d8\3\u00d8")
        buf.write("\5\u00d8\u09ca\n\u00d8\3\u00d9\3\u00d9\3\u00da\3\u00da")
        buf.write("\3\u00da\3\u00db\3\u00db\3\u00db\5\u00db\u09d4\n\u00db")
        buf.write("\3\u00dc\3\u00dc\3\u00dc\5\u00dc\u09d9\n\u00dc\3\u00dc")
        buf.write("\3\u00dc\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd")
        buf.write("\7\u00dd\u09e3\n\u00dd\f\u00dd\16\u00dd\u09e6\13\u00dd")
        buf.write("\3\u00de\3\u00de\3\u00de\3\u00de\3\u00df\3\u00df\3\u00df")
        buf.write("\3\u00df\3\u00e0\3\u00e0\3\u00e0\5\u00e0\u09f3\n\u00e0")
        buf.write("\3\u00e0\3\u00e0\3\u00e0\7\u00e0\u09f8\n\u00e0\f\u00e0")
        buf.write("\16\u00e0\u09fb\13\u00e0\3\u00e1\3\u00e1\3\u00e1\3\u00e1")
        buf.write("\3\u00e1\5\u00e1\u0a02\n\u00e1\3\u00e2\3\u00e2\3\u00e3")
        buf.write("\3\u00e3\5\u00e3\u0a08\n\u00e3\3\u00e4\3\u00e4\3\u00e4")
        buf.write("\5\u00e4\u0a0d\n\u00e4\3\u00e4\3\u00e4\5\u00e4\u0a11\n")
        buf.write("\u00e4\3\u00e5\3\u00e5\5\u00e5\u0a15\n\u00e5\3\u00e5\3")
        buf.write("\u00e5\3\u00e6\3\u00e6\3\u00e6\5\u00e6\u0a1c\n\u00e6\3")
        buf.write("\u00e7\3\u00e7\3\u00e7\3\u00e7\3\u00e8\3\u00e8\3\u00e8")
        buf.write("\3\u00e8\7\u00e8\u0a26\n\u00e8\f\u00e8\16\u00e8\u0a29")
        buf.write("\13\u00e8\3\u00e8\3\u00e8\3\u00e8\3\u00e9\3\u00e9\3\u00e9")
        buf.write("\3\u00e9\7\u00e9\u0a32\n\u00e9\f\u00e9\16\u00e9\u0a35")
        buf.write("\13\u00e9\3\u00e9\3\u00e9\3\u00ea\3\u00ea\3\u00ea\3\u00ea")
        buf.write("\3\u00ea\3\u00eb\3\u00eb\3\u00eb\7\u00eb\u0a41\n\u00eb")
        buf.write("\f\u00eb\16\u00eb\u0a44\13\u00eb\3\u00ec\3\u00ec\7\u00ec")
        buf.write("\u0a48\n\u00ec\f\u00ec\16\u00ec\u0a4b\13\u00ec\3\u00ed")
        buf.write("\3\u00ed\3\u00ed\5\u00ed\u0a50\n\u00ed\3\u00ed\3\u00ed")
        buf.write("\3\u00ee\3\u00ee\3\u00ee\3\u00ee\3\u00ee\5\u00ee\u0a59")
        buf.write("\n\u00ee\3\u00ef\6\u00ef\u0a5c\n\u00ef\r\u00ef\16\u00ef")
        buf.write("\u0a5d\3\u00f0\3\u00f0\3\u00f0\3\u00f0\5\u00f0\u0a64\n")
        buf.write("\u00f0\3\u00f0\5\u00f0\u0a67\n\u00f0\3\u00f1\6\u00f1\u0a6a")
        buf.write("\n\u00f1\r\u00f1\16\u00f1\u0a6b\3\u00f2\3\u00f2\6\u00f2")
        buf.write("\u0a70\n\u00f2\r\u00f2\16\u00f2\u0a71\3\u00f2\3\u00f2")
        buf.write("\3\u00f3\3\u00f3\3\u00f3\3\u00f3\3\u00f3\3\u00f4\3\u00f4")
        buf.write("\3\u00f4\3\u00f4\5\u00f4\u0a7f\n\u00f4\3\u00f4\3\u00f4")
        buf.write("\6\u00f4\u0a83\n\u00f4\r\u00f4\16\u00f4\u0a84\7\u00f4")
        buf.write("\u0a87\n\u00f4\f\u00f4\16\u00f4\u0a8a\13\u00f4\3\u00f5")
        buf.write("\3\u00f5\3\u00f5\3\u00f5\3\u00f5\5\u00f5\u0a91\n\u00f5")
        buf.write("\3\u00f6\6\u00f6\u0a94\n\u00f6\r\u00f6\16\u00f6\u0a95")
        buf.write("\3\u00f6\2\31(P\\bdr\u00b0\u00e2\u012e\u015c\u0168\u0176")
        buf.write("\u0182\u0184\u0188\u0190\u019c\u01a2\u01a4\u01ac\u01b8")
        buf.write("\u01be\u01e6\u00f7\2\4\6\b\n\f\16\20\22\24\26\30\32\34")
        buf.write("\36 \"$&(*,.\60\62\64\668:<>@BDFHJLNPRTVXZ\\^`bdfhjln")
        buf.write("prtvxz|~\u0080\u0082\u0084\u0086\u0088\u008a\u008c\u008e")
        buf.write("\u0090\u0092\u0094\u0096\u0098\u009a\u009c\u009e\u00a0")
        buf.write("\u00a2\u00a4\u00a6\u00a8\u00aa\u00ac\u00ae\u00b0\u00b2")
        buf.write("\u00b4\u00b6\u00b8\u00ba\u00bc\u00be\u00c0\u00c2\u00c4")
        buf.write("\u00c6\u00c8\u00ca\u00cc\u00ce\u00d0\u00d2\u00d4\u00d6")
        buf.write("\u00d8\u00da\u00dc\u00de\u00e0\u00e2\u00e4\u00e6\u00e8")
        buf.write("\u00ea\u00ec\u00ee\u00f0\u00f2\u00f4\u00f6\u00f8\u00fa")
        buf.write("\u00fc\u00fe\u0100\u0102\u0104\u0106\u0108\u010a\u010c")
        buf.write("\u010e\u0110\u0112\u0114\u0116\u0118\u011a\u011c\u011e")
        buf.write("\u0120\u0122\u0124\u0126\u0128\u012a\u012c\u012e\u0130")
        buf.write("\u0132\u0134\u0136\u0138\u013a\u013c\u013e\u0140\u0142")
        buf.write("\u0144\u0146\u0148\u014a\u014c\u014e\u0150\u0152\u0154")
        buf.write("\u0156\u0158\u015a\u015c\u015e\u0160\u0162\u0164\u0166")
        buf.write("\u0168\u016a\u016c\u016e\u0170\u0172\u0174\u0176\u0178")
        buf.write("\u017a\u017c\u017e\u0180\u0182\u0184\u0186\u0188\u018a")
        buf.write("\u018c\u018e\u0190\u0192\u0194\u0196\u0198\u019a\u019c")
        buf.write("\u019e\u01a0\u01a2\u01a4\u01a6\u01a8\u01aa\u01ac\u01ae")
        buf.write("\u01b0\u01b2\u01b4\u01b6\u01b8\u01ba\u01bc\u01be\u01c0")
        buf.write("\u01c2\u01c4\u01c6\u01c8\u01ca\u01cc\u01ce\u01d0\u01d2")
        buf.write("\u01d4\u01d6\u01d8\u01da\u01dc\u01de\u01e0\u01e2\u01e4")
        buf.write("\u01e6\u01e8\u01ea\2\21\3\2XY\3\2\"#\4\2\3\3\7\t\4\2\u0095")
        buf.write("\u0095\u00ab\u00ab\3\2\u00a9\u00ab\4\2\u0091\u0091\u009a")
        buf.write("\u009a\4\2OO``\5\2\13\20\66\u0098\u009a\u00a4\4\2\'\'")
        buf.write("{{\r\2\66?EEHH~~\u0081\u0081\u008b\u008b\u0091\u0091\u0098")
        buf.write("\u0098\u00a4\u00a4\u00a9\u00ab\u00ad\u00ad\f\2\66?EEH")
        buf.write("H~~\u0081\u0081\u008b\u008b\u0098\u0098\u009a\u009a\u00a4")
        buf.write("\u00a4\u00a9\u00ab\f\2\66?EEHH~~\u0081\u0081\u008b\u008b")
        buf.write("\u0091\u0091\u0098\u0098\u00a4\u00a4\u00a9\u00ad\f\2\66")
        buf.write("?EEHH~~\u0081\u0081\u008b\u008b\u0091\u0091\u0098\u0098")
        buf.write("\u00a4\u00a4\u00a9\u00ab\5\2\32\33((**\5\2\t\t\21\22\32")
        buf.write("\33\2\u0b2a\2\u01ec\3\2\2\2\4\u01fd\3\2\2\2\6\u0207\3")
        buf.write("\2\2\2\b\u020b\3\2\2\2\n\u0213\3\2\2\2\f\u022f\3\2\2\2")
        buf.write("\16\u0236\3\2\2\2\20\u0245\3\2\2\2\22\u0252\3\2\2\2\24")
        buf.write("\u0268\3\2\2\2\26\u0275\3\2\2\2\30\u0277\3\2\2\2\32\u0286")
        buf.write("\3\2\2\2\34\u0290\3\2\2\2\36\u029d\3\2\2\2 \u02a7\3\2")
        buf.write("\2\2\"\u02b5\3\2\2\2$\u02ca\3\2\2\2&\u02de\3\2\2\2(\u02e6")
        buf.write("\3\2\2\2*\u02f2\3\2\2\2,\u02fe\3\2\2\2.\u0311\3\2\2\2")
        buf.write("\60\u0324\3\2\2\2\62\u0337\3\2\2\2\64\u0339\3\2\2\2\66")
        buf.write("\u035a\3\2\2\28\u035c\3\2\2\2:\u0371\3\2\2\2<\u037b\3")
        buf.write("\2\2\2>\u0385\3\2\2\2@\u0394\3\2\2\2B\u039b\3\2\2\2D\u03a2")
        buf.write("\3\2\2\2F\u03c2\3\2\2\2H\u03c4\3\2\2\2J\u03d1\3\2\2\2")
        buf.write("L\u03da\3\2\2\2N\u03e1\3\2\2\2P\u03f5\3\2\2\2R\u040d\3")
        buf.write("\2\2\2T\u0410\3\2\2\2V\u0441\3\2\2\2X\u0443\3\2\2\2Z\u0445")
        buf.write("\3\2\2\2\\\u045e\3\2\2\2^\u04d3\3\2\2\2`\u04da\3\2\2\2")
        buf.write("b\u04dc\3\2\2\2d\u04e6\3\2\2\2f\u04f9\3\2\2\2h\u0507\3")
        buf.write("\2\2\2j\u0509\3\2\2\2l\u0510\3\2\2\2n\u0527\3\2\2\2p\u0529")
        buf.write("\3\2\2\2r\u0533\3\2\2\2t\u053d\3\2\2\2v\u0543\3\2\2\2")
        buf.write("x\u0548\3\2\2\2z\u056c\3\2\2\2|\u059c\3\2\2\2~\u059e\3")
        buf.write("\2\2\2\u0080\u05ad\3\2\2\2\u0082\u05b9\3\2\2\2\u0084\u05bb")
        buf.write("\3\2\2\2\u0086\u05c2\3\2\2\2\u0088\u05c6\3\2\2\2\u008a")
        buf.write("\u05cd\3\2\2\2\u008c\u05d1\3\2\2\2\u008e\u05da\3\2\2\2")
        buf.write("\u0090\u05df\3\2\2\2\u0092\u05e2\3\2\2\2\u0094\u05e7\3")
        buf.write("\2\2\2\u0096\u05f5\3\2\2\2\u0098\u0608\3\2\2\2\u009a\u060f")
        buf.write("\3\2\2\2\u009c\u0611\3\2\2\2\u009e\u0615\3\2\2\2\u00a0")
        buf.write("\u0617\3\2\2\2\u00a2\u0620\3\2\2\2\u00a4\u0629\3\2\2\2")
        buf.write("\u00a6\u063b\3\2\2\2\u00a8\u063e\3\2\2\2\u00aa\u0647\3")
        buf.write("\2\2\2\u00ac\u064f\3\2\2\2\u00ae\u0657\3\2\2\2\u00b0\u0669")
        buf.write("\3\2\2\2\u00b2\u0679\3\2\2\2\u00b4\u068b\3\2\2\2\u00b6")
        buf.write("\u068d\3\2\2\2\u00b8\u0690\3\2\2\2\u00ba\u0694\3\2\2\2")
        buf.write("\u00bc\u0699\3\2\2\2\u00be\u069d\3\2\2\2\u00c0\u069f\3")
        buf.write("\2\2\2\u00c2\u06a9\3\2\2\2\u00c4\u06ad\3\2\2\2\u00c6\u06af")
        buf.write("\3\2\2\2\u00c8\u06b3\3\2\2\2\u00ca\u06b9\3\2\2\2\u00cc")
        buf.write("\u06bb\3\2\2\2\u00ce\u06bd\3\2\2\2\u00d0\u06bf\3\2\2\2")
        buf.write("\u00d2\u06c1\3\2\2\2\u00d4\u06c3\3\2\2\2\u00d6\u06c5\3")
        buf.write("\2\2\2\u00d8\u06d2\3\2\2\2\u00da\u06d6\3\2\2\2\u00dc\u06d8")
        buf.write("\3\2\2\2\u00de\u06dd\3\2\2\2\u00e0\u06e2\3\2\2\2\u00e2")
        buf.write("\u06e4\3\2\2\2\u00e4\u06f2\3\2\2\2\u00e6\u0700\3\2\2\2")
        buf.write("\u00e8\u0712\3\2\2\2\u00ea\u071e\3\2\2\2\u00ec\u072a\3")
        buf.write("\2\2\2\u00ee\u072c\3\2\2\2\u00f0\u0730\3\2\2\2\u00f2\u073b")
        buf.write("\3\2\2\2\u00f4\u0746\3\2\2\2\u00f6\u0758\3\2\2\2\u00f8")
        buf.write("\u0760\3\2\2\2\u00fa\u076c\3\2\2\2\u00fc\u076e\3\2\2\2")
        buf.write("\u00fe\u0770\3\2\2\2\u0100\u0783\3\2\2\2\u0102\u0785\3")
        buf.write("\2\2\2\u0104\u078c\3\2\2\2\u0106\u0793\3\2\2\2\u0108\u079c")
        buf.write("\3\2\2\2\u010a\u07a5\3\2\2\2\u010c\u07ae\3\2\2\2\u010e")
        buf.write("\u07c5\3\2\2\2\u0110\u07d6\3\2\2\2\u0112\u07d8\3\2\2\2")
        buf.write("\u0114\u07e0\3\2\2\2\u0116\u07e2\3\2\2\2\u0118\u07e8\3")
        buf.write("\2\2\2\u011a\u07f0\3\2\2\2\u011c\u07f3\3\2\2\2\u011e\u07fc")
        buf.write("\3\2\2\2\u0120\u0808\3\2\2\2\u0122\u080e\3\2\2\2\u0124")
        buf.write("\u081a\3\2\2\2\u0126\u0822\3\2\2\2\u0128\u0828\3\2\2\2")
        buf.write("\u012a\u0833\3\2\2\2\u012c\u0835\3\2\2\2\u012e\u0839\3")
        buf.write("\2\2\2\u0130\u0847\3\2\2\2\u0132\u0851\3\2\2\2\u0134\u0853")
        buf.write("\3\2\2\2\u0136\u085e\3\2\2\2\u0138\u0862\3\2\2\2\u013a")
        buf.write("\u0864\3\2\2\2\u013c\u0869\3\2\2\2\u013e\u086e\3\2\2\2")
        buf.write("\u0140\u0876\3\2\2\2\u0142\u0887\3\2\2\2\u0144\u0889\3")
        buf.write("\2\2\2\u0146\u088b\3\2\2\2\u0148\u088e\3\2\2\2\u014a\u0891")
        buf.write("\3\2\2\2\u014c\u0894\3\2\2\2\u014e\u0897\3\2\2\2\u0150")
        buf.write("\u089a\3\2\2\2\u0152\u089c\3\2\2\2\u0154\u089e\3\2\2\2")
        buf.write("\u0156\u08a0\3\2\2\2\u0158\u08a2\3\2\2\2\u015a\u08ab\3")
        buf.write("\2\2\2\u015c\u08ad\3\2\2\2\u015e\u08be\3\2\2\2\u0160\u08c0")
        buf.write("\3\2\2\2\u0162\u08c2\3\2\2\2\u0164\u08ca\3\2\2\2\u0166")
        buf.write("\u08cc\3\2\2\2\u0168\u08d3\3\2\2\2\u016a\u08de\3\2\2\2")
        buf.write("\u016c\u08e2\3\2\2\2\u016e\u08e6\3\2\2\2\u0170\u08ed\3")
        buf.write("\2\2\2\u0172\u08ef\3\2\2\2\u0174\u08f4\3\2\2\2\u0176\u08f6")
        buf.write("\3\2\2\2\u0178\u0905\3\2\2\2\u017a\u0907\3\2\2\2\u017c")
        buf.write("\u090f\3\2\2\2\u017e\u0911\3\2\2\2\u0180\u091e\3\2\2\2")
        buf.write("\u0182\u0920\3\2\2\2\u0184\u092b\3\2\2\2\u0186\u093b\3")
        buf.write("\2\2\2\u0188\u0942\3\2\2\2\u018a\u0951\3\2\2\2\u018c\u0953")
        buf.write("\3\2\2\2\u018e\u095c\3\2\2\2\u0190\u095e\3\2\2\2\u0192")
        buf.write("\u096d\3\2\2\2\u0194\u096f\3\2\2\2\u0196\u0971\3\2\2\2")
        buf.write("\u0198\u0977\3\2\2\2\u019a\u0979\3\2\2\2\u019c\u0980\3")
        buf.write("\2\2\2\u019e\u098b\3\2\2\2\u01a0\u098f\3\2\2\2\u01a2\u0993")
        buf.write("\3\2\2\2\u01a4\u099e\3\2\2\2\u01a6\u09ad\3\2\2\2\u01a8")
        buf.write("\u09af\3\2\2\2\u01aa\u09b8\3\2\2\2\u01ac\u09ba\3\2\2\2")
        buf.write("\u01ae\u09c9\3\2\2\2\u01b0\u09cb\3\2\2\2\u01b2\u09cd\3")
        buf.write("\2\2\2\u01b4\u09d3\3\2\2\2\u01b6\u09d5\3\2\2\2\u01b8\u09dc")
        buf.write("\3\2\2\2\u01ba\u09e7\3\2\2\2\u01bc\u09eb\3\2\2\2\u01be")
        buf.write("\u09f2\3\2\2\2\u01c0\u0a01\3\2\2\2\u01c2\u0a03\3\2\2\2")
        buf.write("\u01c4\u0a07\3\2\2\2\u01c6\u0a10\3\2\2\2\u01c8\u0a12\3")
        buf.write("\2\2\2\u01ca\u0a1b\3\2\2\2\u01cc\u0a1d\3\2\2\2\u01ce\u0a21")
        buf.write("\3\2\2\2\u01d0\u0a2d\3\2\2\2\u01d2\u0a38\3\2\2\2\u01d4")
        buf.write("\u0a3d\3\2\2\2\u01d6\u0a45\3\2\2\2\u01d8\u0a4c\3\2\2\2")
        buf.write("\u01da\u0a58\3\2\2\2\u01dc\u0a5b\3\2\2\2\u01de\u0a66\3")
        buf.write("\2\2\2\u01e0\u0a69\3\2\2\2\u01e2\u0a6d\3\2\2\2\u01e4\u0a75")
        buf.write("\3\2\2\2\u01e6\u0a7e\3\2\2\2\u01e8\u0a90\3\2\2\2\u01ea")
        buf.write("\u0a93\3\2\2\2\u01ec\u01ed\7e\2\2\u01ed\u01ee\5\u00d0")
        buf.write("i\2\u01ee\u01f5\7\26\2\2\u01ef\u01f2\5\u00d0i\2\u01f0")
        buf.write("\u01f1\7\23\2\2\u01f1\u01f3\5\u00f8}\2\u01f2\u01f0\3\2")
        buf.write("\2\2\u01f2\u01f3\3\2\2\2\u01f3\u01f6\3\2\2\2\u01f4\u01f6")
        buf.write("\5\u00f8}\2\u01f5\u01ef\3\2\2\2\u01f5\u01f4\3\2\2\2\u01f6")
        buf.write("\u01f7\3\2\2\2\u01f7\u01f8\7\27\2\2\u01f8\u01f9\7\21\2")
        buf.write("\2\u01f9\u01fa\5\u008cG\2\u01fa\u01fb\5\u00a2R\2\u01fb")
        buf.write("\u01fc\5\u008eH\2\u01fc\3\3\2\2\2\u01fd\u01fe\7e\2\2\u01fe")
        buf.write("\u01ff\5\u00d0i\2\u01ff\u0200\7\26\2\2\u0200\u0201\5\u00b4")
        buf.write("[\2\u0201\u0202\7\27\2\2\u0202\u0203\7\21\2\2\u0203\u0204")
        buf.write("\5\u008cG\2\u0204\u0205\5\u00a0Q\2\u0205\u0206\5\u008e")
        buf.write("H\2\u0206\5\3\2\2\2\u0207\u0208\5\u00d2j\2\u0208\u0209")
        buf.write("\7.\2\2\u0209\u020a\5\\/\2\u020a\7\3\2\2\2\u020b\u020c")
        buf.write("\5\u00d2j\2\u020c\u020e\7\26\2\2\u020d\u020f\5r:\2\u020e")
        buf.write("\u020d\3\2\2\2\u020e\u020f\3\2\2\2\u020f\u0210\3\2\2\2")
        buf.write("\u0210\u0211\7\27\2\2\u0211\t\3\2\2\2\u0212\u0214\7\u0095")
        buf.write("\2\2\u0213\u0212\3\2\2\2\u0213\u0214\3\2\2\2\u0214\u0215")
        buf.write("\3\2\2\2\u0215\u0216\7P\2\2\u0216\u0217\5\u00ceh\2\u0217")
        buf.write("\u0218\7\26\2\2\u0218\u0219\5\u00b0Y\2\u0219\u021a\7\27")
        buf.write("\2\2\u021a\u021b\7\21\2\2\u021b\u022b\5\u008cG\2\u021c")
        buf.write("\u022c\7\u0089\2\2\u021d\u0221\5\u00a6T\2\u021e\u021f")
        buf.write("\5\u0088E\2\u021f\u0220\5\f\7\2\u0220\u0222\3\2\2\2\u0221")
        buf.write("\u021e\3\2\2\2\u0221\u0222\3\2\2\2\u0222\u022a\3\2\2\2")
        buf.write("\u0223\u0227\5\f\7\2\u0224\u0225\5\u0088E\2\u0225\u0226")
        buf.write("\5\u00a6T\2\u0226\u0228\3\2\2\2\u0227\u0224\3\2\2\2\u0227")
        buf.write("\u0228\3\2\2\2\u0228\u022a\3\2\2\2\u0229\u021d\3\2\2\2")
        buf.write("\u0229\u0223\3\2\2\2\u022a\u022c\3\2\2\2\u022b\u021c\3")
        buf.write("\2\2\2\u022b\u0229\3\2\2\2\u022c\u022d\3\2\2\2\u022d\u022e")
        buf.write("\5\u008eH\2\u022e\13\3\2\2\2\u022f\u0230\7u\2\2\u0230")
        buf.write("\u0232\7\26\2\2\u0231\u0233\5\u00f6|\2\u0232\u0231\3\2")
        buf.write("\2\2\u0232\u0233\3\2\2\2\u0233\u0234\3\2\2\2\u0234\u0235")
        buf.write("\7\27\2\2\u0235\r\3\2\2\2\u0236\u0237\7\u009f\2\2\u0237")
        buf.write("\u0238\5\u00d0i\2\u0238\u023a\7\26\2\2\u0239\u023b\5\u00d0")
        buf.write("i\2\u023a\u0239\3\2\2\2\u023a\u023b\3\2\2\2\u023b\u023c")
        buf.write("\3\2\2\2\u023c\u023d\7\27\2\2\u023d\u023e\7\21\2\2\u023e")
        buf.write("\u0241\5\u008cG\2\u023f\u0242\5\u00e4s\2\u0240\u0242\7")
        buf.write("\u0089\2\2\u0241\u023f\3\2\2\2\u0241\u0240\3\2\2\2\u0242")
        buf.write("\u0243\3\2\2\2\u0243\u0244\5\u008eH\2\u0244\17\3\2\2\2")
        buf.write("\u0245\u0246\7}\2\2\u0246\u0247\7\u009f\2\2\u0247\u0248")
        buf.write("\5\u00d0i\2\u0248\u0249\7\26\2\2\u0249\u024a\7\27\2\2")
        buf.write("\u024a\u024b\7\21\2\2\u024b\u024c\5\u008cG\2\u024c\u024d")
        buf.write("\5&\24\2\u024d\u024e\5\u0088E\2\u024e\u024f\5\u00e8u\2")
        buf.write("\u024f\u0250\5\u008eH\2\u0250\21\3\2\2\2\u0251\u0253\7")
        buf.write("\u0095\2\2\u0252\u0251\3\2\2\2\u0252\u0253\3\2\2\2\u0253")
        buf.write("\u0254\3\2\2\2\u0254\u0255\t\2\2\2\u0255\u0256\5\u00d0")
        buf.write("i\2\u0256\u025d\7\26\2\2\u0257\u025e\5\26\f\2\u0258\u025e")
        buf.write("\5\u00f8}\2\u0259\u025a\5\26\f\2\u025a\u025b\7\23\2\2")
        buf.write("\u025b\u025c\5\u00f8}\2\u025c\u025e\3\2\2\2\u025d\u0257")
        buf.write("\3\2\2\2\u025d\u0258\3\2\2\2\u025d\u0259\3\2\2\2\u025e")
        buf.write("\u025f\3\2\2\2\u025f\u0260\7\27\2\2\u0260\u0261\7\21\2")
        buf.write("\2\u0261\u0264\5\u008cG\2\u0262\u0265\5\u00e4s\2\u0263")
        buf.write("\u0265\7\u0089\2\2\u0264\u0262\3\2\2\2\u0264\u0263\3\2")
        buf.write("\2\2\u0265\u0266\3\2\2\2\u0266\u0267\5\u008eH\2\u0267")
        buf.write("\23\3\2\2\2\u0268\u0269\7\u0093\2\2\u0269\u026a\5\u00d0")
        buf.write("i\2\u026a\u026b\7\26\2\2\u026b\u026c\5\u00f8}\2\u026c")
        buf.write("\u026d\7\27\2\2\u026d\u026e\7\21\2\2\u026e\u0271\5\u008c")
        buf.write("G\2\u026f\u0272\5\u00e4s\2\u0270\u0272\7\u0089\2\2\u0271")
        buf.write("\u026f\3\2\2\2\u0271\u0270\3\2\2\2\u0272\u0273\3\2\2\2")
        buf.write("\u0273\u0274\5\u008eH\2\u0274\25\3\2\2\2\u0275\u0276\5")
        buf.write("\u00c0a\2\u0276\27\3\2\2\2\u0277\u0278\7\\\2\2\u0278\u0279")
        buf.write("\7\u0085\2\2\u0279\u027a\5\u0142\u00a2\2\u027a\u027b\7")
        buf.write("\26\2\2\u027b\u027c\5\u00dan\2\u027c\u027f\7\27\2\2\u027d")
        buf.write("\u027e\7\64\2\2\u027e\u0280\5\u00b0Y\2\u027f\u027d\3\2")
        buf.write("\2\2\u027f\u0280\3\2\2\2\u0280\u0281\3\2\2\2\u0281\u0282")
        buf.write("\7\21\2\2\u0282\u0283\5\u008cG\2\u0283\u0284\5\u0106\u0084")
        buf.write("\2\u0284\u0285\5\u008eH\2\u0285\31\3\2\2\2\u0286\u0287")
        buf.write("\7\\\2\2\u0287\u0288\5\u00ccg\2\u0288\u0289\7\u0092\2")
        buf.write("\2\u0289\u028a\7\26\2\2\u028a\u028b\7\27\2\2\u028b\u028c")
        buf.write("\7\21\2\2\u028c\u028d\5\u008cG\2\u028d\u028e\5\u0106\u0084")
        buf.write("\2\u028e\u028f\5\u008eH\2\u028f\33\3\2\2\2\u0290\u0291")
        buf.write("\7\\\2\2\u0291\u0293\5\u00ccg\2\u0292\u0294\7}\2\2\u0293")
        buf.write("\u0292\3\2\2\2\u0293\u0294\3\2\2\2\u0294\u0295\3\2\2\2")
        buf.write("\u0295\u0296\7\u0092\2\2\u0296\u0297\7\26\2\2\u0297\u0298")
        buf.write("\7\27\2\2\u0298\u0299\7\21\2\2\u0299\u029a\5\u008cG\2")
        buf.write("\u029a\u029b\5\u00fe\u0080\2\u029b\u029c\5\u008eH\2\u029c")
        buf.write("\35\3\2\2\2\u029d\u029e\7\\\2\2\u029e\u029f\5\u00ccg\2")
        buf.write("\u029f\u02a0\7q\2\2\u02a0\u02a1\7\26\2\2\u02a1\u02a2\7")
        buf.write("\27\2\2\u02a2\u02a3\7\21\2\2\u02a3\u02a4\5\u008cG\2\u02a4")
        buf.write("\u02a5\5\u0106\u0084\2\u02a5\u02a6\5\u008eH\2\u02a6\37")
        buf.write("\3\2\2\2\u02a7\u02a8\7\\\2\2\u02a8\u02aa\5\u00ccg\2\u02a9")
        buf.write("\u02ab\7}\2\2\u02aa\u02a9\3\2\2\2\u02aa\u02ab\3\2\2\2")
        buf.write("\u02ab\u02ac\3\2\2\2\u02ac\u02ad\7q\2\2\u02ad\u02ae\7")
        buf.write("\26\2\2\u02ae\u02af\7\27\2\2\u02af\u02b0\7\21\2\2\u02b0")
        buf.write("\u02b1\5\u008cG\2\u02b1\u02b2\5\u00fe\u0080\2\u02b2\u02b3")
        buf.write("\5\u008eH\2\u02b3!\3\2\2\2\u02b4\u02b6\7\u0095\2\2\u02b5")
        buf.write("\u02b4\3\2\2\2\u02b5\u02b6\3\2\2\2\u02b6\u02b7\3\2\2\2")
        buf.write("\u02b7\u02b8\7}\2\2\u02b8\u02b9\t\2\2\2\u02b9\u02ba\5")
        buf.write("\u00d0i\2\u02ba\u02bc\7\26\2\2\u02bb\u02bd\5\u00f8}\2")
        buf.write("\u02bc\u02bb\3\2\2\2\u02bc\u02bd\3\2\2\2\u02bd\u02be\3")
        buf.write("\2\2\2\u02be\u02bf\7\27\2\2\u02bf\u02c0\7\21\2\2\u02c0")
        buf.write("\u02c1\5\u008cG\2\u02c1\u02c5\5&\24\2\u02c2\u02c3\5\u0088")
        buf.write("E\2\u02c3\u02c4\5\u00e8u\2\u02c4\u02c6\3\2\2\2\u02c5\u02c2")
        buf.write("\3\2\2\2\u02c5\u02c6\3\2\2\2\u02c6\u02c7\3\2\2\2\u02c7")
        buf.write("\u02c8\5\u008eH\2\u02c8#\3\2\2\2\u02c9\u02cb\7\u0095\2")
        buf.write("\2\u02ca\u02c9\3\2\2\2\u02ca\u02cb\3\2\2\2\u02cb\u02cc")
        buf.write("\3\2\2\2\u02cc\u02cd\7}\2\2\u02cd\u02ce\7\u008d\2\2\u02ce")
        buf.write("\u02cf\5\u00d0i\2\u02cf\u02d1\7\26\2\2\u02d0\u02d2\5\u00f8")
        buf.write("}\2\u02d1\u02d0\3\2\2\2\u02d1\u02d2\3\2\2\2\u02d2\u02d3")
        buf.write("\3\2\2\2\u02d3\u02d4\7\27\2\2\u02d4\u02d5\7\21\2\2\u02d5")
        buf.write("\u02d6\5\u008cG\2\u02d6\u02da\5&\24\2\u02d7\u02d8\5\u0088")
        buf.write("E\2\u02d8\u02d9\5\u00e8u\2\u02d9\u02db\3\2\2\2\u02da\u02d7")
        buf.write("\3\2\2\2\u02da\u02db\3\2\2\2\u02db\u02dc\3\2\2\2\u02dc")
        buf.write("\u02dd\5\u008eH\2\u02dd%\3\2\2\2\u02de\u02df\7\\\2\2\u02df")
        buf.write("\u02e0\t\2\2\2\u02e0\u02e1\7S\2\2\u02e1\u02e2\7\21\2\2")
        buf.write("\u02e2\u02e3\5\u008cG\2\u02e3\u02e4\5(\25\2\u02e4\u02e5")
        buf.write("\5\u008eH\2\u02e5\'\3\2\2\2\u02e6\u02e7\b\25\1\2\u02e7")
        buf.write("\u02e8\5\u00ecw\2\u02e8\u02ef\3\2\2\2\u02e9\u02ea\f\3")
        buf.write("\2\2\u02ea\u02eb\5\u0088E\2\u02eb\u02ec\5\u00ecw\2\u02ec")
        buf.write("\u02ee\3\2\2\2\u02ed\u02e9\3\2\2\2\u02ee\u02f1\3\2\2\2")
        buf.write("\u02ef\u02ed\3\2\2\2\u02ef\u02f0\3\2\2\2\u02f0)\3\2\2")
        buf.write("\2\u02f1\u02ef\3\2\2\2\u02f2\u02f3\7I\2\2\u02f3\u02f4")
        buf.write("\7\\\2\2\u02f4\u02f5\5\u00c2b\2\u02f5\u02f7\7\26\2\2\u02f6")
        buf.write("\u02f8\5\u00d6l\2\u02f7\u02f6\3\2\2\2\u02f7\u02f8\3\2")
        buf.write("\2\2\u02f8\u02f9\3\2\2\2\u02f9\u02fc\7\27\2\2\u02fa\u02fb")
        buf.write("\7\64\2\2\u02fb\u02fd\5\u00b0Y\2\u02fc\u02fa\3\2\2\2\u02fc")
        buf.write("\u02fd\3\2\2\2\u02fd+\3\2\2\2\u02fe\u02ff\7\\\2\2\u02ff")
        buf.write("\u0300\5\u00c2b\2\u0300\u0302\7\26\2\2\u0301\u0303\5\u00d6")
        buf.write("l\2\u0302\u0301\3\2\2\2\u0302\u0303\3\2\2\2\u0303\u0304")
        buf.write("\3\2\2\2\u0304\u0307\7\27\2\2\u0305\u0306\7\64\2\2\u0306")
        buf.write("\u0308\5\u00b0Y\2\u0307\u0305\3\2\2\2\u0307\u0308\3\2")
        buf.write("\2\2\u0308\u0309\3\2\2\2\u0309\u030a\7\21\2\2\u030a\u030d")
        buf.write("\5\u008cG\2\u030b\u030e\5\u0106\u0084\2\u030c\u030e\7")
        buf.write("\u0089\2\2\u030d\u030b\3\2\2\2\u030d\u030c\3\2\2\2\u030e")
        buf.write("\u030f\3\2\2\2\u030f\u0310\5\u008eH\2\u0310-\3\2\2\2\u0311")
        buf.write("\u0313\7\\\2\2\u0312\u0314\7}\2\2\u0313\u0312\3\2\2\2")
        buf.write("\u0313\u0314\3\2\2\2\u0314\u0315\3\2\2\2\u0315\u0316\5")
        buf.write("\u00c2b\2\u0316\u0318\7\26\2\2\u0317\u0319\5\u00d6l\2")
        buf.write("\u0318\u0317\3\2\2\2\u0318\u0319\3\2\2\2\u0319\u031a\3")
        buf.write("\2\2\2\u031a\u031d\7\27\2\2\u031b\u031c\7\64\2\2\u031c")
        buf.write("\u031e\5\u00e0q\2\u031d\u031b\3\2\2\2\u031d\u031e\3\2")
        buf.write("\2\2\u031e\u031f\3\2\2\2\u031f\u0320\7\21\2\2\u0320\u0321")
        buf.write("\5\u008cG\2\u0321\u0322\5\u00fe\u0080\2\u0322\u0323\5")
        buf.write("\u008eH\2\u0323/\3\2\2\2\u0324\u0325\7\\\2\2\u0325\u0326")
        buf.write("\7\u0098\2\2\u0326\u0327\7\u00af\2\2\u0327\u0328\7\26")
        buf.write("\2\2\u0328\u0329\7\27\2\2\u0329\u032a\7\21\2\2\u032a\u032b")
        buf.write("\5\u008cG\2\u032b\u032c\5\u0106\u0084\2\u032c\u032d\5")
        buf.write("\u008eH\2\u032d\u032e\5\u0088E\2\u032e\u032f\7\u009e\2")
        buf.write("\2\u032f\u0335\7\21\2\2\u0330\u0331\5\u008cG\2\u0331\u0332")
        buf.write("\5\u0108\u0085\2\u0332\u0333\5\u008eH\2\u0333\u0336\3")
        buf.write("\2\2\2\u0334\u0336\5\u00d2j\2\u0335\u0330\3\2\2\2\u0335")
        buf.write("\u0334\3\2\2\2\u0336\61\3\2\2\2\u0337\u0338\5\\/\2\u0338")
        buf.write("\63\3\2\2\2\u0339\u033a\5\u00ccg\2\u033a\u033b\7\21\2")
        buf.write("\2\u033b\u0340\5\u00e0q\2\u033c\u033d\7\26\2\2\u033d\u033e")
        buf.write("\5\u00f8}\2\u033e\u033f\7\27\2\2\u033f\u0341\3\2\2\2\u0340")
        buf.write("\u033c\3\2\2\2\u0340\u0341\3\2\2\2\u0341\u0344\3\2\2\2")
        buf.write("\u0342\u0343\7.\2\2\u0343\u0345\5\u0118\u008d\2\u0344")
        buf.write("\u0342\3\2\2\2\u0344\u0345\3\2\2\2\u0345\65\3\2\2\2\u0346")
        buf.write("\u035b\5> \2\u0347\u035b\5\u0080A\2\u0348\u035b\5\u0084")
        buf.write("C\2\u0349\u035b\5:\36\2\u034a\u035b\5|?\2\u034b\u035b")
        buf.write("\58\35\2\u034c\u035b\5X-\2\u034d\u035b\5Z.\2\u034e\u035b")
        buf.write("\5N(\2\u034f\u035b\5D#\2\u0350\u035b\5H%\2\u0351\u035b")
        buf.write("\5L\'\2\u0352\u035b\5J&\2\u0353\u035b\5R*\2\u0354\u035b")
        buf.write("\5T+\2\u0355\u035b\5v<\2\u0356\u035b\5@!\2\u0357\u035b")
        buf.write("\5B\"\2\u0358\u035b\5,\27\2\u0359\u035b\5\u00fc\177\2")
        buf.write("\u035a\u0346\3\2\2\2\u035a\u0347\3\2\2\2\u035a\u0348\3")
        buf.write("\2\2\2\u035a\u0349\3\2\2\2\u035a\u034a\3\2\2\2\u035a\u034b")
        buf.write("\3\2\2\2\u035a\u034c\3\2\2\2\u035a\u034d\3\2\2\2\u035a")
        buf.write("\u034e\3\2\2\2\u035a\u034f\3\2\2\2\u035a\u0350\3\2\2\2")
        buf.write("\u035a\u0351\3\2\2\2\u035a\u0352\3\2\2\2\u035a\u0353\3")
        buf.write("\2\2\2\u035a\u0354\3\2\2\2\u035a\u0355\3\2\2\2\u035a\u0356")
        buf.write("\3\2\2\2\u035a\u0357\3\2\2\2\u035a\u0358\3\2\2\2\u035a")
        buf.write("\u0359\3\2\2\2\u035b\67\3\2\2\2\u035c\u035d\7n\2\2\u035d")
        buf.write("\u035e\7\26\2\2\u035e\u035f\7\27\2\2\u035f9\3\2\2\2\u0360")
        buf.write("\u0361\7_\2\2\u0361\u0362\7\26\2\2\u0362\u0363\5\u00ac")
        buf.write("W\2\u0363\u036a\7\27\2\2\u0364\u0365\7L\2\2\u0365\u0366")
        buf.write("\7\u0096\2\2\u0366\u0367\7\26\2\2\u0367\u0368\5\u00ac")
        buf.write("W\2\u0368\u0369\7\27\2\2\u0369\u036b\3\2\2\2\u036a\u0364")
        buf.write("\3\2\2\2\u036a\u036b\3\2\2\2\u036b\u0372\3\2\2\2\u036c")
        buf.write("\u036d\7\u0096\2\2\u036d\u036e\7\26\2\2\u036e\u036f\5")
        buf.write("\u00acW\2\u036f\u0370\7\27\2\2\u0370\u0372\3\2\2\2\u0371")
        buf.write("\u0360\3\2\2\2\u0371\u036c\3\2\2\2\u0372\u0379\3\2\2\2")
        buf.write("\u0373\u0374\7\u0099\2\2\u0374\u0375\7\21\2\2\u0375\u0376")
        buf.write("\5\u008cG\2\u0376\u0377\5\u0106\u0084\2\u0377\u0378\5")
        buf.write("\u008eH\2\u0378\u037a\3\2\2\2\u0379\u0373\3\2\2\2\u0379")
        buf.write("\u037a\3\2\2\2\u037a;\3\2\2\2\u037b\u037c\5\u00c2b\2\u037c")
        buf.write("\u037e\7\26\2\2\u037d\u037f\5r:\2\u037e\u037d\3\2\2\2")
        buf.write("\u037e\u037f\3\2\2\2\u037f\u0380\3\2\2\2\u0380\u0381\7")
        buf.write("\27\2\2\u0381=\3\2\2\2\u0382\u0383\5b\62\2\u0383\u0384")
        buf.write("\7\25\2\2\u0384\u0386\3\2\2\2\u0385\u0382\3\2\2\2\u0385")
        buf.write("\u0386\3\2\2\2\u0386\u0387\3\2\2\2\u0387\u0392\5<\37\2")
        buf.write("\u0388\u038b\7\u0099\2\2\u0389\u038a\7\u00a0\2\2\u038a")
        buf.write("\u038c\5\u00ccg\2\u038b\u0389\3\2\2\2\u038b\u038c\3\2")
        buf.write("\2\2\u038c\u038d\3\2\2\2\u038d\u038e\7\21\2\2\u038e\u038f")
        buf.write("\5\u008cG\2\u038f\u0390\5\u0106\u0084\2\u0390\u0391\5")
        buf.write("\u008eH\2\u0391\u0393\3\2\2\2\u0392\u0388\3\2\2\2\u0392")
        buf.write("\u0393\3\2\2\2\u0393?\3\2\2\2\u0394\u0395\7\u00a0\2\2")
        buf.write("\u0395\u0396\5\u012c\u0097\2\u0396\u0397\7\21\2\2\u0397")
        buf.write("\u0398\5\u008cG\2\u0398\u0399\5\u0106\u0084\2\u0399\u039a")
        buf.write("\5\u008eH\2\u039aA\3\2\2\2\u039b\u039c\7\u00a0\2\2\u039c")
        buf.write("\u039d\5\u00d0i\2\u039d\u039e\7\21\2\2\u039e\u039f\5\u008c")
        buf.write("G\2\u039f\u03a0\5\u0106\u0084\2\u03a0\u03a1\5\u008eH\2")
        buf.write("\u03a1C\3\2\2\2\u03a2\u03a3\7\u0097\2\2\u03a3\u03a4\7")
        buf.write("\u0082\2\2\u03a4\u03a5\5\\/\2\u03a5\u03a6\7\21\2\2\u03a6")
        buf.write("\u03a7\5\u008cG\2\u03a7\u03af\5\u010a\u0086\2\u03a8\u03a9")
        buf.write("\5\u0088E\2\u03a9\u03aa\7\u0088\2\2\u03aa\u03ab\7\21\2")
        buf.write("\2\u03ab\u03ac\5\u008cG\2\u03ac\u03ad\5\u0106\u0084\2")
        buf.write("\u03ad\u03ae\5\u008eH\2\u03ae\u03b0\3\2\2\2\u03af\u03a8")
        buf.write("\3\2\2\2\u03af\u03b0\3\2\2\2\u03b0\u03b1\3\2\2\2\u03b1")
        buf.write("\u03b2\5\u008eH\2\u03b2E\3\2\2\2\u03b3\u03b4\7\u00a1\2")
        buf.write("\2\u03b4\u03b5\5\u0110\u0089\2\u03b5\u03b6\7\21\2\2\u03b6")
        buf.write("\u03b7\5\u008cG\2\u03b7\u03b8\5\u0106\u0084\2\u03b8\u03b9")
        buf.write("\5\u008eH\2\u03b9\u03c3\3\2\2\2\u03ba\u03bb\7\u00a1\2")
        buf.write("\2\u03bb\u03bc\7t\2\2\u03bc\u03bd\5\u010e\u0088\2\u03bd")
        buf.write("\u03be\7\21\2\2\u03be\u03bf\5\u008cG\2\u03bf\u03c0\5\u0106")
        buf.write("\u0084\2\u03c0\u03c1\5\u008eH\2\u03c1\u03c3\3\2\2\2\u03c2")
        buf.write("\u03b3\3\2\2\2\u03c2\u03ba\3\2\2\2\u03c3G\3\2\2\2\u03c4")
        buf.write("\u03c5\7o\2\2\u03c5\u03c8\5\u00ccg\2\u03c6\u03c7\7\23")
        buf.write("\2\2\u03c7\u03c9\5\u00ccg\2\u03c8\u03c6\3\2\2\2\u03c8")
        buf.write("\u03c9\3\2\2\2\u03c9\u03ca\3\2\2\2\u03ca\u03cb\7t\2\2")
        buf.write("\u03cb\u03cc\5\\/\2\u03cc\u03cd\7\21\2\2\u03cd\u03ce\5")
        buf.write("\u008cG\2\u03ce\u03cf\5\u0106\u0084\2\u03cf\u03d0\5\u008e")
        buf.write("H\2\u03d0I\3\2\2\2\u03d1\u03d2\7a\2\2\u03d2\u03d3\7\21")
        buf.write("\2\2\u03d3\u03d4\5\u008cG\2\u03d4\u03d5\5\u0106\u0084")
        buf.write("\2\u03d5\u03d6\5\u008eH\2\u03d6\u03d7\5\u0088E\2\u03d7")
        buf.write("\u03d8\7\u00a3\2\2\u03d8\u03d9\5\\/\2\u03d9K\3\2\2\2\u03da")
        buf.write("\u03db\7\u00a3\2\2\u03db\u03dc\5\\/\2\u03dc\u03dd\7\21")
        buf.write("\2\2\u03dd\u03de\5\u008cG\2\u03de\u03df\5\u0106\u0084")
        buf.write("\2\u03df\u03e0\5\u008eH\2\u03e0M\3\2\2\2\u03e1\u03e2\7")
        buf.write("s\2\2\u03e2\u03e3\5\\/\2\u03e3\u03e4\7\21\2\2\u03e4\u03e5")
        buf.write("\5\u008cG\2\u03e5\u03e6\5\u0106\u0084\2\u03e6\u03ea\5")
        buf.write("\u008eH\2\u03e7\u03e8\5\u0088E\2\u03e8\u03e9\5P)\2\u03e9")
        buf.write("\u03eb\3\2\2\2\u03ea\u03e7\3\2\2\2\u03ea\u03eb\3\2\2\2")
        buf.write("\u03eb\u03f3\3\2\2\2\u03ec\u03ed\5\u0088E\2\u03ed\u03ee")
        buf.write("\7d\2\2\u03ee\u03ef\7\21\2\2\u03ef\u03f0\5\u008cG\2\u03f0")
        buf.write("\u03f1\5\u0106\u0084\2\u03f1\u03f2\5\u008eH\2\u03f2\u03f4")
        buf.write("\3\2\2\2\u03f3\u03ec\3\2\2\2\u03f3\u03f4\3\2\2\2\u03f4")
        buf.write("O\3\2\2\2\u03f5\u03f6\b)\1\2\u03f6\u03f7\7d\2\2\u03f7")
        buf.write("\u03f8\7s\2\2\u03f8\u03f9\5\\/\2\u03f9\u03fa\7\21\2\2")
        buf.write("\u03fa\u03fb\5\u008cG\2\u03fb\u03fc\5\u0106\u0084\2\u03fc")
        buf.write("\u03fd\5\u008eH\2\u03fd\u040a\3\2\2\2\u03fe\u03ff\f\3")
        buf.write("\2\2\u03ff\u0400\5\u0088E\2\u0400\u0401\7d\2\2\u0401\u0402")
        buf.write("\7s\2\2\u0402\u0403\5\\/\2\u0403\u0404\7\21\2\2\u0404")
        buf.write("\u0405\5\u008cG\2\u0405\u0406\5\u0106\u0084\2\u0406\u0407")
        buf.write("\5\u008eH\2\u0407\u0409\3\2\2\2\u0408\u03fe\3\2\2\2\u0409")
        buf.write("\u040c\3\2\2\2\u040a\u0408\3\2\2\2\u040a\u040b\3\2\2\2")
        buf.write("\u040bQ\3\2\2\2\u040c\u040a\3\2\2\2\u040d\u040e\7\u008a")
        buf.write("\2\2\u040e\u040f\5\\/\2\u040fS\3\2\2\2\u0410\u0411\7\u009d")
        buf.write("\2\2\u0411\u0412\5\u00ccg\2\u0412\u0413\7\21\2\2\u0413")
        buf.write("\u0414\5\u008cG\2\u0414\u0415\5\u0106\u0084\2\u0415\u0416")
        buf.write("\5\u008eH\2\u0416\u0418\5\u0086D\2\u0417\u0419\5\u010c")
        buf.write("\u0087\2\u0418\u0417\3\2\2\2\u0418\u0419\3\2\2\2\u0419")
        buf.write("\u0421\3\2\2\2\u041a\u041b\7g\2\2\u041b\u041c\7\21\2\2")
        buf.write("\u041c\u041d\5\u008cG\2\u041d\u041e\5\u0106\u0084\2\u041e")
        buf.write("\u041f\5\u008eH\2\u041f\u0420\5\u0086D\2\u0420\u0422\3")
        buf.write("\2\2\2\u0421\u041a\3\2\2\2\u0421\u0422\3\2\2\2\u0422\u042a")
        buf.write("\3\2\2\2\u0423\u0424\7m\2\2\u0424\u0425\7\21\2\2\u0425")
        buf.write("\u0426\5\u008cG\2\u0426\u0427\5\u0106\u0084\2\u0427\u0428")
        buf.write("\5\u008eH\2\u0428\u0429\5\u0086D\2\u0429\u042b\3\2\2\2")
        buf.write("\u042a\u0423\3\2\2\2\u042a\u042b\3\2\2\2\u042b\u042c\3")
        buf.write("\2\2\2\u042c\u042d\5\u0086D\2\u042dU\3\2\2\2\u042e\u042f")
        buf.write("\7g\2\2\u042f\u0430\5\u00d2j\2\u0430\u0431\7\21\2\2\u0431")
        buf.write("\u0432\5\u008cG\2\u0432\u0433\5\u0106\u0084\2\u0433\u0434")
        buf.write("\5\u008eH\2\u0434\u0435\5\u0086D\2\u0435\u0442\3\2\2\2")
        buf.write("\u0436\u0437\7g\2\2\u0437\u0438\7t\2\2\u0438\u0439\7\30")
        buf.write("\2\2\u0439\u043a\5\u00a4S\2\u043a\u043b\7\31\2\2\u043b")
        buf.write("\u043c\7\21\2\2\u043c\u043d\5\u008cG\2\u043d\u043e\5\u0106")
        buf.write("\u0084\2\u043e\u043f\5\u008eH\2\u043f\u0440\5\u0086D\2")
        buf.write("\u0440\u0442\3\2\2\2\u0441\u042e\3\2\2\2\u0441\u0436\3")
        buf.write("\2\2\2\u0442W\3\2\2\2\u0443\u0444\7T\2\2\u0444Y\3\2\2")
        buf.write("\2\u0445\u0447\7\u008e\2\2\u0446\u0448\5\\/\2\u0447\u0446")
        buf.write("\3\2\2\2\u0447\u0448\3\2\2\2\u0448[\3\2\2\2\u0449\u044a")
        buf.write("\b/\1\2\u044a\u045f\5\u01e2\u00f2\2\u044b\u045f\5\u01c4")
        buf.write("\u00e3\2\u044c\u045f\5b\62\2\u044d\u045f\5d\63\2\u044e")
        buf.write("\u045f\5\u0132\u009a\2\u044f\u0450\7#\2\2\u0450\u045f")
        buf.write("\5\\/$\u0451\u0452\7\177\2\2\u0452\u045f\5\\/#\u0453\u0454")
        buf.write("\7A\2\2\u0454\u0455\7\26\2\2\u0455\u0456\5\\/\2\u0456")
        buf.write("\u0457\7\27\2\2\u0457\u045f\3\2\2\2\u0458\u0459\7h\2\2")
        buf.write("\u0459\u045a\7\26\2\2\u045a\u045b\5\u00ccg\2\u045b\u045c")
        buf.write("\7\27\2\2\u045c\u045f\3\2\2\2\u045d\u045f\5^\60\2\u045e")
        buf.write("\u0449\3\2\2\2\u045e\u044b\3\2\2\2\u045e\u044c\3\2\2\2")
        buf.write("\u045e\u044d\3\2\2\2\u045e\u044e\3\2\2\2\u045e\u044f\3")
        buf.write("\2\2\2\u045e\u0451\3\2\2\2\u045e\u0453\3\2\2\2\u045e\u0458")
        buf.write("\3\2\2\2\u045e\u045d\3\2\2\2\u045f\u04d0\3\2\2\2\u0460")
        buf.write("\u0461\f\"\2\2\u0461\u0462\5\u0152\u00aa\2\u0462\u0463")
        buf.write("\5\\/#\u0463\u04cf\3\2\2\2\u0464\u0465\f!\2\2\u0465\u0466")
        buf.write("\5\u0154\u00ab\2\u0466\u0467\5\\/\"\u0467\u04cf\3\2\2")
        buf.write("\2\u0468\u0469\f \2\2\u0469\u046a\5\u0158\u00ad\2\u046a")
        buf.write("\u046b\5\\/!\u046b\u04cf\3\2\2\2\u046c\u046d\f\37\2\2")
        buf.write("\u046d\u046e\5\u0156\u00ac\2\u046e\u046f\5\\/ \u046f\u04cf")
        buf.write("\3\2\2\2\u0470\u0471\f\36\2\2\u0471\u0472\t\3\2\2\u0472")
        buf.write("\u04cf\5\\/\37\u0473\u0474\f\34\2\2\u0474\u0475\7*\2\2")
        buf.write("\u0475\u04cf\5\\/\35\u0476\u0477\f\33\2\2\u0477\u0478")
        buf.write("\7+\2\2\u0478\u04cf\5\\/\34\u0479\u047a\f\32\2\2\u047a")
        buf.write("\u047b\7(\2\2\u047b\u04cf\5\\/\33\u047c\u047d\f\31\2\2")
        buf.write("\u047d\u047e\7)\2\2\u047e\u04cf\5\\/\32\u047f\u0480\f")
        buf.write("\26\2\2\u0480\u0481\7\60\2\2\u0481\u04cf\5\\/\27\u0482")
        buf.write("\u0483\f\25\2\2\u0483\u0484\7/\2\2\u0484\u04cf\5\\/\26")
        buf.write("\u0485\u0486\f\24\2\2\u0486\u0487\7\61\2\2\u0487\u04cf")
        buf.write("\5\\/\25\u0488\u0489\f\23\2\2\u0489\u048a\7[\2\2\u048a")
        buf.write("\u04cf\5\\/\24\u048b\u048c\f\22\2\2\u048c\u048d\7t\2\2")
        buf.write("\u048d\u04cf\5\\/\23\u048e\u048f\f\21\2\2\u048f\u0490")
        buf.write("\7r\2\2\u0490\u04cf\5\\/\22\u0491\u0492\f\20\2\2\u0492")
        buf.write("\u0493\7r\2\2\u0493\u0494\7J\2\2\u0494\u04cf\5\\/\21\u0495")
        buf.write("\u0496\f\17\2\2\u0496\u0497\7r\2\2\u0497\u0498\7M\2\2")
        buf.write("\u0498\u04cf\5\\/\20\u0499\u049a\f\16\2\2\u049a\u049b")
        buf.write("\7\177\2\2\u049b\u049c\7[\2\2\u049c\u04cf\5\\/\17\u049d")
        buf.write("\u049e\f\r\2\2\u049e\u049f\7\177\2\2\u049f\u04a0\7t\2")
        buf.write("\2\u04a0\u04cf\5\\/\16\u04a1\u04a2\f\f\2\2\u04a2\u04a3")
        buf.write("\7\177\2\2\u04a3\u04a4\7r\2\2\u04a4\u04cf\5\\/\r\u04a5")
        buf.write("\u04a6\f\13\2\2\u04a6\u04a7\7\177\2\2\u04a7\u04a8\7r\2")
        buf.write("\2\u04a8\u04a9\7J\2\2\u04a9\u04cf\5\\/\f\u04aa\u04ab\f")
        buf.write("\n\2\2\u04ab\u04ac\7\177\2\2\u04ac\u04ad\7r\2\2\u04ad")
        buf.write("\u04ae\7M\2\2\u04ae\u04cf\5\\/\13\u04af\u04b0\f\t\2\2")
        buf.write("\u04b0\u04b1\7\u0086\2\2\u04b1\u04cf\5\\/\n\u04b2\u04b3")
        buf.write("\f\b\2\2\u04b3\u04b4\7L\2\2\u04b4\u04cf\5\\/\t\u04b5\u04b6")
        buf.write("\f\7\2\2\u04b6\u04b7\7s\2\2\u04b7\u04b8\5\\/\2\u04b8\u04b9")
        buf.write("\7d\2\2\u04b9\u04ba\5\\/\b\u04ba\u04cf\3\2\2\2\u04bb\u04bc")
        buf.write("\f\3\2\2\u04bc\u04bd\7o\2\2\u04bd\u04be\7c\2\2\u04be\u04bf")
        buf.write("\5\u00ccg\2\u04bf\u04c0\7t\2\2\u04c0\u04c1\5\\/\4\u04c1")
        buf.write("\u04cf\3\2\2\2\u04c2\u04c3\f%\2\2\u04c3\u04cf\5x=\2\u04c4")
        buf.write("\u04c5\f\35\2\2\u04c5\u04c6\7N\2\2\u04c6\u04cf\5\u00e0")
        buf.write("q\2\u04c7\u04c8\f\30\2\2\u04c8\u04c9\7w\2\2\u04c9\u04ca")
        buf.write("\7\177\2\2\u04ca\u04cf\5\u0130\u0099\2\u04cb\u04cc\f\27")
        buf.write("\2\2\u04cc\u04cd\7w\2\2\u04cd\u04cf\5\u0130\u0099\2\u04ce")
        buf.write("\u0460\3\2\2\2\u04ce\u0464\3\2\2\2\u04ce\u0468\3\2\2\2")
        buf.write("\u04ce\u046c\3\2\2\2\u04ce\u0470\3\2\2\2\u04ce\u0473\3")
        buf.write("\2\2\2\u04ce\u0476\3\2\2\2\u04ce\u0479\3\2\2\2\u04ce\u047c")
        buf.write("\3\2\2\2\u04ce\u047f\3\2\2\2\u04ce\u0482\3\2\2\2\u04ce")
        buf.write("\u0485\3\2\2\2\u04ce\u0488\3\2\2\2\u04ce\u048b\3\2\2\2")
        buf.write("\u04ce\u048e\3\2\2\2\u04ce\u0491\3\2\2\2\u04ce\u0495\3")
        buf.write("\2\2\2\u04ce\u0499\3\2\2\2\u04ce\u049d\3\2\2\2\u04ce\u04a1")
        buf.write("\3\2\2\2\u04ce\u04a5\3\2\2\2\u04ce\u04aa\3\2\2\2\u04ce")
        buf.write("\u04af\3\2\2\2\u04ce\u04b2\3\2\2\2\u04ce\u04b5\3\2\2\2")
        buf.write("\u04ce\u04bb\3\2\2\2\u04ce\u04c2\3\2\2\2\u04ce\u04c4\3")
        buf.write("\2\2\2\u04ce\u04c7\3\2\2\2\u04ce\u04cb\3\2\2\2\u04cf\u04d2")
        buf.write("\3\2\2\2\u04d0\u04ce\3\2\2\2\u04d0\u04d1\3\2\2\2\u04d1")
        buf.write("]\3\2\2\2\u04d2\u04d0\3\2\2\2\u04d3\u04d4\5\u00d0i\2\u04d4")
        buf.write("_\3\2\2\2\u04d5\u04db\5f\64\2\u04d6\u04db\5\u0116\u008c")
        buf.write("\2\u04d7\u04db\5\u0118\u008d\2\u04d8\u04db\5\u00caf\2")
        buf.write("\u04d9\u04db\5\u0114\u008b\2\u04da\u04d5\3\2\2\2\u04da")
        buf.write("\u04d6\3\2\2\2\u04da\u04d7\3\2\2\2\u04da\u04d8\3\2\2\2")
        buf.write("\u04da\u04d9\3\2\2\2\u04dba\3\2\2\2\u04dc\u04dd\b\62\1")
        buf.write("\2\u04dd\u04de\5`\61\2\u04de\u04e3\3\2\2\2\u04df\u04e0")
        buf.write("\f\3\2\2\u04e0\u04e2\5h\65\2\u04e1\u04df\3\2\2\2\u04e2")
        buf.write("\u04e5\3\2\2\2\u04e3\u04e1\3\2\2\2\u04e3\u04e4\3\2\2\2")
        buf.write("\u04e4c\3\2\2\2\u04e5\u04e3\3\2\2\2\u04e6\u04e7\b\63\1")
        buf.write("\2\u04e7\u04e8\7|\2\2\u04e8\u04e9\5\u00caf\2\u04e9\u04ee")
        buf.write("\3\2\2\2\u04ea\u04eb\f\3\2\2\u04eb\u04ed\5h\65\2\u04ec")
        buf.write("\u04ea\3\2\2\2\u04ed\u04f0\3\2\2\2\u04ee\u04ec\3\2\2\2")
        buf.write("\u04ee\u04ef\3\2\2\2\u04efe\3\2\2\2\u04f0\u04ee\3\2\2")
        buf.write("\2\u04f1\u04fa\5j\66\2\u04f2\u04fa\5l\67\2\u04f3\u04fa")
        buf.write("\5z>\2\u04f4\u04fa\5\u013a\u009e\2\u04f5\u04fa\5\u013c")
        buf.write("\u009f\2\u04f6\u04fa\5~@\2\u04f7\u04fa\5<\37\2\u04f8\u04fa")
        buf.write("\5n8\2\u04f9\u04f1\3\2\2\2\u04f9\u04f2\3\2\2\2\u04f9\u04f3")
        buf.write("\3\2\2\2\u04f9\u04f4\3\2\2\2\u04f9\u04f5\3\2\2\2\u04f9")
        buf.write("\u04f6\3\2\2\2\u04f9\u04f7\3\2\2\2\u04f9\u04f8\3\2\2\2")
        buf.write("\u04fag\3\2\2\2\u04fb\u04fc\7\25\2\2\u04fc\u0508\5\u00cc")
        buf.write("g\2\u04fd\u04fe\7\25\2\2\u04fe\u0508\5<\37\2\u04ff\u0500")
        buf.write("\7\30\2\2\u0500\u0501\5\u012a\u0096\2\u0501\u0502\7\31")
        buf.write("\2\2\u0502\u0508\3\2\2\2\u0503\u0504\7\30\2\2\u0504\u0505")
        buf.write("\5\\/\2\u0505\u0506\7\31\2\2\u0506\u0508\3\2\2\2\u0507")
        buf.write("\u04fb\3\2\2\2\u0507\u04fd\3\2\2\2\u0507\u04ff\3\2\2\2")
        buf.write("\u0507\u0503\3\2\2\2\u0508i\3\2\2\2\u0509\u050a\7C\2\2")
        buf.write("\u050a\u050c\7\26\2\2\u050b\u050d\5\\/\2\u050c\u050b\3")
        buf.write("\2\2\2\u050c\u050d\3\2\2\2\u050d\u050e\3\2\2\2\u050e\u050f")
        buf.write("\7\27\2\2\u050fk\3\2\2\2\u0510\u0511\7B\2\2\u0511\u0513")
        buf.write("\7\26\2\2\u0512\u0514\5\\/\2\u0513\u0512\3\2\2\2\u0513")
        buf.write("\u0514\3\2\2\2\u0514\u0515\3\2\2\2\u0515\u0516\7\27\2")
        buf.write("\2\u0516m\3\2\2\2\u0517\u0518\5\u00b8]\2\u0518\u0519\7")
        buf.write("\26\2\2\u0519\u051c\5p9\2\u051a\u051b\7\23\2\2\u051b\u051d")
        buf.write("\5r:\2\u051c\u051a\3\2\2\2\u051c\u051d\3\2\2\2\u051d\u051e")
        buf.write("\3\2\2\2\u051e\u051f\7\27\2\2\u051f\u0528\3\2\2\2\u0520")
        buf.write("\u0521\5\u00b8]\2\u0521\u0523\7\26\2\2\u0522\u0524\5r")
        buf.write(":\2\u0523\u0522\3\2\2\2\u0523\u0524\3\2\2\2\u0524\u0525")
        buf.write("\3\2\2\2\u0525\u0526\7\27\2\2\u0526\u0528\3\2\2\2\u0527")
        buf.write("\u0517\3\2\2\2\u0527\u0520\3\2\2\2\u0528o\3\2\2\2\u0529")
        buf.write("\u052a\7p\2\2\u052a\u052b\5\u0150\u00a9\2\u052b\u052c")
        buf.write("\5\\/\2\u052c\u052d\69$\3\u052dq\3\2\2\2\u052e\u052f\b")
        buf.write(":\1\2\u052f\u0530\5\\/\2\u0530\u0531\6:%\3\u0531\u0534")
        buf.write("\3\2\2\2\u0532\u0534\5t;\2\u0533\u052e\3\2\2\2\u0533\u0532")
        buf.write("\3\2\2\2\u0534\u053a\3\2\2\2\u0535\u0536\f\3\2\2\u0536")
        buf.write("\u0537\7\23\2\2\u0537\u0539\5t;\2\u0538\u0535\3\2\2\2")
        buf.write("\u0539\u053c\3\2\2\2\u053a\u0538\3\2\2\2\u053a\u053b\3")
        buf.write("\2\2\2\u053bs\3\2\2\2\u053c\u053a\3\2\2\2\u053d\u0541")
        buf.write("\5\u00ccg\2\u053e\u053f\5\u0150\u00a9\2\u053f\u0540\5")
        buf.write("\\/\2\u0540\u0542\3\2\2\2\u0541\u053e\3\2\2\2\u0541\u0542")
        buf.write("\3\2\2\2\u0542u\3\2\2\2\u0543\u0544\7\u00a4\2\2\u0544")
        buf.write("\u0545\5\\/\2\u0545\u0546\7\u009c\2\2\u0546\u0547\5\\")
        buf.write("/\2\u0547w\3\2\2\2\u0548\u0549\7l\2\2\u0549\u054a\7\u00a0")
        buf.write("\2\2\u054a\u054b\5\u00ccg\2\u054b\u054c\7\u00a2\2\2\u054c")
        buf.write("\u054d\5\\/\2\u054dy\3\2\2\2\u054e\u054f\7k\2\2\u054f")
        buf.write("\u0551\7\u0083\2\2\u0550\u0552\5\u00b8]\2\u0551\u0550")
        buf.write("\3\2\2\2\u0551\u0552\3\2\2\2\u0552\u0553\3\2\2\2\u0553")
        buf.write("\u0554\7\u00a2\2\2\u0554\u056d\5\\/\2\u0555\u055c\7k\2")
        buf.write("\2\u0556\u055d\7J\2\2\u0557\u0558\7\u0090\2\2\u0558\u0559")
        buf.write("\5\\/\2\u0559\u055a\7\u009c\2\2\u055a\u055b\5\\/\2\u055b")
        buf.write("\u055d\3\2\2\2\u055c\u0556\3\2\2\2\u055c\u0557\3\2\2\2")
        buf.write("\u055d\u055e\3\2\2\2\u055e\u0560\7\26\2\2\u055f\u0561")
        buf.write("\5\u00b8]\2\u0560\u055f\3\2\2\2\u0560\u0561\3\2\2\2\u0561")
        buf.write("\u0562\3\2\2\2\u0562\u0565\7\27\2\2\u0563\u0564\7\u00a2")
        buf.write("\2\2\u0564\u0566\5\\/\2\u0565\u0563\3\2\2\2\u0565\u0566")
        buf.write("\3\2\2\2\u0566\u056a\3\2\2\2\u0567\u0568\7\u0087\2\2\u0568")
        buf.write("\u0569\7U\2\2\u0569\u056b\5\u013e\u00a0\2\u056a\u0567")
        buf.write("\3\2\2\2\u056a\u056b\3\2\2\2\u056b\u056d\3\2\2\2\u056c")
        buf.write("\u054e\3\2\2\2\u056c\u0555\3\2\2\2\u056d{\3\2\2\2\u056e")
        buf.write("\u056f\7k\2\2\u056f\u0571\7\u0083\2\2\u0570\u0572\5\u00b8")
        buf.write("]\2\u0571\u0570\3\2\2\2\u0571\u0572\3\2\2\2\u0572\u0573")
        buf.write("\3\2\2\2\u0573\u0574\7\u00a2\2\2\u0574\u0575\5\\/\2\u0575")
        buf.write("\u0576\7\u0099\2\2\u0576\u0577\7\u00a0\2\2\u0577\u0578")
        buf.write("\5\u00ccg\2\u0578\u0579\7\21\2\2\u0579\u057a\5\u008cG")
        buf.write("\2\u057a\u057b\5\u0106\u0084\2\u057b\u057c\5\u008eH\2")
        buf.write("\u057c\u059d\3\2\2\2\u057d\u0584\7k\2\2\u057e\u0585\7")
        buf.write("J\2\2\u057f\u0580\7\u0090\2\2\u0580\u0581\5\\/\2\u0581")
        buf.write("\u0582\7\u009c\2\2\u0582\u0583\5\\/\2\u0583\u0585\3\2")
        buf.write("\2\2\u0584\u057e\3\2\2\2\u0584\u057f\3\2\2\2\u0585\u0586")
        buf.write("\3\2\2\2\u0586\u0588\7\26\2\2\u0587\u0589\5\u00b8]\2\u0588")
        buf.write("\u0587\3\2\2\2\u0588\u0589\3\2\2\2\u0589\u058a\3\2\2\2")
        buf.write("\u058a\u058d\7\27\2\2\u058b\u058c\7\u00a2\2\2\u058c\u058e")
        buf.write("\5\\/\2\u058d\u058b\3\2\2\2\u058d\u058e\3\2\2\2\u058e")
        buf.write("\u0592\3\2\2\2\u058f\u0590\7\u0087\2\2\u0590\u0591\7U")
        buf.write("\2\2\u0591\u0593\5\u013e\u00a0\2\u0592\u058f\3\2\2\2\u0592")
        buf.write("\u0593\3\2\2\2\u0593\u0594\3\2\2\2\u0594\u0595\7\u0099")
        buf.write("\2\2\u0595\u0596\7\u00a0\2\2\u0596\u0597\5\u00ccg\2\u0597")
        buf.write("\u0598\7\21\2\2\u0598\u0599\5\u008cG\2\u0599\u059a\5\u0106")
        buf.write("\u0084\2\u059a\u059b\5\u008eH\2\u059b\u059d\3\2\2\2\u059c")
        buf.write("\u056e\3\2\2\2\u059c\u057d\3\2\2\2\u059d}\3\2\2\2\u059e")
        buf.write("\u05a0\7\u0094\2\2\u059f\u05a1\7`\2\2\u05a0\u059f\3\2")
        buf.write("\2\2\u05a0\u05a1\3\2\2\2\u05a1\u05a2\3\2\2\2\u05a2\u05a3")
        buf.write("\7\26\2\2\u05a3\u05a9\5b\62\2\u05a4\u05a5\7\23\2\2\u05a5")
        buf.write("\u05a6\5\u0148\u00a5\2\u05a6\u05a7\7.\2\2\u05a7\u05a8")
        buf.write("\5\u0138\u009d\2\u05a8\u05aa\3\2\2\2\u05a9\u05a4\3\2\2")
        buf.write("\2\u05a9\u05aa\3\2\2\2\u05aa\u05ab\3\2\2\2\u05ab\u05ac")
        buf.write("\7\27\2\2\u05ac\177\3\2\2\2\u05ad\u05ae\5\u012e\u0098")
        buf.write("\2\u05ae\u05af\5\u0150\u00a9\2\u05af\u05b0\5\\/\2\u05b0")
        buf.write("\u0081\3\2\2\2\u05b1\u05b2\6B\'\3\u05b2\u05b3\7\25\2\2")
        buf.write("\u05b3\u05ba\5\u00ccg\2\u05b4\u05b5\6B(\3\u05b5\u05b6")
        buf.write("\7\30\2\2\u05b6\u05b7\5\\/\2\u05b7\u05b8\7\31\2\2\u05b8")
        buf.write("\u05ba\3\2\2\2\u05b9\u05b1\3\2\2\2\u05b9\u05b4\3\2\2\2")
        buf.write("\u05ba\u0083\3\2\2\2\u05bb\u05bc\5\u00f6|\2\u05bc\u05bd")
        buf.write("\5\u0150\u00a9\2\u05bd\u05be\5\\/\2\u05be\u0085\3\2\2")
        buf.write("\2\u05bf\u05c1\7\7\2\2\u05c0\u05bf\3\2\2\2\u05c1\u05c4")
        buf.write("\3\2\2\2\u05c2\u05c0\3\2\2\2\u05c2\u05c3\3\2\2\2\u05c3")
        buf.write("\u0087\3\2\2\2\u05c4\u05c2\3\2\2\2\u05c5\u05c7\7\7\2\2")
        buf.write("\u05c6\u05c5\3\2\2\2\u05c7\u05c8\3\2\2\2\u05c8\u05c6\3")
        buf.write("\2\2\2\u05c8\u05c9\3\2\2\2\u05c9\u0089\3\2\2\2\u05ca\u05cc")
        buf.write("\t\4\2\2\u05cb\u05ca\3\2\2\2\u05cc\u05cf\3\2\2\2\u05cd")
        buf.write("\u05cb\3\2\2\2\u05cd\u05ce\3\2\2\2\u05ce\u008b\3\2\2\2")
        buf.write("\u05cf\u05cd\3\2\2\2\u05d0\u05d2\7\7\2\2\u05d1\u05d0\3")
        buf.write("\2\2\2\u05d2\u05d3\3\2\2\2\u05d3\u05d1\3\2\2\2\u05d3\u05d4")
        buf.write("\3\2\2\2\u05d4\u05d5\3\2\2\2\u05d5\u05d6\7\3\2\2\u05d6")
        buf.write("\u008d\3\2\2\2\u05d7\u05d9\7\7\2\2\u05d8\u05d7\3\2\2\2")
        buf.write("\u05d9\u05dc\3\2\2\2\u05da\u05d8\3\2\2\2\u05da\u05db\3")
        buf.write("\2\2\2\u05db\u05dd\3\2\2\2\u05dc\u05da\3\2\2\2\u05dd\u05de")
        buf.write("\7\4\2\2\u05de\u008f\3\2\2\2\u05df\u05e0\7~\2\2\u05e0")
        buf.write("\u0091\3\2\2\2\u05e1\u05e3\5\u0094K\2\u05e2\u05e1\3\2")
        buf.write("\2\2\u05e2\u05e3\3\2\2\2\u05e3\u05e4\3\2\2\2\u05e4\u05e5")
        buf.write("\5\u0086D\2\u05e5\u05e6\7\2\2\3\u05e6\u0093\3\2\2\2\u05e7")
        buf.write("\u05ed\5\u0096L\2\u05e8\u05e9\5\u0088E\2\u05e9\u05ea\5")
        buf.write("\u0096L\2\u05ea\u05ec\3\2\2\2\u05eb\u05e8\3\2\2\2\u05ec")
        buf.write("\u05ef\3\2\2\2\u05ed\u05eb\3\2\2\2\u05ed\u05ee\3\2\2\2")
        buf.write("\u05ee\u0095\3\2\2\2\u05ef\u05ed\3\2\2\2\u05f0\u05f1\5")
        buf.write("\u00fc\177\2\u05f1\u05f2\5\u0088E\2\u05f2\u05f4\3\2\2")
        buf.write("\2\u05f3\u05f0\3\2\2\2\u05f4\u05f7\3\2\2\2\u05f5\u05f3")
        buf.write("\3\2\2\2\u05f5\u05f6\3\2\2\2\u05f6\u05fd\3\2\2\2\u05f7")
        buf.write("\u05f5\3\2\2\2\u05f8\u05f9\5\u0098M\2\u05f9\u05fa\5\u0088")
        buf.write("E\2\u05fa\u05fc\3\2\2\2\u05fb\u05f8\3\2\2\2\u05fc\u05ff")
        buf.write("\3\2\2\2\u05fd\u05fb\3\2\2\2\u05fd\u05fe\3\2\2\2\u05fe")
        buf.write("\u0606\3\2\2\2\u05ff\u05fd\3\2\2\2\u0600\u0607\5\n\6\2")
        buf.write("\u0601\u0607\5\u00bc_\2\u0602\u0607\5\u009cO\2\u0603\u0607")
        buf.write("\5\u009eP\2\u0604\u0607\5\u00be`\2\u0605\u0607\5\u00fa")
        buf.write("~\2\u0606\u0600\3\2\2\2\u0606\u0601\3\2\2\2\u0606\u0602")
        buf.write("\3\2\2\2\u0606\u0603\3\2\2\2\u0606\u0604\3\2\2\2\u0606")
        buf.write("\u0605\3\2\2\2\u0607\u0097\3\2\2\2\u0608\u060d\5\u009a")
        buf.write("N\2\u0609\u060a\7\26\2\2\u060a\u060b\5\u0118\u008d\2\u060b")
        buf.write("\u060c\7\27\2\2\u060c\u060e\3\2\2\2\u060d\u0609\3\2\2")
        buf.write("\2\u060d\u060e\3\2\2\2\u060e\u0099\3\2\2\2\u060f\u0610")
        buf.write("\7\u00ae\2\2\u0610\u009b\3\2\2\2\u0611\u0612\5$\23\2\u0612")
        buf.write("\u009d\3\2\2\2\u0613\u0616\5\2\2\2\u0614\u0616\5\4\3\2")
        buf.write("\u0615\u0613\3\2\2\2\u0615\u0614\3\2\2\2\u0616\u009f\3")
        buf.write("\2\2\2\u0617\u061d\5\6\4\2\u0618\u0619\5\u0088E\2\u0619")
        buf.write("\u061a\5\6\4\2\u061a\u061c\3\2\2\2\u061b\u0618\3\2\2\2")
        buf.write("\u061c\u061f\3\2\2\2\u061d\u061b\3\2\2\2\u061d\u061e\3")
        buf.write("\2\2\2\u061e\u00a1\3\2\2\2\u061f\u061d\3\2\2\2\u0620\u0626")
        buf.write("\5\b\5\2\u0621\u0622\5\u0088E\2\u0622\u0623\5\b\5\2\u0623")
        buf.write("\u0625\3\2\2\2\u0624\u0621\3\2\2\2\u0625\u0628\3\2\2\2")
        buf.write("\u0626\u0624\3\2\2\2\u0626\u0627\3\2\2\2\u0627\u00a3\3")
        buf.write("\2\2\2\u0628\u0626\3\2\2\2\u0629\u062e\5\u00d2j\2\u062a")
        buf.write("\u062b\7\23\2\2\u062b\u062d\5\u00d2j\2\u062c\u062a\3\2")
        buf.write("\2\2\u062d\u0630\3\2\2\2\u062e\u062c\3\2\2\2\u062e\u062f")
        buf.write("\3\2\2\2\u062f\u00a5\3\2\2\2\u0630\u062e\3\2\2\2\u0631")
        buf.write("\u0632\7t\2\2\u0632\u063c\5\u00a8U\2\u0633\u0634\7t\2")
        buf.write("\2\u0634\u063c\5\u00aaV\2\u0635\u0636\7t\2\2\u0636\u063c")
        buf.write("\5\u00aeX\2\u0637\u0638\7x\2\2\u0638\u063c\7\u00af\2\2")
        buf.write("\u0639\u063a\7x\2\2\u063a\u063c\5\\/\2\u063b\u0631\3\2")
        buf.write("\2\2\u063b\u0633\3\2\2\2\u063b\u0635\3\2\2\2\u063b\u0637")
        buf.write("\3\2\2\2\u063b\u0639\3\2\2\2\u063c\u00a7\3\2\2\2\u063d")
        buf.write("\u063f\7|\2\2\u063e\u063d\3\2\2\2\u063e\u063f\3\2\2\2")
        buf.write("\u063f\u0640\3\2\2\2\u0640\u0642\7\30\2\2\u0641\u0643")
        buf.write("\5\u00acW\2\u0642\u0641\3\2\2\2\u0642\u0643\3\2\2\2\u0643")
        buf.write("\u0644\3\2\2\2\u0644\u0645\7\31\2\2\u0645\u00a9\3\2\2")
        buf.write("\2\u0646\u0648\7|\2\2\u0647\u0646\3\2\2\2\u0647\u0648")
        buf.write("\3\2\2\2\u0648\u0649\3\2\2\2\u0649\u064b\7*\2\2\u064a")
        buf.write("\u064c\5\u00acW\2\u064b\u064a\3\2\2\2\u064b\u064c\3\2")
        buf.write("\2\2\u064c\u064d\3\2\2\2\u064d\u064e\7(\2\2\u064e\u00ab")
        buf.write("\3\2\2\2\u064f\u0654\5\\/\2\u0650\u0651\7\23\2\2\u0651")
        buf.write("\u0653\5\\/\2\u0652\u0650\3\2\2\2\u0653\u0656\3\2\2\2")
        buf.write("\u0654\u0652\3\2\2\2\u0654\u0655\3\2\2\2\u0655\u00ad\3")
        buf.write("\2\2\2\u0656\u0654\3\2\2\2\u0657\u0658\7\30\2\2\u0658")
        buf.write("\u0659\5\\/\2\u0659\u065a\7\24\2\2\u065a\u065b\5\\/\2")
        buf.write("\u065b\u065c\7\31\2\2\u065c\u00af\3\2\2\2\u065d\u065e")
        buf.write("\bY\1\2\u065e\u066a\5\u00b2Z\2\u065f\u0660\7G\2\2\u0660")
        buf.write("\u0661\7*\2\2\u0661\u0662\5\u00b0Y\2\u0662\u0663\7(\2")
        buf.write("\2\u0663\u066a\3\2\2\2\u0664\u0665\7F\2\2\u0665\u0666")
        buf.write("\7*\2\2\u0666\u0667\5\u00b0Y\2\u0667\u0668\7(\2\2\u0668")
        buf.write("\u066a\3\2\2\2\u0669\u065d\3\2\2\2\u0669\u065f\3\2\2\2")
        buf.write("\u0669\u0664\3\2\2\2\u066a\u0674\3\2\2\2\u066b\u066c\f")
        buf.write("\7\2\2\u066c\u0673\7,\2\2\u066d\u066e\f\6\2\2\u066e\u066f")
        buf.write("\7\30\2\2\u066f\u0673\7\31\2\2\u0670\u0671\f\5\2\2\u0671")
        buf.write("\u0673\7-\2\2\u0672\u066b\3\2\2\2\u0672\u066d\3\2\2\2")
        buf.write("\u0672\u0670\3\2\2\2\u0673\u0676\3\2\2\2\u0674\u0672\3")
        buf.write("\2\2\2\u0674\u0675\3\2\2\2\u0675\u00b1\3\2\2\2\u0676\u0674")
        buf.write("\3\2\2\2\u0677\u067a\5\u00b4[\2\u0678\u067a\5\u00b6\\")
        buf.write("\2\u0679\u0677\3\2\2\2\u0679\u0678\3\2\2\2\u067a\u00b3")
        buf.write("\3\2\2\2\u067b\u068c\7\66\2\2\u067c\u068c\7\67\2\2\u067d")
        buf.write("\u068c\78\2\2\u067e\u068c\7D\2\2\u067f\u068c\79\2\2\u0680")
        buf.write("\u068c\7:\2\2\u0681\u068c\7B\2\2\u0682\u068c\7;\2\2\u0683")
        buf.write("\u068c\7=\2\2\u0684\u068c\7<\2\2\u0685\u068c\7>\2\2\u0686")
        buf.write("\u068c\7?\2\2\u0687\u068c\7A\2\2\u0688\u068c\7C\2\2\u0689")
        buf.write("\u068c\7E\2\2\u068a\u068c\7H\2\2\u068b\u067b\3\2\2\2\u068b")
        buf.write("\u067c\3\2\2\2\u068b\u067d\3\2\2\2\u068b\u067e\3\2\2\2")
        buf.write("\u068b\u067f\3\2\2\2\u068b\u0680\3\2\2\2\u068b\u0681\3")
        buf.write("\2\2\2\u068b\u0682\3\2\2\2\u068b\u0683\3\2\2\2\u068b\u0684")
        buf.write("\3\2\2\2\u068b\u0685\3\2\2\2\u068b\u0686\3\2\2\2\u068b")
        buf.write("\u0687\3\2\2\2\u068b\u0688\3\2\2\2\u068b\u0689\3\2\2\2")
        buf.write("\u068b\u068a\3\2\2\2\u068c\u00b5\3\2\2\2\u068d\u068e\7")
        buf.write("\u00aa\2\2\u068e\u00b7\3\2\2\2\u068f\u0691\7|\2\2\u0690")
        buf.write("\u068f\3\2\2\2\u0690\u0691\3\2\2\2\u0691\u0692\3\2\2\2")
        buf.write("\u0692\u0693\5\u00b6\\\2\u0693\u00b9\3\2\2\2\u0694\u0695")
        buf.write("\7A\2\2\u0695\u00bb\3\2\2\2\u0696\u069a\5\22\n\2\u0697")
        buf.write("\u069a\5\"\22\2\u0698\u069a\5\24\13\2\u0699\u0696\3\2")
        buf.write("\2\2\u0699\u0697\3\2\2\2\u0699\u0698\3\2\2\2\u069a\u00bd")
        buf.write("\3\2\2\2\u069b\u069e\5\16\b\2\u069c\u069e\5\20\t\2\u069d")
        buf.write("\u069b\3\2\2\2\u069d\u069c\3\2\2\2\u069e\u00bf\3\2\2\2")
        buf.write("\u069f\u06a4\5\u00d0i\2\u06a0\u06a1\7\23\2\2\u06a1\u06a3")
        buf.write("\5\u00d0i\2\u06a2\u06a0\3\2\2\2\u06a3\u06a6\3\2\2\2\u06a4")
        buf.write("\u06a2\3\2\2\2\u06a4\u06a5\3\2\2\2\u06a5\u00c1\3\2\2\2")
        buf.write("\u06a6\u06a4\3\2\2\2\u06a7\u06aa\5\u00ccg\2\u06a8\u06aa")
        buf.write("\5\u00d0i\2\u06a9\u06a7\3\2\2\2\u06a9\u06a8\3\2\2\2\u06aa")
        buf.write("\u00c3\3\2\2\2\u06ab\u06ae\5\u00caf\2\u06ac\u06ae\5\u0144")
        buf.write("\u00a3\2\u06ad\u06ab\3\2\2\2\u06ad\u06ac\3\2\2\2\u06ae")
        buf.write("\u00c5\3\2\2\2\u06af\u06b0\6d,\3\u06b0\u06b1\7#\2\2\u06b1")
        buf.write("\u06b2\5\u00c8e\2\u06b2\u00c7\3\2\2\2\u06b3\u06b4\6e-")
        buf.write("\3\u06b4\u06b5\5\u00c4c\2\u06b5\u00c9\3\2\2\2\u06b6\u06ba")
        buf.write("\5\u00ccg\2\u06b7\u06ba\5\u00d0i\2\u06b8\u06ba\5\u00d2")
        buf.write("j\2\u06b9\u06b6\3\2\2\2\u06b9\u06b7\3\2\2\2\u06b9\u06b8")
        buf.write("\3\2\2\2\u06ba\u00cb\3\2\2\2\u06bb\u06bc\7\u00ab\2\2\u06bc")
        buf.write("\u00cd\3\2\2\2\u06bd\u06be\t\5\2\2\u06be\u00cf\3\2\2\2")
        buf.write("\u06bf\u06c0\7\u00aa\2\2\u06c0\u00d1\3\2\2\2\u06c1\u06c2")
        buf.write("\7\u00a9\2\2\u06c2\u00d3\3\2\2\2\u06c3\u06c4\t\6\2\2\u06c4")
        buf.write("\u00d5\3\2\2\2\u06c5\u06ca\5\u00d8m\2\u06c6\u06c7\7\23")
        buf.write("\2\2\u06c7\u06c9\5\u00d8m\2\u06c8\u06c6\3\2\2\2\u06c9")
        buf.write("\u06cc\3\2\2\2\u06ca\u06c8\3\2\2\2\u06ca\u06cb\3\2\2\2")
        buf.write("\u06cb\u00d7\3\2\2\2\u06cc\u06ca\3\2\2\2\u06cd\u06d3\5")
        buf.write("\u00dep\2\u06ce\u06d0\7|\2\2\u06cf\u06ce\3\2\2\2\u06cf")
        buf.write("\u06d0\3\2\2\2\u06d0\u06d1\3\2\2\2\u06d1\u06d3\5\u00da")
        buf.write("n\2\u06d2\u06cd\3\2\2\2\u06d2\u06cf\3\2\2\2\u06d3\u00d9")
        buf.write("\3\2\2\2\u06d4\u06d7\5\u00dco\2\u06d5\u06d7\5\64\33\2")
        buf.write("\u06d6\u06d4\3\2\2\2\u06d6\u06d5\3\2\2\2\u06d7\u00db\3")
        buf.write("\2\2\2\u06d8\u06db\5\u00ccg\2\u06d9\u06da\7.\2\2\u06da")
        buf.write("\u06dc\5\u0118\u008d\2\u06db\u06d9\3\2\2\2\u06db\u06dc")
        buf.write("\3\2\2\2\u06dc\u00dd\3\2\2\2\u06dd\u06de\5\u00ba^\2\u06de")
        buf.write("\u06df\5\u00ccg\2\u06df\u00df\3\2\2\2\u06e0\u06e3\5\u00b0")
        buf.write("Y\2\u06e1\u06e3\5\u00e2r\2\u06e2\u06e0\3\2\2\2\u06e2\u06e1")
        buf.write("\3\2\2\2\u06e3\u00e1\3\2\2\2\u06e4\u06e5\br\1\2\u06e5")
        buf.write("\u06e6\7M\2\2\u06e6\u06ef\3\2\2\2\u06e7\u06e8\f\4\2\2")
        buf.write("\u06e8\u06e9\7\30\2\2\u06e9\u06ee\7\31\2\2\u06ea\u06eb")
        buf.write("\f\3\2\2\u06eb\u06ec\7\32\2\2\u06ec\u06ee\7\33\2\2\u06ed")
        buf.write("\u06e7\3\2\2\2\u06ed\u06ea\3\2\2\2\u06ee\u06f1\3\2\2\2")
        buf.write("\u06ef\u06ed\3\2\2\2\u06ef\u06f0\3\2\2\2\u06f0\u00e3\3")
        buf.write("\2\2\2\u06f1\u06ef\3\2\2\2\u06f2\u06f8\5\u00e6t\2\u06f3")
        buf.write("\u06f4\5\u0088E\2\u06f4\u06f5\5\u00e6t\2\u06f5\u06f7\3")
        buf.write("\2\2\2\u06f6\u06f3\3\2\2\2\u06f7\u06fa\3\2\2\2\u06f8\u06f6")
        buf.write("\3\2\2\2\u06f8\u06f9\3\2\2\2\u06f9\u00e5\3\2\2\2\u06fa")
        buf.write("\u06f8\3\2\2\2\u06fb\u06fc\5\u00fc\177\2\u06fc\u06fd\5")
        buf.write("\u0088E\2\u06fd\u06ff\3\2\2\2\u06fe\u06fb\3\2\2\2\u06ff")
        buf.write("\u0702\3\2\2\2\u0700\u06fe\3\2\2\2\u0700\u0701\3\2\2\2")
        buf.write("\u0701\u0708\3\2\2\2\u0702\u0700\3\2\2\2\u0703\u0704\5")
        buf.write("\u0098M\2\u0704\u0705\5\u0088E\2\u0705\u0707\3\2\2\2\u0706")
        buf.write("\u0703\3\2\2\2\u0707\u070a\3\2\2\2\u0708\u0706\3\2\2\2")
        buf.write("\u0708\u0709\3\2\2\2\u0709\u0710\3\2\2\2\u070a\u0708\3")
        buf.write("\2\2\2\u070b\u0711\5\32\16\2\u070c\u0711\5\36\20\2\u070d")
        buf.write("\u0711\5,\27\2\u070e\u0711\5*\26\2\u070f\u0711\5\30\r")
        buf.write("\2\u0710\u070b\3\2\2\2\u0710\u070c\3\2\2\2\u0710\u070d")
        buf.write("\3\2\2\2\u0710\u070e\3\2\2\2\u0710\u070f\3\2\2\2\u0711")
        buf.write("\u00e7\3\2\2\2\u0712\u0718\5\u00eav\2\u0713\u0714\5\u0088")
        buf.write("E\2\u0714\u0715\5\u00eav\2\u0715\u0717\3\2\2\2\u0716\u0713")
        buf.write("\3\2\2\2\u0717\u071a\3\2\2\2\u0718\u0716\3\2\2\2\u0718")
        buf.write("\u0719\3\2\2\2\u0719\u00e9\3\2\2\2\u071a\u0718\3\2\2\2")
        buf.write("\u071b\u071f\5 \21\2\u071c\u071f\5\34\17\2\u071d\u071f")
        buf.write("\5.\30\2\u071e\u071b\3\2\2\2\u071e\u071c\3\2\2\2\u071e")
        buf.write("\u071d\3\2\2\2\u071f\u00eb\3\2\2\2\u0720\u0721\7\13\2")
        buf.write("\2\u0721\u072b\5\u01a4\u00d3\2\u0722\u0723\7\f\2\2\u0723")
        buf.write("\u072b\5\u01be\u00e0\2\u0724\u0725\7\r\2\2\u0725\u072b")
        buf.write("\5\u00eex\2\u0726\u0727\7\16\2\2\u0727\u072b\5\u00eex")
        buf.write("\2\u0728\u0729\7\17\2\2\u0729\u072b\5\u00f2z\2\u072a\u0720")
        buf.write("\3\2\2\2\u072a\u0722\3\2\2\2\u072a\u0724\3\2\2\2\u072a")
        buf.write("\u0726\3\2\2\2\u072a\u0728\3\2\2\2\u072b\u00ed\3\2\2\2")
        buf.write("\u072c\u072e\5\u00caf\2\u072d\u072f\5\u00f0y\2\u072e\u072d")
        buf.write("\3\2\2\2\u072e\u072f\3\2\2\2\u072f\u00ef\3\2\2\2\u0730")
        buf.write("\u0731\7p\2\2\u0731\u0732\5\u014a\u00a6\2\u0732\u0733")
        buf.write("\7\21\2\2\u0733\u0738\5\u018c\u00c7\2\u0734\u0735\7\25")
        buf.write("\2\2\u0735\u0737\5\u018c\u00c7\2\u0736\u0734\3\2\2\2\u0737")
        buf.write("\u073a\3\2\2\2\u0738\u0736\3\2\2\2\u0738\u0739\3\2\2\2")
        buf.write("\u0739\u00f1\3\2\2\2\u073a\u0738\3\2\2\2\u073b\u0740\5")
        buf.write("\u0172\u00ba\2\u073c\u073d\7\25\2\2\u073d\u073f\5\u0172")
        buf.write("\u00ba\2\u073e\u073c\3\2\2\2\u073f\u0742\3\2\2\2\u0740")
        buf.write("\u073e\3\2\2\2\u0740\u0741\3\2\2\2\u0741\u0744\3\2\2\2")
        buf.write("\u0742\u0740\3\2\2\2\u0743\u0745\5\u00f4{\2\u0744\u0743")
        buf.write("\3\2\2\2\u0744\u0745\3\2\2\2\u0745\u00f3\3\2\2\2\u0746")
        buf.write("\u0747\7p\2\2\u0747\u0748\5\u014a\u00a6\2\u0748\u074a")
        buf.write("\7\21\2\2\u0749\u074b\7%\2\2\u074a\u0749\3\2\2\2\u074a")
        buf.write("\u074b\3\2\2\2\u074b\u074c\3\2\2\2\u074c\u0751\5\u0172")
        buf.write("\u00ba\2\u074d\u074e\7%\2\2\u074e\u0750\5\u0172\u00ba")
        buf.write("\2\u074f\u074d\3\2\2\2\u0750\u0753\3\2\2\2\u0751\u074f")
        buf.write("\3\2\2\2\u0751\u0752\3\2\2\2\u0752\u0756\3\2\2\2\u0753")
        buf.write("\u0751\3\2\2\2\u0754\u0755\7\25\2\2\u0755\u0757\5\u0172")
        buf.write("\u00ba\2\u0756\u0754\3\2\2\2\u0756\u0757\3\2\2\2\u0757")
        buf.write("\u00f5\3\2\2\2\u0758\u075d\5\u00ccg\2\u0759\u075a\7\23")
        buf.write("\2\2\u075a\u075c\5\u00ccg\2\u075b\u0759\3\2\2\2\u075c")
        buf.write("\u075f\3\2\2\2\u075d\u075b\3\2\2\2\u075d\u075e\3\2\2\2")
        buf.write("\u075e\u00f7\3\2\2\2\u075f\u075d\3\2\2\2\u0760\u0765\5")
        buf.write("\u00ceh\2\u0761\u0762\7\23\2\2\u0762\u0764\5\u00ceh\2")
        buf.write("\u0763\u0761\3\2\2\2\u0764\u0767\3\2\2\2\u0765\u0763\3")
        buf.write("\2\2\2\u0765\u0766\3\2\2\2\u0766\u00f9\3\2\2\2\u0767\u0765")
        buf.write("\3\2\2\2\u0768\u076d\5*\26\2\u0769\u076d\5,\27\2\u076a")
        buf.write("\u076d\5.\30\2\u076b\u076d\5\60\31\2\u076c\u0768\3\2\2")
        buf.write("\2\u076c\u0769\3\2\2\2\u076c\u076a\3\2\2\2\u076c\u076b")
        buf.write("\3\2\2\2\u076d\u00fb\3\2\2\2\u076e\u076f\7\n\2\2\u076f")
        buf.write("\u00fd\3\2\2\2\u0770\u0776\5\u0100\u0081\2\u0771\u0772")
        buf.write("\5\u0088E\2\u0772\u0773\5\u0100\u0081\2\u0773\u0775\3")
        buf.write("\2\2\2\u0774\u0771\3\2\2\2\u0775\u0778\3\2\2\2\u0776\u0774")
        buf.write("\3\2\2\2\u0776\u0777\3\2\2\2\u0777\u00ff\3\2\2\2\u0778")
        buf.write("\u0776\3\2\2\2\u0779\u077a\7\13\2\2\u077a\u0784\5\u018e")
        buf.write("\u00c8\2\u077b\u077c\7\f\2\2\u077c\u0784\5\u01aa\u00d6")
        buf.write("\2\u077d\u077e\7\r\2\2\u077e\u0784\5\u0102\u0082\2\u077f")
        buf.write("\u0780\7\16\2\2\u0780\u0784\5\u0102\u0082\2\u0781\u0782")
        buf.write("\7\17\2\2\u0782\u0784\5\u0104\u0083\2\u0783\u0779\3\2")
        buf.write("\2\2\u0783\u077b\3\2\2\2\u0783\u077d\3\2\2\2\u0783\u077f")
        buf.write("\3\2\2\2\u0783\u0781\3\2\2\2\u0784\u0101\3\2\2\2\u0785")
        buf.write("\u0787\5\u0174\u00bb\2\u0786\u0788\7\22\2\2\u0787\u0786")
        buf.write("\3\2\2\2\u0787\u0788\3\2\2\2\u0788\u078a\3\2\2\2\u0789")
        buf.write("\u078b\5\u00f0y\2\u078a\u0789\3\2\2\2\u078a\u078b\3\2")
        buf.write("\2\2\u078b\u0103\3\2\2\2\u078c\u078e\5\u015a\u00ae\2\u078d")
        buf.write("\u078f\7\22\2\2\u078e\u078d\3\2\2\2\u078e\u078f\3\2\2")
        buf.write("\2\u078f\u0791\3\2\2\2\u0790\u0792\5\u00f4{\2\u0791\u0790")
        buf.write("\3\2\2\2\u0791\u0792\3\2\2\2\u0792\u0105\3\2\2\2\u0793")
        buf.write("\u0799\5\66\34\2\u0794\u0795\5\u0088E\2\u0795\u0796\5")
        buf.write("\66\34\2\u0796\u0798\3\2\2\2\u0797\u0794\3\2\2\2\u0798")
        buf.write("\u079b\3\2\2\2\u0799\u0797\3\2\2\2\u0799\u079a\3\2\2\2")
        buf.write("\u079a\u0107\3\2\2\2\u079b\u0799\3\2\2\2\u079c\u07a2\5")
        buf.write("\62\32\2\u079d\u079e\5\u0088E\2\u079e\u079f\5\62\32\2")
        buf.write("\u079f\u07a1\3\2\2\2\u07a0\u079d\3\2\2\2\u07a1\u07a4\3")
        buf.write("\2\2\2\u07a2\u07a0\3\2\2\2\u07a2\u07a3\3\2\2\2\u07a3\u0109")
        buf.write("\3\2\2\2\u07a4\u07a2\3\2\2\2\u07a5\u07ab\5F$\2\u07a6\u07a7")
        buf.write("\5\u0088E\2\u07a7\u07a8\5F$\2\u07a8\u07aa\3\2\2\2\u07a9")
        buf.write("\u07a6\3\2\2\2\u07aa\u07ad\3\2\2\2\u07ab\u07a9\3\2\2\2")
        buf.write("\u07ab\u07ac\3\2\2\2\u07ac\u010b\3\2\2\2\u07ad\u07ab\3")
        buf.write("\2\2\2\u07ae\u07b4\5V,\2\u07af\u07b0\5\u0088E\2\u07b0")
        buf.write("\u07b1\5V,\2\u07b1\u07b3\3\2\2\2\u07b2\u07af\3\2\2\2\u07b3")
        buf.write("\u07b6\3\2\2\2\u07b4\u07b2\3\2\2\2\u07b4\u07b5\3\2\2\2")
        buf.write("\u07b5\u010d\3\2\2\2\u07b6\u07b4\3\2\2\2\u07b7\u07b8\7")
        buf.write("\30\2\2\u07b8\u07b9\5\u0110\u0089\2\u07b9\u07ba\7\24\2")
        buf.write("\2\u07ba\u07bb\5\u0110\u0089\2\u07bb\u07bc\7\31\2\2\u07bc")
        buf.write("\u07c6\3\2\2\2\u07bd\u07be\7\30\2\2\u07be\u07bf\5\u0112")
        buf.write("\u008a\2\u07bf\u07c0\7\31\2\2\u07c0\u07c6\3\2\2\2\u07c1")
        buf.write("\u07c2\7*\2\2\u07c2\u07c3\5\u0112\u008a\2\u07c3\u07c4")
        buf.write("\7(\2\2\u07c4\u07c6\3\2\2\2\u07c5\u07b7\3\2\2\2\u07c5")
        buf.write("\u07bd\3\2\2\2\u07c5\u07c1\3\2\2\2\u07c6\u010f\3\2\2\2")
        buf.write("\u07c7\u07d7\7\u00a7\2\2\u07c8\u07d7\7\u00a8\2\2\u07c9")
        buf.write("\u07d7\7\u00b1\2\2\u07ca\u07d7\7\u00b2\2\2\u07cb\u07d7")
        buf.write("\7\u00a6\2\2\u07cc\u07d7\7\u00b6\2\2\u07cd\u07d7\7\u00b5")
        buf.write("\2\2\u07ce\u07d7\7\u00af\2\2\u07cf\u07d7\7\u00b3\2\2\u07d0")
        buf.write("\u07d7\7\u00b4\2\2\u07d1\u07d7\7\u00a5\2\2\u07d2\u07d7")
        buf.write("\7\u00b7\2\2\u07d3\u07d7\7\u00b8\2\2\u07d4\u07d7\7\u00b0")
        buf.write("\2\2\u07d5\u07d7\5\u0090I\2\u07d6\u07c7\3\2\2\2\u07d6")
        buf.write("\u07c8\3\2\2\2\u07d6\u07c9\3\2\2\2\u07d6\u07ca\3\2\2\2")
        buf.write("\u07d6\u07cb\3\2\2\2\u07d6\u07cc\3\2\2\2\u07d6\u07cd\3")
        buf.write("\2\2\2\u07d6\u07ce\3\2\2\2\u07d6\u07cf\3\2\2\2\u07d6\u07d0")
        buf.write("\3\2\2\2\u07d6\u07d1\3\2\2\2\u07d6\u07d2\3\2\2\2\u07d6")
        buf.write("\u07d3\3\2\2\2\u07d6\u07d4\3\2\2\2\u07d6\u07d5\3\2\2\2")
        buf.write("\u07d7\u0111\3\2\2\2\u07d8\u07dd\5\u0110\u0089\2\u07d9")
        buf.write("\u07da\7\23\2\2\u07da\u07dc\5\u0110\u0089\2\u07db\u07d9")
        buf.write("\3\2\2\2\u07dc\u07df\3\2\2\2\u07dd\u07db\3\2\2\2\u07dd")
        buf.write("\u07de\3\2\2\2\u07de\u0113\3\2\2\2\u07df\u07dd\3\2\2\2")
        buf.write("\u07e0\u07e1\t\7\2\2\u07e1\u0115\3\2\2\2\u07e2\u07e3\7")
        buf.write("\26\2\2\u07e3\u07e4\5\\/\2\u07e4\u07e5\7\27\2\2\u07e5")
        buf.write("\u0117\3\2\2\2\u07e6\u07e9\5\u0110\u0089\2\u07e7\u07e9")
        buf.write("\5\u011a\u008e\2\u07e8\u07e6\3\2\2\2\u07e8\u07e7\3\2\2")
        buf.write("\2\u07e9\u0119\3\2\2\2\u07ea\u07f1\5\u00aeX\2\u07eb\u07f1")
        buf.write("\5\u00a8U\2\u07ec\u07f1\5\u00aaV\2\u07ed\u07f1\5\u011e")
        buf.write("\u0090\2\u07ee\u07f1\5\u0120\u0091\2\u07ef\u07f1\5\u011c")
        buf.write("\u008f\2\u07f0\u07ea\3\2\2\2\u07f0\u07eb\3\2\2\2\u07f0")
        buf.write("\u07ec\3\2\2\2\u07f0\u07ed\3\2\2\2\u07f0\u07ee\3\2\2\2")
        buf.write("\u07f0\u07ef\3\2\2\2\u07f1\u011b\3\2\2\2\u07f2\u07f4\7")
        buf.write("|\2\2\u07f3\u07f2\3\2\2\2\u07f3\u07f4\3\2\2\2\u07f4\u07f5")
        buf.write("\3\2\2\2\u07f5\u07f7\7\26\2\2\u07f6\u07f8\5\u0122\u0092")
        buf.write("\2\u07f7\u07f6\3\2\2\2\u07f7\u07f8\3\2\2\2\u07f8\u07f9")
        buf.write("\3\2\2\2\u07f9\u07fa\7\27\2\2\u07fa\u011d\3\2\2\2\u07fb")
        buf.write("\u07fd\7|\2\2\u07fc\u07fb\3\2\2\2\u07fc\u07fd\3\2\2\2")
        buf.write("\u07fd\u0806\3\2\2\2\u07fe\u07ff\7*\2\2\u07ff\u0800\5")
        buf.write("\u0124\u0093\2\u0800\u0801\7(\2\2\u0801\u0807\3\2\2\2")
        buf.write("\u0802\u0807\7-\2\2\u0803\u0804\7*\2\2\u0804\u0805\7\21")
        buf.write("\2\2\u0805\u0807\7(\2\2\u0806\u07fe\3\2\2\2\u0806\u0802")
        buf.write("\3\2\2\2\u0806\u0803\3\2\2\2\u0807\u011f\3\2\2\2\u0808")
        buf.write("\u080a\7\32\2\2\u0809\u080b\5\u0124\u0093\2\u080a\u0809")
        buf.write("\3\2\2\2\u080a\u080b\3\2\2\2\u080b\u080c\3\2\2\2\u080c")
        buf.write("\u080d\7\33\2\2\u080d\u0121\3\2\2\2\u080e\u080f\5\\/\2")
        buf.write("\u080f\u0818\7\23\2\2\u0810\u0815\5\\/\2\u0811\u0812\7")
        buf.write("\23\2\2\u0812\u0814\5\\/\2\u0813\u0811\3\2\2\2\u0814\u0817")
        buf.write("\3\2\2\2\u0815\u0813\3\2\2\2\u0815\u0816\3\2\2\2\u0816")
        buf.write("\u0819\3\2\2\2\u0817\u0815\3\2\2\2\u0818\u0810\3\2\2\2")
        buf.write("\u0818\u0819\3\2\2\2\u0819\u0123\3\2\2\2\u081a\u081f\5")
        buf.write("\u0126\u0094\2\u081b\u081c\7\23\2\2\u081c\u081e\5\u0126")
        buf.write("\u0094\2\u081d\u081b\3\2\2\2\u081e\u0821\3\2\2\2\u081f")
        buf.write("\u081d\3\2\2\2\u081f\u0820\3\2\2\2\u0820\u0125\3\2\2\2")
        buf.write("\u0821\u081f\3\2\2\2\u0822\u0823\5\u0128\u0095\2\u0823")
        buf.write("\u0824\7\21\2\2\u0824\u0825\5\\/\2\u0825\u0127\3\2\2\2")
        buf.write("\u0826\u0829\5\u00d4k\2\u0827\u0829\7\u00af\2\2\u0828")
        buf.write("\u0826\3\2\2\2\u0828\u0827\3\2\2\2\u0829\u0129\3\2\2\2")
        buf.write("\u082a\u082b\5\\/\2\u082b\u082c\7\21\2\2\u082c\u082d\5")
        buf.write("\\/\2\u082d\u0834\3\2\2\2\u082e\u082f\5\\/\2\u082f\u0830")
        buf.write("\7\21\2\2\u0830\u0834\3\2\2\2\u0831\u0832\7\21\2\2\u0832")
        buf.write("\u0834\5\\/\2\u0833\u082a\3\2\2\2\u0833\u082e\3\2\2\2")
        buf.write("\u0833\u0831\3\2\2\2\u0834\u012b\3\2\2\2\u0835\u0836\5")
        buf.write("\u00ccg\2\u0836\u0837\5\u0150\u00a9\2\u0837\u0838\5\\")
        buf.write("/\2\u0838\u012d\3\2\2\2\u0839\u083a\b\u0098\1\2\u083a")
        buf.write("\u083b\5\u00ccg\2\u083b\u0840\3\2\2\2\u083c\u083d\f\3")
        buf.write("\2\2\u083d\u083f\5\u0082B\2\u083e\u083c\3\2\2\2\u083f")
        buf.write("\u0842\3\2\2\2\u0840\u083e\3\2\2\2\u0840\u0841\3\2\2\2")
        buf.write("\u0841\u012f\3\2\2\2\u0842\u0840\3\2\2\2\u0843\u0844\6")
        buf.write("\u0099\61\3\u0844\u0845\7\u00ab\2\2\u0845\u0848\5\u00e0")
        buf.write("q\2\u0846\u0848\5\\/\2\u0847\u0843\3\2\2\2\u0847\u0846")
        buf.write("\3\2\2\2\u0848\u0131\3\2\2\2\u0849\u084a\5\u0134\u009b")
        buf.write("\2\u084a\u084b\5\\/\2\u084b\u0852\3\2\2\2\u084c\u084d")
        buf.write("\5\u0134\u009b\2\u084d\u084e\7\32\2\2\u084e\u084f\5\u0106")
        buf.write("\u0084\2\u084f\u0850\7\33\2\2\u0850\u0852\3\2\2\2\u0851")
        buf.write("\u0849\3\2\2\2\u0851\u084c\3\2\2\2\u0852\u0133\3\2\2\2")
        buf.write("\u0853\u0854\5\u0136\u009c\2\u0854\u0855\5\u008aF\2\u0855")
        buf.write("\u0856\7\65\2\2\u0856\u0857\5\u008aF\2\u0857\u0135\3\2")
        buf.write("\2\2\u0858\u085f\5\u00ccg\2\u0859\u085b\7\26\2\2\u085a")
        buf.write("\u085c\5\u00f6|\2\u085b\u085a\3\2\2\2\u085b\u085c\3\2")
        buf.write("\2\2\u085c\u085d\3\2\2\2\u085d\u085f\7\27\2\2\u085e\u0858")
        buf.write("\3\2\2\2\u085e\u0859\3\2\2\2\u085f\u0137\3\2\2\2\u0860")
        buf.write("\u0863\5b\62\2\u0861\u0863\5\u0132\u009a\2\u0862\u0860")
        buf.write("\3\2\2\2\u0862\u0861\3\2\2\2\u0863\u0139\3\2\2\2\u0864")
        buf.write("\u0865\7\u008b\2\2\u0865\u0866\7J\2\2\u0866\u0867\7p\2")
        buf.write("\2\u0867\u0868\5\\/\2\u0868\u013b\3\2\2\2\u0869\u086a")
        buf.write("\7\u008b\2\2\u086a\u086b\7\u0083\2\2\u086b\u086c\7p\2")
        buf.write("\2\u086c\u086d\5\\/\2\u086d\u013d\3\2\2\2\u086e\u0873")
        buf.write("\5\u0140\u00a1\2\u086f\u0870\7\23\2\2\u0870\u0872\5\u0140")
        buf.write("\u00a1\2\u0871\u086f\3\2\2\2\u0872\u0875\3\2\2\2\u0873")
        buf.write("\u0871\3\2\2\2\u0873\u0874\3\2\2\2\u0874\u013f\3\2\2\2")
        buf.write("\u0875\u0873\3\2\2\2\u0876\u087b\5\u00ccg\2\u0877\u0878")
        buf.write("\7\25\2\2\u0878\u087a\5\u00ccg\2\u0879\u0877\3\2\2\2\u087a")
        buf.write("\u087d\3\2\2\2\u087b\u0879\3\2\2\2\u087b\u087c\3\2\2\2")
        buf.write("\u087c\u087f\3\2\2\2\u087d\u087b\3\2\2\2\u087e\u0880\t")
        buf.write("\b\2\2\u087f\u087e\3\2\2\2\u087f\u0880\3\2\2\2\u0880\u0141")
        buf.write("\3\2\2\2\u0881\u0888\7\"\2\2\u0882\u0888\7#\2\2\u0883")
        buf.write("\u0888\5\u0152\u00aa\2\u0884\u0888\5\u0154\u00ab\2\u0885")
        buf.write("\u0888\5\u0156\u00ac\2\u0886\u0888\5\u0158\u00ad\2\u0887")
        buf.write("\u0881\3\2\2\2\u0887\u0882\3\2\2\2\u0887\u0883\3\2\2\2")
        buf.write("\u0887\u0884\3\2\2\2\u0887\u0885\3\2\2\2\u0887\u0886\3")
        buf.write("\2\2\2\u0888\u0143\3\2\2\2\u0889\u088a\t\t\2\2\u088a\u0145")
        buf.write("\3\2\2\2\u088b\u088c\7\u00ab\2\2\u088c\u088d\6\u00a4\62")
        buf.write("\3\u088d\u0147\3\2\2\2\u088e\u088f\7\u00ab\2\2\u088f\u0890")
        buf.write("\6\u00a5\63\3\u0890\u0149\3\2\2\2\u0891\u0892\7\u00ab")
        buf.write("\2\2\u0892\u0893\6\u00a6\64\3\u0893\u014b\3\2\2\2\u0894")
        buf.write("\u0895\7\u00ab\2\2\u0895\u0896\6\u00a7\65\3\u0896\u014d")
        buf.write("\3\2\2\2\u0897\u0898\7\u00ab\2\2\u0898\u0899\6\u00a8\66")
        buf.write("\3\u0899\u014f\3\2\2\2\u089a\u089b\7.\2\2\u089b\u0151")
        buf.write("\3\2\2\2\u089c\u089d\7$\2\2\u089d\u0153\3\2\2\2\u089e")
        buf.write("\u089f\7%\2\2\u089f\u0155\3\2\2\2\u08a0\u08a1\7&\2\2\u08a1")
        buf.write("\u0157\3\2\2\2\u08a2\u08a3\t\n\2\2\u08a3\u0159\3\2\2\2")
        buf.write("\u08a4\u08a5\7\u008e\2\2\u08a5\u08a6\5\u015c\u00af\2\u08a6")
        buf.write("\u08a7\7\22\2\2\u08a7\u08ac\3\2\2\2\u08a8\u08a9\5\u015c")
        buf.write("\u00af\2\u08a9\u08aa\7\22\2\2\u08aa\u08ac\3\2\2\2\u08ab")
        buf.write("\u08a4\3\2\2\2\u08ab\u08a8\3\2\2\2\u08ac\u015b\3\2\2\2")
        buf.write("\u08ad\u08ae\b\u00af\1\2\u08ae\u08af\5\u015e\u00b0\2\u08af")
        buf.write("\u08b4\3\2\2\2\u08b0\u08b1\f\3\2\2\u08b1\u08b3\5\u0164")
        buf.write("\u00b3\2\u08b2\u08b0\3\2\2\2\u08b3\u08b6\3\2\2\2\u08b4")
        buf.write("\u08b2\3\2\2\2\u08b4\u08b5\3\2\2\2\u08b5\u015d\3\2\2\2")
        buf.write("\u08b6\u08b4\3\2\2\2\u08b7\u08bf\5\u0160\u00b1\2\u08b8")
        buf.write("\u08bf\5\u0162\u00b2\2\u08b9\u08bf\5\u016c\u00b7\2\u08ba")
        buf.write("\u08bf\5\u016e\u00b8\2\u08bb\u08bf\5\u0170\u00b9\2\u08bc")
        buf.write("\u08bf\5\u0166\u00b4\2\u08bd\u08bf\5\u016a\u00b6\2\u08be")
        buf.write("\u08b7\3\2\2\2\u08be\u08b8\3\2\2\2\u08be\u08b9\3\2\2\2")
        buf.write("\u08be\u08ba\3\2\2\2\u08be\u08bb\3\2\2\2\u08be\u08bc\3")
        buf.write("\2\2\2\u08be\u08bd\3\2\2\2\u08bf\u015f\3\2\2\2\u08c0\u08c1")
        buf.write("\5\u0114\u008b\2\u08c1\u0161\3\2\2\2\u08c2\u08c3\5\u0146")
        buf.write("\u00a4\2\u08c3\u08c4\5\u0166\u00b4\2\u08c4\u0163\3\2\2")
        buf.write("\2\u08c5\u08c6\7\25\2\2\u08c6\u08cb\5\u0166\u00b4\2\u08c7")
        buf.write("\u08c8\7\25\2\2\u08c8\u08cb\5\u0172\u00ba\2\u08c9\u08cb")
        buf.write("\5\u016a\u00b6\2\u08ca\u08c5\3\2\2\2\u08ca\u08c7\3\2\2")
        buf.write("\2\u08ca\u08c9\3\2\2\2\u08cb\u0165\3\2\2\2\u08cc\u08cd")
        buf.write("\5\u0172\u00ba\2\u08cd\u08cf\7\26\2\2\u08ce\u08d0\5\u0168")
        buf.write("\u00b5\2\u08cf\u08ce\3\2\2\2\u08cf\u08d0\3\2\2\2\u08d0")
        buf.write("\u08d1\3\2\2\2\u08d1\u08d2\7\27\2\2\u08d2\u0167\3\2\2")
        buf.write("\2\u08d3\u08d4\b\u00b5\1\2\u08d4\u08d5\5\u015c\u00af\2")
        buf.write("\u08d5\u08db\3\2\2\2\u08d6\u08d7\f\3\2\2\u08d7\u08d8\7")
        buf.write("\23\2\2\u08d8\u08da\5\u015c\u00af\2\u08d9\u08d6\3\2\2")
        buf.write("\2\u08da\u08dd\3\2\2\2\u08db\u08d9\3\2\2\2\u08db\u08dc")
        buf.write("\3\2\2\2\u08dc\u0169\3\2\2\2\u08dd\u08db\3\2\2\2\u08de")
        buf.write("\u08df\7\30\2\2\u08df\u08e0\5\u015c\u00af\2\u08e0\u08e1")
        buf.write("\7\31\2\2\u08e1\u016b\3\2\2\2\u08e2\u08e3\7\26\2\2\u08e3")
        buf.write("\u08e4\5\u015c\u00af\2\u08e4\u08e5\7\27\2\2\u08e5\u016d")
        buf.write("\3\2\2\2\u08e6\u08e7\5\u0172\u00ba\2\u08e7\u016f\3\2\2")
        buf.write("\2\u08e8\u08ee\7\u00b1\2\2\u08e9\u08ee\7\u00b3\2\2\u08ea")
        buf.write("\u08ee\7\u00af\2\2\u08eb\u08ee\7\u00a5\2\2\u08ec\u08ee")
        buf.write("\7\u00a6\2\2\u08ed\u08e8\3\2\2\2\u08ed\u08e9\3\2\2\2\u08ed")
        buf.write("\u08ea\3\2\2\2\u08ed\u08eb\3\2\2\2\u08ed\u08ec\3\2\2\2")
        buf.write("\u08ee\u0171\3\2\2\2\u08ef\u08f0\t\13\2\2\u08f0\u0173")
        buf.write("\3\2\2\2\u08f1\u08f2\7\u008e\2\2\u08f2\u08f5\5\u0176\u00bc")
        buf.write("\2\u08f3\u08f5\5\u0176\u00bc\2\u08f4\u08f1\3\2\2\2\u08f4")
        buf.write("\u08f3\3\2\2\2\u08f5\u0175\3\2\2\2\u08f6\u08f7\b\u00bc")
        buf.write("\1\2\u08f7\u08f8\5\u0178\u00bd\2\u08f8\u08fd\3\2\2\2\u08f9")
        buf.write("\u08fa\f\3\2\2\u08fa\u08fc\5\u017c\u00bf\2\u08fb\u08f9")
        buf.write("\3\2\2\2\u08fc\u08ff\3\2\2\2\u08fd\u08fb\3\2\2\2\u08fd")
        buf.write("\u08fe\3\2\2\2\u08fe\u0177\3\2\2\2\u08ff\u08fd\3\2\2\2")
        buf.write("\u0900\u0906\5\u017a\u00be\2\u0901\u0906\5\u0186\u00c4")
        buf.write("\2\u0902\u0906\5\u0188\u00c5\2\u0903\u0906\5\u018a\u00c6")
        buf.write("\2\u0904\u0906\5\u017e\u00c0\2\u0905\u0900\3\2\2\2\u0905")
        buf.write("\u0901\3\2\2\2\u0905\u0902\3\2\2\2\u0905\u0903\3\2\2\2")
        buf.write("\u0905\u0904\3\2\2\2\u0906\u0179\3\2\2\2\u0907\u0908\5")
        buf.write("\u0114\u008b\2\u0908\u017b\3\2\2\2\u0909\u090a\7\25\2")
        buf.write("\2\u090a\u0910\5\u017e\u00c0\2\u090b\u090c\7\30\2\2\u090c")
        buf.write("\u090d\5\u0176\u00bc\2\u090d\u090e\7\31\2\2\u090e\u0910")
        buf.write("\3\2\2\2\u090f\u0909\3\2\2\2\u090f\u090b\3\2\2\2\u0910")
        buf.write("\u017d\3\2\2\2\u0911\u0912\5\u018c\u00c7\2\u0912\u0914")
        buf.write("\7\26\2\2\u0913\u0915\5\u0180\u00c1\2\u0914\u0913\3\2")
        buf.write("\2\2\u0914\u0915\3\2\2\2\u0915\u0916\3\2\2\2\u0916\u0917")
        buf.write("\7\27\2\2\u0917\u017f\3\2\2\2\u0918\u091f\5\u0182\u00c2")
        buf.write("\2\u0919\u091f\5\u0184\u00c3\2\u091a\u091b\5\u0182\u00c2")
        buf.write("\2\u091b\u091c\7\23\2\2\u091c\u091d\5\u0184\u00c3\2\u091d")
        buf.write("\u091f\3\2\2\2\u091e\u0918\3\2\2\2\u091e\u0919\3\2\2\2")
        buf.write("\u091e\u091a\3\2\2\2\u091f\u0181\3\2\2\2\u0920\u0921\b")
        buf.write("\u00c2\1\2\u0921\u0922\5\u0176\u00bc\2\u0922\u0928\3\2")
        buf.write("\2\2\u0923\u0924\f\3\2\2\u0924\u0925\7\23\2\2\u0925\u0927")
        buf.write("\5\u0176\u00bc\2\u0926\u0923\3\2\2\2\u0927\u092a\3\2\2")
        buf.write("\2\u0928\u0926\3\2\2\2\u0928\u0929\3\2\2\2\u0929\u0183")
        buf.write("\3\2\2\2\u092a\u0928\3\2\2\2\u092b\u092c\b\u00c3\1\2\u092c")
        buf.write("\u092d\5\u018c\u00c7\2\u092d\u092e\7.\2\2\u092e\u092f")
        buf.write("\5\u0176\u00bc\2\u092f\u0938\3\2\2\2\u0930\u0931\f\3\2")
        buf.write("\2\u0931\u0932\7\23\2\2\u0932\u0933\5\u018c\u00c7\2\u0933")
        buf.write("\u0934\7.\2\2\u0934\u0935\5\u0176\u00bc\2\u0935\u0937")
        buf.write("\3\2\2\2\u0936\u0930\3\2\2\2\u0937\u093a\3\2\2\2\u0938")
        buf.write("\u0936\3\2\2\2\u0938\u0939\3\2\2\2\u0939\u0185\3\2\2\2")
        buf.write("\u093a\u0938\3\2\2\2\u093b\u093c\7\26\2\2\u093c\u093d")
        buf.write("\5\u0176\u00bc\2\u093d\u093e\7\27\2\2\u093e\u0187\3\2")
        buf.write("\2\2\u093f\u0940\b\u00c5\1\2\u0940\u0943\7\u00ad\2\2\u0941")
        buf.write("\u0943\5\u018c\u00c7\2\u0942\u093f\3\2\2\2\u0942\u0941")
        buf.write("\3\2\2\2\u0943\u0949\3\2\2\2\u0944\u0945\f\3\2\2\u0945")
        buf.write("\u0946\7\25\2\2\u0946\u0948\5\u018c\u00c7\2\u0947\u0944")
        buf.write("\3\2\2\2\u0948\u094b\3\2\2\2\u0949\u0947\3\2\2\2\u0949")
        buf.write("\u094a\3\2\2\2\u094a\u0189\3\2\2\2\u094b\u0949\3\2\2\2")
        buf.write("\u094c\u0952\7\u00b1\2\2\u094d\u0952\7\u00b3\2\2\u094e")
        buf.write("\u0952\7\u00af\2\2\u094f\u0952\7\u00a5\2\2\u0950\u0952")
        buf.write("\7\u00a6\2\2\u0951\u094c\3\2\2\2\u0951\u094d\3\2\2\2\u0951")
        buf.write("\u094e\3\2\2\2\u0951\u094f\3\2\2\2\u0951\u0950\3\2\2\2")
        buf.write("\u0952\u018b\3\2\2\2\u0953\u0954\t\f\2\2\u0954\u018d\3")
        buf.write("\2\2\2\u0955\u0956\7\u008e\2\2\u0956\u0957\5\u0190\u00c9")
        buf.write("\2\u0957\u0958\7\22\2\2\u0958\u095d\3\2\2\2\u0959\u095a")
        buf.write("\5\u0190\u00c9\2\u095a\u095b\7\22\2\2\u095b\u095d\3\2")
        buf.write("\2\2\u095c\u0955\3\2\2\2\u095c\u0959\3\2\2\2\u095d\u018f")
        buf.write("\3\2\2\2\u095e\u095f\b\u00c9\1\2\u095f\u0960\5\u0192\u00ca")
        buf.write("\2\u0960\u0965\3\2\2\2\u0961\u0962\f\3\2\2\u0962\u0964")
        buf.write("\5\u0198\u00cd\2\u0963\u0961\3\2\2\2\u0964\u0967\3\2\2")
        buf.write("\2\u0965\u0963\3\2\2\2\u0965\u0966\3\2\2\2\u0966\u0191")
        buf.write("\3\2\2\2\u0967\u0965\3\2\2\2\u0968\u096e\5\u0194\u00cb")
        buf.write("\2\u0969\u096e\5\u0196\u00cc\2\u096a\u096e\5\u01a0\u00d1")
        buf.write("\2\u096b\u096e\5\u01a2\u00d2\2\u096c\u096e\5\u01a6\u00d4")
        buf.write("\2\u096d\u0968\3\2\2\2\u096d\u0969\3\2\2\2\u096d\u096a")
        buf.write("\3\2\2\2\u096d\u096b\3\2\2\2\u096d\u096c\3\2\2\2\u096e")
        buf.write("\u0193\3\2\2\2\u096f\u0970\5\u0114\u008b\2\u0970\u0195")
        buf.write("\3\2\2\2\u0971\u0972\5\u0146\u00a4\2\u0972\u0973\5\u019a")
        buf.write("\u00ce\2\u0973\u0197\3\2\2\2\u0974\u0975\7\25\2\2\u0975")
        buf.write("\u0978\5\u019a\u00ce\2\u0976\u0978\5\u019e\u00d0\2\u0977")
        buf.write("\u0974\3\2\2\2\u0977\u0976\3\2\2\2\u0978\u0199\3\2\2\2")
        buf.write("\u0979\u097a\5\u01a8\u00d5\2\u097a\u097c\7\26\2\2\u097b")
        buf.write("\u097d\5\u019c\u00cf\2\u097c\u097b\3\2\2\2\u097c\u097d")
        buf.write("\3\2\2\2\u097d\u097e\3\2\2\2\u097e\u097f\7\27\2\2\u097f")
        buf.write("\u019b\3\2\2\2\u0980\u0981\b\u00cf\1\2\u0981\u0982\5\u0190")
        buf.write("\u00c9\2\u0982\u0988\3\2\2\2\u0983\u0984\f\3\2\2\u0984")
        buf.write("\u0985\7\23\2\2\u0985\u0987\5\u0190\u00c9\2\u0986\u0983")
        buf.write("\3\2\2\2\u0987\u098a\3\2\2\2\u0988\u0986\3\2\2\2\u0988")
        buf.write("\u0989\3\2\2\2\u0989\u019d\3\2\2\2\u098a\u0988\3\2\2\2")
        buf.write("\u098b\u098c\7\30\2\2\u098c\u098d\5\u0190\u00c9\2\u098d")
        buf.write("\u098e\7\31\2\2\u098e\u019f\3\2\2\2\u098f\u0990\7\26\2")
        buf.write("\2\u0990\u0991\5\u0190\u00c9\2\u0991\u0992\7\27\2\2\u0992")
        buf.write("\u01a1\3\2\2\2\u0993\u0994\b\u00d2\1\2\u0994\u0995\5\u01a8")
        buf.write("\u00d5\2\u0995\u099b\3\2\2\2\u0996\u0997\f\3\2\2\u0997")
        buf.write("\u0998\7\25\2\2\u0998\u099a\5\u01a8\u00d5\2\u0999\u0996")
        buf.write("\3\2\2\2\u099a\u099d\3\2\2\2\u099b\u0999\3\2\2\2\u099b")
        buf.write("\u099c\3\2\2\2\u099c\u01a3\3\2\2\2\u099d\u099b\3\2\2\2")
        buf.write("\u099e\u099f\b\u00d3\1\2\u099f\u09a0\5\u01a2\u00d2\2\u09a0")
        buf.write("\u09a5\3\2\2\2\u09a1\u09a2\f\3\2\2\u09a2\u09a4\7\u00ad")
        buf.write("\2\2\u09a3\u09a1\3\2\2\2\u09a4\u09a7\3\2\2\2\u09a5\u09a3")
        buf.write("\3\2\2\2\u09a5\u09a6\3\2\2\2\u09a6\u01a5\3\2\2\2\u09a7")
        buf.write("\u09a5\3\2\2\2\u09a8\u09ae\7\u00b1\2\2\u09a9\u09ae\7\u00b3")
        buf.write("\2\2\u09aa\u09ae\7\u00af\2\2\u09ab\u09ae\7\u00a5\2\2\u09ac")
        buf.write("\u09ae\7\u00a6\2\2\u09ad\u09a8\3\2\2\2\u09ad\u09a9\3\2")
        buf.write("\2\2\u09ad\u09aa\3\2\2\2\u09ad\u09ab\3\2\2\2\u09ad\u09ac")
        buf.write("\3\2\2\2\u09ae\u01a7\3\2\2\2\u09af\u09b0\t\r\2\2\u09b0")
        buf.write("\u01a9\3\2\2\2\u09b1\u09b2\7\u008e\2\2\u09b2\u09b3\5\u01ac")
        buf.write("\u00d7\2\u09b3\u09b4\7\22\2\2\u09b4\u09b9\3\2\2\2\u09b5")
        buf.write("\u09b6\5\u01ac\u00d7\2\u09b6\u09b7\7\22\2\2\u09b7\u09b9")
        buf.write("\3\2\2\2\u09b8\u09b1\3\2\2\2\u09b8\u09b5\3\2\2\2\u09b9")
        buf.write("\u01ab\3\2\2\2\u09ba\u09bb\b\u00d7\1\2\u09bb\u09bc\5\u01ae")
        buf.write("\u00d8\2\u09bc\u09c1\3\2\2\2\u09bd\u09be\f\3\2\2\u09be")
        buf.write("\u09c0\5\u01b4\u00db\2\u09bf\u09bd\3\2\2\2\u09c0\u09c3")
        buf.write("\3\2\2\2\u09c1\u09bf\3\2\2\2\u09c1\u09c2\3\2\2\2\u09c2")
        buf.write("\u01ad\3\2\2\2\u09c3\u09c1\3\2\2\2\u09c4\u09ca\5\u01b0")
        buf.write("\u00d9\2\u09c5\u09ca\5\u01b2\u00da\2\u09c6\u09ca\5\u01bc")
        buf.write("\u00df\2\u09c7\u09ca\5\u01be\u00e0\2\u09c8\u09ca\5\u01c0")
        buf.write("\u00e1\2\u09c9\u09c4\3\2\2\2\u09c9\u09c5\3\2\2\2\u09c9")
        buf.write("\u09c6\3\2\2\2\u09c9\u09c7\3\2\2\2\u09c9\u09c8\3\2\2\2")
        buf.write("\u09ca\u01af\3\2\2\2\u09cb\u09cc\5\u0114\u008b\2\u09cc")
        buf.write("\u01b1\3\2\2\2\u09cd\u09ce\5\u0146\u00a4\2\u09ce\u09cf")
        buf.write("\5\u01b6\u00dc\2\u09cf\u01b3\3\2\2\2\u09d0\u09d1\7\25")
        buf.write("\2\2\u09d1\u09d4\5\u01b6\u00dc\2\u09d2\u09d4\5\u01ba\u00de")
        buf.write("\2\u09d3\u09d0\3\2\2\2\u09d3\u09d2\3\2\2\2\u09d4\u01b5")
        buf.write("\3\2\2\2\u09d5\u09d6\5\u01c2\u00e2\2\u09d6\u09d8\7\26")
        buf.write("\2\2\u09d7\u09d9\5\u01b8\u00dd\2\u09d8\u09d7\3\2\2\2\u09d8")
        buf.write("\u09d9\3\2\2\2\u09d9\u09da\3\2\2\2\u09da\u09db\7\27\2")
        buf.write("\2\u09db\u01b7\3\2\2\2\u09dc\u09dd\b\u00dd\1\2\u09dd\u09de")
        buf.write("\5\u01ac\u00d7\2\u09de\u09e4\3\2\2\2\u09df\u09e0\f\3\2")
        buf.write("\2\u09e0\u09e1\7\23\2\2\u09e1\u09e3\5\u01ac\u00d7\2\u09e2")
        buf.write("\u09df\3\2\2\2\u09e3\u09e6\3\2\2\2\u09e4\u09e2\3\2\2\2")
        buf.write("\u09e4\u09e5\3\2\2\2\u09e5\u01b9\3\2\2\2\u09e6\u09e4\3")
        buf.write("\2\2\2\u09e7\u09e8\7\30\2\2\u09e8\u09e9\5\u01ac\u00d7")
        buf.write("\2\u09e9\u09ea\7\31\2\2\u09ea\u01bb\3\2\2\2\u09eb\u09ec")
        buf.write("\7\26\2\2\u09ec\u09ed\5\u01ac\u00d7\2\u09ed\u09ee\7\27")
        buf.write("\2\2\u09ee\u01bd\3\2\2\2\u09ef\u09f0\b\u00e0\1\2\u09f0")
        buf.write("\u09f3\7\u00ad\2\2\u09f1\u09f3\5\u01c2\u00e2\2\u09f2\u09ef")
        buf.write("\3\2\2\2\u09f2\u09f1\3\2\2\2\u09f3\u09f9\3\2\2\2\u09f4")
        buf.write("\u09f5\f\3\2\2\u09f5\u09f6\7\25\2\2\u09f6\u09f8\5\u01c2")
        buf.write("\u00e2\2\u09f7\u09f4\3\2\2\2\u09f8\u09fb\3\2\2\2\u09f9")
        buf.write("\u09f7\3\2\2\2\u09f9\u09fa\3\2\2\2\u09fa\u01bf\3\2\2\2")
        buf.write("\u09fb\u09f9\3\2\2\2\u09fc\u0a02\7\u00b1\2\2\u09fd\u0a02")
        buf.write("\7\u00b3\2\2\u09fe\u0a02\7\u00af\2\2\u09ff\u0a02\7\u00a5")
        buf.write("\2\2\u0a00\u0a02\7\u00a6\2\2\u0a01\u09fc\3\2\2\2\u0a01")
        buf.write("\u09fd\3\2\2\2\u0a01\u09fe\3\2\2\2\u0a01\u09ff\3\2\2\2")
        buf.write("\u0a01\u0a00\3\2\2\2\u0a02\u01c1\3\2\2\2\u0a03\u0a04\t")
        buf.write("\16\2\2\u0a04\u01c3\3\2\2\2\u0a05\u0a08\5\u01c6\u00e4")
        buf.write("\2\u0a06\u0a08\5\u01c8\u00e5\2\u0a07\u0a05\3\2\2\2\u0a07")
        buf.write("\u0a06\3\2\2\2\u0a08\u01c5\3\2\2\2\u0a09\u0a11\5\u01ce")
        buf.write("\u00e8\2\u0a0a\u0a0c\5\u01d0\u00e9\2\u0a0b\u0a0d\5\u01dc")
        buf.write("\u00ef\2\u0a0c\u0a0b\3\2\2\2\u0a0c\u0a0d\3\2\2\2\u0a0d")
        buf.write("\u0a0e\3\2\2\2\u0a0e\u0a0f\5\u01d2\u00ea\2\u0a0f\u0a11")
        buf.write("\3\2\2\2\u0a10\u0a09\3\2\2\2\u0a10\u0a0a\3\2\2\2\u0a11")
        buf.write("\u01c7\3\2\2\2\u0a12\u0a14\5\u01ca\u00e6\2\u0a13\u0a15")
        buf.write("\5\u01dc\u00ef\2\u0a14\u0a13\3\2\2\2\u0a14\u0a15\3\2\2")
        buf.write("\2\u0a15\u0a16\3\2\2\2\u0a16\u0a17\5\u01cc\u00e7\2\u0a17")
        buf.write("\u01c9\3\2\2\2\u0a18\u0a19\7*\2\2\u0a19\u0a1c\7(\2\2\u0a1a")
        buf.write("\u0a1c\7,\2\2\u0a1b\u0a18\3\2\2\2\u0a1b\u0a1a\3\2\2\2")
        buf.write("\u0a1c\u01cb\3\2\2\2\u0a1d\u0a1e\7*\2\2\u0a1e\u0a1f\7")
        buf.write("%\2\2\u0a1f\u0a20\7(\2\2\u0a20\u01cd\3\2\2\2\u0a21\u0a22")
        buf.write("\7*\2\2\u0a22\u0a23\5\u01d4\u00eb\2\u0a23\u0a27\5\u008a")
        buf.write("F\2\u0a24\u0a26\5\u01d8\u00ed\2\u0a25\u0a24\3\2\2\2\u0a26")
        buf.write("\u0a29\3\2\2\2\u0a27\u0a25\3\2\2\2\u0a27\u0a28\3\2\2\2")
        buf.write("\u0a28\u0a2a\3\2\2\2\u0a29\u0a27\3\2\2\2\u0a2a\u0a2b\7")
        buf.write("%\2\2\u0a2b\u0a2c\7(\2\2\u0a2c\u01cf\3\2\2\2\u0a2d\u0a2e")
        buf.write("\7*\2\2\u0a2e\u0a2f\5\u01d4\u00eb\2\u0a2f\u0a33\5\u008a")
        buf.write("F\2\u0a30\u0a32\5\u01d8\u00ed\2\u0a31\u0a30\3\2\2\2\u0a32")
        buf.write("\u0a35\3\2\2\2\u0a33\u0a31\3\2\2\2\u0a33\u0a34\3\2\2\2")
        buf.write("\u0a34\u0a36\3\2\2\2\u0a35\u0a33\3\2\2\2\u0a36\u0a37\7")
        buf.write("(\2\2\u0a37\u01d1\3\2\2\2\u0a38\u0a39\7*\2\2\u0a39\u0a3a")
        buf.write("\7%\2\2\u0a3a\u0a3b\5\u01d4\u00eb\2\u0a3b\u0a3c\7(\2\2")
        buf.write("\u0a3c\u01d3\3\2\2\2\u0a3d\u0a42\5\u01d6\u00ec\2\u0a3e")
        buf.write("\u0a3f\7\25\2\2\u0a3f\u0a41\5\u01d6\u00ec\2\u0a40\u0a3e")
        buf.write("\3\2\2\2\u0a41\u0a44\3\2\2\2\u0a42\u0a40\3\2\2\2\u0a42")
        buf.write("\u0a43\3\2\2\2\u0a43\u01d5\3\2\2\2\u0a44\u0a42\3\2\2\2")
        buf.write("\u0a45\u0a49\5\u00c4c\2\u0a46\u0a48\5\u00c6d\2\u0a47\u0a46")
        buf.write("\3\2\2\2\u0a48\u0a4b\3\2\2\2\u0a49\u0a47\3\2\2\2\u0a49")
        buf.write("\u0a4a\3\2\2\2\u0a4a\u01d7\3\2\2\2\u0a4b\u0a49\3\2\2\2")
        buf.write("\u0a4c\u0a4f\5\u01d6\u00ec\2\u0a4d\u0a4e\7.\2\2\u0a4e")
        buf.write("\u0a50\5\u01da\u00ee\2\u0a4f\u0a4d\3\2\2\2\u0a4f\u0a50")
        buf.write("\3\2\2\2\u0a50\u0a51\3\2\2\2\u0a51\u0a52\5\u008aF\2\u0a52")
        buf.write("\u01d9\3\2\2\2\u0a53\u0a59\7\u00af\2\2\u0a54\u0a55\7\32")
        buf.write("\2\2\u0a55\u0a56\5\\/\2\u0a56\u0a57\7\33\2\2\u0a57\u0a59")
        buf.write("\3\2\2\2\u0a58\u0a53\3\2\2\2\u0a58\u0a54\3\2\2\2\u0a59")
        buf.write("\u01db\3\2\2\2\u0a5a\u0a5c\5\u01de\u00f0\2\u0a5b\u0a5a")
        buf.write("\3\2\2\2\u0a5c\u0a5d\3\2\2\2\u0a5d\u0a5b\3\2\2\2\u0a5d")
        buf.write("\u0a5e\3\2\2\2\u0a5e\u01dd\3\2\2\2\u0a5f\u0a67\5\u01e0")
        buf.write("\u00f1\2\u0a60\u0a67\5\u01c6\u00e4\2\u0a61\u0a63\7\32")
        buf.write("\2\2\u0a62\u0a64\5\\/\2\u0a63\u0a62\3\2\2\2\u0a63\u0a64")
        buf.write("\3\2\2\2\u0a64\u0a65\3\2\2\2\u0a65\u0a67\7\33\2\2\u0a66")
        buf.write("\u0a5f\3\2\2\2\u0a66\u0a60\3\2\2\2\u0a66\u0a61\3\2\2\2")
        buf.write("\u0a67\u01df\3\2\2\2\u0a68\u0a6a\n\17\2\2\u0a69\u0a68")
        buf.write("\3\2\2\2\u0a6a\u0a6b\3\2\2\2\u0a6b\u0a69\3\2\2\2\u0a6b")
        buf.write("\u0a6c\3\2\2\2\u0a6c\u01e1\3\2\2\2\u0a6d\u0a6f\7\32\2")
        buf.write("\2\u0a6e\u0a70\5\u01e4\u00f3\2\u0a6f\u0a6e\3\2\2\2\u0a70")
        buf.write("\u0a71\3\2\2\2\u0a71\u0a6f\3\2\2\2\u0a71\u0a72\3\2\2\2")
        buf.write("\u0a72\u0a73\3\2\2\2\u0a73\u0a74\7\33\2\2\u0a74\u01e3")
        buf.write("\3\2\2\2\u0a75\u0a76\5\u01e6\u00f4\2\u0a76\u0a77\7\21")
        buf.write("\2\2\u0a77\u0a78\5\u01e8\u00f5\2\u0a78\u0a79\7\22\2\2")
        buf.write("\u0a79\u01e5\3\2\2\2\u0a7a\u0a7b\b\u00f4\1\2\u0a7b\u0a7f")
        buf.write("\5\u00c4c\2\u0a7c\u0a7d\7#\2\2\u0a7d\u0a7f\5\u00c8e\2")
        buf.write("\u0a7e\u0a7a\3\2\2\2\u0a7e\u0a7c\3\2\2\2\u0a7f\u0a88\3")
        buf.write("\2\2\2\u0a80\u0a82\f\3\2\2\u0a81\u0a83\5\u00c6d\2\u0a82")
        buf.write("\u0a81\3\2\2\2\u0a83\u0a84\3\2\2\2\u0a84\u0a82\3\2\2\2")
        buf.write("\u0a84\u0a85\3\2\2\2\u0a85\u0a87\3\2\2\2\u0a86\u0a80\3")
        buf.write("\2\2\2\u0a87\u0a8a\3\2\2\2\u0a88\u0a86\3\2\2\2\u0a88\u0a89")
        buf.write("\3\2\2\2\u0a89\u01e7\3\2\2\2\u0a8a\u0a88\3\2\2\2\u0a8b")
        buf.write("\u0a8c\7\32\2\2\u0a8c\u0a8d\5\\/\2\u0a8d\u0a8e\7\33\2")
        buf.write("\2\u0a8e\u0a91\3\2\2\2\u0a8f\u0a91\5\u01ea\u00f6\2\u0a90")
        buf.write("\u0a8b\3\2\2\2\u0a90\u0a8f\3\2\2\2\u0a91\u01e9\3\2\2\2")
        buf.write("\u0a92\u0a94\n\20\2\2\u0a93\u0a92\3\2\2\2\u0a94\u0a95")
        buf.write("\3\2\2\2\u0a95\u0a93\3\2\2\2\u0a95\u0a96\3\2\2\2\u0a96")
        buf.write("\u01eb\3\2\2\2\u00ee\u01f2\u01f5\u020e\u0213\u0221\u0227")
        buf.write("\u0229\u022b\u0232\u023a\u0241\u0252\u025d\u0264\u0271")
        buf.write("\u027f\u0293\u02aa\u02b5\u02bc\u02c5\u02ca\u02d1\u02da")
        buf.write("\u02ef\u02f7\u02fc\u0302\u0307\u030d\u0313\u0318\u031d")
        buf.write("\u0335\u0340\u0344\u035a\u036a\u0371\u0379\u037e\u0385")
        buf.write("\u038b\u0392\u03af\u03c2\u03c8\u03ea\u03f3\u040a\u0418")
        buf.write("\u0421\u042a\u0441\u0447\u045e\u04ce\u04d0\u04da\u04e3")
        buf.write("\u04ee\u04f9\u0507\u050c\u0513\u051c\u0523\u0527\u0533")
        buf.write("\u053a\u0541\u0551\u055c\u0560\u0565\u056a\u056c\u0571")
        buf.write("\u0584\u0588\u058d\u0592\u059c\u05a0\u05a9\u05b9\u05c2")
        buf.write("\u05c8\u05cd\u05d3\u05da\u05e2\u05ed\u05f5\u05fd\u0606")
        buf.write("\u060d\u0615\u061d\u0626\u062e\u063b\u063e\u0642\u0647")
        buf.write("\u064b\u0654\u0669\u0672\u0674\u0679\u068b\u0690\u0699")
        buf.write("\u069d\u06a4\u06a9\u06ad\u06b9\u06ca\u06cf\u06d2\u06d6")
        buf.write("\u06db\u06e2\u06ed\u06ef\u06f8\u0700\u0708\u0710\u0718")
        buf.write("\u071e\u072a\u072e\u0738\u0740\u0744\u074a\u0751\u0756")
        buf.write("\u075d\u0765\u076c\u0776\u0783\u0787\u078a\u078e\u0791")
        buf.write("\u0799\u07a2\u07ab\u07b4\u07c5\u07d6\u07dd\u07e8\u07f0")
        buf.write("\u07f3\u07f7\u07fc\u0806\u080a\u0815\u0818\u081f\u0828")
        buf.write("\u0833\u0840\u0847\u0851\u085b\u085e\u0862\u0873\u087b")
        buf.write("\u087f\u0887\u08ab\u08b4\u08be\u08ca\u08cf\u08db\u08ed")
        buf.write("\u08f4\u08fd\u0905\u090f\u0914\u091e\u0928\u0938\u0942")
        buf.write("\u0949\u0951\u095c\u0965\u096d\u0977\u097c\u0988\u099b")
        buf.write("\u09a5\u09ad\u09b8\u09c1\u09c9\u09d3\u09d8\u09e4\u09f2")
        buf.write("\u09f9\u0a01\u0a07\u0a0c\u0a10\u0a14\u0a1b\u0a27\u0a33")
        buf.write("\u0a42\u0a49\u0a4f\u0a58\u0a5d\u0a63\u0a66\u0a6b\u0a71")
        buf.write("\u0a7e\u0a84\u0a88\u0a90\u0a95")
        return buf.getvalue()


class MParser ( AbstractParser ):

    grammarFileName = "MParser.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "'\t'", "' '", "<INVALID>", 
                     "'Java:'", "'C#:'", "'Python2:'", "'Python3:'", "'JavaScript:'", 
                     "'Swift:'", "':'", "';'", "<INVALID>", "'..'", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "'!'", "'&'", 
                     "'&&'", "'|'", "'||'", "<INVALID>", "'-'", "'*'", "'/'", 
                     "'\\'", "'%'", "'>'", "'>='", "'<'", "'<='", "'<>'", 
                     "'<:>'", "'='", "'!='", "'=='", "'~='", "'~'", "'<-'", 
                     "'->'", "'=>'", "'Boolean'", "'Character'", "'Text'", 
                     "'Integer'", "'Decimal'", "'Date'", "'Time'", "'DateTime'", 
                     "'Period'", "'Version'", "'Method'", "'Code'", "'Document'", 
                     "'Blob'", "'Image'", "'Uuid'", "'Iterator'", "'Cursor'", 
                     "'Html'", "'abstract'", "'all'", "'always'", "'and'", 
                     "'any'", "'as'", "<INVALID>", "'attr'", "'attribute'", 
                     "'attributes'", "'bindings'", "'break'", "'by'", "'case'", 
                     "'catch'", "'category'", "'class'", "'close'", "'contains'", 
                     "'def'", "'default'", "'define'", "'delete'", "<INVALID>", 
                     "'do'", "'doing'", "'each'", "'else'", "'enum'", "'enumerated'", 
                     "'except'", "'execute'", "'expecting'", "'extends'", 
                     "'fetch'", "'filtered'", "'finally'", "'flush'", "'for'", 
                     "'from'", "'getter'", "'has'", "'if'", "'in'", "'index'", 
                     "'invoke'", "'is'", "'matching'", "'method'", "'methods'", 
                     "'modulo'", "'mutable'", "'native'", "'None'", "'not'", 
                     "<INVALID>", "'null'", "'on'", "'one'", "'open'", "'operator'", 
                     "'or'", "'order'", "'otherwise'", "'pass'", "'raise'", 
                     "'read'", "'receiving'", "'resource'", "'return'", 
                     "'returning'", "'rows'", "'self'", "'setter'", "'singleton'", 
                     "'sorted'", "'storable'", "'store'", "'switch'", "'test'", 
                     "'then'", "'this'", "'throw'", "'to'", "'try'", "'verifying'", 
                     "'widget'", "'with'", "'when'", "'where'", "'while'", 
                     "'write'", "<INVALID>", "<INVALID>", "'MIN_INTEGER'", 
                     "'MAX_INTEGER'" ]

    symbolicNames = [ "<INVALID>", "INDENT", "DEDENT", "LF_TAB", "LF_MORE", 
                      "LF", "TAB", "WS", "COMMENT", "JAVA", "CSHARP", "PYTHON2", 
                      "PYTHON3", "JAVASCRIPT", "SWIFT", "COLON", "SEMI", 
                      "COMMA", "RANGE", "DOT", "LPAR", "RPAR", "LBRAK", 
                      "RBRAK", "LCURL", "RCURL", "QMARK", "XMARK", "AMP", 
                      "AMP2", "PIPE", "PIPE2", "PLUS", "MINUS", "STAR", 
                      "SLASH", "BSLASH", "PERCENT", "GT", "GTE", "LT", "LTE", 
                      "LTGT", "LTCOLONGT", "EQ", "XEQ", "EQ2", "TEQ", "TILDE", 
                      "LARROW", "RARROW", "EGT", "BOOLEAN", "CHARACTER", 
                      "TEXT", "INTEGER", "DECIMAL", "DATE", "TIME", "DATETIME", 
                      "PERIOD", "VERSION", "METHOD_T", "CODE", "DOCUMENT", 
                      "BLOB", "IMAGE", "UUID", "ITERATOR", "CURSOR", "HTML", 
                      "ABSTRACT", "ALL", "ALWAYS", "AND", "ANY", "AS", "ASC", 
                      "ATTR", "ATTRIBUTE", "ATTRIBUTES", "BINDINGS", "BREAK", 
                      "BY", "CASE", "CATCH", "CATEGORY", "CLASS", "CLOSE", 
                      "CONTAINS", "DEF", "DEFAULT", "DEFINE", "DELETE", 
                      "DESC", "DO", "DOING", "EACH", "ELSE", "ENUM", "ENUMERATED", 
                      "EXCEPT", "EXECUTE", "EXPECTING", "EXTENDS", "FETCH", 
                      "FILTERED", "FINALLY", "FLUSH", "FOR", "FROM", "GETTER", 
                      "HAS", "IF", "IN", "INDEX", "INVOKE", "IS", "MATCHING", 
                      "METHOD", "METHODS", "MODULO", "MUTABLE", "NATIVE", 
                      "NONE", "NOT", "NOTHING", "NULL", "ON", "ONE", "OPEN", 
                      "OPERATOR", "OR", "ORDER", "OTHERWISE", "PASS", "RAISE", 
                      "READ", "RECEIVING", "RESOURCE", "RETURN", "RETURNING", 
                      "ROWS", "SELF", "SETTER", "SINGLETON", "SORTED", "STORABLE", 
                      "STORE", "SWITCH", "TEST", "THEN", "THIS", "THROW", 
                      "TO", "TRY", "VERIFYING", "WIDGET", "WITH", "WHEN", 
                      "WHERE", "WHILE", "WRITE", "BOOLEAN_LITERAL", "CHAR_LITERAL", 
                      "MIN_INTEGER", "MAX_INTEGER", "SYMBOL_IDENTIFIER", 
                      "TYPE_IDENTIFIER", "VARIABLE_IDENTIFIER", "NATIVE_IDENTIFIER", 
                      "DOLLAR_IDENTIFIER", "ARONDBASE_IDENTIFIER", "TEXT_LITERAL", 
                      "UUID_LITERAL", "INTEGER_LITERAL", "HEXA_LITERAL", 
                      "DECIMAL_LITERAL", "DATETIME_LITERAL", "TIME_LITERAL", 
                      "DATE_LITERAL", "PERIOD_LITERAL", "VERSION_LITERAL" ]

    RULE_enum_category_declaration = 0
    RULE_enum_native_declaration = 1
    RULE_native_symbol = 2
    RULE_category_symbol = 3
    RULE_attribute_declaration = 4
    RULE_index_clause = 5
    RULE_concrete_widget_declaration = 6
    RULE_native_widget_declaration = 7
    RULE_concrete_category_declaration = 8
    RULE_singleton_category_declaration = 9
    RULE_derived_list = 10
    RULE_operator_method_declaration = 11
    RULE_setter_method_declaration = 12
    RULE_native_setter_declaration = 13
    RULE_getter_method_declaration = 14
    RULE_native_getter_declaration = 15
    RULE_native_category_declaration = 16
    RULE_native_resource_declaration = 17
    RULE_native_category_bindings = 18
    RULE_native_category_binding_list = 19
    RULE_abstract_method_declaration = 20
    RULE_concrete_method_declaration = 21
    RULE_native_method_declaration = 22
    RULE_test_method_declaration = 23
    RULE_assertion = 24
    RULE_typed_argument = 25
    RULE_statement = 26
    RULE_flush_statement = 27
    RULE_store_statement = 28
    RULE_method_call_expression = 29
    RULE_method_call_statement = 30
    RULE_with_resource_statement = 31
    RULE_with_singleton_statement = 32
    RULE_switch_statement = 33
    RULE_switch_case_statement = 34
    RULE_for_each_statement = 35
    RULE_do_while_statement = 36
    RULE_while_statement = 37
    RULE_if_statement = 38
    RULE_else_if_statement_list = 39
    RULE_raise_statement = 40
    RULE_try_statement = 41
    RULE_catch_statement = 42
    RULE_break_statement = 43
    RULE_return_statement = 44
    RULE_expression = 45
    RULE_closure_expression = 46
    RULE_selectable_expression = 47
    RULE_instance_expression = 48
    RULE_mutable_instance_expression = 49
    RULE_method_expression = 50
    RULE_instance_selector = 51
    RULE_blob_expression = 52
    RULE_document_expression = 53
    RULE_constructor_expression = 54
    RULE_copy_from = 55
    RULE_argument_assignment_list = 56
    RULE_argument_assignment = 57
    RULE_write_statement = 58
    RULE_filtered_list_suffix = 59
    RULE_fetch_expression = 60
    RULE_fetch_statement = 61
    RULE_sorted_expression = 62
    RULE_assign_instance_statement = 63
    RULE_child_instance = 64
    RULE_assign_tuple_statement = 65
    RULE_lfs = 66
    RULE_lfp = 67
    RULE_ws_plus = 68
    RULE_indent = 69
    RULE_dedent = 70
    RULE_null_literal = 71
    RULE_declaration_list = 72
    RULE_declarations = 73
    RULE_declaration = 74
    RULE_annotation_constructor = 75
    RULE_annotation_identifier = 76
    RULE_resource_declaration = 77
    RULE_enum_declaration = 78
    RULE_native_symbol_list = 79
    RULE_category_symbol_list = 80
    RULE_symbol_list = 81
    RULE_attribute_constraint = 82
    RULE_list_literal = 83
    RULE_set_literal = 84
    RULE_expression_list = 85
    RULE_range_literal = 86
    RULE_typedef = 87
    RULE_primary_type = 88
    RULE_native_type = 89
    RULE_category_type = 90
    RULE_mutable_category_type = 91
    RULE_code_type = 92
    RULE_category_declaration = 93
    RULE_widget_declaration = 94
    RULE_type_identifier_list = 95
    RULE_method_identifier = 96
    RULE_identifier_or_keyword = 97
    RULE_nospace_hyphen_identifier_or_keyword = 98
    RULE_nospace_identifier_or_keyword = 99
    RULE_identifier = 100
    RULE_variable_identifier = 101
    RULE_attribute_identifier = 102
    RULE_type_identifier = 103
    RULE_symbol_identifier = 104
    RULE_any_identifier = 105
    RULE_argument_list = 106
    RULE_argument = 107
    RULE_operator_argument = 108
    RULE_named_argument = 109
    RULE_code_argument = 110
    RULE_category_or_any_type = 111
    RULE_any_type = 112
    RULE_member_method_declaration_list = 113
    RULE_member_method_declaration = 114
    RULE_native_member_method_declaration_list = 115
    RULE_native_member_method_declaration = 116
    RULE_native_category_binding = 117
    RULE_python_category_binding = 118
    RULE_python_module = 119
    RULE_javascript_category_binding = 120
    RULE_javascript_module = 121
    RULE_variable_identifier_list = 122
    RULE_attribute_identifier_list = 123
    RULE_method_declaration = 124
    RULE_comment_statement = 125
    RULE_native_statement_list = 126
    RULE_native_statement = 127
    RULE_python_native_statement = 128
    RULE_javascript_native_statement = 129
    RULE_statement_list = 130
    RULE_assertion_list = 131
    RULE_switch_case_statement_list = 132
    RULE_catch_statement_list = 133
    RULE_literal_collection = 134
    RULE_atomic_literal = 135
    RULE_literal_list_literal = 136
    RULE_this_expression = 137
    RULE_parenthesis_expression = 138
    RULE_literal_expression = 139
    RULE_collection_literal = 140
    RULE_tuple_literal = 141
    RULE_dict_literal = 142
    RULE_document_literal = 143
    RULE_expression_tuple = 144
    RULE_dict_entry_list = 145
    RULE_dict_entry = 146
    RULE_dict_key = 147
    RULE_slice_arguments = 148
    RULE_assign_variable_statement = 149
    RULE_assignable_instance = 150
    RULE_is_expression = 151
    RULE_arrow_expression = 152
    RULE_arrow_prefix = 153
    RULE_arrow_args = 154
    RULE_sorted_key = 155
    RULE_read_all_expression = 156
    RULE_read_one_expression = 157
    RULE_order_by_list = 158
    RULE_order_by = 159
    RULE_operator = 160
    RULE_keyword = 161
    RULE_new_token = 162
    RULE_key_token = 163
    RULE_module_token = 164
    RULE_value_token = 165
    RULE_symbols_token = 166
    RULE_assign = 167
    RULE_multiply = 168
    RULE_divide = 169
    RULE_idivide = 170
    RULE_modulo = 171
    RULE_javascript_statement = 172
    RULE_javascript_expression = 173
    RULE_javascript_primary_expression = 174
    RULE_javascript_this_expression = 175
    RULE_javascript_new_expression = 176
    RULE_javascript_selector_expression = 177
    RULE_javascript_method_expression = 178
    RULE_javascript_arguments = 179
    RULE_javascript_item_expression = 180
    RULE_javascript_parenthesis_expression = 181
    RULE_javascript_identifier_expression = 182
    RULE_javascript_literal_expression = 183
    RULE_javascript_identifier = 184
    RULE_python_statement = 185
    RULE_python_expression = 186
    RULE_python_primary_expression = 187
    RULE_python_self_expression = 188
    RULE_python_selector_expression = 189
    RULE_python_method_expression = 190
    RULE_python_argument_list = 191
    RULE_python_ordinal_argument_list = 192
    RULE_python_named_argument_list = 193
    RULE_python_parenthesis_expression = 194
    RULE_python_identifier_expression = 195
    RULE_python_literal_expression = 196
    RULE_python_identifier = 197
    RULE_java_statement = 198
    RULE_java_expression = 199
    RULE_java_primary_expression = 200
    RULE_java_this_expression = 201
    RULE_java_new_expression = 202
    RULE_java_selector_expression = 203
    RULE_java_method_expression = 204
    RULE_java_arguments = 205
    RULE_java_item_expression = 206
    RULE_java_parenthesis_expression = 207
    RULE_java_identifier_expression = 208
    RULE_java_class_identifier_expression = 209
    RULE_java_literal_expression = 210
    RULE_java_identifier = 211
    RULE_csharp_statement = 212
    RULE_csharp_expression = 213
    RULE_csharp_primary_expression = 214
    RULE_csharp_this_expression = 215
    RULE_csharp_new_expression = 216
    RULE_csharp_selector_expression = 217
    RULE_csharp_method_expression = 218
    RULE_csharp_arguments = 219
    RULE_csharp_item_expression = 220
    RULE_csharp_parenthesis_expression = 221
    RULE_csharp_identifier_expression = 222
    RULE_csharp_literal_expression = 223
    RULE_csharp_identifier = 224
    RULE_jsx_expression = 225
    RULE_jsx_element = 226
    RULE_jsx_fragment = 227
    RULE_jsx_fragment_start = 228
    RULE_jsx_fragment_end = 229
    RULE_jsx_self_closing = 230
    RULE_jsx_opening = 231
    RULE_jsx_closing = 232
    RULE_jsx_element_name = 233
    RULE_jsx_identifier = 234
    RULE_jsx_attribute = 235
    RULE_jsx_attribute_value = 236
    RULE_jsx_children = 237
    RULE_jsx_child = 238
    RULE_jsx_text = 239
    RULE_css_expression = 240
    RULE_css_field = 241
    RULE_css_identifier = 242
    RULE_css_value = 243
    RULE_css_text = 244

    ruleNames =  [ "enum_category_declaration", "enum_native_declaration", 
                   "native_symbol", "category_symbol", "attribute_declaration", 
                   "index_clause", "concrete_widget_declaration", "native_widget_declaration", 
                   "concrete_category_declaration", "singleton_category_declaration", 
                   "derived_list", "operator_method_declaration", "setter_method_declaration", 
                   "native_setter_declaration", "getter_method_declaration", 
                   "native_getter_declaration", "native_category_declaration", 
                   "native_resource_declaration", "native_category_bindings", 
                   "native_category_binding_list", "abstract_method_declaration", 
                   "concrete_method_declaration", "native_method_declaration", 
                   "test_method_declaration", "assertion", "typed_argument", 
                   "statement", "flush_statement", "store_statement", "method_call_expression", 
                   "method_call_statement", "with_resource_statement", "with_singleton_statement", 
                   "switch_statement", "switch_case_statement", "for_each_statement", 
                   "do_while_statement", "while_statement", "if_statement", 
                   "else_if_statement_list", "raise_statement", "try_statement", 
                   "catch_statement", "break_statement", "return_statement", 
                   "expression", "closure_expression", "selectable_expression", 
                   "instance_expression", "mutable_instance_expression", 
                   "method_expression", "instance_selector", "blob_expression", 
                   "document_expression", "constructor_expression", "copy_from", 
                   "argument_assignment_list", "argument_assignment", "write_statement", 
                   "filtered_list_suffix", "fetch_expression", "fetch_statement", 
                   "sorted_expression", "assign_instance_statement", "child_instance", 
                   "assign_tuple_statement", "lfs", "lfp", "ws_plus", "indent", 
                   "dedent", "null_literal", "declaration_list", "declarations", 
                   "declaration", "annotation_constructor", "annotation_identifier", 
                   "resource_declaration", "enum_declaration", "native_symbol_list", 
                   "category_symbol_list", "symbol_list", "attribute_constraint", 
                   "list_literal", "set_literal", "expression_list", "range_literal", 
                   "typedef", "primary_type", "native_type", "category_type", 
                   "mutable_category_type", "code_type", "category_declaration", 
                   "widget_declaration", "type_identifier_list", "method_identifier", 
                   "identifier_or_keyword", "nospace_hyphen_identifier_or_keyword", 
                   "nospace_identifier_or_keyword", "identifier", "variable_identifier", 
                   "attribute_identifier", "type_identifier", "symbol_identifier", 
                   "any_identifier", "argument_list", "argument", "operator_argument", 
                   "named_argument", "code_argument", "category_or_any_type", 
                   "any_type", "member_method_declaration_list", "member_method_declaration", 
                   "native_member_method_declaration_list", "native_member_method_declaration", 
                   "native_category_binding", "python_category_binding", 
                   "python_module", "javascript_category_binding", "javascript_module", 
                   "variable_identifier_list", "attribute_identifier_list", 
                   "method_declaration", "comment_statement", "native_statement_list", 
                   "native_statement", "python_native_statement", "javascript_native_statement", 
                   "statement_list", "assertion_list", "switch_case_statement_list", 
                   "catch_statement_list", "literal_collection", "atomic_literal", 
                   "literal_list_literal", "this_expression", "parenthesis_expression", 
                   "literal_expression", "collection_literal", "tuple_literal", 
                   "dict_literal", "document_literal", "expression_tuple", 
                   "dict_entry_list", "dict_entry", "dict_key", "slice_arguments", 
                   "assign_variable_statement", "assignable_instance", "is_expression", 
                   "arrow_expression", "arrow_prefix", "arrow_args", "sorted_key", 
                   "read_all_expression", "read_one_expression", "order_by_list", 
                   "order_by", "operator", "keyword", "new_token", "key_token", 
                   "module_token", "value_token", "symbols_token", "assign", 
                   "multiply", "divide", "idivide", "modulo", "javascript_statement", 
                   "javascript_expression", "javascript_primary_expression", 
                   "javascript_this_expression", "javascript_new_expression", 
                   "javascript_selector_expression", "javascript_method_expression", 
                   "javascript_arguments", "javascript_item_expression", 
                   "javascript_parenthesis_expression", "javascript_identifier_expression", 
                   "javascript_literal_expression", "javascript_identifier", 
                   "python_statement", "python_expression", "python_primary_expression", 
                   "python_self_expression", "python_selector_expression", 
                   "python_method_expression", "python_argument_list", "python_ordinal_argument_list", 
                   "python_named_argument_list", "python_parenthesis_expression", 
                   "python_identifier_expression", "python_literal_expression", 
                   "python_identifier", "java_statement", "java_expression", 
                   "java_primary_expression", "java_this_expression", "java_new_expression", 
                   "java_selector_expression", "java_method_expression", 
                   "java_arguments", "java_item_expression", "java_parenthesis_expression", 
                   "java_identifier_expression", "java_class_identifier_expression", 
                   "java_literal_expression", "java_identifier", "csharp_statement", 
                   "csharp_expression", "csharp_primary_expression", "csharp_this_expression", 
                   "csharp_new_expression", "csharp_selector_expression", 
                   "csharp_method_expression", "csharp_arguments", "csharp_item_expression", 
                   "csharp_parenthesis_expression", "csharp_identifier_expression", 
                   "csharp_literal_expression", "csharp_identifier", "jsx_expression", 
                   "jsx_element", "jsx_fragment", "jsx_fragment_start", 
                   "jsx_fragment_end", "jsx_self_closing", "jsx_opening", 
                   "jsx_closing", "jsx_element_name", "jsx_identifier", 
                   "jsx_attribute", "jsx_attribute_value", "jsx_children", 
                   "jsx_child", "jsx_text", "css_expression", "css_field", 
                   "css_identifier", "css_value", "css_text" ]

    EOF = Token.EOF
    INDENT=1
    DEDENT=2
    LF_TAB=3
    LF_MORE=4
    LF=5
    TAB=6
    WS=7
    COMMENT=8
    JAVA=9
    CSHARP=10
    PYTHON2=11
    PYTHON3=12
    JAVASCRIPT=13
    SWIFT=14
    COLON=15
    SEMI=16
    COMMA=17
    RANGE=18
    DOT=19
    LPAR=20
    RPAR=21
    LBRAK=22
    RBRAK=23
    LCURL=24
    RCURL=25
    QMARK=26
    XMARK=27
    AMP=28
    AMP2=29
    PIPE=30
    PIPE2=31
    PLUS=32
    MINUS=33
    STAR=34
    SLASH=35
    BSLASH=36
    PERCENT=37
    GT=38
    GTE=39
    LT=40
    LTE=41
    LTGT=42
    LTCOLONGT=43
    EQ=44
    XEQ=45
    EQ2=46
    TEQ=47
    TILDE=48
    LARROW=49
    RARROW=50
    EGT=51
    BOOLEAN=52
    CHARACTER=53
    TEXT=54
    INTEGER=55
    DECIMAL=56
    DATE=57
    TIME=58
    DATETIME=59
    PERIOD=60
    VERSION=61
    METHOD_T=62
    CODE=63
    DOCUMENT=64
    BLOB=65
    IMAGE=66
    UUID=67
    ITERATOR=68
    CURSOR=69
    HTML=70
    ABSTRACT=71
    ALL=72
    ALWAYS=73
    AND=74
    ANY=75
    AS=76
    ASC=77
    ATTR=78
    ATTRIBUTE=79
    ATTRIBUTES=80
    BINDINGS=81
    BREAK=82
    BY=83
    CASE=84
    CATCH=85
    CATEGORY=86
    CLASS=87
    CLOSE=88
    CONTAINS=89
    DEF=90
    DEFAULT=91
    DEFINE=92
    DELETE=93
    DESC=94
    DO=95
    DOING=96
    EACH=97
    ELSE=98
    ENUM=99
    ENUMERATED=100
    EXCEPT=101
    EXECUTE=102
    EXPECTING=103
    EXTENDS=104
    FETCH=105
    FILTERED=106
    FINALLY=107
    FLUSH=108
    FOR=109
    FROM=110
    GETTER=111
    HAS=112
    IF=113
    IN=114
    INDEX=115
    INVOKE=116
    IS=117
    MATCHING=118
    METHOD=119
    METHODS=120
    MODULO=121
    MUTABLE=122
    NATIVE=123
    NONE=124
    NOT=125
    NOTHING=126
    NULL=127
    ON=128
    ONE=129
    OPEN=130
    OPERATOR=131
    OR=132
    ORDER=133
    OTHERWISE=134
    PASS=135
    RAISE=136
    READ=137
    RECEIVING=138
    RESOURCE=139
    RETURN=140
    RETURNING=141
    ROWS=142
    SELF=143
    SETTER=144
    SINGLETON=145
    SORTED=146
    STORABLE=147
    STORE=148
    SWITCH=149
    TEST=150
    THEN=151
    THIS=152
    THROW=153
    TO=154
    TRY=155
    VERIFYING=156
    WIDGET=157
    WITH=158
    WHEN=159
    WHERE=160
    WHILE=161
    WRITE=162
    BOOLEAN_LITERAL=163
    CHAR_LITERAL=164
    MIN_INTEGER=165
    MAX_INTEGER=166
    SYMBOL_IDENTIFIER=167
    TYPE_IDENTIFIER=168
    VARIABLE_IDENTIFIER=169
    NATIVE_IDENTIFIER=170
    DOLLAR_IDENTIFIER=171
    ARONDBASE_IDENTIFIER=172
    TEXT_LITERAL=173
    UUID_LITERAL=174
    INTEGER_LITERAL=175
    HEXA_LITERAL=176
    DECIMAL_LITERAL=177
    DATETIME_LITERAL=178
    TIME_LITERAL=179
    DATE_LITERAL=180
    PERIOD_LITERAL=181
    VERSION_LITERAL=182

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.7.1")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None



    class Enum_category_declarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # Type_identifierContext
            self.derived = None # Type_identifierContext
            self.attrs = None # Attribute_identifier_listContext
            self.symbols = None # Category_symbol_listContext

        def ENUM(self):
            return self.getToken(MParser.ENUM, 0)

        def LPAR(self):
            return self.getToken(MParser.LPAR, 0)

        def RPAR(self):
            return self.getToken(MParser.RPAR, 0)

        def COLON(self):
            return self.getToken(MParser.COLON, 0)

        def indent(self):
            return self.getTypedRuleContext(MParser.IndentContext,0)


        def dedent(self):
            return self.getTypedRuleContext(MParser.DedentContext,0)


        def type_identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MParser.Type_identifierContext)
            else:
                return self.getTypedRuleContext(MParser.Type_identifierContext,i)


        def category_symbol_list(self):
            return self.getTypedRuleContext(MParser.Category_symbol_listContext,0)


        def attribute_identifier_list(self):
            return self.getTypedRuleContext(MParser.Attribute_identifier_listContext,0)


        def COMMA(self):
            return self.getToken(MParser.COMMA, 0)

        def getRuleIndex(self):
            return MParser.RULE_enum_category_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnum_category_declaration" ):
                listener.enterEnum_category_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnum_category_declaration" ):
                listener.exitEnum_category_declaration(self)




    def enum_category_declaration(self):

        localctx = MParser.Enum_category_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_enum_category_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 490
            self.match(MParser.ENUM)
            self.state = 491
            localctx.name = self.type_identifier()
            self.state = 492
            self.match(MParser.LPAR)
            self.state = 499
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MParser.TYPE_IDENTIFIER]:
                self.state = 493
                localctx.derived = self.type_identifier()
                self.state = 496
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MParser.COMMA:
                    self.state = 494
                    self.match(MParser.COMMA)
                    self.state = 495
                    localctx.attrs = self.attribute_identifier_list()


                pass
            elif token in [MParser.STORABLE, MParser.VARIABLE_IDENTIFIER]:
                self.state = 498
                localctx.attrs = self.attribute_identifier_list()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 501
            self.match(MParser.RPAR)
            self.state = 502
            self.match(MParser.COLON)
            self.state = 503
            self.indent()
            self.state = 504
            localctx.symbols = self.category_symbol_list()
            self.state = 505
            self.dedent()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Enum_native_declarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # Type_identifierContext
            self.typ = None # Native_typeContext
            self.symbols = None # Native_symbol_listContext

        def ENUM(self):
            return self.getToken(MParser.ENUM, 0)

        def LPAR(self):
            return self.getToken(MParser.LPAR, 0)

        def RPAR(self):
            return self.getToken(MParser.RPAR, 0)

        def COLON(self):
            return self.getToken(MParser.COLON, 0)

        def indent(self):
            return self.getTypedRuleContext(MParser.IndentContext,0)


        def dedent(self):
            return self.getTypedRuleContext(MParser.DedentContext,0)


        def type_identifier(self):
            return self.getTypedRuleContext(MParser.Type_identifierContext,0)


        def native_type(self):
            return self.getTypedRuleContext(MParser.Native_typeContext,0)


        def native_symbol_list(self):
            return self.getTypedRuleContext(MParser.Native_symbol_listContext,0)


        def getRuleIndex(self):
            return MParser.RULE_enum_native_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnum_native_declaration" ):
                listener.enterEnum_native_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnum_native_declaration" ):
                listener.exitEnum_native_declaration(self)




    def enum_native_declaration(self):

        localctx = MParser.Enum_native_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_enum_native_declaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 507
            self.match(MParser.ENUM)
            self.state = 508
            localctx.name = self.type_identifier()
            self.state = 509
            self.match(MParser.LPAR)
            self.state = 510
            localctx.typ = self.native_type()
            self.state = 511
            self.match(MParser.RPAR)
            self.state = 512
            self.match(MParser.COLON)
            self.state = 513
            self.indent()
            self.state = 514
            localctx.symbols = self.native_symbol_list()
            self.state = 515
            self.dedent()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Native_symbolContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # Symbol_identifierContext
            self.exp = None # ExpressionContext

        def EQ(self):
            return self.getToken(MParser.EQ, 0)

        def symbol_identifier(self):
            return self.getTypedRuleContext(MParser.Symbol_identifierContext,0)


        def expression(self):
            return self.getTypedRuleContext(MParser.ExpressionContext,0)


        def getRuleIndex(self):
            return MParser.RULE_native_symbol

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNative_symbol" ):
                listener.enterNative_symbol(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNative_symbol" ):
                listener.exitNative_symbol(self)




    def native_symbol(self):

        localctx = MParser.Native_symbolContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_native_symbol)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 517
            localctx.name = self.symbol_identifier()
            self.state = 518
            self.match(MParser.EQ)
            self.state = 519
            localctx.exp = self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Category_symbolContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # Symbol_identifierContext
            self.args = None # Argument_assignment_listContext

        def LPAR(self):
            return self.getToken(MParser.LPAR, 0)

        def RPAR(self):
            return self.getToken(MParser.RPAR, 0)

        def symbol_identifier(self):
            return self.getTypedRuleContext(MParser.Symbol_identifierContext,0)


        def argument_assignment_list(self):
            return self.getTypedRuleContext(MParser.Argument_assignment_listContext,0)


        def getRuleIndex(self):
            return MParser.RULE_category_symbol

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCategory_symbol" ):
                listener.enterCategory_symbol(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCategory_symbol" ):
                listener.exitCategory_symbol(self)




    def category_symbol(self):

        localctx = MParser.Category_symbolContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_category_symbol)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 521
            localctx.name = self.symbol_identifier()
            self.state = 522
            self.match(MParser.LPAR)
            self.state = 524
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << MParser.LPAR) | (1 << MParser.LBRAK) | (1 << MParser.LCURL) | (1 << MParser.MINUS) | (1 << MParser.LT) | (1 << MParser.LTGT) | (1 << MParser.LTCOLONGT) | (1 << MParser.CODE))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (MParser.DOCUMENT - 64)) | (1 << (MParser.BLOB - 64)) | (1 << (MParser.EXECUTE - 64)) | (1 << (MParser.FETCH - 64)) | (1 << (MParser.MUTABLE - 64)) | (1 << (MParser.NONE - 64)) | (1 << (MParser.NOT - 64)))) != 0) or ((((_la - 137)) & ~0x3f) == 0 and ((1 << (_la - 137)) & ((1 << (MParser.READ - 137)) | (1 << (MParser.SELF - 137)) | (1 << (MParser.SORTED - 137)) | (1 << (MParser.THIS - 137)) | (1 << (MParser.BOOLEAN_LITERAL - 137)) | (1 << (MParser.CHAR_LITERAL - 137)) | (1 << (MParser.MIN_INTEGER - 137)) | (1 << (MParser.MAX_INTEGER - 137)) | (1 << (MParser.SYMBOL_IDENTIFIER - 137)) | (1 << (MParser.TYPE_IDENTIFIER - 137)) | (1 << (MParser.VARIABLE_IDENTIFIER - 137)) | (1 << (MParser.TEXT_LITERAL - 137)) | (1 << (MParser.UUID_LITERAL - 137)) | (1 << (MParser.INTEGER_LITERAL - 137)) | (1 << (MParser.HEXA_LITERAL - 137)) | (1 << (MParser.DECIMAL_LITERAL - 137)) | (1 << (MParser.DATETIME_LITERAL - 137)) | (1 << (MParser.TIME_LITERAL - 137)) | (1 << (MParser.DATE_LITERAL - 137)) | (1 << (MParser.PERIOD_LITERAL - 137)) | (1 << (MParser.VERSION_LITERAL - 137)))) != 0):
                self.state = 523
                localctx.args = self.argument_assignment_list(0)


            self.state = 526
            self.match(MParser.RPAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Attribute_declarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # Attribute_identifierContext
            self.typ = None # TypedefContext
            self.match = None # Attribute_constraintContext
            self.indices = None # Index_clauseContext

        def ATTR(self):
            return self.getToken(MParser.ATTR, 0)

        def LPAR(self):
            return self.getToken(MParser.LPAR, 0)

        def RPAR(self):
            return self.getToken(MParser.RPAR, 0)

        def COLON(self):
            return self.getToken(MParser.COLON, 0)

        def indent(self):
            return self.getTypedRuleContext(MParser.IndentContext,0)


        def dedent(self):
            return self.getTypedRuleContext(MParser.DedentContext,0)


        def attribute_identifier(self):
            return self.getTypedRuleContext(MParser.Attribute_identifierContext,0)


        def typedef(self):
            return self.getTypedRuleContext(MParser.TypedefContext,0)


        def PASS(self):
            return self.getToken(MParser.PASS, 0)

        def STORABLE(self):
            return self.getToken(MParser.STORABLE, 0)

        def attribute_constraint(self):
            return self.getTypedRuleContext(MParser.Attribute_constraintContext,0)


        def index_clause(self):
            return self.getTypedRuleContext(MParser.Index_clauseContext,0)


        def lfp(self):
            return self.getTypedRuleContext(MParser.LfpContext,0)


        def getRuleIndex(self):
            return MParser.RULE_attribute_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttribute_declaration" ):
                listener.enterAttribute_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttribute_declaration" ):
                listener.exitAttribute_declaration(self)




    def attribute_declaration(self):

        localctx = MParser.Attribute_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_attribute_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 529
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MParser.STORABLE:
                self.state = 528
                self.match(MParser.STORABLE)


            self.state = 531
            self.match(MParser.ATTR)
            self.state = 532
            localctx.name = self.attribute_identifier()
            self.state = 533
            self.match(MParser.LPAR)
            self.state = 534
            localctx.typ = self.typedef(0)
            self.state = 535
            self.match(MParser.RPAR)
            self.state = 536
            self.match(MParser.COLON)
            self.state = 537
            self.indent()
            self.state = 553
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MParser.PASS]:
                self.state = 538
                self.match(MParser.PASS)
                pass
            elif token in [MParser.IN, MParser.INDEX, MParser.MATCHING]:
                self.state = 551
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [MParser.IN, MParser.MATCHING]:
                    self.state = 539
                    localctx.match = self.attribute_constraint()
                    self.state = 543
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,4,self._ctx)
                    if la_ == 1:
                        self.state = 540
                        self.lfp()
                        self.state = 541
                        localctx.indices = self.index_clause()


                    pass
                elif token in [MParser.INDEX]:
                    self.state = 545
                    localctx.indices = self.index_clause()
                    self.state = 549
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,5,self._ctx)
                    if la_ == 1:
                        self.state = 546
                        self.lfp()
                        self.state = 547
                        localctx.match = self.attribute_constraint()


                    pass
                else:
                    raise NoViableAltException(self)

                pass
            else:
                raise NoViableAltException(self)

            self.state = 555
            self.dedent()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Index_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.indices = None # Variable_identifier_listContext

        def INDEX(self):
            return self.getToken(MParser.INDEX, 0)

        def LPAR(self):
            return self.getToken(MParser.LPAR, 0)

        def RPAR(self):
            return self.getToken(MParser.RPAR, 0)

        def variable_identifier_list(self):
            return self.getTypedRuleContext(MParser.Variable_identifier_listContext,0)


        def getRuleIndex(self):
            return MParser.RULE_index_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndex_clause" ):
                listener.enterIndex_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndex_clause" ):
                listener.exitIndex_clause(self)




    def index_clause(self):

        localctx = MParser.Index_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_index_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 557
            self.match(MParser.INDEX)
            self.state = 558
            self.match(MParser.LPAR)
            self.state = 560
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MParser.VARIABLE_IDENTIFIER:
                self.state = 559
                localctx.indices = self.variable_identifier_list()


            self.state = 562
            self.match(MParser.RPAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Concrete_widget_declarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # Type_identifierContext
            self.derived = None # Type_identifierContext
            self.methods = None # Member_method_declaration_listContext

        def WIDGET(self):
            return self.getToken(MParser.WIDGET, 0)

        def LPAR(self):
            return self.getToken(MParser.LPAR, 0)

        def RPAR(self):
            return self.getToken(MParser.RPAR, 0)

        def COLON(self):
            return self.getToken(MParser.COLON, 0)

        def indent(self):
            return self.getTypedRuleContext(MParser.IndentContext,0)


        def dedent(self):
            return self.getTypedRuleContext(MParser.DedentContext,0)


        def type_identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MParser.Type_identifierContext)
            else:
                return self.getTypedRuleContext(MParser.Type_identifierContext,i)


        def PASS(self):
            return self.getToken(MParser.PASS, 0)

        def member_method_declaration_list(self):
            return self.getTypedRuleContext(MParser.Member_method_declaration_listContext,0)


        def getRuleIndex(self):
            return MParser.RULE_concrete_widget_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConcrete_widget_declaration" ):
                listener.enterConcrete_widget_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConcrete_widget_declaration" ):
                listener.exitConcrete_widget_declaration(self)




    def concrete_widget_declaration(self):

        localctx = MParser.Concrete_widget_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_concrete_widget_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 564
            self.match(MParser.WIDGET)
            self.state = 565
            localctx.name = self.type_identifier()
            self.state = 566
            self.match(MParser.LPAR)
            self.state = 568
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MParser.TYPE_IDENTIFIER:
                self.state = 567
                localctx.derived = self.type_identifier()


            self.state = 570
            self.match(MParser.RPAR)
            self.state = 571
            self.match(MParser.COLON)
            self.state = 572
            self.indent()
            self.state = 575
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MParser.COMMENT, MParser.ABSTRACT, MParser.DEF, MParser.ARONDBASE_IDENTIFIER]:
                self.state = 573
                localctx.methods = self.member_method_declaration_list()
                pass
            elif token in [MParser.PASS]:
                self.state = 574
                self.match(MParser.PASS)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 577
            self.dedent()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Native_widget_declarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # Type_identifierContext
            self.bindings = None # Native_category_bindingsContext
            self.methods = None # Native_member_method_declaration_listContext

        def NATIVE(self):
            return self.getToken(MParser.NATIVE, 0)

        def WIDGET(self):
            return self.getToken(MParser.WIDGET, 0)

        def LPAR(self):
            return self.getToken(MParser.LPAR, 0)

        def RPAR(self):
            return self.getToken(MParser.RPAR, 0)

        def COLON(self):
            return self.getToken(MParser.COLON, 0)

        def indent(self):
            return self.getTypedRuleContext(MParser.IndentContext,0)


        def lfp(self):
            return self.getTypedRuleContext(MParser.LfpContext,0)


        def dedent(self):
            return self.getTypedRuleContext(MParser.DedentContext,0)


        def type_identifier(self):
            return self.getTypedRuleContext(MParser.Type_identifierContext,0)


        def native_category_bindings(self):
            return self.getTypedRuleContext(MParser.Native_category_bindingsContext,0)


        def native_member_method_declaration_list(self):
            return self.getTypedRuleContext(MParser.Native_member_method_declaration_listContext,0)


        def getRuleIndex(self):
            return MParser.RULE_native_widget_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNative_widget_declaration" ):
                listener.enterNative_widget_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNative_widget_declaration" ):
                listener.exitNative_widget_declaration(self)




    def native_widget_declaration(self):

        localctx = MParser.Native_widget_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_native_widget_declaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 579
            self.match(MParser.NATIVE)
            self.state = 580
            self.match(MParser.WIDGET)
            self.state = 581
            localctx.name = self.type_identifier()
            self.state = 582
            self.match(MParser.LPAR)
            self.state = 583
            self.match(MParser.RPAR)
            self.state = 584
            self.match(MParser.COLON)
            self.state = 585
            self.indent()
            self.state = 586
            localctx.bindings = self.native_category_bindings()
            self.state = 587
            self.lfp()
            self.state = 588
            localctx.methods = self.native_member_method_declaration_list()
            self.state = 589
            self.dedent()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Concrete_category_declarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # Type_identifierContext
            self.derived = None # Derived_listContext
            self.attrs = None # Attribute_identifier_listContext
            self.methods = None # Member_method_declaration_listContext

        def LPAR(self):
            return self.getToken(MParser.LPAR, 0)

        def RPAR(self):
            return self.getToken(MParser.RPAR, 0)

        def COLON(self):
            return self.getToken(MParser.COLON, 0)

        def indent(self):
            return self.getTypedRuleContext(MParser.IndentContext,0)


        def dedent(self):
            return self.getTypedRuleContext(MParser.DedentContext,0)


        def CLASS(self):
            return self.getToken(MParser.CLASS, 0)

        def CATEGORY(self):
            return self.getToken(MParser.CATEGORY, 0)

        def type_identifier(self):
            return self.getTypedRuleContext(MParser.Type_identifierContext,0)


        def COMMA(self):
            return self.getToken(MParser.COMMA, 0)

        def PASS(self):
            return self.getToken(MParser.PASS, 0)

        def STORABLE(self):
            return self.getToken(MParser.STORABLE, 0)

        def derived_list(self):
            return self.getTypedRuleContext(MParser.Derived_listContext,0)


        def attribute_identifier_list(self):
            return self.getTypedRuleContext(MParser.Attribute_identifier_listContext,0)


        def member_method_declaration_list(self):
            return self.getTypedRuleContext(MParser.Member_method_declaration_listContext,0)


        def getRuleIndex(self):
            return MParser.RULE_concrete_category_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConcrete_category_declaration" ):
                listener.enterConcrete_category_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConcrete_category_declaration" ):
                listener.exitConcrete_category_declaration(self)




    def concrete_category_declaration(self):

        localctx = MParser.Concrete_category_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_concrete_category_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 592
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MParser.STORABLE:
                self.state = 591
                self.match(MParser.STORABLE)


            self.state = 594
            _la = self._input.LA(1)
            if not(_la==MParser.CATEGORY or _la==MParser.CLASS):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 595
            localctx.name = self.type_identifier()
            self.state = 596
            self.match(MParser.LPAR)
            self.state = 603
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,12,self._ctx)
            if la_ == 1:
                self.state = 597
                localctx.derived = self.derived_list()
                pass

            elif la_ == 2:
                self.state = 598
                localctx.attrs = self.attribute_identifier_list()
                pass

            elif la_ == 3:
                self.state = 599
                localctx.derived = self.derived_list()
                self.state = 600
                self.match(MParser.COMMA)
                self.state = 601
                localctx.attrs = self.attribute_identifier_list()
                pass


            self.state = 605
            self.match(MParser.RPAR)
            self.state = 606
            self.match(MParser.COLON)
            self.state = 607
            self.indent()
            self.state = 610
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MParser.COMMENT, MParser.ABSTRACT, MParser.DEF, MParser.ARONDBASE_IDENTIFIER]:
                self.state = 608
                localctx.methods = self.member_method_declaration_list()
                pass
            elif token in [MParser.PASS]:
                self.state = 609
                self.match(MParser.PASS)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 612
            self.dedent()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Singleton_category_declarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # Type_identifierContext
            self.attrs = None # Attribute_identifier_listContext
            self.methods = None # Member_method_declaration_listContext

        def SINGLETON(self):
            return self.getToken(MParser.SINGLETON, 0)

        def LPAR(self):
            return self.getToken(MParser.LPAR, 0)

        def RPAR(self):
            return self.getToken(MParser.RPAR, 0)

        def COLON(self):
            return self.getToken(MParser.COLON, 0)

        def indent(self):
            return self.getTypedRuleContext(MParser.IndentContext,0)


        def dedent(self):
            return self.getTypedRuleContext(MParser.DedentContext,0)


        def type_identifier(self):
            return self.getTypedRuleContext(MParser.Type_identifierContext,0)


        def attribute_identifier_list(self):
            return self.getTypedRuleContext(MParser.Attribute_identifier_listContext,0)


        def PASS(self):
            return self.getToken(MParser.PASS, 0)

        def member_method_declaration_list(self):
            return self.getTypedRuleContext(MParser.Member_method_declaration_listContext,0)


        def getRuleIndex(self):
            return MParser.RULE_singleton_category_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSingleton_category_declaration" ):
                listener.enterSingleton_category_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSingleton_category_declaration" ):
                listener.exitSingleton_category_declaration(self)




    def singleton_category_declaration(self):

        localctx = MParser.Singleton_category_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_singleton_category_declaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 614
            self.match(MParser.SINGLETON)
            self.state = 615
            localctx.name = self.type_identifier()
            self.state = 616
            self.match(MParser.LPAR)
            self.state = 617
            localctx.attrs = self.attribute_identifier_list()
            self.state = 618
            self.match(MParser.RPAR)
            self.state = 619
            self.match(MParser.COLON)
            self.state = 620
            self.indent()
            self.state = 623
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MParser.COMMENT, MParser.ABSTRACT, MParser.DEF, MParser.ARONDBASE_IDENTIFIER]:
                self.state = 621
                localctx.methods = self.member_method_declaration_list()
                pass
            elif token in [MParser.PASS]:
                self.state = 622
                self.match(MParser.PASS)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 625
            self.dedent()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Derived_listContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.items = None # Type_identifier_listContext

        def type_identifier_list(self):
            return self.getTypedRuleContext(MParser.Type_identifier_listContext,0)


        def getRuleIndex(self):
            return MParser.RULE_derived_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDerived_list" ):
                listener.enterDerived_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDerived_list" ):
                listener.exitDerived_list(self)




    def derived_list(self):

        localctx = MParser.Derived_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_derived_list)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 627
            localctx.items = self.type_identifier_list()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Operator_method_declarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.op = None # OperatorContext
            self.arg = None # Operator_argumentContext
            self.typ = None # TypedefContext
            self.stmts = None # Statement_listContext

        def DEF(self):
            return self.getToken(MParser.DEF, 0)

        def OPERATOR(self):
            return self.getToken(MParser.OPERATOR, 0)

        def LPAR(self):
            return self.getToken(MParser.LPAR, 0)

        def RPAR(self):
            return self.getToken(MParser.RPAR, 0)

        def COLON(self):
            return self.getToken(MParser.COLON, 0)

        def indent(self):
            return self.getTypedRuleContext(MParser.IndentContext,0)


        def dedent(self):
            return self.getTypedRuleContext(MParser.DedentContext,0)


        def operator(self):
            return self.getTypedRuleContext(MParser.OperatorContext,0)


        def operator_argument(self):
            return self.getTypedRuleContext(MParser.Operator_argumentContext,0)


        def statement_list(self):
            return self.getTypedRuleContext(MParser.Statement_listContext,0)


        def RARROW(self):
            return self.getToken(MParser.RARROW, 0)

        def typedef(self):
            return self.getTypedRuleContext(MParser.TypedefContext,0)


        def getRuleIndex(self):
            return MParser.RULE_operator_method_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOperator_method_declaration" ):
                listener.enterOperator_method_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOperator_method_declaration" ):
                listener.exitOperator_method_declaration(self)




    def operator_method_declaration(self):

        localctx = MParser.Operator_method_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_operator_method_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 629
            self.match(MParser.DEF)
            self.state = 630
            self.match(MParser.OPERATOR)
            self.state = 631
            localctx.op = self.operator()
            self.state = 632
            self.match(MParser.LPAR)
            self.state = 633
            localctx.arg = self.operator_argument()
            self.state = 634
            self.match(MParser.RPAR)
            self.state = 637
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MParser.RARROW:
                self.state = 635
                self.match(MParser.RARROW)
                self.state = 636
                localctx.typ = self.typedef(0)


            self.state = 639
            self.match(MParser.COLON)
            self.state = 640
            self.indent()
            self.state = 641
            localctx.stmts = self.statement_list()
            self.state = 642
            self.dedent()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Setter_method_declarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # Variable_identifierContext
            self.stmts = None # Statement_listContext

        def DEF(self):
            return self.getToken(MParser.DEF, 0)

        def SETTER(self):
            return self.getToken(MParser.SETTER, 0)

        def LPAR(self):
            return self.getToken(MParser.LPAR, 0)

        def RPAR(self):
            return self.getToken(MParser.RPAR, 0)

        def COLON(self):
            return self.getToken(MParser.COLON, 0)

        def indent(self):
            return self.getTypedRuleContext(MParser.IndentContext,0)


        def dedent(self):
            return self.getTypedRuleContext(MParser.DedentContext,0)


        def variable_identifier(self):
            return self.getTypedRuleContext(MParser.Variable_identifierContext,0)


        def statement_list(self):
            return self.getTypedRuleContext(MParser.Statement_listContext,0)


        def getRuleIndex(self):
            return MParser.RULE_setter_method_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetter_method_declaration" ):
                listener.enterSetter_method_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetter_method_declaration" ):
                listener.exitSetter_method_declaration(self)




    def setter_method_declaration(self):

        localctx = MParser.Setter_method_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_setter_method_declaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 644
            self.match(MParser.DEF)
            self.state = 645
            localctx.name = self.variable_identifier()
            self.state = 646
            self.match(MParser.SETTER)
            self.state = 647
            self.match(MParser.LPAR)
            self.state = 648
            self.match(MParser.RPAR)
            self.state = 649
            self.match(MParser.COLON)
            self.state = 650
            self.indent()
            self.state = 651
            localctx.stmts = self.statement_list()
            self.state = 652
            self.dedent()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Native_setter_declarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # Variable_identifierContext
            self.stmts = None # Native_statement_listContext

        def DEF(self):
            return self.getToken(MParser.DEF, 0)

        def SETTER(self):
            return self.getToken(MParser.SETTER, 0)

        def LPAR(self):
            return self.getToken(MParser.LPAR, 0)

        def RPAR(self):
            return self.getToken(MParser.RPAR, 0)

        def COLON(self):
            return self.getToken(MParser.COLON, 0)

        def indent(self):
            return self.getTypedRuleContext(MParser.IndentContext,0)


        def dedent(self):
            return self.getTypedRuleContext(MParser.DedentContext,0)


        def variable_identifier(self):
            return self.getTypedRuleContext(MParser.Variable_identifierContext,0)


        def native_statement_list(self):
            return self.getTypedRuleContext(MParser.Native_statement_listContext,0)


        def NATIVE(self):
            return self.getToken(MParser.NATIVE, 0)

        def getRuleIndex(self):
            return MParser.RULE_native_setter_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNative_setter_declaration" ):
                listener.enterNative_setter_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNative_setter_declaration" ):
                listener.exitNative_setter_declaration(self)




    def native_setter_declaration(self):

        localctx = MParser.Native_setter_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_native_setter_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 654
            self.match(MParser.DEF)
            self.state = 655
            localctx.name = self.variable_identifier()
            self.state = 657
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MParser.NATIVE:
                self.state = 656
                self.match(MParser.NATIVE)


            self.state = 659
            self.match(MParser.SETTER)
            self.state = 660
            self.match(MParser.LPAR)
            self.state = 661
            self.match(MParser.RPAR)
            self.state = 662
            self.match(MParser.COLON)
            self.state = 663
            self.indent()
            self.state = 664
            localctx.stmts = self.native_statement_list()
            self.state = 665
            self.dedent()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Getter_method_declarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # Variable_identifierContext
            self.stmts = None # Statement_listContext

        def DEF(self):
            return self.getToken(MParser.DEF, 0)

        def GETTER(self):
            return self.getToken(MParser.GETTER, 0)

        def LPAR(self):
            return self.getToken(MParser.LPAR, 0)

        def RPAR(self):
            return self.getToken(MParser.RPAR, 0)

        def COLON(self):
            return self.getToken(MParser.COLON, 0)

        def indent(self):
            return self.getTypedRuleContext(MParser.IndentContext,0)


        def dedent(self):
            return self.getTypedRuleContext(MParser.DedentContext,0)


        def variable_identifier(self):
            return self.getTypedRuleContext(MParser.Variable_identifierContext,0)


        def statement_list(self):
            return self.getTypedRuleContext(MParser.Statement_listContext,0)


        def getRuleIndex(self):
            return MParser.RULE_getter_method_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGetter_method_declaration" ):
                listener.enterGetter_method_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGetter_method_declaration" ):
                listener.exitGetter_method_declaration(self)




    def getter_method_declaration(self):

        localctx = MParser.Getter_method_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_getter_method_declaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 667
            self.match(MParser.DEF)
            self.state = 668
            localctx.name = self.variable_identifier()
            self.state = 669
            self.match(MParser.GETTER)
            self.state = 670
            self.match(MParser.LPAR)
            self.state = 671
            self.match(MParser.RPAR)
            self.state = 672
            self.match(MParser.COLON)
            self.state = 673
            self.indent()
            self.state = 674
            localctx.stmts = self.statement_list()
            self.state = 675
            self.dedent()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Native_getter_declarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # Variable_identifierContext
            self.stmts = None # Native_statement_listContext

        def DEF(self):
            return self.getToken(MParser.DEF, 0)

        def GETTER(self):
            return self.getToken(MParser.GETTER, 0)

        def LPAR(self):
            return self.getToken(MParser.LPAR, 0)

        def RPAR(self):
            return self.getToken(MParser.RPAR, 0)

        def COLON(self):
            return self.getToken(MParser.COLON, 0)

        def indent(self):
            return self.getTypedRuleContext(MParser.IndentContext,0)


        def dedent(self):
            return self.getTypedRuleContext(MParser.DedentContext,0)


        def variable_identifier(self):
            return self.getTypedRuleContext(MParser.Variable_identifierContext,0)


        def native_statement_list(self):
            return self.getTypedRuleContext(MParser.Native_statement_listContext,0)


        def NATIVE(self):
            return self.getToken(MParser.NATIVE, 0)

        def getRuleIndex(self):
            return MParser.RULE_native_getter_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNative_getter_declaration" ):
                listener.enterNative_getter_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNative_getter_declaration" ):
                listener.exitNative_getter_declaration(self)




    def native_getter_declaration(self):

        localctx = MParser.Native_getter_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_native_getter_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 677
            self.match(MParser.DEF)
            self.state = 678
            localctx.name = self.variable_identifier()
            self.state = 680
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MParser.NATIVE:
                self.state = 679
                self.match(MParser.NATIVE)


            self.state = 682
            self.match(MParser.GETTER)
            self.state = 683
            self.match(MParser.LPAR)
            self.state = 684
            self.match(MParser.RPAR)
            self.state = 685
            self.match(MParser.COLON)
            self.state = 686
            self.indent()
            self.state = 687
            localctx.stmts = self.native_statement_list()
            self.state = 688
            self.dedent()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Native_category_declarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # Type_identifierContext
            self.attrs = None # Attribute_identifier_listContext
            self.bindings = None # Native_category_bindingsContext
            self.methods = None # Native_member_method_declaration_listContext

        def NATIVE(self):
            return self.getToken(MParser.NATIVE, 0)

        def LPAR(self):
            return self.getToken(MParser.LPAR, 0)

        def RPAR(self):
            return self.getToken(MParser.RPAR, 0)

        def COLON(self):
            return self.getToken(MParser.COLON, 0)

        def indent(self):
            return self.getTypedRuleContext(MParser.IndentContext,0)


        def dedent(self):
            return self.getTypedRuleContext(MParser.DedentContext,0)


        def CLASS(self):
            return self.getToken(MParser.CLASS, 0)

        def CATEGORY(self):
            return self.getToken(MParser.CATEGORY, 0)

        def type_identifier(self):
            return self.getTypedRuleContext(MParser.Type_identifierContext,0)


        def native_category_bindings(self):
            return self.getTypedRuleContext(MParser.Native_category_bindingsContext,0)


        def STORABLE(self):
            return self.getToken(MParser.STORABLE, 0)

        def lfp(self):
            return self.getTypedRuleContext(MParser.LfpContext,0)


        def attribute_identifier_list(self):
            return self.getTypedRuleContext(MParser.Attribute_identifier_listContext,0)


        def native_member_method_declaration_list(self):
            return self.getTypedRuleContext(MParser.Native_member_method_declaration_listContext,0)


        def getRuleIndex(self):
            return MParser.RULE_native_category_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNative_category_declaration" ):
                listener.enterNative_category_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNative_category_declaration" ):
                listener.exitNative_category_declaration(self)




    def native_category_declaration(self):

        localctx = MParser.Native_category_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_native_category_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 691
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MParser.STORABLE:
                self.state = 690
                self.match(MParser.STORABLE)


            self.state = 693
            self.match(MParser.NATIVE)
            self.state = 694
            _la = self._input.LA(1)
            if not(_la==MParser.CATEGORY or _la==MParser.CLASS):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 695
            localctx.name = self.type_identifier()
            self.state = 696
            self.match(MParser.LPAR)
            self.state = 698
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MParser.STORABLE or _la==MParser.VARIABLE_IDENTIFIER:
                self.state = 697
                localctx.attrs = self.attribute_identifier_list()


            self.state = 700
            self.match(MParser.RPAR)
            self.state = 701
            self.match(MParser.COLON)
            self.state = 702
            self.indent()
            self.state = 703
            localctx.bindings = self.native_category_bindings()
            self.state = 707
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,20,self._ctx)
            if la_ == 1:
                self.state = 704
                self.lfp()
                self.state = 705
                localctx.methods = self.native_member_method_declaration_list()


            self.state = 709
            self.dedent()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Native_resource_declarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # Type_identifierContext
            self.attrs = None # Attribute_identifier_listContext
            self.bindings = None # Native_category_bindingsContext
            self.methods = None # Native_member_method_declaration_listContext

        def NATIVE(self):
            return self.getToken(MParser.NATIVE, 0)

        def RESOURCE(self):
            return self.getToken(MParser.RESOURCE, 0)

        def LPAR(self):
            return self.getToken(MParser.LPAR, 0)

        def RPAR(self):
            return self.getToken(MParser.RPAR, 0)

        def COLON(self):
            return self.getToken(MParser.COLON, 0)

        def indent(self):
            return self.getTypedRuleContext(MParser.IndentContext,0)


        def dedent(self):
            return self.getTypedRuleContext(MParser.DedentContext,0)


        def type_identifier(self):
            return self.getTypedRuleContext(MParser.Type_identifierContext,0)


        def native_category_bindings(self):
            return self.getTypedRuleContext(MParser.Native_category_bindingsContext,0)


        def STORABLE(self):
            return self.getToken(MParser.STORABLE, 0)

        def lfp(self):
            return self.getTypedRuleContext(MParser.LfpContext,0)


        def attribute_identifier_list(self):
            return self.getTypedRuleContext(MParser.Attribute_identifier_listContext,0)


        def native_member_method_declaration_list(self):
            return self.getTypedRuleContext(MParser.Native_member_method_declaration_listContext,0)


        def getRuleIndex(self):
            return MParser.RULE_native_resource_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNative_resource_declaration" ):
                listener.enterNative_resource_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNative_resource_declaration" ):
                listener.exitNative_resource_declaration(self)




    def native_resource_declaration(self):

        localctx = MParser.Native_resource_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_native_resource_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 712
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MParser.STORABLE:
                self.state = 711
                self.match(MParser.STORABLE)


            self.state = 714
            self.match(MParser.NATIVE)
            self.state = 715
            self.match(MParser.RESOURCE)
            self.state = 716
            localctx.name = self.type_identifier()
            self.state = 717
            self.match(MParser.LPAR)
            self.state = 719
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MParser.STORABLE or _la==MParser.VARIABLE_IDENTIFIER:
                self.state = 718
                localctx.attrs = self.attribute_identifier_list()


            self.state = 721
            self.match(MParser.RPAR)
            self.state = 722
            self.match(MParser.COLON)
            self.state = 723
            self.indent()
            self.state = 724
            localctx.bindings = self.native_category_bindings()
            self.state = 728
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,23,self._ctx)
            if la_ == 1:
                self.state = 725
                self.lfp()
                self.state = 726
                localctx.methods = self.native_member_method_declaration_list()


            self.state = 730
            self.dedent()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Native_category_bindingsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.items = None # Native_category_binding_listContext

        def DEF(self):
            return self.getToken(MParser.DEF, 0)

        def BINDINGS(self):
            return self.getToken(MParser.BINDINGS, 0)

        def COLON(self):
            return self.getToken(MParser.COLON, 0)

        def indent(self):
            return self.getTypedRuleContext(MParser.IndentContext,0)


        def dedent(self):
            return self.getTypedRuleContext(MParser.DedentContext,0)


        def CLASS(self):
            return self.getToken(MParser.CLASS, 0)

        def CATEGORY(self):
            return self.getToken(MParser.CATEGORY, 0)

        def native_category_binding_list(self):
            return self.getTypedRuleContext(MParser.Native_category_binding_listContext,0)


        def getRuleIndex(self):
            return MParser.RULE_native_category_bindings

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNative_category_bindings" ):
                listener.enterNative_category_bindings(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNative_category_bindings" ):
                listener.exitNative_category_bindings(self)




    def native_category_bindings(self):

        localctx = MParser.Native_category_bindingsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_native_category_bindings)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 732
            self.match(MParser.DEF)
            self.state = 733
            _la = self._input.LA(1)
            if not(_la==MParser.CATEGORY or _la==MParser.CLASS):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 734
            self.match(MParser.BINDINGS)
            self.state = 735
            self.match(MParser.COLON)
            self.state = 736
            self.indent()
            self.state = 737
            localctx.items = self.native_category_binding_list(0)
            self.state = 738
            self.dedent()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Native_category_binding_listContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return MParser.RULE_native_category_binding_list

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class NativeCategoryBindingListItemContext(Native_category_binding_listContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MParser.Native_category_binding_listContext
            super().__init__(parser)
            self.items = None # Native_category_binding_listContext
            self.item = None # Native_category_bindingContext
            self.copyFrom(ctx)

        def lfp(self):
            return self.getTypedRuleContext(MParser.LfpContext,0)

        def native_category_binding_list(self):
            return self.getTypedRuleContext(MParser.Native_category_binding_listContext,0)

        def native_category_binding(self):
            return self.getTypedRuleContext(MParser.Native_category_bindingContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNativeCategoryBindingListItem" ):
                listener.enterNativeCategoryBindingListItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNativeCategoryBindingListItem" ):
                listener.exitNativeCategoryBindingListItem(self)


    class NativeCategoryBindingListContext(Native_category_binding_listContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MParser.Native_category_binding_listContext
            super().__init__(parser)
            self.item = None # Native_category_bindingContext
            self.copyFrom(ctx)

        def native_category_binding(self):
            return self.getTypedRuleContext(MParser.Native_category_bindingContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNativeCategoryBindingList" ):
                listener.enterNativeCategoryBindingList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNativeCategoryBindingList" ):
                listener.exitNativeCategoryBindingList(self)



    def native_category_binding_list(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = MParser.Native_category_binding_listContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 38
        self.enterRecursionRule(localctx, 38, self.RULE_native_category_binding_list, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            localctx = MParser.NativeCategoryBindingListContext(self, localctx)
            self._ctx = localctx
            _prevctx = localctx

            self.state = 741
            localctx.item = self.native_category_binding()
            self._ctx.stop = self._input.LT(-1)
            self.state = 749
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,24,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = MParser.NativeCategoryBindingListItemContext(self, MParser.Native_category_binding_listContext(self, _parentctx, _parentState))
                    localctx.items = _prevctx
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_native_category_binding_list)
                    self.state = 743
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 744
                    self.lfp()
                    self.state = 745
                    localctx.item = self.native_category_binding() 
                self.state = 751
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,24,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class Abstract_method_declarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # Method_identifierContext
            self.args = None # Argument_listContext
            self.typ = None # TypedefContext

        def ABSTRACT(self):
            return self.getToken(MParser.ABSTRACT, 0)

        def DEF(self):
            return self.getToken(MParser.DEF, 0)

        def LPAR(self):
            return self.getToken(MParser.LPAR, 0)

        def RPAR(self):
            return self.getToken(MParser.RPAR, 0)

        def method_identifier(self):
            return self.getTypedRuleContext(MParser.Method_identifierContext,0)


        def RARROW(self):
            return self.getToken(MParser.RARROW, 0)

        def argument_list(self):
            return self.getTypedRuleContext(MParser.Argument_listContext,0)


        def typedef(self):
            return self.getTypedRuleContext(MParser.TypedefContext,0)


        def getRuleIndex(self):
            return MParser.RULE_abstract_method_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAbstract_method_declaration" ):
                listener.enterAbstract_method_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAbstract_method_declaration" ):
                listener.exitAbstract_method_declaration(self)




    def abstract_method_declaration(self):

        localctx = MParser.Abstract_method_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_abstract_method_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 752
            self.match(MParser.ABSTRACT)
            self.state = 753
            self.match(MParser.DEF)
            self.state = 754
            localctx.name = self.method_identifier()
            self.state = 755
            self.match(MParser.LPAR)
            self.state = 757
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MParser.CODE or _la==MParser.MUTABLE or _la==MParser.VARIABLE_IDENTIFIER:
                self.state = 756
                localctx.args = self.argument_list()


            self.state = 759
            self.match(MParser.RPAR)
            self.state = 762
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MParser.RARROW:
                self.state = 760
                self.match(MParser.RARROW)
                self.state = 761
                localctx.typ = self.typedef(0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Concrete_method_declarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # Method_identifierContext
            self.args = None # Argument_listContext
            self.typ = None # TypedefContext
            self.stmts = None # Statement_listContext

        def DEF(self):
            return self.getToken(MParser.DEF, 0)

        def LPAR(self):
            return self.getToken(MParser.LPAR, 0)

        def RPAR(self):
            return self.getToken(MParser.RPAR, 0)

        def COLON(self):
            return self.getToken(MParser.COLON, 0)

        def indent(self):
            return self.getTypedRuleContext(MParser.IndentContext,0)


        def dedent(self):
            return self.getTypedRuleContext(MParser.DedentContext,0)


        def method_identifier(self):
            return self.getTypedRuleContext(MParser.Method_identifierContext,0)


        def PASS(self):
            return self.getToken(MParser.PASS, 0)

        def RARROW(self):
            return self.getToken(MParser.RARROW, 0)

        def statement_list(self):
            return self.getTypedRuleContext(MParser.Statement_listContext,0)


        def argument_list(self):
            return self.getTypedRuleContext(MParser.Argument_listContext,0)


        def typedef(self):
            return self.getTypedRuleContext(MParser.TypedefContext,0)


        def getRuleIndex(self):
            return MParser.RULE_concrete_method_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConcrete_method_declaration" ):
                listener.enterConcrete_method_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConcrete_method_declaration" ):
                listener.exitConcrete_method_declaration(self)




    def concrete_method_declaration(self):

        localctx = MParser.Concrete_method_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_concrete_method_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 764
            self.match(MParser.DEF)
            self.state = 765
            localctx.name = self.method_identifier()
            self.state = 766
            self.match(MParser.LPAR)
            self.state = 768
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MParser.CODE or _la==MParser.MUTABLE or _la==MParser.VARIABLE_IDENTIFIER:
                self.state = 767
                localctx.args = self.argument_list()


            self.state = 770
            self.match(MParser.RPAR)
            self.state = 773
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MParser.RARROW:
                self.state = 771
                self.match(MParser.RARROW)
                self.state = 772
                localctx.typ = self.typedef(0)


            self.state = 775
            self.match(MParser.COLON)
            self.state = 776
            self.indent()
            self.state = 779
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MParser.COMMENT, MParser.LPAR, MParser.LBRAK, MParser.LCURL, MParser.LT, MParser.LTCOLONGT, MParser.DOCUMENT, MParser.BLOB, MParser.BREAK, MParser.DEF, MParser.DELETE, MParser.DO, MParser.FETCH, MParser.FLUSH, MParser.FOR, MParser.IF, MParser.MUTABLE, MParser.NONE, MParser.RAISE, MParser.READ, MParser.RETURN, MParser.SELF, MParser.SORTED, MParser.STORE, MParser.SWITCH, MParser.THIS, MParser.TRY, MParser.WITH, MParser.WHILE, MParser.WRITE, MParser.BOOLEAN_LITERAL, MParser.CHAR_LITERAL, MParser.MIN_INTEGER, MParser.MAX_INTEGER, MParser.SYMBOL_IDENTIFIER, MParser.TYPE_IDENTIFIER, MParser.VARIABLE_IDENTIFIER, MParser.TEXT_LITERAL, MParser.UUID_LITERAL, MParser.INTEGER_LITERAL, MParser.HEXA_LITERAL, MParser.DECIMAL_LITERAL, MParser.DATETIME_LITERAL, MParser.TIME_LITERAL, MParser.DATE_LITERAL, MParser.PERIOD_LITERAL, MParser.VERSION_LITERAL]:
                self.state = 777
                localctx.stmts = self.statement_list()
                pass
            elif token in [MParser.PASS]:
                self.state = 778
                self.match(MParser.PASS)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 781
            self.dedent()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Native_method_declarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # Method_identifierContext
            self.args = None # Argument_listContext
            self.typ = None # Category_or_any_typeContext
            self.stmts = None # Native_statement_listContext

        def DEF(self):
            return self.getToken(MParser.DEF, 0)

        def LPAR(self):
            return self.getToken(MParser.LPAR, 0)

        def RPAR(self):
            return self.getToken(MParser.RPAR, 0)

        def COLON(self):
            return self.getToken(MParser.COLON, 0)

        def indent(self):
            return self.getTypedRuleContext(MParser.IndentContext,0)


        def dedent(self):
            return self.getTypedRuleContext(MParser.DedentContext,0)


        def method_identifier(self):
            return self.getTypedRuleContext(MParser.Method_identifierContext,0)


        def native_statement_list(self):
            return self.getTypedRuleContext(MParser.Native_statement_listContext,0)


        def NATIVE(self):
            return self.getToken(MParser.NATIVE, 0)

        def RARROW(self):
            return self.getToken(MParser.RARROW, 0)

        def argument_list(self):
            return self.getTypedRuleContext(MParser.Argument_listContext,0)


        def category_or_any_type(self):
            return self.getTypedRuleContext(MParser.Category_or_any_typeContext,0)


        def getRuleIndex(self):
            return MParser.RULE_native_method_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNative_method_declaration" ):
                listener.enterNative_method_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNative_method_declaration" ):
                listener.exitNative_method_declaration(self)




    def native_method_declaration(self):

        localctx = MParser.Native_method_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_native_method_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 783
            self.match(MParser.DEF)
            self.state = 785
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MParser.NATIVE:
                self.state = 784
                self.match(MParser.NATIVE)


            self.state = 787
            localctx.name = self.method_identifier()
            self.state = 788
            self.match(MParser.LPAR)
            self.state = 790
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MParser.CODE or _la==MParser.MUTABLE or _la==MParser.VARIABLE_IDENTIFIER:
                self.state = 789
                localctx.args = self.argument_list()


            self.state = 792
            self.match(MParser.RPAR)
            self.state = 795
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MParser.RARROW:
                self.state = 793
                self.match(MParser.RARROW)
                self.state = 794
                localctx.typ = self.category_or_any_type()


            self.state = 797
            self.match(MParser.COLON)
            self.state = 798
            self.indent()
            self.state = 799
            localctx.stmts = self.native_statement_list()
            self.state = 800
            self.dedent()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Test_method_declarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # Token
            self.stmts = None # Statement_listContext
            self.exps = None # Assertion_listContext
            self.error = None # Symbol_identifierContext

        def DEF(self):
            return self.getToken(MParser.DEF, 0)

        def TEST(self):
            return self.getToken(MParser.TEST, 0)

        def LPAR(self):
            return self.getToken(MParser.LPAR, 0)

        def RPAR(self):
            return self.getToken(MParser.RPAR, 0)

        def COLON(self, i:int=None):
            if i is None:
                return self.getTokens(MParser.COLON)
            else:
                return self.getToken(MParser.COLON, i)

        def indent(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MParser.IndentContext)
            else:
                return self.getTypedRuleContext(MParser.IndentContext,i)


        def dedent(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MParser.DedentContext)
            else:
                return self.getTypedRuleContext(MParser.DedentContext,i)


        def lfp(self):
            return self.getTypedRuleContext(MParser.LfpContext,0)


        def VERIFYING(self):
            return self.getToken(MParser.VERIFYING, 0)

        def TEXT_LITERAL(self):
            return self.getToken(MParser.TEXT_LITERAL, 0)

        def statement_list(self):
            return self.getTypedRuleContext(MParser.Statement_listContext,0)


        def assertion_list(self):
            return self.getTypedRuleContext(MParser.Assertion_listContext,0)


        def symbol_identifier(self):
            return self.getTypedRuleContext(MParser.Symbol_identifierContext,0)


        def getRuleIndex(self):
            return MParser.RULE_test_method_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTest_method_declaration" ):
                listener.enterTest_method_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTest_method_declaration" ):
                listener.exitTest_method_declaration(self)




    def test_method_declaration(self):

        localctx = MParser.Test_method_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_test_method_declaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 802
            self.match(MParser.DEF)
            self.state = 803
            self.match(MParser.TEST)
            self.state = 804
            localctx.name = self.match(MParser.TEXT_LITERAL)
            self.state = 805
            self.match(MParser.LPAR)
            self.state = 806
            self.match(MParser.RPAR)
            self.state = 807
            self.match(MParser.COLON)
            self.state = 808
            self.indent()
            self.state = 809
            localctx.stmts = self.statement_list()
            self.state = 810
            self.dedent()
            self.state = 811
            self.lfp()
            self.state = 812
            self.match(MParser.VERIFYING)
            self.state = 813
            self.match(MParser.COLON)
            self.state = 819
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MParser.LF]:
                self.state = 814
                self.indent()
                self.state = 815
                localctx.exps = self.assertion_list()
                self.state = 816
                self.dedent()
                pass
            elif token in [MParser.SYMBOL_IDENTIFIER]:
                self.state = 818
                localctx.error = self.symbol_identifier()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AssertionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.exp = None # ExpressionContext

        def expression(self):
            return self.getTypedRuleContext(MParser.ExpressionContext,0)


        def getRuleIndex(self):
            return MParser.RULE_assertion

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssertion" ):
                listener.enterAssertion(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssertion" ):
                listener.exitAssertion(self)




    def assertion(self):

        localctx = MParser.AssertionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_assertion)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 821
            localctx.exp = self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Typed_argumentContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # Variable_identifierContext
            self.typ = None # Category_or_any_typeContext
            self.attrs = None # Attribute_identifier_listContext
            self.value = None # Literal_expressionContext

        def COLON(self):
            return self.getToken(MParser.COLON, 0)

        def variable_identifier(self):
            return self.getTypedRuleContext(MParser.Variable_identifierContext,0)


        def category_or_any_type(self):
            return self.getTypedRuleContext(MParser.Category_or_any_typeContext,0)


        def LPAR(self):
            return self.getToken(MParser.LPAR, 0)

        def RPAR(self):
            return self.getToken(MParser.RPAR, 0)

        def EQ(self):
            return self.getToken(MParser.EQ, 0)

        def attribute_identifier_list(self):
            return self.getTypedRuleContext(MParser.Attribute_identifier_listContext,0)


        def literal_expression(self):
            return self.getTypedRuleContext(MParser.Literal_expressionContext,0)


        def getRuleIndex(self):
            return MParser.RULE_typed_argument

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTyped_argument" ):
                listener.enterTyped_argument(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTyped_argument" ):
                listener.exitTyped_argument(self)




    def typed_argument(self):

        localctx = MParser.Typed_argumentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_typed_argument)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 823
            localctx.name = self.variable_identifier()
            self.state = 824
            self.match(MParser.COLON)
            self.state = 825
            localctx.typ = self.category_or_any_type()
            self.state = 830
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MParser.LPAR:
                self.state = 826
                self.match(MParser.LPAR)
                self.state = 827
                localctx.attrs = self.attribute_identifier_list()
                self.state = 828
                self.match(MParser.RPAR)


            self.state = 834
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MParser.EQ:
                self.state = 832
                self.match(MParser.EQ)
                self.state = 833
                localctx.value = self.literal_expression()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class StatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return MParser.RULE_statement

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class CommentStatementContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MParser.StatementContext
            super().__init__(parser)
            self.decl = None # Comment_statementContext
            self.copyFrom(ctx)

        def comment_statement(self):
            return self.getTypedRuleContext(MParser.Comment_statementContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCommentStatement" ):
                listener.enterCommentStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCommentStatement" ):
                listener.exitCommentStatement(self)


    class StoreStatementContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MParser.StatementContext
            super().__init__(parser)
            self.stmt = None # Store_statementContext
            self.copyFrom(ctx)

        def store_statement(self):
            return self.getTypedRuleContext(MParser.Store_statementContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStoreStatement" ):
                listener.enterStoreStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStoreStatement" ):
                listener.exitStoreStatement(self)


    class WithSingletonStatementContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MParser.StatementContext
            super().__init__(parser)
            self.stmt = None # With_singleton_statementContext
            self.copyFrom(ctx)

        def with_singleton_statement(self):
            return self.getTypedRuleContext(MParser.With_singleton_statementContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWithSingletonStatement" ):
                listener.enterWithSingletonStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWithSingletonStatement" ):
                listener.exitWithSingletonStatement(self)


    class WriteStatementContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MParser.StatementContext
            super().__init__(parser)
            self.stmt = None # Write_statementContext
            self.copyFrom(ctx)

        def write_statement(self):
            return self.getTypedRuleContext(MParser.Write_statementContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWriteStatement" ):
                listener.enterWriteStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWriteStatement" ):
                listener.exitWriteStatement(self)


    class WhileStatementContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MParser.StatementContext
            super().__init__(parser)
            self.stmt = None # While_statementContext
            self.copyFrom(ctx)

        def while_statement(self):
            return self.getTypedRuleContext(MParser.While_statementContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhileStatement" ):
                listener.enterWhileStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhileStatement" ):
                listener.exitWhileStatement(self)


    class WithResourceStatementContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MParser.StatementContext
            super().__init__(parser)
            self.stmt = None # With_resource_statementContext
            self.copyFrom(ctx)

        def with_resource_statement(self):
            return self.getTypedRuleContext(MParser.With_resource_statementContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWithResourceStatement" ):
                listener.enterWithResourceStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWithResourceStatement" ):
                listener.exitWithResourceStatement(self)


    class RaiseStatementContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MParser.StatementContext
            super().__init__(parser)
            self.stmt = None # Raise_statementContext
            self.copyFrom(ctx)

        def raise_statement(self):
            return self.getTypedRuleContext(MParser.Raise_statementContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRaiseStatement" ):
                listener.enterRaiseStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRaiseStatement" ):
                listener.exitRaiseStatement(self)


    class FetchStatementContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MParser.StatementContext
            super().__init__(parser)
            self.stmt = None # Fetch_statementContext
            self.copyFrom(ctx)

        def fetch_statement(self):
            return self.getTypedRuleContext(MParser.Fetch_statementContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFetchStatement" ):
                listener.enterFetchStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFetchStatement" ):
                listener.exitFetchStatement(self)


    class BreakStatementContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MParser.StatementContext
            super().__init__(parser)
            self.stmt = None # Break_statementContext
            self.copyFrom(ctx)

        def break_statement(self):
            return self.getTypedRuleContext(MParser.Break_statementContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBreakStatement" ):
                listener.enterBreakStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBreakStatement" ):
                listener.exitBreakStatement(self)


    class AssignInstanceStatementContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MParser.StatementContext
            super().__init__(parser)
            self.stmt = None # Assign_instance_statementContext
            self.copyFrom(ctx)

        def assign_instance_statement(self):
            return self.getTypedRuleContext(MParser.Assign_instance_statementContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignInstanceStatement" ):
                listener.enterAssignInstanceStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignInstanceStatement" ):
                listener.exitAssignInstanceStatement(self)


    class IfStatementContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MParser.StatementContext
            super().__init__(parser)
            self.stmt = None # If_statementContext
            self.copyFrom(ctx)

        def if_statement(self):
            return self.getTypedRuleContext(MParser.If_statementContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIfStatement" ):
                listener.enterIfStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIfStatement" ):
                listener.exitIfStatement(self)


    class SwitchStatementContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MParser.StatementContext
            super().__init__(parser)
            self.stmt = None # Switch_statementContext
            self.copyFrom(ctx)

        def switch_statement(self):
            return self.getTypedRuleContext(MParser.Switch_statementContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSwitchStatement" ):
                listener.enterSwitchStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSwitchStatement" ):
                listener.exitSwitchStatement(self)


    class TryStatementContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MParser.StatementContext
            super().__init__(parser)
            self.stmt = None # Try_statementContext
            self.copyFrom(ctx)

        def try_statement(self):
            return self.getTypedRuleContext(MParser.Try_statementContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTryStatement" ):
                listener.enterTryStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTryStatement" ):
                listener.exitTryStatement(self)


    class MethodCallStatementContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MParser.StatementContext
            super().__init__(parser)
            self.stmt = None # Method_call_statementContext
            self.copyFrom(ctx)

        def method_call_statement(self):
            return self.getTypedRuleContext(MParser.Method_call_statementContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMethodCallStatement" ):
                listener.enterMethodCallStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMethodCallStatement" ):
                listener.exitMethodCallStatement(self)


    class ReturnStatementContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MParser.StatementContext
            super().__init__(parser)
            self.stmt = None # Return_statementContext
            self.copyFrom(ctx)

        def return_statement(self):
            return self.getTypedRuleContext(MParser.Return_statementContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReturnStatement" ):
                listener.enterReturnStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReturnStatement" ):
                listener.exitReturnStatement(self)


    class AssignTupleStatementContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MParser.StatementContext
            super().__init__(parser)
            self.stmt = None # Assign_tuple_statementContext
            self.copyFrom(ctx)

        def assign_tuple_statement(self):
            return self.getTypedRuleContext(MParser.Assign_tuple_statementContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignTupleStatement" ):
                listener.enterAssignTupleStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignTupleStatement" ):
                listener.exitAssignTupleStatement(self)


    class ClosureStatementContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MParser.StatementContext
            super().__init__(parser)
            self.decl = None # Concrete_method_declarationContext
            self.copyFrom(ctx)

        def concrete_method_declaration(self):
            return self.getTypedRuleContext(MParser.Concrete_method_declarationContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClosureStatement" ):
                listener.enterClosureStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClosureStatement" ):
                listener.exitClosureStatement(self)


    class FlushStatementContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MParser.StatementContext
            super().__init__(parser)
            self.stmt = None # Flush_statementContext
            self.copyFrom(ctx)

        def flush_statement(self):
            return self.getTypedRuleContext(MParser.Flush_statementContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFlushStatement" ):
                listener.enterFlushStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFlushStatement" ):
                listener.exitFlushStatement(self)


    class DoWhileStatementContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MParser.StatementContext
            super().__init__(parser)
            self.stmt = None # Do_while_statementContext
            self.copyFrom(ctx)

        def do_while_statement(self):
            return self.getTypedRuleContext(MParser.Do_while_statementContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDoWhileStatement" ):
                listener.enterDoWhileStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDoWhileStatement" ):
                listener.exitDoWhileStatement(self)


    class ForEachStatementContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MParser.StatementContext
            super().__init__(parser)
            self.stmt = None # For_each_statementContext
            self.copyFrom(ctx)

        def for_each_statement(self):
            return self.getTypedRuleContext(MParser.For_each_statementContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForEachStatement" ):
                listener.enterForEachStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForEachStatement" ):
                listener.exitForEachStatement(self)



    def statement(self):

        localctx = MParser.StatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_statement)
        try:
            self.state = 856
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,36,self._ctx)
            if la_ == 1:
                localctx = MParser.MethodCallStatementContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 836
                localctx.stmt = self.method_call_statement()
                pass

            elif la_ == 2:
                localctx = MParser.AssignInstanceStatementContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 837
                localctx.stmt = self.assign_instance_statement()
                pass

            elif la_ == 3:
                localctx = MParser.AssignTupleStatementContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 838
                localctx.stmt = self.assign_tuple_statement()
                pass

            elif la_ == 4:
                localctx = MParser.StoreStatementContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 839
                localctx.stmt = self.store_statement()
                pass

            elif la_ == 5:
                localctx = MParser.FetchStatementContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 840
                localctx.stmt = self.fetch_statement()
                pass

            elif la_ == 6:
                localctx = MParser.FlushStatementContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 841
                localctx.stmt = self.flush_statement()
                pass

            elif la_ == 7:
                localctx = MParser.BreakStatementContext(self, localctx)
                self.enterOuterAlt(localctx, 7)
                self.state = 842
                localctx.stmt = self.break_statement()
                pass

            elif la_ == 8:
                localctx = MParser.ReturnStatementContext(self, localctx)
                self.enterOuterAlt(localctx, 8)
                self.state = 843
                localctx.stmt = self.return_statement()
                pass

            elif la_ == 9:
                localctx = MParser.IfStatementContext(self, localctx)
                self.enterOuterAlt(localctx, 9)
                self.state = 844
                localctx.stmt = self.if_statement()
                pass

            elif la_ == 10:
                localctx = MParser.SwitchStatementContext(self, localctx)
                self.enterOuterAlt(localctx, 10)
                self.state = 845
                localctx.stmt = self.switch_statement()
                pass

            elif la_ == 11:
                localctx = MParser.ForEachStatementContext(self, localctx)
                self.enterOuterAlt(localctx, 11)
                self.state = 846
                localctx.stmt = self.for_each_statement()
                pass

            elif la_ == 12:
                localctx = MParser.WhileStatementContext(self, localctx)
                self.enterOuterAlt(localctx, 12)
                self.state = 847
                localctx.stmt = self.while_statement()
                pass

            elif la_ == 13:
                localctx = MParser.DoWhileStatementContext(self, localctx)
                self.enterOuterAlt(localctx, 13)
                self.state = 848
                localctx.stmt = self.do_while_statement()
                pass

            elif la_ == 14:
                localctx = MParser.RaiseStatementContext(self, localctx)
                self.enterOuterAlt(localctx, 14)
                self.state = 849
                localctx.stmt = self.raise_statement()
                pass

            elif la_ == 15:
                localctx = MParser.TryStatementContext(self, localctx)
                self.enterOuterAlt(localctx, 15)
                self.state = 850
                localctx.stmt = self.try_statement()
                pass

            elif la_ == 16:
                localctx = MParser.WriteStatementContext(self, localctx)
                self.enterOuterAlt(localctx, 16)
                self.state = 851
                localctx.stmt = self.write_statement()
                pass

            elif la_ == 17:
                localctx = MParser.WithResourceStatementContext(self, localctx)
                self.enterOuterAlt(localctx, 17)
                self.state = 852
                localctx.stmt = self.with_resource_statement()
                pass

            elif la_ == 18:
                localctx = MParser.WithSingletonStatementContext(self, localctx)
                self.enterOuterAlt(localctx, 18)
                self.state = 853
                localctx.stmt = self.with_singleton_statement()
                pass

            elif la_ == 19:
                localctx = MParser.ClosureStatementContext(self, localctx)
                self.enterOuterAlt(localctx, 19)
                self.state = 854
                localctx.decl = self.concrete_method_declaration()
                pass

            elif la_ == 20:
                localctx = MParser.CommentStatementContext(self, localctx)
                self.enterOuterAlt(localctx, 20)
                self.state = 855
                localctx.decl = self.comment_statement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Flush_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FLUSH(self):
            return self.getToken(MParser.FLUSH, 0)

        def LPAR(self):
            return self.getToken(MParser.LPAR, 0)

        def RPAR(self):
            return self.getToken(MParser.RPAR, 0)

        def getRuleIndex(self):
            return MParser.RULE_flush_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFlush_statement" ):
                listener.enterFlush_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFlush_statement" ):
                listener.exitFlush_statement(self)




    def flush_statement(self):

        localctx = MParser.Flush_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_flush_statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 858
            self.match(MParser.FLUSH)
            self.state = 859
            self.match(MParser.LPAR)
            self.state = 860
            self.match(MParser.RPAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Store_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.to_del = None # Expression_listContext
            self.to_add = None # Expression_listContext
            self.stmts = None # Statement_listContext

        def DELETE(self):
            return self.getToken(MParser.DELETE, 0)

        def LPAR(self, i:int=None):
            if i is None:
                return self.getTokens(MParser.LPAR)
            else:
                return self.getToken(MParser.LPAR, i)

        def RPAR(self, i:int=None):
            if i is None:
                return self.getTokens(MParser.RPAR)
            else:
                return self.getToken(MParser.RPAR, i)

        def STORE(self):
            return self.getToken(MParser.STORE, 0)

        def expression_list(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MParser.Expression_listContext)
            else:
                return self.getTypedRuleContext(MParser.Expression_listContext,i)


        def THEN(self):
            return self.getToken(MParser.THEN, 0)

        def COLON(self):
            return self.getToken(MParser.COLON, 0)

        def indent(self):
            return self.getTypedRuleContext(MParser.IndentContext,0)


        def dedent(self):
            return self.getTypedRuleContext(MParser.DedentContext,0)


        def statement_list(self):
            return self.getTypedRuleContext(MParser.Statement_listContext,0)


        def AND(self):
            return self.getToken(MParser.AND, 0)

        def getRuleIndex(self):
            return MParser.RULE_store_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStore_statement" ):
                listener.enterStore_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStore_statement" ):
                listener.exitStore_statement(self)




    def store_statement(self):

        localctx = MParser.Store_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_store_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 879
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MParser.DELETE]:
                self.state = 862
                self.match(MParser.DELETE)
                self.state = 863
                self.match(MParser.LPAR)
                self.state = 864
                localctx.to_del = self.expression_list()
                self.state = 865
                self.match(MParser.RPAR)
                self.state = 872
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MParser.AND:
                    self.state = 866
                    self.match(MParser.AND)
                    self.state = 867
                    self.match(MParser.STORE)
                    self.state = 868
                    self.match(MParser.LPAR)
                    self.state = 869
                    localctx.to_add = self.expression_list()
                    self.state = 870
                    self.match(MParser.RPAR)


                pass
            elif token in [MParser.STORE]:
                self.state = 874
                self.match(MParser.STORE)
                self.state = 875
                self.match(MParser.LPAR)
                self.state = 876
                localctx.to_add = self.expression_list()
                self.state = 877
                self.match(MParser.RPAR)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 887
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MParser.THEN:
                self.state = 881
                self.match(MParser.THEN)
                self.state = 882
                self.match(MParser.COLON)
                self.state = 883
                self.indent()
                self.state = 884
                localctx.stmts = self.statement_list()
                self.state = 885
                self.dedent()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Method_call_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # Method_identifierContext
            self.args = None # Argument_assignment_listContext

        def LPAR(self):
            return self.getToken(MParser.LPAR, 0)

        def RPAR(self):
            return self.getToken(MParser.RPAR, 0)

        def method_identifier(self):
            return self.getTypedRuleContext(MParser.Method_identifierContext,0)


        def argument_assignment_list(self):
            return self.getTypedRuleContext(MParser.Argument_assignment_listContext,0)


        def getRuleIndex(self):
            return MParser.RULE_method_call_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMethod_call_expression" ):
                listener.enterMethod_call_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMethod_call_expression" ):
                listener.exitMethod_call_expression(self)




    def method_call_expression(self):

        localctx = MParser.Method_call_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_method_call_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 889
            localctx.name = self.method_identifier()
            self.state = 890
            self.match(MParser.LPAR)
            self.state = 892
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << MParser.LPAR) | (1 << MParser.LBRAK) | (1 << MParser.LCURL) | (1 << MParser.MINUS) | (1 << MParser.LT) | (1 << MParser.LTGT) | (1 << MParser.LTCOLONGT) | (1 << MParser.CODE))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (MParser.DOCUMENT - 64)) | (1 << (MParser.BLOB - 64)) | (1 << (MParser.EXECUTE - 64)) | (1 << (MParser.FETCH - 64)) | (1 << (MParser.MUTABLE - 64)) | (1 << (MParser.NONE - 64)) | (1 << (MParser.NOT - 64)))) != 0) or ((((_la - 137)) & ~0x3f) == 0 and ((1 << (_la - 137)) & ((1 << (MParser.READ - 137)) | (1 << (MParser.SELF - 137)) | (1 << (MParser.SORTED - 137)) | (1 << (MParser.THIS - 137)) | (1 << (MParser.BOOLEAN_LITERAL - 137)) | (1 << (MParser.CHAR_LITERAL - 137)) | (1 << (MParser.MIN_INTEGER - 137)) | (1 << (MParser.MAX_INTEGER - 137)) | (1 << (MParser.SYMBOL_IDENTIFIER - 137)) | (1 << (MParser.TYPE_IDENTIFIER - 137)) | (1 << (MParser.VARIABLE_IDENTIFIER - 137)) | (1 << (MParser.TEXT_LITERAL - 137)) | (1 << (MParser.UUID_LITERAL - 137)) | (1 << (MParser.INTEGER_LITERAL - 137)) | (1 << (MParser.HEXA_LITERAL - 137)) | (1 << (MParser.DECIMAL_LITERAL - 137)) | (1 << (MParser.DATETIME_LITERAL - 137)) | (1 << (MParser.TIME_LITERAL - 137)) | (1 << (MParser.DATE_LITERAL - 137)) | (1 << (MParser.PERIOD_LITERAL - 137)) | (1 << (MParser.VERSION_LITERAL - 137)))) != 0):
                self.state = 891
                localctx.args = self.argument_assignment_list(0)


            self.state = 894
            self.match(MParser.RPAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Method_call_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.parent = None # Instance_expressionContext
            self.method = None # Method_call_expressionContext
            self.name = None # Variable_identifierContext
            self.stmts = None # Statement_listContext

        def method_call_expression(self):
            return self.getTypedRuleContext(MParser.Method_call_expressionContext,0)


        def DOT(self):
            return self.getToken(MParser.DOT, 0)

        def THEN(self):
            return self.getToken(MParser.THEN, 0)

        def COLON(self):
            return self.getToken(MParser.COLON, 0)

        def indent(self):
            return self.getTypedRuleContext(MParser.IndentContext,0)


        def dedent(self):
            return self.getTypedRuleContext(MParser.DedentContext,0)


        def instance_expression(self):
            return self.getTypedRuleContext(MParser.Instance_expressionContext,0)


        def statement_list(self):
            return self.getTypedRuleContext(MParser.Statement_listContext,0)


        def WITH(self):
            return self.getToken(MParser.WITH, 0)

        def variable_identifier(self):
            return self.getTypedRuleContext(MParser.Variable_identifierContext,0)


        def getRuleIndex(self):
            return MParser.RULE_method_call_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMethod_call_statement" ):
                listener.enterMethod_call_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMethod_call_statement" ):
                listener.exitMethod_call_statement(self)




    def method_call_statement(self):

        localctx = MParser.Method_call_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_method_call_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 899
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,41,self._ctx)
            if la_ == 1:
                self.state = 896
                localctx.parent = self.instance_expression(0)
                self.state = 897
                self.match(MParser.DOT)


            self.state = 901
            localctx.method = self.method_call_expression()
            self.state = 912
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MParser.THEN:
                self.state = 902
                self.match(MParser.THEN)
                self.state = 905
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MParser.WITH:
                    self.state = 903
                    self.match(MParser.WITH)
                    self.state = 904
                    localctx.name = self.variable_identifier()


                self.state = 907
                self.match(MParser.COLON)
                self.state = 908
                self.indent()
                self.state = 909
                localctx.stmts = self.statement_list()
                self.state = 910
                self.dedent()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class With_resource_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.stmt = None # Assign_variable_statementContext
            self.stmts = None # Statement_listContext

        def WITH(self):
            return self.getToken(MParser.WITH, 0)

        def COLON(self):
            return self.getToken(MParser.COLON, 0)

        def indent(self):
            return self.getTypedRuleContext(MParser.IndentContext,0)


        def dedent(self):
            return self.getTypedRuleContext(MParser.DedentContext,0)


        def assign_variable_statement(self):
            return self.getTypedRuleContext(MParser.Assign_variable_statementContext,0)


        def statement_list(self):
            return self.getTypedRuleContext(MParser.Statement_listContext,0)


        def getRuleIndex(self):
            return MParser.RULE_with_resource_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWith_resource_statement" ):
                listener.enterWith_resource_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWith_resource_statement" ):
                listener.exitWith_resource_statement(self)




    def with_resource_statement(self):

        localctx = MParser.With_resource_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_with_resource_statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 914
            self.match(MParser.WITH)
            self.state = 915
            localctx.stmt = self.assign_variable_statement()
            self.state = 916
            self.match(MParser.COLON)
            self.state = 917
            self.indent()
            self.state = 918
            localctx.stmts = self.statement_list()
            self.state = 919
            self.dedent()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class With_singleton_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.typ = None # Type_identifierContext
            self.stmts = None # Statement_listContext

        def WITH(self):
            return self.getToken(MParser.WITH, 0)

        def COLON(self):
            return self.getToken(MParser.COLON, 0)

        def indent(self):
            return self.getTypedRuleContext(MParser.IndentContext,0)


        def dedent(self):
            return self.getTypedRuleContext(MParser.DedentContext,0)


        def type_identifier(self):
            return self.getTypedRuleContext(MParser.Type_identifierContext,0)


        def statement_list(self):
            return self.getTypedRuleContext(MParser.Statement_listContext,0)


        def getRuleIndex(self):
            return MParser.RULE_with_singleton_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWith_singleton_statement" ):
                listener.enterWith_singleton_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWith_singleton_statement" ):
                listener.exitWith_singleton_statement(self)




    def with_singleton_statement(self):

        localctx = MParser.With_singleton_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_with_singleton_statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 921
            self.match(MParser.WITH)
            self.state = 922
            localctx.typ = self.type_identifier()
            self.state = 923
            self.match(MParser.COLON)
            self.state = 924
            self.indent()
            self.state = 925
            localctx.stmts = self.statement_list()
            self.state = 926
            self.dedent()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Switch_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.exp = None # ExpressionContext
            self.cases = None # Switch_case_statement_listContext
            self.stmts = None # Statement_listContext

        def SWITCH(self):
            return self.getToken(MParser.SWITCH, 0)

        def ON(self):
            return self.getToken(MParser.ON, 0)

        def COLON(self, i:int=None):
            if i is None:
                return self.getTokens(MParser.COLON)
            else:
                return self.getToken(MParser.COLON, i)

        def indent(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MParser.IndentContext)
            else:
                return self.getTypedRuleContext(MParser.IndentContext,i)


        def dedent(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MParser.DedentContext)
            else:
                return self.getTypedRuleContext(MParser.DedentContext,i)


        def expression(self):
            return self.getTypedRuleContext(MParser.ExpressionContext,0)


        def switch_case_statement_list(self):
            return self.getTypedRuleContext(MParser.Switch_case_statement_listContext,0)


        def lfp(self):
            return self.getTypedRuleContext(MParser.LfpContext,0)


        def OTHERWISE(self):
            return self.getToken(MParser.OTHERWISE, 0)

        def statement_list(self):
            return self.getTypedRuleContext(MParser.Statement_listContext,0)


        def getRuleIndex(self):
            return MParser.RULE_switch_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSwitch_statement" ):
                listener.enterSwitch_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSwitch_statement" ):
                listener.exitSwitch_statement(self)




    def switch_statement(self):

        localctx = MParser.Switch_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_switch_statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 928
            self.match(MParser.SWITCH)
            self.state = 929
            self.match(MParser.ON)
            self.state = 930
            localctx.exp = self.expression(0)
            self.state = 931
            self.match(MParser.COLON)
            self.state = 932
            self.indent()
            self.state = 933
            localctx.cases = self.switch_case_statement_list()
            self.state = 941
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,44,self._ctx)
            if la_ == 1:
                self.state = 934
                self.lfp()
                self.state = 935
                self.match(MParser.OTHERWISE)
                self.state = 936
                self.match(MParser.COLON)
                self.state = 937
                self.indent()
                self.state = 938
                localctx.stmts = self.statement_list()
                self.state = 939
                self.dedent()


            self.state = 943
            self.dedent()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Switch_case_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return MParser.RULE_switch_case_statement

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class AtomicSwitchCaseContext(Switch_case_statementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MParser.Switch_case_statementContext
            super().__init__(parser)
            self.exp = None # Atomic_literalContext
            self.stmts = None # Statement_listContext
            self.copyFrom(ctx)

        def WHEN(self):
            return self.getToken(MParser.WHEN, 0)
        def COLON(self):
            return self.getToken(MParser.COLON, 0)
        def indent(self):
            return self.getTypedRuleContext(MParser.IndentContext,0)

        def dedent(self):
            return self.getTypedRuleContext(MParser.DedentContext,0)

        def atomic_literal(self):
            return self.getTypedRuleContext(MParser.Atomic_literalContext,0)

        def statement_list(self):
            return self.getTypedRuleContext(MParser.Statement_listContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAtomicSwitchCase" ):
                listener.enterAtomicSwitchCase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAtomicSwitchCase" ):
                listener.exitAtomicSwitchCase(self)


    class CollectionSwitchCaseContext(Switch_case_statementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MParser.Switch_case_statementContext
            super().__init__(parser)
            self.exp = None # Literal_collectionContext
            self.stmts = None # Statement_listContext
            self.copyFrom(ctx)

        def WHEN(self):
            return self.getToken(MParser.WHEN, 0)
        def IN(self):
            return self.getToken(MParser.IN, 0)
        def COLON(self):
            return self.getToken(MParser.COLON, 0)
        def indent(self):
            return self.getTypedRuleContext(MParser.IndentContext,0)

        def dedent(self):
            return self.getTypedRuleContext(MParser.DedentContext,0)

        def literal_collection(self):
            return self.getTypedRuleContext(MParser.Literal_collectionContext,0)

        def statement_list(self):
            return self.getTypedRuleContext(MParser.Statement_listContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCollectionSwitchCase" ):
                listener.enterCollectionSwitchCase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCollectionSwitchCase" ):
                listener.exitCollectionSwitchCase(self)



    def switch_case_statement(self):

        localctx = MParser.Switch_case_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_switch_case_statement)
        try:
            self.state = 960
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,45,self._ctx)
            if la_ == 1:
                localctx = MParser.AtomicSwitchCaseContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 945
                self.match(MParser.WHEN)
                self.state = 946
                localctx.exp = self.atomic_literal()
                self.state = 947
                self.match(MParser.COLON)
                self.state = 948
                self.indent()
                self.state = 949
                localctx.stmts = self.statement_list()
                self.state = 950
                self.dedent()
                pass

            elif la_ == 2:
                localctx = MParser.CollectionSwitchCaseContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 952
                self.match(MParser.WHEN)
                self.state = 953
                self.match(MParser.IN)
                self.state = 954
                localctx.exp = self.literal_collection()
                self.state = 955
                self.match(MParser.COLON)
                self.state = 956
                self.indent()
                self.state = 957
                localctx.stmts = self.statement_list()
                self.state = 958
                self.dedent()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class For_each_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name1 = None # Variable_identifierContext
            self.name2 = None # Variable_identifierContext
            self.source = None # ExpressionContext
            self.stmts = None # Statement_listContext

        def FOR(self):
            return self.getToken(MParser.FOR, 0)

        def IN(self):
            return self.getToken(MParser.IN, 0)

        def COLON(self):
            return self.getToken(MParser.COLON, 0)

        def indent(self):
            return self.getTypedRuleContext(MParser.IndentContext,0)


        def dedent(self):
            return self.getTypedRuleContext(MParser.DedentContext,0)


        def variable_identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MParser.Variable_identifierContext)
            else:
                return self.getTypedRuleContext(MParser.Variable_identifierContext,i)


        def expression(self):
            return self.getTypedRuleContext(MParser.ExpressionContext,0)


        def statement_list(self):
            return self.getTypedRuleContext(MParser.Statement_listContext,0)


        def COMMA(self):
            return self.getToken(MParser.COMMA, 0)

        def getRuleIndex(self):
            return MParser.RULE_for_each_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFor_each_statement" ):
                listener.enterFor_each_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFor_each_statement" ):
                listener.exitFor_each_statement(self)




    def for_each_statement(self):

        localctx = MParser.For_each_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_for_each_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 962
            self.match(MParser.FOR)
            self.state = 963
            localctx.name1 = self.variable_identifier()
            self.state = 966
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MParser.COMMA:
                self.state = 964
                self.match(MParser.COMMA)
                self.state = 965
                localctx.name2 = self.variable_identifier()


            self.state = 968
            self.match(MParser.IN)
            self.state = 969
            localctx.source = self.expression(0)
            self.state = 970
            self.match(MParser.COLON)
            self.state = 971
            self.indent()
            self.state = 972
            localctx.stmts = self.statement_list()
            self.state = 973
            self.dedent()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Do_while_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.stmts = None # Statement_listContext
            self.exp = None # ExpressionContext

        def DO(self):
            return self.getToken(MParser.DO, 0)

        def COLON(self):
            return self.getToken(MParser.COLON, 0)

        def indent(self):
            return self.getTypedRuleContext(MParser.IndentContext,0)


        def dedent(self):
            return self.getTypedRuleContext(MParser.DedentContext,0)


        def lfp(self):
            return self.getTypedRuleContext(MParser.LfpContext,0)


        def WHILE(self):
            return self.getToken(MParser.WHILE, 0)

        def statement_list(self):
            return self.getTypedRuleContext(MParser.Statement_listContext,0)


        def expression(self):
            return self.getTypedRuleContext(MParser.ExpressionContext,0)


        def getRuleIndex(self):
            return MParser.RULE_do_while_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDo_while_statement" ):
                listener.enterDo_while_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDo_while_statement" ):
                listener.exitDo_while_statement(self)




    def do_while_statement(self):

        localctx = MParser.Do_while_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_do_while_statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 975
            self.match(MParser.DO)
            self.state = 976
            self.match(MParser.COLON)
            self.state = 977
            self.indent()
            self.state = 978
            localctx.stmts = self.statement_list()
            self.state = 979
            self.dedent()
            self.state = 980
            self.lfp()
            self.state = 981
            self.match(MParser.WHILE)
            self.state = 982
            localctx.exp = self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class While_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.exp = None # ExpressionContext
            self.stmts = None # Statement_listContext

        def WHILE(self):
            return self.getToken(MParser.WHILE, 0)

        def COLON(self):
            return self.getToken(MParser.COLON, 0)

        def indent(self):
            return self.getTypedRuleContext(MParser.IndentContext,0)


        def dedent(self):
            return self.getTypedRuleContext(MParser.DedentContext,0)


        def expression(self):
            return self.getTypedRuleContext(MParser.ExpressionContext,0)


        def statement_list(self):
            return self.getTypedRuleContext(MParser.Statement_listContext,0)


        def getRuleIndex(self):
            return MParser.RULE_while_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhile_statement" ):
                listener.enterWhile_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhile_statement" ):
                listener.exitWhile_statement(self)




    def while_statement(self):

        localctx = MParser.While_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_while_statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 984
            self.match(MParser.WHILE)
            self.state = 985
            localctx.exp = self.expression(0)
            self.state = 986
            self.match(MParser.COLON)
            self.state = 987
            self.indent()
            self.state = 988
            localctx.stmts = self.statement_list()
            self.state = 989
            self.dedent()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class If_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.exp = None # ExpressionContext
            self.stmts = None # Statement_listContext
            self.elseIfs = None # Else_if_statement_listContext
            self.elseStmts = None # Statement_listContext

        def IF(self):
            return self.getToken(MParser.IF, 0)

        def COLON(self, i:int=None):
            if i is None:
                return self.getTokens(MParser.COLON)
            else:
                return self.getToken(MParser.COLON, i)

        def indent(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MParser.IndentContext)
            else:
                return self.getTypedRuleContext(MParser.IndentContext,i)


        def dedent(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MParser.DedentContext)
            else:
                return self.getTypedRuleContext(MParser.DedentContext,i)


        def expression(self):
            return self.getTypedRuleContext(MParser.ExpressionContext,0)


        def statement_list(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MParser.Statement_listContext)
            else:
                return self.getTypedRuleContext(MParser.Statement_listContext,i)


        def lfp(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MParser.LfpContext)
            else:
                return self.getTypedRuleContext(MParser.LfpContext,i)


        def ELSE(self):
            return self.getToken(MParser.ELSE, 0)

        def else_if_statement_list(self):
            return self.getTypedRuleContext(MParser.Else_if_statement_listContext,0)


        def getRuleIndex(self):
            return MParser.RULE_if_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIf_statement" ):
                listener.enterIf_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIf_statement" ):
                listener.exitIf_statement(self)




    def if_statement(self):

        localctx = MParser.If_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_if_statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 991
            self.match(MParser.IF)
            self.state = 992
            localctx.exp = self.expression(0)
            self.state = 993
            self.match(MParser.COLON)
            self.state = 994
            self.indent()
            self.state = 995
            localctx.stmts = self.statement_list()
            self.state = 996
            self.dedent()
            self.state = 1000
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,47,self._ctx)
            if la_ == 1:
                self.state = 997
                self.lfp()
                self.state = 998
                localctx.elseIfs = self.else_if_statement_list(0)


            self.state = 1009
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,48,self._ctx)
            if la_ == 1:
                self.state = 1002
                self.lfp()
                self.state = 1003
                self.match(MParser.ELSE)
                self.state = 1004
                self.match(MParser.COLON)
                self.state = 1005
                self.indent()
                self.state = 1006
                localctx.elseStmts = self.statement_list()
                self.state = 1007
                self.dedent()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Else_if_statement_listContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return MParser.RULE_else_if_statement_list

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class ElseIfStatementListContext(Else_if_statement_listContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MParser.Else_if_statement_listContext
            super().__init__(parser)
            self.exp = None # ExpressionContext
            self.stmts = None # Statement_listContext
            self.copyFrom(ctx)

        def ELSE(self):
            return self.getToken(MParser.ELSE, 0)
        def IF(self):
            return self.getToken(MParser.IF, 0)
        def COLON(self):
            return self.getToken(MParser.COLON, 0)
        def indent(self):
            return self.getTypedRuleContext(MParser.IndentContext,0)

        def dedent(self):
            return self.getTypedRuleContext(MParser.DedentContext,0)

        def expression(self):
            return self.getTypedRuleContext(MParser.ExpressionContext,0)

        def statement_list(self):
            return self.getTypedRuleContext(MParser.Statement_listContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElseIfStatementList" ):
                listener.enterElseIfStatementList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElseIfStatementList" ):
                listener.exitElseIfStatementList(self)


    class ElseIfStatementListItemContext(Else_if_statement_listContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MParser.Else_if_statement_listContext
            super().__init__(parser)
            self.items = None # Else_if_statement_listContext
            self.exp = None # ExpressionContext
            self.stmts = None # Statement_listContext
            self.copyFrom(ctx)

        def lfp(self):
            return self.getTypedRuleContext(MParser.LfpContext,0)

        def ELSE(self):
            return self.getToken(MParser.ELSE, 0)
        def IF(self):
            return self.getToken(MParser.IF, 0)
        def COLON(self):
            return self.getToken(MParser.COLON, 0)
        def indent(self):
            return self.getTypedRuleContext(MParser.IndentContext,0)

        def dedent(self):
            return self.getTypedRuleContext(MParser.DedentContext,0)

        def else_if_statement_list(self):
            return self.getTypedRuleContext(MParser.Else_if_statement_listContext,0)

        def expression(self):
            return self.getTypedRuleContext(MParser.ExpressionContext,0)

        def statement_list(self):
            return self.getTypedRuleContext(MParser.Statement_listContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElseIfStatementListItem" ):
                listener.enterElseIfStatementListItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElseIfStatementListItem" ):
                listener.exitElseIfStatementListItem(self)



    def else_if_statement_list(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = MParser.Else_if_statement_listContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 78
        self.enterRecursionRule(localctx, 78, self.RULE_else_if_statement_list, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            localctx = MParser.ElseIfStatementListContext(self, localctx)
            self._ctx = localctx
            _prevctx = localctx

            self.state = 1012
            self.match(MParser.ELSE)
            self.state = 1013
            self.match(MParser.IF)
            self.state = 1014
            localctx.exp = self.expression(0)
            self.state = 1015
            self.match(MParser.COLON)
            self.state = 1016
            self.indent()
            self.state = 1017
            localctx.stmts = self.statement_list()
            self.state = 1018
            self.dedent()
            self._ctx.stop = self._input.LT(-1)
            self.state = 1032
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,49,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = MParser.ElseIfStatementListItemContext(self, MParser.Else_if_statement_listContext(self, _parentctx, _parentState))
                    localctx.items = _prevctx
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_else_if_statement_list)
                    self.state = 1020
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 1021
                    self.lfp()
                    self.state = 1022
                    self.match(MParser.ELSE)
                    self.state = 1023
                    self.match(MParser.IF)
                    self.state = 1024
                    localctx.exp = self.expression(0)
                    self.state = 1025
                    self.match(MParser.COLON)
                    self.state = 1026
                    self.indent()
                    self.state = 1027
                    localctx.stmts = self.statement_list()
                    self.state = 1028
                    self.dedent() 
                self.state = 1034
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,49,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class Raise_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.exp = None # ExpressionContext

        def RAISE(self):
            return self.getToken(MParser.RAISE, 0)

        def expression(self):
            return self.getTypedRuleContext(MParser.ExpressionContext,0)


        def getRuleIndex(self):
            return MParser.RULE_raise_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRaise_statement" ):
                listener.enterRaise_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRaise_statement" ):
                listener.exitRaise_statement(self)




    def raise_statement(self):

        localctx = MParser.Raise_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_raise_statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1035
            self.match(MParser.RAISE)
            self.state = 1036
            localctx.exp = self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Try_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # Variable_identifierContext
            self.stmts = None # Statement_listContext
            self.handlers = None # Catch_statement_listContext
            self.anyStmts = None # Statement_listContext
            self.finalStmts = None # Statement_listContext

        def TRY(self):
            return self.getToken(MParser.TRY, 0)

        def COLON(self, i:int=None):
            if i is None:
                return self.getTokens(MParser.COLON)
            else:
                return self.getToken(MParser.COLON, i)

        def indent(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MParser.IndentContext)
            else:
                return self.getTypedRuleContext(MParser.IndentContext,i)


        def dedent(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MParser.DedentContext)
            else:
                return self.getTypedRuleContext(MParser.DedentContext,i)


        def lfs(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MParser.LfsContext)
            else:
                return self.getTypedRuleContext(MParser.LfsContext,i)


        def variable_identifier(self):
            return self.getTypedRuleContext(MParser.Variable_identifierContext,0)


        def statement_list(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MParser.Statement_listContext)
            else:
                return self.getTypedRuleContext(MParser.Statement_listContext,i)


        def EXCEPT(self):
            return self.getToken(MParser.EXCEPT, 0)

        def FINALLY(self):
            return self.getToken(MParser.FINALLY, 0)

        def catch_statement_list(self):
            return self.getTypedRuleContext(MParser.Catch_statement_listContext,0)


        def getRuleIndex(self):
            return MParser.RULE_try_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTry_statement" ):
                listener.enterTry_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTry_statement" ):
                listener.exitTry_statement(self)




    def try_statement(self):

        localctx = MParser.Try_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_try_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1038
            self.match(MParser.TRY)
            self.state = 1039
            localctx.name = self.variable_identifier()
            self.state = 1040
            self.match(MParser.COLON)
            self.state = 1041
            self.indent()
            self.state = 1042
            localctx.stmts = self.statement_list()
            self.state = 1043
            self.dedent()
            self.state = 1044
            self.lfs()
            self.state = 1046
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,50,self._ctx)
            if la_ == 1:
                self.state = 1045
                localctx.handlers = self.catch_statement_list()


            self.state = 1055
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MParser.EXCEPT:
                self.state = 1048
                self.match(MParser.EXCEPT)
                self.state = 1049
                self.match(MParser.COLON)
                self.state = 1050
                self.indent()
                self.state = 1051
                localctx.anyStmts = self.statement_list()
                self.state = 1052
                self.dedent()
                self.state = 1053
                self.lfs()


            self.state = 1064
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MParser.FINALLY:
                self.state = 1057
                self.match(MParser.FINALLY)
                self.state = 1058
                self.match(MParser.COLON)
                self.state = 1059
                self.indent()
                self.state = 1060
                localctx.finalStmts = self.statement_list()
                self.state = 1061
                self.dedent()
                self.state = 1062
                self.lfs()


            self.state = 1066
            self.lfs()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Catch_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return MParser.RULE_catch_statement

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class CatchAtomicStatementContext(Catch_statementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MParser.Catch_statementContext
            super().__init__(parser)
            self.name = None # Symbol_identifierContext
            self.stmts = None # Statement_listContext
            self.copyFrom(ctx)

        def EXCEPT(self):
            return self.getToken(MParser.EXCEPT, 0)
        def COLON(self):
            return self.getToken(MParser.COLON, 0)
        def indent(self):
            return self.getTypedRuleContext(MParser.IndentContext,0)

        def dedent(self):
            return self.getTypedRuleContext(MParser.DedentContext,0)

        def lfs(self):
            return self.getTypedRuleContext(MParser.LfsContext,0)

        def symbol_identifier(self):
            return self.getTypedRuleContext(MParser.Symbol_identifierContext,0)

        def statement_list(self):
            return self.getTypedRuleContext(MParser.Statement_listContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCatchAtomicStatement" ):
                listener.enterCatchAtomicStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCatchAtomicStatement" ):
                listener.exitCatchAtomicStatement(self)


    class CatchCollectionStatementContext(Catch_statementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MParser.Catch_statementContext
            super().__init__(parser)
            self.exp = None # Symbol_listContext
            self.stmts = None # Statement_listContext
            self.copyFrom(ctx)

        def EXCEPT(self):
            return self.getToken(MParser.EXCEPT, 0)
        def IN(self):
            return self.getToken(MParser.IN, 0)
        def LBRAK(self):
            return self.getToken(MParser.LBRAK, 0)
        def RBRAK(self):
            return self.getToken(MParser.RBRAK, 0)
        def COLON(self):
            return self.getToken(MParser.COLON, 0)
        def indent(self):
            return self.getTypedRuleContext(MParser.IndentContext,0)

        def dedent(self):
            return self.getTypedRuleContext(MParser.DedentContext,0)

        def lfs(self):
            return self.getTypedRuleContext(MParser.LfsContext,0)

        def symbol_list(self):
            return self.getTypedRuleContext(MParser.Symbol_listContext,0)

        def statement_list(self):
            return self.getTypedRuleContext(MParser.Statement_listContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCatchCollectionStatement" ):
                listener.enterCatchCollectionStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCatchCollectionStatement" ):
                listener.exitCatchCollectionStatement(self)



    def catch_statement(self):

        localctx = MParser.Catch_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_catch_statement)
        try:
            self.state = 1087
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,53,self._ctx)
            if la_ == 1:
                localctx = MParser.CatchAtomicStatementContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1068
                self.match(MParser.EXCEPT)
                self.state = 1069
                localctx.name = self.symbol_identifier()
                self.state = 1070
                self.match(MParser.COLON)
                self.state = 1071
                self.indent()
                self.state = 1072
                localctx.stmts = self.statement_list()
                self.state = 1073
                self.dedent()
                self.state = 1074
                self.lfs()
                pass

            elif la_ == 2:
                localctx = MParser.CatchCollectionStatementContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1076
                self.match(MParser.EXCEPT)
                self.state = 1077
                self.match(MParser.IN)
                self.state = 1078
                self.match(MParser.LBRAK)
                self.state = 1079
                localctx.exp = self.symbol_list()
                self.state = 1080
                self.match(MParser.RBRAK)
                self.state = 1081
                self.match(MParser.COLON)
                self.state = 1082
                self.indent()
                self.state = 1083
                localctx.stmts = self.statement_list()
                self.state = 1084
                self.dedent()
                self.state = 1085
                self.lfs()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Break_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BREAK(self):
            return self.getToken(MParser.BREAK, 0)

        def getRuleIndex(self):
            return MParser.RULE_break_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBreak_statement" ):
                listener.enterBreak_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBreak_statement" ):
                listener.exitBreak_statement(self)




    def break_statement(self):

        localctx = MParser.Break_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_break_statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1089
            self.match(MParser.BREAK)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Return_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.exp = None # ExpressionContext

        def RETURN(self):
            return self.getToken(MParser.RETURN, 0)

        def expression(self):
            return self.getTypedRuleContext(MParser.ExpressionContext,0)


        def getRuleIndex(self):
            return MParser.RULE_return_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReturn_statement" ):
                listener.enterReturn_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReturn_statement" ):
                listener.exitReturn_statement(self)




    def return_statement(self):

        localctx = MParser.Return_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_return_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1091
            self.match(MParser.RETURN)
            self.state = 1093
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << MParser.LPAR) | (1 << MParser.LBRAK) | (1 << MParser.LCURL) | (1 << MParser.MINUS) | (1 << MParser.LT) | (1 << MParser.LTGT) | (1 << MParser.LTCOLONGT) | (1 << MParser.CODE))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (MParser.DOCUMENT - 64)) | (1 << (MParser.BLOB - 64)) | (1 << (MParser.EXECUTE - 64)) | (1 << (MParser.FETCH - 64)) | (1 << (MParser.MUTABLE - 64)) | (1 << (MParser.NONE - 64)) | (1 << (MParser.NOT - 64)))) != 0) or ((((_la - 137)) & ~0x3f) == 0 and ((1 << (_la - 137)) & ((1 << (MParser.READ - 137)) | (1 << (MParser.SELF - 137)) | (1 << (MParser.SORTED - 137)) | (1 << (MParser.THIS - 137)) | (1 << (MParser.BOOLEAN_LITERAL - 137)) | (1 << (MParser.CHAR_LITERAL - 137)) | (1 << (MParser.MIN_INTEGER - 137)) | (1 << (MParser.MAX_INTEGER - 137)) | (1 << (MParser.SYMBOL_IDENTIFIER - 137)) | (1 << (MParser.TYPE_IDENTIFIER - 137)) | (1 << (MParser.VARIABLE_IDENTIFIER - 137)) | (1 << (MParser.TEXT_LITERAL - 137)) | (1 << (MParser.UUID_LITERAL - 137)) | (1 << (MParser.INTEGER_LITERAL - 137)) | (1 << (MParser.HEXA_LITERAL - 137)) | (1 << (MParser.DECIMAL_LITERAL - 137)) | (1 << (MParser.DATETIME_LITERAL - 137)) | (1 << (MParser.TIME_LITERAL - 137)) | (1 << (MParser.DATE_LITERAL - 137)) | (1 << (MParser.PERIOD_LITERAL - 137)) | (1 << (MParser.VERSION_LITERAL - 137)))) != 0):
                self.state = 1092
                localctx.exp = self.expression(0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return MParser.RULE_expression

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class IntDivideExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MParser.ExpressionContext
            super().__init__(parser)
            self.left = None # ExpressionContext
            self.right = None # ExpressionContext
            self.copyFrom(ctx)

        def idivide(self):
            return self.getTypedRuleContext(MParser.IdivideContext,0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(MParser.ExpressionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIntDivideExpression" ):
                listener.enterIntDivideExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIntDivideExpression" ):
                listener.exitIntDivideExpression(self)


    class HasAnyExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MParser.ExpressionContext
            super().__init__(parser)
            self.left = None # ExpressionContext
            self.right = None # ExpressionContext
            self.copyFrom(ctx)

        def HAS(self):
            return self.getToken(MParser.HAS, 0)
        def ANY(self):
            return self.getToken(MParser.ANY, 0)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(MParser.ExpressionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHasAnyExpression" ):
                listener.enterHasAnyExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHasAnyExpression" ):
                listener.exitHasAnyExpression(self)


    class HasExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MParser.ExpressionContext
            super().__init__(parser)
            self.left = None # ExpressionContext
            self.right = None # ExpressionContext
            self.copyFrom(ctx)

        def HAS(self):
            return self.getToken(MParser.HAS, 0)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(MParser.ExpressionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHasExpression" ):
                listener.enterHasExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHasExpression" ):
                listener.exitHasExpression(self)


    class TernaryExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MParser.ExpressionContext
            super().__init__(parser)
            self.ifTrue = None # ExpressionContext
            self.test = None # ExpressionContext
            self.ifFalse = None # ExpressionContext
            self.copyFrom(ctx)

        def IF(self):
            return self.getToken(MParser.IF, 0)
        def ELSE(self):
            return self.getToken(MParser.ELSE, 0)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(MParser.ExpressionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTernaryExpression" ):
                listener.enterTernaryExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTernaryExpression" ):
                listener.exitTernaryExpression(self)


    class NotEqualsExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MParser.ExpressionContext
            super().__init__(parser)
            self.left = None # ExpressionContext
            self.right = None # ExpressionContext
            self.copyFrom(ctx)

        def XEQ(self):
            return self.getToken(MParser.XEQ, 0)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(MParser.ExpressionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNotEqualsExpression" ):
                listener.enterNotEqualsExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNotEqualsExpression" ):
                listener.exitNotEqualsExpression(self)


    class InExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MParser.ExpressionContext
            super().__init__(parser)
            self.left = None # ExpressionContext
            self.right = None # ExpressionContext
            self.copyFrom(ctx)

        def IN(self):
            return self.getToken(MParser.IN, 0)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(MParser.ExpressionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInExpression" ):
                listener.enterInExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInExpression" ):
                listener.exitInExpression(self)


    class JsxExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MParser.ExpressionContext
            super().__init__(parser)
            self.exp = None # Jsx_expressionContext
            self.copyFrom(ctx)

        def jsx_expression(self):
            return self.getTypedRuleContext(MParser.Jsx_expressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJsxExpression" ):
                listener.enterJsxExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJsxExpression" ):
                listener.exitJsxExpression(self)


    class NotExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MParser.ExpressionContext
            super().__init__(parser)
            self.exp = None # ExpressionContext
            self.copyFrom(ctx)

        def NOT(self):
            return self.getToken(MParser.NOT, 0)
        def expression(self):
            return self.getTypedRuleContext(MParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNotExpression" ):
                listener.enterNotExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNotExpression" ):
                listener.exitNotExpression(self)


    class GreaterThanExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MParser.ExpressionContext
            super().__init__(parser)
            self.left = None # ExpressionContext
            self.right = None # ExpressionContext
            self.copyFrom(ctx)

        def GT(self):
            return self.getToken(MParser.GT, 0)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(MParser.ExpressionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGreaterThanExpression" ):
                listener.enterGreaterThanExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGreaterThanExpression" ):
                listener.exitGreaterThanExpression(self)


    class OrExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MParser.ExpressionContext
            super().__init__(parser)
            self.left = None # ExpressionContext
            self.right = None # ExpressionContext
            self.copyFrom(ctx)

        def OR(self):
            return self.getToken(MParser.OR, 0)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(MParser.ExpressionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOrExpression" ):
                listener.enterOrExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOrExpression" ):
                listener.exitOrExpression(self)


    class CodeExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MParser.ExpressionContext
            super().__init__(parser)
            self.exp = None # ExpressionContext
            self.copyFrom(ctx)

        def CODE(self):
            return self.getToken(MParser.CODE, 0)
        def LPAR(self):
            return self.getToken(MParser.LPAR, 0)
        def RPAR(self):
            return self.getToken(MParser.RPAR, 0)
        def expression(self):
            return self.getTypedRuleContext(MParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCodeExpression" ):
                listener.enterCodeExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCodeExpression" ):
                listener.exitCodeExpression(self)


    class LessThanOrEqualExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MParser.ExpressionContext
            super().__init__(parser)
            self.left = None # ExpressionContext
            self.right = None # ExpressionContext
            self.copyFrom(ctx)

        def LTE(self):
            return self.getToken(MParser.LTE, 0)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(MParser.ExpressionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLessThanOrEqualExpression" ):
                listener.enterLessThanOrEqualExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLessThanOrEqualExpression" ):
                listener.exitLessThanOrEqualExpression(self)


    class NotHasAnyExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MParser.ExpressionContext
            super().__init__(parser)
            self.left = None # ExpressionContext
            self.right = None # ExpressionContext
            self.copyFrom(ctx)

        def NOT(self):
            return self.getToken(MParser.NOT, 0)
        def HAS(self):
            return self.getToken(MParser.HAS, 0)
        def ANY(self):
            return self.getToken(MParser.ANY, 0)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(MParser.ExpressionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNotHasAnyExpression" ):
                listener.enterNotHasAnyExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNotHasAnyExpression" ):
                listener.exitNotHasAnyExpression(self)


    class AndExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MParser.ExpressionContext
            super().__init__(parser)
            self.left = None # ExpressionContext
            self.right = None # ExpressionContext
            self.copyFrom(ctx)

        def AND(self):
            return self.getToken(MParser.AND, 0)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(MParser.ExpressionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAndExpression" ):
                listener.enterAndExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAndExpression" ):
                listener.exitAndExpression(self)


    class ArrowExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MParser.ExpressionContext
            super().__init__(parser)
            self.exp = None # Arrow_expressionContext
            self.copyFrom(ctx)

        def arrow_expression(self):
            return self.getTypedRuleContext(MParser.Arrow_expressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArrowExpression" ):
                listener.enterArrowExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArrowExpression" ):
                listener.exitArrowExpression(self)


    class NotHasExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MParser.ExpressionContext
            super().__init__(parser)
            self.left = None # ExpressionContext
            self.right = None # ExpressionContext
            self.copyFrom(ctx)

        def NOT(self):
            return self.getToken(MParser.NOT, 0)
        def HAS(self):
            return self.getToken(MParser.HAS, 0)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(MParser.ExpressionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNotHasExpression" ):
                listener.enterNotHasExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNotHasExpression" ):
                listener.exitNotHasExpression(self)


    class ClosureExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MParser.ExpressionContext
            super().__init__(parser)
            self.exp = None # Closure_expressionContext
            self.copyFrom(ctx)

        def closure_expression(self):
            return self.getTypedRuleContext(MParser.Closure_expressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClosureExpression" ):
                listener.enterClosureExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClosureExpression" ):
                listener.exitClosureExpression(self)


    class NotHasAllExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MParser.ExpressionContext
            super().__init__(parser)
            self.left = None # ExpressionContext
            self.right = None # ExpressionContext
            self.copyFrom(ctx)

        def NOT(self):
            return self.getToken(MParser.NOT, 0)
        def HAS(self):
            return self.getToken(MParser.HAS, 0)
        def ALL(self):
            return self.getToken(MParser.ALL, 0)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(MParser.ExpressionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNotHasAllExpression" ):
                listener.enterNotHasAllExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNotHasAllExpression" ):
                listener.exitNotHasAllExpression(self)


    class ContainsExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MParser.ExpressionContext
            super().__init__(parser)
            self.left = None # ExpressionContext
            self.right = None # ExpressionContext
            self.copyFrom(ctx)

        def CONTAINS(self):
            return self.getToken(MParser.CONTAINS, 0)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(MParser.ExpressionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterContainsExpression" ):
                listener.enterContainsExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitContainsExpression" ):
                listener.exitContainsExpression(self)


    class FilteredListExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MParser.ExpressionContext
            super().__init__(parser)
            self.src = None # ExpressionContext
            self.copyFrom(ctx)

        def filtered_list_suffix(self):
            return self.getTypedRuleContext(MParser.Filtered_list_suffixContext,0)

        def expression(self):
            return self.getTypedRuleContext(MParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFilteredListExpression" ):
                listener.enterFilteredListExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFilteredListExpression" ):
                listener.exitFilteredListExpression(self)


    class NotContainsExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MParser.ExpressionContext
            super().__init__(parser)
            self.left = None # ExpressionContext
            self.right = None # ExpressionContext
            self.copyFrom(ctx)

        def NOT(self):
            return self.getToken(MParser.NOT, 0)
        def CONTAINS(self):
            return self.getToken(MParser.CONTAINS, 0)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(MParser.ExpressionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNotContainsExpression" ):
                listener.enterNotContainsExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNotContainsExpression" ):
                listener.exitNotContainsExpression(self)


    class MultiplyExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MParser.ExpressionContext
            super().__init__(parser)
            self.left = None # ExpressionContext
            self.right = None # ExpressionContext
            self.copyFrom(ctx)

        def multiply(self):
            return self.getTypedRuleContext(MParser.MultiplyContext,0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(MParser.ExpressionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMultiplyExpression" ):
                listener.enterMultiplyExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMultiplyExpression" ):
                listener.exitMultiplyExpression(self)


    class RoughlyEqualsExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MParser.ExpressionContext
            super().__init__(parser)
            self.left = None # ExpressionContext
            self.right = None # ExpressionContext
            self.copyFrom(ctx)

        def TEQ(self):
            return self.getToken(MParser.TEQ, 0)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(MParser.ExpressionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRoughlyEqualsExpression" ):
                listener.enterRoughlyEqualsExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRoughlyEqualsExpression" ):
                listener.exitRoughlyEqualsExpression(self)


    class ExecuteExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MParser.ExpressionContext
            super().__init__(parser)
            self.name = None # Variable_identifierContext
            self.copyFrom(ctx)

        def EXECUTE(self):
            return self.getToken(MParser.EXECUTE, 0)
        def LPAR(self):
            return self.getToken(MParser.LPAR, 0)
        def RPAR(self):
            return self.getToken(MParser.RPAR, 0)
        def variable_identifier(self):
            return self.getTypedRuleContext(MParser.Variable_identifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExecuteExpression" ):
                listener.enterExecuteExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExecuteExpression" ):
                listener.exitExecuteExpression(self)


    class GreaterThanOrEqualExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MParser.ExpressionContext
            super().__init__(parser)
            self.left = None # ExpressionContext
            self.right = None # ExpressionContext
            self.copyFrom(ctx)

        def GTE(self):
            return self.getToken(MParser.GTE, 0)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(MParser.ExpressionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGreaterThanOrEqualExpression" ):
                listener.enterGreaterThanOrEqualExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGreaterThanOrEqualExpression" ):
                listener.exitGreaterThanOrEqualExpression(self)


    class NotInExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MParser.ExpressionContext
            super().__init__(parser)
            self.left = None # ExpressionContext
            self.right = None # ExpressionContext
            self.copyFrom(ctx)

        def NOT(self):
            return self.getToken(MParser.NOT, 0)
        def IN(self):
            return self.getToken(MParser.IN, 0)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(MParser.ExpressionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNotInExpression" ):
                listener.enterNotInExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNotInExpression" ):
                listener.exitNotInExpression(self)


    class IteratorExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MParser.ExpressionContext
            super().__init__(parser)
            self.exp = None # ExpressionContext
            self.name = None # Variable_identifierContext
            self.source = None # ExpressionContext
            self.copyFrom(ctx)

        def FOR(self):
            return self.getToken(MParser.FOR, 0)
        def EACH(self):
            return self.getToken(MParser.EACH, 0)
        def IN(self):
            return self.getToken(MParser.IN, 0)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(MParser.ExpressionContext,i)

        def variable_identifier(self):
            return self.getTypedRuleContext(MParser.Variable_identifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIteratorExpression" ):
                listener.enterIteratorExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIteratorExpression" ):
                listener.exitIteratorExpression(self)


    class IsNotExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MParser.ExpressionContext
            super().__init__(parser)
            self.left = None # ExpressionContext
            self.right = None # Is_expressionContext
            self.copyFrom(ctx)

        def IS(self):
            return self.getToken(MParser.IS, 0)
        def NOT(self):
            return self.getToken(MParser.NOT, 0)
        def expression(self):
            return self.getTypedRuleContext(MParser.ExpressionContext,0)

        def is_expression(self):
            return self.getTypedRuleContext(MParser.Is_expressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIsNotExpression" ):
                listener.enterIsNotExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIsNotExpression" ):
                listener.exitIsNotExpression(self)


    class DivideExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MParser.ExpressionContext
            super().__init__(parser)
            self.left = None # ExpressionContext
            self.right = None # ExpressionContext
            self.copyFrom(ctx)

        def divide(self):
            return self.getTypedRuleContext(MParser.DivideContext,0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(MParser.ExpressionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDivideExpression" ):
                listener.enterDivideExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDivideExpression" ):
                listener.exitDivideExpression(self)


    class IsExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MParser.ExpressionContext
            super().__init__(parser)
            self.left = None # ExpressionContext
            self.right = None # Is_expressionContext
            self.copyFrom(ctx)

        def IS(self):
            return self.getToken(MParser.IS, 0)
        def expression(self):
            return self.getTypedRuleContext(MParser.ExpressionContext,0)

        def is_expression(self):
            return self.getTypedRuleContext(MParser.Is_expressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIsExpression" ):
                listener.enterIsExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIsExpression" ):
                listener.exitIsExpression(self)


    class MinusExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MParser.ExpressionContext
            super().__init__(parser)
            self.exp = None # ExpressionContext
            self.copyFrom(ctx)

        def MINUS(self):
            return self.getToken(MParser.MINUS, 0)
        def expression(self):
            return self.getTypedRuleContext(MParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMinusExpression" ):
                listener.enterMinusExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMinusExpression" ):
                listener.exitMinusExpression(self)


    class AddExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MParser.ExpressionContext
            super().__init__(parser)
            self.left = None # ExpressionContext
            self.op = None # Token
            self.right = None # ExpressionContext
            self.copyFrom(ctx)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(MParser.ExpressionContext,i)

        def PLUS(self):
            return self.getToken(MParser.PLUS, 0)
        def MINUS(self):
            return self.getToken(MParser.MINUS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAddExpression" ):
                listener.enterAddExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAddExpression" ):
                listener.exitAddExpression(self)


    class HasAllExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MParser.ExpressionContext
            super().__init__(parser)
            self.left = None # ExpressionContext
            self.right = None # ExpressionContext
            self.copyFrom(ctx)

        def HAS(self):
            return self.getToken(MParser.HAS, 0)
        def ALL(self):
            return self.getToken(MParser.ALL, 0)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(MParser.ExpressionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHasAllExpression" ):
                listener.enterHasAllExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHasAllExpression" ):
                listener.exitHasAllExpression(self)


    class InstanceExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MParser.ExpressionContext
            super().__init__(parser)
            self.exp = None # Instance_expressionContext
            self.copyFrom(ctx)

        def instance_expression(self):
            return self.getTypedRuleContext(MParser.Instance_expressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInstanceExpression" ):
                listener.enterInstanceExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInstanceExpression" ):
                listener.exitInstanceExpression(self)


    class MutableInstanceExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MParser.ExpressionContext
            super().__init__(parser)
            self.exp = None # Mutable_instance_expressionContext
            self.copyFrom(ctx)

        def mutable_instance_expression(self):
            return self.getTypedRuleContext(MParser.Mutable_instance_expressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMutableInstanceExpression" ):
                listener.enterMutableInstanceExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMutableInstanceExpression" ):
                listener.exitMutableInstanceExpression(self)


    class CssExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MParser.ExpressionContext
            super().__init__(parser)
            self.exp = None # Css_expressionContext
            self.copyFrom(ctx)

        def css_expression(self):
            return self.getTypedRuleContext(MParser.Css_expressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCssExpression" ):
                listener.enterCssExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCssExpression" ):
                listener.exitCssExpression(self)


    class CastExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MParser.ExpressionContext
            super().__init__(parser)
            self.left = None # ExpressionContext
            self.right = None # Category_or_any_typeContext
            self.copyFrom(ctx)

        def AS(self):
            return self.getToken(MParser.AS, 0)
        def expression(self):
            return self.getTypedRuleContext(MParser.ExpressionContext,0)

        def category_or_any_type(self):
            return self.getTypedRuleContext(MParser.Category_or_any_typeContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCastExpression" ):
                listener.enterCastExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCastExpression" ):
                listener.exitCastExpression(self)


    class ModuloExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MParser.ExpressionContext
            super().__init__(parser)
            self.left = None # ExpressionContext
            self.right = None # ExpressionContext
            self.copyFrom(ctx)

        def modulo(self):
            return self.getTypedRuleContext(MParser.ModuloContext,0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(MParser.ExpressionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModuloExpression" ):
                listener.enterModuloExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModuloExpression" ):
                listener.exitModuloExpression(self)


    class LessThanExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MParser.ExpressionContext
            super().__init__(parser)
            self.left = None # ExpressionContext
            self.right = None # ExpressionContext
            self.copyFrom(ctx)

        def LT(self):
            return self.getToken(MParser.LT, 0)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(MParser.ExpressionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLessThanExpression" ):
                listener.enterLessThanExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLessThanExpression" ):
                listener.exitLessThanExpression(self)


    class EqualsExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MParser.ExpressionContext
            super().__init__(parser)
            self.left = None # ExpressionContext
            self.right = None # ExpressionContext
            self.copyFrom(ctx)

        def EQ2(self):
            return self.getToken(MParser.EQ2, 0)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(MParser.ExpressionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEqualsExpression" ):
                listener.enterEqualsExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEqualsExpression" ):
                listener.exitEqualsExpression(self)



    def expression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = MParser.ExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 90
        self.enterRecursionRule(localctx, 90, self.RULE_expression, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1116
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,55,self._ctx)
            if la_ == 1:
                localctx = MParser.CssExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx

                self.state = 1096
                localctx.exp = self.css_expression()
                pass

            elif la_ == 2:
                localctx = MParser.JsxExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1097
                localctx.exp = self.jsx_expression()
                pass

            elif la_ == 3:
                localctx = MParser.InstanceExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1098
                localctx.exp = self.instance_expression(0)
                pass

            elif la_ == 4:
                localctx = MParser.MutableInstanceExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1099
                localctx.exp = self.mutable_instance_expression(0)
                pass

            elif la_ == 5:
                localctx = MParser.ArrowExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1100
                localctx.exp = self.arrow_expression()
                pass

            elif la_ == 6:
                localctx = MParser.MinusExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1101
                self.match(MParser.MINUS)
                self.state = 1102
                localctx.exp = self.expression(34)
                pass

            elif la_ == 7:
                localctx = MParser.NotExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1103
                self.match(MParser.NOT)
                self.state = 1104
                localctx.exp = self.expression(33)
                pass

            elif la_ == 8:
                localctx = MParser.CodeExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1105
                self.match(MParser.CODE)
                self.state = 1106
                self.match(MParser.LPAR)
                self.state = 1107
                localctx.exp = self.expression(0)
                self.state = 1108
                self.match(MParser.RPAR)
                pass

            elif la_ == 9:
                localctx = MParser.ExecuteExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1110
                self.match(MParser.EXECUTE)
                self.state = 1111
                self.match(MParser.LPAR)
                self.state = 1112
                localctx.name = self.variable_identifier()
                self.state = 1113
                self.match(MParser.RPAR)
                pass

            elif la_ == 10:
                localctx = MParser.ClosureExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1115
                localctx.exp = self.closure_expression()
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 1230
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,57,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 1228
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,56,self._ctx)
                    if la_ == 1:
                        localctx = MParser.MultiplyExpressionContext(self, MParser.ExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1118
                        if not self.precpred(self._ctx, 32):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 32)")
                        self.state = 1119
                        self.multiply()
                        self.state = 1120
                        localctx.right = self.expression(33)
                        pass

                    elif la_ == 2:
                        localctx = MParser.DivideExpressionContext(self, MParser.ExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1122
                        if not self.precpred(self._ctx, 31):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 31)")
                        self.state = 1123
                        self.divide()
                        self.state = 1124
                        localctx.right = self.expression(32)
                        pass

                    elif la_ == 3:
                        localctx = MParser.ModuloExpressionContext(self, MParser.ExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1126
                        if not self.precpred(self._ctx, 30):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 30)")
                        self.state = 1127
                        self.modulo()
                        self.state = 1128
                        localctx.right = self.expression(31)
                        pass

                    elif la_ == 4:
                        localctx = MParser.IntDivideExpressionContext(self, MParser.ExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1130
                        if not self.precpred(self._ctx, 29):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 29)")
                        self.state = 1131
                        self.idivide()
                        self.state = 1132
                        localctx.right = self.expression(30)
                        pass

                    elif la_ == 5:
                        localctx = MParser.AddExpressionContext(self, MParser.ExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1134
                        if not self.precpred(self._ctx, 28):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 28)")
                        self.state = 1135
                        localctx.op = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(_la==MParser.PLUS or _la==MParser.MINUS):
                            localctx.op = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1136
                        localctx.right = self.expression(29)
                        pass

                    elif la_ == 6:
                        localctx = MParser.LessThanExpressionContext(self, MParser.ExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1137
                        if not self.precpred(self._ctx, 26):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 26)")
                        self.state = 1138
                        self.match(MParser.LT)
                        self.state = 1139
                        localctx.right = self.expression(27)
                        pass

                    elif la_ == 7:
                        localctx = MParser.LessThanOrEqualExpressionContext(self, MParser.ExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1140
                        if not self.precpred(self._ctx, 25):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 25)")
                        self.state = 1141
                        self.match(MParser.LTE)
                        self.state = 1142
                        localctx.right = self.expression(26)
                        pass

                    elif la_ == 8:
                        localctx = MParser.GreaterThanExpressionContext(self, MParser.ExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1143
                        if not self.precpred(self._ctx, 24):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 24)")
                        self.state = 1144
                        self.match(MParser.GT)
                        self.state = 1145
                        localctx.right = self.expression(25)
                        pass

                    elif la_ == 9:
                        localctx = MParser.GreaterThanOrEqualExpressionContext(self, MParser.ExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1146
                        if not self.precpred(self._ctx, 23):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 23)")
                        self.state = 1147
                        self.match(MParser.GTE)
                        self.state = 1148
                        localctx.right = self.expression(24)
                        pass

                    elif la_ == 10:
                        localctx = MParser.EqualsExpressionContext(self, MParser.ExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1149
                        if not self.precpred(self._ctx, 20):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 20)")
                        self.state = 1150
                        self.match(MParser.EQ2)
                        self.state = 1151
                        localctx.right = self.expression(21)
                        pass

                    elif la_ == 11:
                        localctx = MParser.NotEqualsExpressionContext(self, MParser.ExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1152
                        if not self.precpred(self._ctx, 19):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 19)")
                        self.state = 1153
                        self.match(MParser.XEQ)
                        self.state = 1154
                        localctx.right = self.expression(20)
                        pass

                    elif la_ == 12:
                        localctx = MParser.RoughlyEqualsExpressionContext(self, MParser.ExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1155
                        if not self.precpred(self._ctx, 18):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 18)")
                        self.state = 1156
                        self.match(MParser.TEQ)
                        self.state = 1157
                        localctx.right = self.expression(19)
                        pass

                    elif la_ == 13:
                        localctx = MParser.ContainsExpressionContext(self, MParser.ExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1158
                        if not self.precpred(self._ctx, 17):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 17)")
                        self.state = 1159
                        self.match(MParser.CONTAINS)
                        self.state = 1160
                        localctx.right = self.expression(18)
                        pass

                    elif la_ == 14:
                        localctx = MParser.InExpressionContext(self, MParser.ExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1161
                        if not self.precpred(self._ctx, 16):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 16)")
                        self.state = 1162
                        self.match(MParser.IN)
                        self.state = 1163
                        localctx.right = self.expression(17)
                        pass

                    elif la_ == 15:
                        localctx = MParser.HasExpressionContext(self, MParser.ExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1164
                        if not self.precpred(self._ctx, 15):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 15)")
                        self.state = 1165
                        self.match(MParser.HAS)
                        self.state = 1166
                        localctx.right = self.expression(16)
                        pass

                    elif la_ == 16:
                        localctx = MParser.HasAllExpressionContext(self, MParser.ExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1167
                        if not self.precpred(self._ctx, 14):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 14)")
                        self.state = 1168
                        self.match(MParser.HAS)
                        self.state = 1169
                        self.match(MParser.ALL)
                        self.state = 1170
                        localctx.right = self.expression(15)
                        pass

                    elif la_ == 17:
                        localctx = MParser.HasAnyExpressionContext(self, MParser.ExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1171
                        if not self.precpred(self._ctx, 13):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 13)")
                        self.state = 1172
                        self.match(MParser.HAS)
                        self.state = 1173
                        self.match(MParser.ANY)
                        self.state = 1174
                        localctx.right = self.expression(14)
                        pass

                    elif la_ == 18:
                        localctx = MParser.NotContainsExpressionContext(self, MParser.ExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1175
                        if not self.precpred(self._ctx, 12):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 12)")
                        self.state = 1176
                        self.match(MParser.NOT)
                        self.state = 1177
                        self.match(MParser.CONTAINS)
                        self.state = 1178
                        localctx.right = self.expression(13)
                        pass

                    elif la_ == 19:
                        localctx = MParser.NotInExpressionContext(self, MParser.ExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1179
                        if not self.precpred(self._ctx, 11):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 11)")
                        self.state = 1180
                        self.match(MParser.NOT)
                        self.state = 1181
                        self.match(MParser.IN)
                        self.state = 1182
                        localctx.right = self.expression(12)
                        pass

                    elif la_ == 20:
                        localctx = MParser.NotHasExpressionContext(self, MParser.ExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1183
                        if not self.precpred(self._ctx, 10):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 10)")
                        self.state = 1184
                        self.match(MParser.NOT)
                        self.state = 1185
                        self.match(MParser.HAS)
                        self.state = 1186
                        localctx.right = self.expression(11)
                        pass

                    elif la_ == 21:
                        localctx = MParser.NotHasAllExpressionContext(self, MParser.ExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1187
                        if not self.precpred(self._ctx, 9):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 9)")
                        self.state = 1188
                        self.match(MParser.NOT)
                        self.state = 1189
                        self.match(MParser.HAS)
                        self.state = 1190
                        self.match(MParser.ALL)
                        self.state = 1191
                        localctx.right = self.expression(10)
                        pass

                    elif la_ == 22:
                        localctx = MParser.NotHasAnyExpressionContext(self, MParser.ExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1192
                        if not self.precpred(self._ctx, 8):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 8)")
                        self.state = 1193
                        self.match(MParser.NOT)
                        self.state = 1194
                        self.match(MParser.HAS)
                        self.state = 1195
                        self.match(MParser.ANY)
                        self.state = 1196
                        localctx.right = self.expression(9)
                        pass

                    elif la_ == 23:
                        localctx = MParser.OrExpressionContext(self, MParser.ExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1197
                        if not self.precpred(self._ctx, 7):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 7)")
                        self.state = 1198
                        self.match(MParser.OR)
                        self.state = 1199
                        localctx.right = self.expression(8)
                        pass

                    elif la_ == 24:
                        localctx = MParser.AndExpressionContext(self, MParser.ExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1200
                        if not self.precpred(self._ctx, 6):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 6)")
                        self.state = 1201
                        self.match(MParser.AND)
                        self.state = 1202
                        localctx.right = self.expression(7)
                        pass

                    elif la_ == 25:
                        localctx = MParser.TernaryExpressionContext(self, MParser.ExpressionContext(self, _parentctx, _parentState))
                        localctx.ifTrue = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1203
                        if not self.precpred(self._ctx, 5):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 5)")
                        self.state = 1204
                        self.match(MParser.IF)
                        self.state = 1205
                        localctx.test = self.expression(0)
                        self.state = 1206
                        self.match(MParser.ELSE)
                        self.state = 1207
                        localctx.ifFalse = self.expression(6)
                        pass

                    elif la_ == 26:
                        localctx = MParser.IteratorExpressionContext(self, MParser.ExpressionContext(self, _parentctx, _parentState))
                        localctx.exp = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1209
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 1210
                        self.match(MParser.FOR)
                        self.state = 1211
                        self.match(MParser.EACH)
                        self.state = 1212
                        localctx.name = self.variable_identifier()
                        self.state = 1213
                        self.match(MParser.IN)
                        self.state = 1214
                        localctx.source = self.expression(2)
                        pass

                    elif la_ == 27:
                        localctx = MParser.FilteredListExpressionContext(self, MParser.ExpressionContext(self, _parentctx, _parentState))
                        localctx.src = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1216
                        if not self.precpred(self._ctx, 35):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 35)")
                        self.state = 1217
                        self.filtered_list_suffix()
                        pass

                    elif la_ == 28:
                        localctx = MParser.CastExpressionContext(self, MParser.ExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1218
                        if not self.precpred(self._ctx, 27):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 27)")
                        self.state = 1219
                        self.match(MParser.AS)
                        self.state = 1220
                        localctx.right = self.category_or_any_type()
                        pass

                    elif la_ == 29:
                        localctx = MParser.IsNotExpressionContext(self, MParser.ExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1221
                        if not self.precpred(self._ctx, 22):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 22)")
                        self.state = 1222
                        self.match(MParser.IS)
                        self.state = 1223
                        self.match(MParser.NOT)
                        self.state = 1224
                        localctx.right = self.is_expression()
                        pass

                    elif la_ == 30:
                        localctx = MParser.IsExpressionContext(self, MParser.ExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1225
                        if not self.precpred(self._ctx, 21):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 21)")
                        self.state = 1226
                        self.match(MParser.IS)
                        self.state = 1227
                        localctx.right = self.is_expression()
                        pass

             
                self.state = 1232
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,57,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class Closure_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # Type_identifierContext

        def type_identifier(self):
            return self.getTypedRuleContext(MParser.Type_identifierContext,0)


        def getRuleIndex(self):
            return MParser.RULE_closure_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClosure_expression" ):
                listener.enterClosure_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClosure_expression" ):
                listener.exitClosure_expression(self)




    def closure_expression(self):

        localctx = MParser.Closure_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_closure_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1233
            localctx.name = self.type_identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Selectable_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return MParser.RULE_selectable_expression

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class ThisExpressionContext(Selectable_expressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MParser.Selectable_expressionContext
            super().__init__(parser)
            self.exp = None # This_expressionContext
            self.copyFrom(ctx)

        def this_expression(self):
            return self.getTypedRuleContext(MParser.This_expressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterThisExpression" ):
                listener.enterThisExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitThisExpression" ):
                listener.exitThisExpression(self)


    class ParenthesisExpressionContext(Selectable_expressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MParser.Selectable_expressionContext
            super().__init__(parser)
            self.exp = None # Parenthesis_expressionContext
            self.copyFrom(ctx)

        def parenthesis_expression(self):
            return self.getTypedRuleContext(MParser.Parenthesis_expressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParenthesisExpression" ):
                listener.enterParenthesisExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParenthesisExpression" ):
                listener.exitParenthesisExpression(self)


    class LiteralExpressionContext(Selectable_expressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MParser.Selectable_expressionContext
            super().__init__(parser)
            self.exp = None # Literal_expressionContext
            self.copyFrom(ctx)

        def literal_expression(self):
            return self.getTypedRuleContext(MParser.Literal_expressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLiteralExpression" ):
                listener.enterLiteralExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLiteralExpression" ):
                listener.exitLiteralExpression(self)


    class MethodExpressionContext(Selectable_expressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MParser.Selectable_expressionContext
            super().__init__(parser)
            self.exp = None # Method_expressionContext
            self.copyFrom(ctx)

        def method_expression(self):
            return self.getTypedRuleContext(MParser.Method_expressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMethodExpression" ):
                listener.enterMethodExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMethodExpression" ):
                listener.exitMethodExpression(self)


    class IdentifierExpressionContext(Selectable_expressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MParser.Selectable_expressionContext
            super().__init__(parser)
            self.exp = None # IdentifierContext
            self.copyFrom(ctx)

        def identifier(self):
            return self.getTypedRuleContext(MParser.IdentifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentifierExpression" ):
                listener.enterIdentifierExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentifierExpression" ):
                listener.exitIdentifierExpression(self)



    def selectable_expression(self):

        localctx = MParser.Selectable_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_selectable_expression)
        try:
            self.state = 1240
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,58,self._ctx)
            if la_ == 1:
                localctx = MParser.MethodExpressionContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1235
                localctx.exp = self.method_expression()
                pass

            elif la_ == 2:
                localctx = MParser.ParenthesisExpressionContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1236
                localctx.exp = self.parenthesis_expression()
                pass

            elif la_ == 3:
                localctx = MParser.LiteralExpressionContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 1237
                localctx.exp = self.literal_expression()
                pass

            elif la_ == 4:
                localctx = MParser.IdentifierExpressionContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 1238
                localctx.exp = self.identifier()
                pass

            elif la_ == 5:
                localctx = MParser.ThisExpressionContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 1239
                localctx.exp = self.this_expression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Instance_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return MParser.RULE_instance_expression

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class SelectorExpressionContext(Instance_expressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MParser.Instance_expressionContext
            super().__init__(parser)
            self.parent = None # Instance_expressionContext
            self.selector = None # Instance_selectorContext
            self.copyFrom(ctx)

        def instance_expression(self):
            return self.getTypedRuleContext(MParser.Instance_expressionContext,0)

        def instance_selector(self):
            return self.getTypedRuleContext(MParser.Instance_selectorContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelectorExpression" ):
                listener.enterSelectorExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelectorExpression" ):
                listener.exitSelectorExpression(self)


    class SelectableExpressionContext(Instance_expressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MParser.Instance_expressionContext
            super().__init__(parser)
            self.parent = None # Selectable_expressionContext
            self.copyFrom(ctx)

        def selectable_expression(self):
            return self.getTypedRuleContext(MParser.Selectable_expressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelectableExpression" ):
                listener.enterSelectableExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelectableExpression" ):
                listener.exitSelectableExpression(self)



    def instance_expression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = MParser.Instance_expressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 96
        self.enterRecursionRule(localctx, 96, self.RULE_instance_expression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            localctx = MParser.SelectableExpressionContext(self, localctx)
            self._ctx = localctx
            _prevctx = localctx

            self.state = 1243
            localctx.parent = self.selectable_expression()
            self._ctx.stop = self._input.LT(-1)
            self.state = 1249
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,59,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = MParser.SelectorExpressionContext(self, MParser.Instance_expressionContext(self, _parentctx, _parentState))
                    localctx.parent = _prevctx
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_instance_expression)
                    self.state = 1245
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 1246
                    localctx.selector = self.instance_selector() 
                self.state = 1251
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,59,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class Mutable_instance_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return MParser.RULE_mutable_instance_expression

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class MutableSelectableExpressionContext(Mutable_instance_expressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MParser.Mutable_instance_expressionContext
            super().__init__(parser)
            self.exp = None # IdentifierContext
            self.copyFrom(ctx)

        def MUTABLE(self):
            return self.getToken(MParser.MUTABLE, 0)
        def identifier(self):
            return self.getTypedRuleContext(MParser.IdentifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMutableSelectableExpression" ):
                listener.enterMutableSelectableExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMutableSelectableExpression" ):
                listener.exitMutableSelectableExpression(self)


    class MutableSelectorExpressionContext(Mutable_instance_expressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MParser.Mutable_instance_expressionContext
            super().__init__(parser)
            self.parent = None # Mutable_instance_expressionContext
            self.selector = None # Instance_selectorContext
            self.copyFrom(ctx)

        def mutable_instance_expression(self):
            return self.getTypedRuleContext(MParser.Mutable_instance_expressionContext,0)

        def instance_selector(self):
            return self.getTypedRuleContext(MParser.Instance_selectorContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMutableSelectorExpression" ):
                listener.enterMutableSelectorExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMutableSelectorExpression" ):
                listener.exitMutableSelectorExpression(self)



    def mutable_instance_expression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = MParser.Mutable_instance_expressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 98
        self.enterRecursionRule(localctx, 98, self.RULE_mutable_instance_expression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            localctx = MParser.MutableSelectableExpressionContext(self, localctx)
            self._ctx = localctx
            _prevctx = localctx

            self.state = 1253
            self.match(MParser.MUTABLE)
            self.state = 1254
            localctx.exp = self.identifier()
            self._ctx.stop = self._input.LT(-1)
            self.state = 1260
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,60,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = MParser.MutableSelectorExpressionContext(self, MParser.Mutable_instance_expressionContext(self, _parentctx, _parentState))
                    localctx.parent = _prevctx
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_mutable_instance_expression)
                    self.state = 1256
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 1257
                    localctx.selector = self.instance_selector() 
                self.state = 1262
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,60,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class Method_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def blob_expression(self):
            return self.getTypedRuleContext(MParser.Blob_expressionContext,0)


        def document_expression(self):
            return self.getTypedRuleContext(MParser.Document_expressionContext,0)


        def fetch_expression(self):
            return self.getTypedRuleContext(MParser.Fetch_expressionContext,0)


        def read_all_expression(self):
            return self.getTypedRuleContext(MParser.Read_all_expressionContext,0)


        def read_one_expression(self):
            return self.getTypedRuleContext(MParser.Read_one_expressionContext,0)


        def sorted_expression(self):
            return self.getTypedRuleContext(MParser.Sorted_expressionContext,0)


        def method_call_expression(self):
            return self.getTypedRuleContext(MParser.Method_call_expressionContext,0)


        def constructor_expression(self):
            return self.getTypedRuleContext(MParser.Constructor_expressionContext,0)


        def getRuleIndex(self):
            return MParser.RULE_method_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMethod_expression" ):
                listener.enterMethod_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMethod_expression" ):
                listener.exitMethod_expression(self)




    def method_expression(self):

        localctx = MParser.Method_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_method_expression)
        try:
            self.state = 1271
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,61,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1263
                self.blob_expression()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1264
                self.document_expression()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1265
                self.fetch_expression()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1266
                self.read_all_expression()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1267
                self.read_one_expression()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1268
                self.sorted_expression()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1269
                self.method_call_expression()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 1270
                self.constructor_expression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Instance_selectorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return MParser.RULE_instance_selector

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class SliceSelectorContext(Instance_selectorContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MParser.Instance_selectorContext
            super().__init__(parser)
            self.xslice = None # Slice_argumentsContext
            self.copyFrom(ctx)

        def LBRAK(self):
            return self.getToken(MParser.LBRAK, 0)
        def RBRAK(self):
            return self.getToken(MParser.RBRAK, 0)
        def slice_arguments(self):
            return self.getTypedRuleContext(MParser.Slice_argumentsContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSliceSelector" ):
                listener.enterSliceSelector(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSliceSelector" ):
                listener.exitSliceSelector(self)


    class MethodSelectorContext(Instance_selectorContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MParser.Instance_selectorContext
            super().__init__(parser)
            self.method = None # Method_call_expressionContext
            self.copyFrom(ctx)

        def DOT(self):
            return self.getToken(MParser.DOT, 0)
        def method_call_expression(self):
            return self.getTypedRuleContext(MParser.Method_call_expressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMethodSelector" ):
                listener.enterMethodSelector(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMethodSelector" ):
                listener.exitMethodSelector(self)


    class MemberSelectorContext(Instance_selectorContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MParser.Instance_selectorContext
            super().__init__(parser)
            self.name = None # Variable_identifierContext
            self.copyFrom(ctx)

        def DOT(self):
            return self.getToken(MParser.DOT, 0)
        def variable_identifier(self):
            return self.getTypedRuleContext(MParser.Variable_identifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMemberSelector" ):
                listener.enterMemberSelector(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMemberSelector" ):
                listener.exitMemberSelector(self)


    class ItemSelectorContext(Instance_selectorContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MParser.Instance_selectorContext
            super().__init__(parser)
            self.exp = None # ExpressionContext
            self.copyFrom(ctx)

        def LBRAK(self):
            return self.getToken(MParser.LBRAK, 0)
        def RBRAK(self):
            return self.getToken(MParser.RBRAK, 0)
        def expression(self):
            return self.getTypedRuleContext(MParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterItemSelector" ):
                listener.enterItemSelector(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitItemSelector" ):
                listener.exitItemSelector(self)



    def instance_selector(self):

        localctx = MParser.Instance_selectorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_instance_selector)
        try:
            self.state = 1285
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,62,self._ctx)
            if la_ == 1:
                localctx = MParser.MemberSelectorContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1273
                self.match(MParser.DOT)
                self.state = 1274
                localctx.name = self.variable_identifier()
                pass

            elif la_ == 2:
                localctx = MParser.MethodSelectorContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1275
                self.match(MParser.DOT)
                self.state = 1276
                localctx.method = self.method_call_expression()
                pass

            elif la_ == 3:
                localctx = MParser.SliceSelectorContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 1277
                self.match(MParser.LBRAK)
                self.state = 1278
                localctx.xslice = self.slice_arguments()
                self.state = 1279
                self.match(MParser.RBRAK)
                pass

            elif la_ == 4:
                localctx = MParser.ItemSelectorContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 1281
                self.match(MParser.LBRAK)
                self.state = 1282
                localctx.exp = self.expression(0)
                self.state = 1283
                self.match(MParser.RBRAK)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Blob_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BLOB(self):
            return self.getToken(MParser.BLOB, 0)

        def LPAR(self):
            return self.getToken(MParser.LPAR, 0)

        def RPAR(self):
            return self.getToken(MParser.RPAR, 0)

        def expression(self):
            return self.getTypedRuleContext(MParser.ExpressionContext,0)


        def getRuleIndex(self):
            return MParser.RULE_blob_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBlob_expression" ):
                listener.enterBlob_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBlob_expression" ):
                listener.exitBlob_expression(self)




    def blob_expression(self):

        localctx = MParser.Blob_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_blob_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1287
            self.match(MParser.BLOB)
            self.state = 1288
            self.match(MParser.LPAR)
            self.state = 1290
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << MParser.LPAR) | (1 << MParser.LBRAK) | (1 << MParser.LCURL) | (1 << MParser.MINUS) | (1 << MParser.LT) | (1 << MParser.LTGT) | (1 << MParser.LTCOLONGT) | (1 << MParser.CODE))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (MParser.DOCUMENT - 64)) | (1 << (MParser.BLOB - 64)) | (1 << (MParser.EXECUTE - 64)) | (1 << (MParser.FETCH - 64)) | (1 << (MParser.MUTABLE - 64)) | (1 << (MParser.NONE - 64)) | (1 << (MParser.NOT - 64)))) != 0) or ((((_la - 137)) & ~0x3f) == 0 and ((1 << (_la - 137)) & ((1 << (MParser.READ - 137)) | (1 << (MParser.SELF - 137)) | (1 << (MParser.SORTED - 137)) | (1 << (MParser.THIS - 137)) | (1 << (MParser.BOOLEAN_LITERAL - 137)) | (1 << (MParser.CHAR_LITERAL - 137)) | (1 << (MParser.MIN_INTEGER - 137)) | (1 << (MParser.MAX_INTEGER - 137)) | (1 << (MParser.SYMBOL_IDENTIFIER - 137)) | (1 << (MParser.TYPE_IDENTIFIER - 137)) | (1 << (MParser.VARIABLE_IDENTIFIER - 137)) | (1 << (MParser.TEXT_LITERAL - 137)) | (1 << (MParser.UUID_LITERAL - 137)) | (1 << (MParser.INTEGER_LITERAL - 137)) | (1 << (MParser.HEXA_LITERAL - 137)) | (1 << (MParser.DECIMAL_LITERAL - 137)) | (1 << (MParser.DATETIME_LITERAL - 137)) | (1 << (MParser.TIME_LITERAL - 137)) | (1 << (MParser.DATE_LITERAL - 137)) | (1 << (MParser.PERIOD_LITERAL - 137)) | (1 << (MParser.VERSION_LITERAL - 137)))) != 0):
                self.state = 1289
                self.expression(0)


            self.state = 1292
            self.match(MParser.RPAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Document_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DOCUMENT(self):
            return self.getToken(MParser.DOCUMENT, 0)

        def LPAR(self):
            return self.getToken(MParser.LPAR, 0)

        def RPAR(self):
            return self.getToken(MParser.RPAR, 0)

        def expression(self):
            return self.getTypedRuleContext(MParser.ExpressionContext,0)


        def getRuleIndex(self):
            return MParser.RULE_document_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDocument_expression" ):
                listener.enterDocument_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDocument_expression" ):
                listener.exitDocument_expression(self)




    def document_expression(self):

        localctx = MParser.Document_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_document_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1294
            self.match(MParser.DOCUMENT)
            self.state = 1295
            self.match(MParser.LPAR)
            self.state = 1297
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << MParser.LPAR) | (1 << MParser.LBRAK) | (1 << MParser.LCURL) | (1 << MParser.MINUS) | (1 << MParser.LT) | (1 << MParser.LTGT) | (1 << MParser.LTCOLONGT) | (1 << MParser.CODE))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (MParser.DOCUMENT - 64)) | (1 << (MParser.BLOB - 64)) | (1 << (MParser.EXECUTE - 64)) | (1 << (MParser.FETCH - 64)) | (1 << (MParser.MUTABLE - 64)) | (1 << (MParser.NONE - 64)) | (1 << (MParser.NOT - 64)))) != 0) or ((((_la - 137)) & ~0x3f) == 0 and ((1 << (_la - 137)) & ((1 << (MParser.READ - 137)) | (1 << (MParser.SELF - 137)) | (1 << (MParser.SORTED - 137)) | (1 << (MParser.THIS - 137)) | (1 << (MParser.BOOLEAN_LITERAL - 137)) | (1 << (MParser.CHAR_LITERAL - 137)) | (1 << (MParser.MIN_INTEGER - 137)) | (1 << (MParser.MAX_INTEGER - 137)) | (1 << (MParser.SYMBOL_IDENTIFIER - 137)) | (1 << (MParser.TYPE_IDENTIFIER - 137)) | (1 << (MParser.VARIABLE_IDENTIFIER - 137)) | (1 << (MParser.TEXT_LITERAL - 137)) | (1 << (MParser.UUID_LITERAL - 137)) | (1 << (MParser.INTEGER_LITERAL - 137)) | (1 << (MParser.HEXA_LITERAL - 137)) | (1 << (MParser.DECIMAL_LITERAL - 137)) | (1 << (MParser.DATETIME_LITERAL - 137)) | (1 << (MParser.TIME_LITERAL - 137)) | (1 << (MParser.DATE_LITERAL - 137)) | (1 << (MParser.PERIOD_LITERAL - 137)) | (1 << (MParser.VERSION_LITERAL - 137)))) != 0):
                self.state = 1296
                self.expression(0)


            self.state = 1299
            self.match(MParser.RPAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Constructor_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return MParser.RULE_constructor_expression

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class ConstructorFromContext(Constructor_expressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MParser.Constructor_expressionContext
            super().__init__(parser)
            self.typ = None # Mutable_category_typeContext
            self.copyExp = None # Copy_fromContext
            self.args = None # Argument_assignment_listContext
            self.copyFrom(ctx)

        def LPAR(self):
            return self.getToken(MParser.LPAR, 0)
        def RPAR(self):
            return self.getToken(MParser.RPAR, 0)
        def mutable_category_type(self):
            return self.getTypedRuleContext(MParser.Mutable_category_typeContext,0)

        def copy_from(self):
            return self.getTypedRuleContext(MParser.Copy_fromContext,0)

        def COMMA(self):
            return self.getToken(MParser.COMMA, 0)
        def argument_assignment_list(self):
            return self.getTypedRuleContext(MParser.Argument_assignment_listContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstructorFrom" ):
                listener.enterConstructorFrom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstructorFrom" ):
                listener.exitConstructorFrom(self)


    class ConstructorNoFromContext(Constructor_expressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MParser.Constructor_expressionContext
            super().__init__(parser)
            self.typ = None # Mutable_category_typeContext
            self.args = None # Argument_assignment_listContext
            self.copyFrom(ctx)

        def LPAR(self):
            return self.getToken(MParser.LPAR, 0)
        def RPAR(self):
            return self.getToken(MParser.RPAR, 0)
        def mutable_category_type(self):
            return self.getTypedRuleContext(MParser.Mutable_category_typeContext,0)

        def argument_assignment_list(self):
            return self.getTypedRuleContext(MParser.Argument_assignment_listContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstructorNoFrom" ):
                listener.enterConstructorNoFrom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstructorNoFrom" ):
                listener.exitConstructorNoFrom(self)



    def constructor_expression(self):

        localctx = MParser.Constructor_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_constructor_expression)
        self._la = 0 # Token type
        try:
            self.state = 1317
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,67,self._ctx)
            if la_ == 1:
                localctx = MParser.ConstructorFromContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1301
                localctx.typ = self.mutable_category_type()
                self.state = 1302
                self.match(MParser.LPAR)
                self.state = 1303
                localctx.copyExp = self.copy_from()
                self.state = 1306
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MParser.COMMA:
                    self.state = 1304
                    self.match(MParser.COMMA)
                    self.state = 1305
                    localctx.args = self.argument_assignment_list(0)


                self.state = 1308
                self.match(MParser.RPAR)
                pass

            elif la_ == 2:
                localctx = MParser.ConstructorNoFromContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1310
                localctx.typ = self.mutable_category_type()
                self.state = 1311
                self.match(MParser.LPAR)
                self.state = 1313
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << MParser.LPAR) | (1 << MParser.LBRAK) | (1 << MParser.LCURL) | (1 << MParser.MINUS) | (1 << MParser.LT) | (1 << MParser.LTGT) | (1 << MParser.LTCOLONGT) | (1 << MParser.CODE))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (MParser.DOCUMENT - 64)) | (1 << (MParser.BLOB - 64)) | (1 << (MParser.EXECUTE - 64)) | (1 << (MParser.FETCH - 64)) | (1 << (MParser.MUTABLE - 64)) | (1 << (MParser.NONE - 64)) | (1 << (MParser.NOT - 64)))) != 0) or ((((_la - 137)) & ~0x3f) == 0 and ((1 << (_la - 137)) & ((1 << (MParser.READ - 137)) | (1 << (MParser.SELF - 137)) | (1 << (MParser.SORTED - 137)) | (1 << (MParser.THIS - 137)) | (1 << (MParser.BOOLEAN_LITERAL - 137)) | (1 << (MParser.CHAR_LITERAL - 137)) | (1 << (MParser.MIN_INTEGER - 137)) | (1 << (MParser.MAX_INTEGER - 137)) | (1 << (MParser.SYMBOL_IDENTIFIER - 137)) | (1 << (MParser.TYPE_IDENTIFIER - 137)) | (1 << (MParser.VARIABLE_IDENTIFIER - 137)) | (1 << (MParser.TEXT_LITERAL - 137)) | (1 << (MParser.UUID_LITERAL - 137)) | (1 << (MParser.INTEGER_LITERAL - 137)) | (1 << (MParser.HEXA_LITERAL - 137)) | (1 << (MParser.DECIMAL_LITERAL - 137)) | (1 << (MParser.DATETIME_LITERAL - 137)) | (1 << (MParser.TIME_LITERAL - 137)) | (1 << (MParser.DATE_LITERAL - 137)) | (1 << (MParser.PERIOD_LITERAL - 137)) | (1 << (MParser.VERSION_LITERAL - 137)))) != 0):
                    self.state = 1312
                    localctx.args = self.argument_assignment_list(0)


                self.state = 1315
                self.match(MParser.RPAR)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Copy_fromContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.exp = None # ExpressionContext

        def FROM(self):
            return self.getToken(MParser.FROM, 0)

        def assign(self):
            return self.getTypedRuleContext(MParser.AssignContext,0)


        def expression(self):
            return self.getTypedRuleContext(MParser.ExpressionContext,0)


        def getRuleIndex(self):
            return MParser.RULE_copy_from

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCopy_from" ):
                listener.enterCopy_from(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCopy_from" ):
                listener.exitCopy_from(self)




    def copy_from(self):

        localctx = MParser.Copy_fromContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_copy_from)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1319
            self.match(MParser.FROM)
            self.state = 1320
            self.assign()
            self.state = 1321
            localctx.exp = self.expression(0)
            self.state = 1322
            if not self.willNotBe(self.equalToken()):
                from antlr4.error.Errors import FailedPredicateException
                raise FailedPredicateException(self, "$parser.willNotBe($parser.equalToken())")
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Argument_assignment_listContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return MParser.RULE_argument_assignment_list

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class ExpressionAssignmentListContext(Argument_assignment_listContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MParser.Argument_assignment_listContext
            super().__init__(parser)
            self.exp = None # ExpressionContext
            self.copyFrom(ctx)

        def expression(self):
            return self.getTypedRuleContext(MParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpressionAssignmentList" ):
                listener.enterExpressionAssignmentList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpressionAssignmentList" ):
                listener.exitExpressionAssignmentList(self)


    class ArgumentAssignmentListContext(Argument_assignment_listContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MParser.Argument_assignment_listContext
            super().__init__(parser)
            self.item = None # Argument_assignmentContext
            self.copyFrom(ctx)

        def argument_assignment(self):
            return self.getTypedRuleContext(MParser.Argument_assignmentContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArgumentAssignmentList" ):
                listener.enterArgumentAssignmentList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArgumentAssignmentList" ):
                listener.exitArgumentAssignmentList(self)


    class ArgumentAssignmentListItemContext(Argument_assignment_listContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MParser.Argument_assignment_listContext
            super().__init__(parser)
            self.items = None # Argument_assignment_listContext
            self.item = None # Argument_assignmentContext
            self.copyFrom(ctx)

        def COMMA(self):
            return self.getToken(MParser.COMMA, 0)
        def argument_assignment_list(self):
            return self.getTypedRuleContext(MParser.Argument_assignment_listContext,0)

        def argument_assignment(self):
            return self.getTypedRuleContext(MParser.Argument_assignmentContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArgumentAssignmentListItem" ):
                listener.enterArgumentAssignmentListItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArgumentAssignmentListItem" ):
                listener.exitArgumentAssignmentListItem(self)



    def argument_assignment_list(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = MParser.Argument_assignment_listContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 112
        self.enterRecursionRule(localctx, 112, self.RULE_argument_assignment_list, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1329
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,68,self._ctx)
            if la_ == 1:
                localctx = MParser.ExpressionAssignmentListContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx

                self.state = 1325
                localctx.exp = self.expression(0)
                self.state = 1326
                if not self.willNotBe(self.equalToken()):
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "$parser.willNotBe($parser.equalToken())")
                pass

            elif la_ == 2:
                localctx = MParser.ArgumentAssignmentListContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1328
                localctx.item = self.argument_assignment()
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 1336
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,69,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = MParser.ArgumentAssignmentListItemContext(self, MParser.Argument_assignment_listContext(self, _parentctx, _parentState))
                    localctx.items = _prevctx
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_argument_assignment_list)
                    self.state = 1331
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 1332
                    self.match(MParser.COMMA)
                    self.state = 1333
                    localctx.item = self.argument_assignment() 
                self.state = 1338
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,69,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class Argument_assignmentContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # Variable_identifierContext
            self.exp = None # ExpressionContext

        def variable_identifier(self):
            return self.getTypedRuleContext(MParser.Variable_identifierContext,0)


        def assign(self):
            return self.getTypedRuleContext(MParser.AssignContext,0)


        def expression(self):
            return self.getTypedRuleContext(MParser.ExpressionContext,0)


        def getRuleIndex(self):
            return MParser.RULE_argument_assignment

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArgument_assignment" ):
                listener.enterArgument_assignment(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArgument_assignment" ):
                listener.exitArgument_assignment(self)




    def argument_assignment(self):

        localctx = MParser.Argument_assignmentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_argument_assignment)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1339
            localctx.name = self.variable_identifier()
            self.state = 1343
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,70,self._ctx)
            if la_ == 1:
                self.state = 1340
                self.assign()
                self.state = 1341
                localctx.exp = self.expression(0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Write_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.what = None # ExpressionContext
            self.target = None # ExpressionContext

        def WRITE(self):
            return self.getToken(MParser.WRITE, 0)

        def TO(self):
            return self.getToken(MParser.TO, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(MParser.ExpressionContext,i)


        def getRuleIndex(self):
            return MParser.RULE_write_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWrite_statement" ):
                listener.enterWrite_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWrite_statement" ):
                listener.exitWrite_statement(self)




    def write_statement(self):

        localctx = MParser.Write_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_write_statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1345
            self.match(MParser.WRITE)
            self.state = 1346
            localctx.what = self.expression(0)
            self.state = 1347
            self.match(MParser.TO)
            self.state = 1348
            localctx.target = self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Filtered_list_suffixContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # Variable_identifierContext
            self.predicate = None # ExpressionContext

        def FILTERED(self):
            return self.getToken(MParser.FILTERED, 0)

        def WITH(self):
            return self.getToken(MParser.WITH, 0)

        def WHERE(self):
            return self.getToken(MParser.WHERE, 0)

        def variable_identifier(self):
            return self.getTypedRuleContext(MParser.Variable_identifierContext,0)


        def expression(self):
            return self.getTypedRuleContext(MParser.ExpressionContext,0)


        def getRuleIndex(self):
            return MParser.RULE_filtered_list_suffix

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFiltered_list_suffix" ):
                listener.enterFiltered_list_suffix(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFiltered_list_suffix" ):
                listener.exitFiltered_list_suffix(self)




    def filtered_list_suffix(self):

        localctx = MParser.Filtered_list_suffixContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_filtered_list_suffix)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1350
            self.match(MParser.FILTERED)
            self.state = 1351
            self.match(MParser.WITH)
            self.state = 1352
            localctx.name = self.variable_identifier()
            self.state = 1353
            self.match(MParser.WHERE)
            self.state = 1354
            localctx.predicate = self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Fetch_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return MParser.RULE_fetch_expression

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class FetchOneContext(Fetch_expressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MParser.Fetch_expressionContext
            super().__init__(parser)
            self.typ = None # Mutable_category_typeContext
            self.predicate = None # ExpressionContext
            self.copyFrom(ctx)

        def FETCH(self):
            return self.getToken(MParser.FETCH, 0)
        def ONE(self):
            return self.getToken(MParser.ONE, 0)
        def WHERE(self):
            return self.getToken(MParser.WHERE, 0)
        def expression(self):
            return self.getTypedRuleContext(MParser.ExpressionContext,0)

        def mutable_category_type(self):
            return self.getTypedRuleContext(MParser.Mutable_category_typeContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFetchOne" ):
                listener.enterFetchOne(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFetchOne" ):
                listener.exitFetchOne(self)


    class FetchManyContext(Fetch_expressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MParser.Fetch_expressionContext
            super().__init__(parser)
            self.xstart = None # ExpressionContext
            self.xstop = None # ExpressionContext
            self.typ = None # Mutable_category_typeContext
            self.predicate = None # ExpressionContext
            self.orderby = None # Order_by_listContext
            self.copyFrom(ctx)

        def FETCH(self):
            return self.getToken(MParser.FETCH, 0)
        def LPAR(self):
            return self.getToken(MParser.LPAR, 0)
        def RPAR(self):
            return self.getToken(MParser.RPAR, 0)
        def ALL(self):
            return self.getToken(MParser.ALL, 0)
        def ROWS(self):
            return self.getToken(MParser.ROWS, 0)
        def TO(self):
            return self.getToken(MParser.TO, 0)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(MParser.ExpressionContext,i)

        def WHERE(self):
            return self.getToken(MParser.WHERE, 0)
        def ORDER(self):
            return self.getToken(MParser.ORDER, 0)
        def BY(self):
            return self.getToken(MParser.BY, 0)
        def mutable_category_type(self):
            return self.getTypedRuleContext(MParser.Mutable_category_typeContext,0)

        def order_by_list(self):
            return self.getTypedRuleContext(MParser.Order_by_listContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFetchMany" ):
                listener.enterFetchMany(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFetchMany" ):
                listener.exitFetchMany(self)



    def fetch_expression(self):

        localctx = MParser.Fetch_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_fetch_expression)
        self._la = 0 # Token type
        try:
            self.state = 1386
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,76,self._ctx)
            if la_ == 1:
                localctx = MParser.FetchOneContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1356
                self.match(MParser.FETCH)
                self.state = 1357
                self.match(MParser.ONE)
                self.state = 1359
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MParser.MUTABLE or _la==MParser.TYPE_IDENTIFIER:
                    self.state = 1358
                    localctx.typ = self.mutable_category_type()


                self.state = 1361
                self.match(MParser.WHERE)
                self.state = 1362
                localctx.predicate = self.expression(0)
                pass

            elif la_ == 2:
                localctx = MParser.FetchManyContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1363
                self.match(MParser.FETCH)
                self.state = 1370
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [MParser.ALL]:
                    self.state = 1364
                    self.match(MParser.ALL)
                    pass
                elif token in [MParser.ROWS]:
                    self.state = 1365
                    self.match(MParser.ROWS)
                    self.state = 1366
                    localctx.xstart = self.expression(0)
                    self.state = 1367
                    self.match(MParser.TO)
                    self.state = 1368
                    localctx.xstop = self.expression(0)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1372
                self.match(MParser.LPAR)
                self.state = 1374
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MParser.MUTABLE or _la==MParser.TYPE_IDENTIFIER:
                    self.state = 1373
                    localctx.typ = self.mutable_category_type()


                self.state = 1376
                self.match(MParser.RPAR)
                self.state = 1379
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,74,self._ctx)
                if la_ == 1:
                    self.state = 1377
                    self.match(MParser.WHERE)
                    self.state = 1378
                    localctx.predicate = self.expression(0)


                self.state = 1384
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,75,self._ctx)
                if la_ == 1:
                    self.state = 1381
                    self.match(MParser.ORDER)
                    self.state = 1382
                    self.match(MParser.BY)
                    self.state = 1383
                    localctx.orderby = self.order_by_list()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Fetch_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return MParser.RULE_fetch_statement

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class FetchManyAsyncContext(Fetch_statementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MParser.Fetch_statementContext
            super().__init__(parser)
            self.xstart = None # ExpressionContext
            self.xstop = None # ExpressionContext
            self.typ = None # Mutable_category_typeContext
            self.predicate = None # ExpressionContext
            self.orderby = None # Order_by_listContext
            self.name = None # Variable_identifierContext
            self.stmts = None # Statement_listContext
            self.copyFrom(ctx)

        def FETCH(self):
            return self.getToken(MParser.FETCH, 0)
        def LPAR(self):
            return self.getToken(MParser.LPAR, 0)
        def RPAR(self):
            return self.getToken(MParser.RPAR, 0)
        def THEN(self):
            return self.getToken(MParser.THEN, 0)
        def WITH(self):
            return self.getToken(MParser.WITH, 0)
        def COLON(self):
            return self.getToken(MParser.COLON, 0)
        def indent(self):
            return self.getTypedRuleContext(MParser.IndentContext,0)

        def dedent(self):
            return self.getTypedRuleContext(MParser.DedentContext,0)

        def variable_identifier(self):
            return self.getTypedRuleContext(MParser.Variable_identifierContext,0)

        def statement_list(self):
            return self.getTypedRuleContext(MParser.Statement_listContext,0)

        def ALL(self):
            return self.getToken(MParser.ALL, 0)
        def ROWS(self):
            return self.getToken(MParser.ROWS, 0)
        def TO(self):
            return self.getToken(MParser.TO, 0)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(MParser.ExpressionContext,i)

        def WHERE(self):
            return self.getToken(MParser.WHERE, 0)
        def ORDER(self):
            return self.getToken(MParser.ORDER, 0)
        def BY(self):
            return self.getToken(MParser.BY, 0)
        def mutable_category_type(self):
            return self.getTypedRuleContext(MParser.Mutable_category_typeContext,0)

        def order_by_list(self):
            return self.getTypedRuleContext(MParser.Order_by_listContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFetchManyAsync" ):
                listener.enterFetchManyAsync(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFetchManyAsync" ):
                listener.exitFetchManyAsync(self)


    class FetchOneAsyncContext(Fetch_statementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MParser.Fetch_statementContext
            super().__init__(parser)
            self.typ = None # Mutable_category_typeContext
            self.predicate = None # ExpressionContext
            self.name = None # Variable_identifierContext
            self.stmts = None # Statement_listContext
            self.copyFrom(ctx)

        def FETCH(self):
            return self.getToken(MParser.FETCH, 0)
        def ONE(self):
            return self.getToken(MParser.ONE, 0)
        def WHERE(self):
            return self.getToken(MParser.WHERE, 0)
        def THEN(self):
            return self.getToken(MParser.THEN, 0)
        def WITH(self):
            return self.getToken(MParser.WITH, 0)
        def COLON(self):
            return self.getToken(MParser.COLON, 0)
        def indent(self):
            return self.getTypedRuleContext(MParser.IndentContext,0)

        def dedent(self):
            return self.getTypedRuleContext(MParser.DedentContext,0)

        def expression(self):
            return self.getTypedRuleContext(MParser.ExpressionContext,0)

        def variable_identifier(self):
            return self.getTypedRuleContext(MParser.Variable_identifierContext,0)

        def statement_list(self):
            return self.getTypedRuleContext(MParser.Statement_listContext,0)

        def mutable_category_type(self):
            return self.getTypedRuleContext(MParser.Mutable_category_typeContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFetchOneAsync" ):
                listener.enterFetchOneAsync(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFetchOneAsync" ):
                listener.exitFetchOneAsync(self)



    def fetch_statement(self):

        localctx = MParser.Fetch_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_fetch_statement)
        self._la = 0 # Token type
        try:
            self.state = 1434
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,82,self._ctx)
            if la_ == 1:
                localctx = MParser.FetchOneAsyncContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1388
                self.match(MParser.FETCH)
                self.state = 1389
                self.match(MParser.ONE)
                self.state = 1391
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MParser.MUTABLE or _la==MParser.TYPE_IDENTIFIER:
                    self.state = 1390
                    localctx.typ = self.mutable_category_type()


                self.state = 1393
                self.match(MParser.WHERE)
                self.state = 1394
                localctx.predicate = self.expression(0)
                self.state = 1395
                self.match(MParser.THEN)
                self.state = 1396
                self.match(MParser.WITH)
                self.state = 1397
                localctx.name = self.variable_identifier()
                self.state = 1398
                self.match(MParser.COLON)
                self.state = 1399
                self.indent()
                self.state = 1400
                localctx.stmts = self.statement_list()
                self.state = 1401
                self.dedent()
                pass

            elif la_ == 2:
                localctx = MParser.FetchManyAsyncContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1403
                self.match(MParser.FETCH)
                self.state = 1410
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [MParser.ALL]:
                    self.state = 1404
                    self.match(MParser.ALL)
                    pass
                elif token in [MParser.ROWS]:
                    self.state = 1405
                    self.match(MParser.ROWS)
                    self.state = 1406
                    localctx.xstart = self.expression(0)
                    self.state = 1407
                    self.match(MParser.TO)
                    self.state = 1408
                    localctx.xstop = self.expression(0)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1412
                self.match(MParser.LPAR)
                self.state = 1414
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MParser.MUTABLE or _la==MParser.TYPE_IDENTIFIER:
                    self.state = 1413
                    localctx.typ = self.mutable_category_type()


                self.state = 1416
                self.match(MParser.RPAR)
                self.state = 1419
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MParser.WHERE:
                    self.state = 1417
                    self.match(MParser.WHERE)
                    self.state = 1418
                    localctx.predicate = self.expression(0)


                self.state = 1424
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MParser.ORDER:
                    self.state = 1421
                    self.match(MParser.ORDER)
                    self.state = 1422
                    self.match(MParser.BY)
                    self.state = 1423
                    localctx.orderby = self.order_by_list()


                self.state = 1426
                self.match(MParser.THEN)
                self.state = 1427
                self.match(MParser.WITH)
                self.state = 1428
                localctx.name = self.variable_identifier()
                self.state = 1429
                self.match(MParser.COLON)
                self.state = 1430
                self.indent()
                self.state = 1431
                localctx.stmts = self.statement_list()
                self.state = 1432
                self.dedent()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Sorted_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.source = None # Instance_expressionContext
            self.key = None # Sorted_keyContext

        def SORTED(self):
            return self.getToken(MParser.SORTED, 0)

        def LPAR(self):
            return self.getToken(MParser.LPAR, 0)

        def RPAR(self):
            return self.getToken(MParser.RPAR, 0)

        def instance_expression(self):
            return self.getTypedRuleContext(MParser.Instance_expressionContext,0)


        def DESC(self):
            return self.getToken(MParser.DESC, 0)

        def COMMA(self):
            return self.getToken(MParser.COMMA, 0)

        def key_token(self):
            return self.getTypedRuleContext(MParser.Key_tokenContext,0)


        def EQ(self):
            return self.getToken(MParser.EQ, 0)

        def sorted_key(self):
            return self.getTypedRuleContext(MParser.Sorted_keyContext,0)


        def getRuleIndex(self):
            return MParser.RULE_sorted_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSorted_expression" ):
                listener.enterSorted_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSorted_expression" ):
                listener.exitSorted_expression(self)




    def sorted_expression(self):

        localctx = MParser.Sorted_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_sorted_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1436
            self.match(MParser.SORTED)
            self.state = 1438
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MParser.DESC:
                self.state = 1437
                self.match(MParser.DESC)


            self.state = 1440
            self.match(MParser.LPAR)
            self.state = 1441
            localctx.source = self.instance_expression(0)
            self.state = 1447
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MParser.COMMA:
                self.state = 1442
                self.match(MParser.COMMA)
                self.state = 1443
                self.key_token()
                self.state = 1444
                self.match(MParser.EQ)
                self.state = 1445
                localctx.key = self.sorted_key()


            self.state = 1449
            self.match(MParser.RPAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Assign_instance_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.inst = None # Assignable_instanceContext
            self.exp = None # ExpressionContext

        def assign(self):
            return self.getTypedRuleContext(MParser.AssignContext,0)


        def assignable_instance(self):
            return self.getTypedRuleContext(MParser.Assignable_instanceContext,0)


        def expression(self):
            return self.getTypedRuleContext(MParser.ExpressionContext,0)


        def getRuleIndex(self):
            return MParser.RULE_assign_instance_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssign_instance_statement" ):
                listener.enterAssign_instance_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssign_instance_statement" ):
                listener.exitAssign_instance_statement(self)




    def assign_instance_statement(self):

        localctx = MParser.Assign_instance_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_assign_instance_statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1451
            localctx.inst = self.assignable_instance(0)
            self.state = 1452
            self.assign()
            self.state = 1453
            localctx.exp = self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Child_instanceContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return MParser.RULE_child_instance

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class MemberInstanceContext(Child_instanceContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MParser.Child_instanceContext
            super().__init__(parser)
            self.name = None # Variable_identifierContext
            self.copyFrom(ctx)

        def DOT(self):
            return self.getToken(MParser.DOT, 0)
        def variable_identifier(self):
            return self.getTypedRuleContext(MParser.Variable_identifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMemberInstance" ):
                listener.enterMemberInstance(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMemberInstance" ):
                listener.exitMemberInstance(self)


    class ItemInstanceContext(Child_instanceContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MParser.Child_instanceContext
            super().__init__(parser)
            self.exp = None # ExpressionContext
            self.copyFrom(ctx)

        def LBRAK(self):
            return self.getToken(MParser.LBRAK, 0)
        def RBRAK(self):
            return self.getToken(MParser.RBRAK, 0)
        def expression(self):
            return self.getTypedRuleContext(MParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterItemInstance" ):
                listener.enterItemInstance(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitItemInstance" ):
                listener.exitItemInstance(self)



    def child_instance(self):

        localctx = MParser.Child_instanceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_child_instance)
        try:
            self.state = 1463
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,85,self._ctx)
            if la_ == 1:
                localctx = MParser.MemberInstanceContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1455
                if not self.wasNot(MParser.WS):
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "$parser.wasNot(MParser.WS)")
                self.state = 1456
                self.match(MParser.DOT)
                self.state = 1457
                localctx.name = self.variable_identifier()
                pass

            elif la_ == 2:
                localctx = MParser.ItemInstanceContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1458
                if not self.wasNot(MParser.WS):
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "$parser.wasNot(MParser.WS)")
                self.state = 1459
                self.match(MParser.LBRAK)
                self.state = 1460
                localctx.exp = self.expression(0)
                self.state = 1461
                self.match(MParser.RBRAK)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Assign_tuple_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.items = None # Variable_identifier_listContext
            self.exp = None # ExpressionContext

        def assign(self):
            return self.getTypedRuleContext(MParser.AssignContext,0)


        def variable_identifier_list(self):
            return self.getTypedRuleContext(MParser.Variable_identifier_listContext,0)


        def expression(self):
            return self.getTypedRuleContext(MParser.ExpressionContext,0)


        def getRuleIndex(self):
            return MParser.RULE_assign_tuple_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssign_tuple_statement" ):
                listener.enterAssign_tuple_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssign_tuple_statement" ):
                listener.exitAssign_tuple_statement(self)




    def assign_tuple_statement(self):

        localctx = MParser.Assign_tuple_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_assign_tuple_statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1465
            localctx.items = self.variable_identifier_list()
            self.state = 1466
            self.assign()
            self.state = 1467
            localctx.exp = self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class LfsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LF(self, i:int=None):
            if i is None:
                return self.getTokens(MParser.LF)
            else:
                return self.getToken(MParser.LF, i)

        def getRuleIndex(self):
            return MParser.RULE_lfs

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLfs" ):
                listener.enterLfs(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLfs" ):
                listener.exitLfs(self)




    def lfs(self):

        localctx = MParser.LfsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_lfs)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1472
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,86,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1469
                    self.match(MParser.LF) 
                self.state = 1474
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,86,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class LfpContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LF(self, i:int=None):
            if i is None:
                return self.getTokens(MParser.LF)
            else:
                return self.getToken(MParser.LF, i)

        def getRuleIndex(self):
            return MParser.RULE_lfp

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLfp" ):
                listener.enterLfp(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLfp" ):
                listener.exitLfp(self)




    def lfp(self):

        localctx = MParser.LfpContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_lfp)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1476 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1475
                self.match(MParser.LF)
                self.state = 1478 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==MParser.LF):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Ws_plusContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LF(self, i:int=None):
            if i is None:
                return self.getTokens(MParser.LF)
            else:
                return self.getToken(MParser.LF, i)

        def TAB(self, i:int=None):
            if i is None:
                return self.getTokens(MParser.TAB)
            else:
                return self.getToken(MParser.TAB, i)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(MParser.WS)
            else:
                return self.getToken(MParser.WS, i)

        def INDENT(self, i:int=None):
            if i is None:
                return self.getTokens(MParser.INDENT)
            else:
                return self.getToken(MParser.INDENT, i)

        def getRuleIndex(self):
            return MParser.RULE_ws_plus

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWs_plus" ):
                listener.enterWs_plus(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWs_plus" ):
                listener.exitWs_plus(self)




    def ws_plus(self):

        localctx = MParser.Ws_plusContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_ws_plus)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1483
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << MParser.INDENT) | (1 << MParser.LF) | (1 << MParser.TAB) | (1 << MParser.WS))) != 0):
                self.state = 1480
                _la = self._input.LA(1)
                if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << MParser.INDENT) | (1 << MParser.LF) | (1 << MParser.TAB) | (1 << MParser.WS))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1485
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class IndentContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INDENT(self):
            return self.getToken(MParser.INDENT, 0)

        def LF(self, i:int=None):
            if i is None:
                return self.getTokens(MParser.LF)
            else:
                return self.getToken(MParser.LF, i)

        def getRuleIndex(self):
            return MParser.RULE_indent

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndent" ):
                listener.enterIndent(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndent" ):
                listener.exitIndent(self)




    def indent(self):

        localctx = MParser.IndentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_indent)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1487 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1486
                self.match(MParser.LF)
                self.state = 1489 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==MParser.LF):
                    break

            self.state = 1491
            self.match(MParser.INDENT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DedentContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DEDENT(self):
            return self.getToken(MParser.DEDENT, 0)

        def LF(self, i:int=None):
            if i is None:
                return self.getTokens(MParser.LF)
            else:
                return self.getToken(MParser.LF, i)

        def getRuleIndex(self):
            return MParser.RULE_dedent

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDedent" ):
                listener.enterDedent(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDedent" ):
                listener.exitDedent(self)




    def dedent(self):

        localctx = MParser.DedentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_dedent)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1496
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==MParser.LF:
                self.state = 1493
                self.match(MParser.LF)
                self.state = 1498
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1499
            self.match(MParser.DEDENT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Null_literalContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NONE(self):
            return self.getToken(MParser.NONE, 0)

        def getRuleIndex(self):
            return MParser.RULE_null_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNull_literal" ):
                listener.enterNull_literal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNull_literal" ):
                listener.exitNull_literal(self)




    def null_literal(self):

        localctx = MParser.Null_literalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_null_literal)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1501
            self.match(MParser.NONE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Declaration_listContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return MParser.RULE_declaration_list

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class FullDeclarationListContext(Declaration_listContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MParser.Declaration_listContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def lfs(self):
            return self.getTypedRuleContext(MParser.LfsContext,0)

        def EOF(self):
            return self.getToken(MParser.EOF, 0)
        def declarations(self):
            return self.getTypedRuleContext(MParser.DeclarationsContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFullDeclarationList" ):
                listener.enterFullDeclarationList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFullDeclarationList" ):
                listener.exitFullDeclarationList(self)



    def declaration_list(self):

        localctx = MParser.Declaration_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_declaration_list)
        self._la = 0 # Token type
        try:
            localctx = MParser.FullDeclarationListContext(self, localctx)
            self.enterOuterAlt(localctx, 1)
            self.state = 1504
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MParser.COMMENT or ((((_la - 71)) & ~0x3f) == 0 and ((1 << (_la - 71)) & ((1 << (MParser.ABSTRACT - 71)) | (1 << (MParser.ATTR - 71)) | (1 << (MParser.CATEGORY - 71)) | (1 << (MParser.CLASS - 71)) | (1 << (MParser.DEF - 71)) | (1 << (MParser.ENUM - 71)) | (1 << (MParser.NATIVE - 71)))) != 0) or ((((_la - 145)) & ~0x3f) == 0 and ((1 << (_la - 145)) & ((1 << (MParser.SINGLETON - 145)) | (1 << (MParser.STORABLE - 145)) | (1 << (MParser.WIDGET - 145)) | (1 << (MParser.ARONDBASE_IDENTIFIER - 145)))) != 0):
                self.state = 1503
                self.declarations()


            self.state = 1506
            self.lfs()
            self.state = 1507
            self.match(MParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DeclarationsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MParser.DeclarationContext)
            else:
                return self.getTypedRuleContext(MParser.DeclarationContext,i)


        def lfp(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MParser.LfpContext)
            else:
                return self.getTypedRuleContext(MParser.LfpContext,i)


        def getRuleIndex(self):
            return MParser.RULE_declarations

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclarations" ):
                listener.enterDeclarations(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclarations" ):
                listener.exitDeclarations(self)




    def declarations(self):

        localctx = MParser.DeclarationsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_declarations)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1509
            self.declaration()
            self.state = 1515
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,92,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1510
                    self.lfp()
                    self.state = 1511
                    self.declaration() 
                self.state = 1517
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,92,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def attribute_declaration(self):
            return self.getTypedRuleContext(MParser.Attribute_declarationContext,0)


        def category_declaration(self):
            return self.getTypedRuleContext(MParser.Category_declarationContext,0)


        def resource_declaration(self):
            return self.getTypedRuleContext(MParser.Resource_declarationContext,0)


        def enum_declaration(self):
            return self.getTypedRuleContext(MParser.Enum_declarationContext,0)


        def widget_declaration(self):
            return self.getTypedRuleContext(MParser.Widget_declarationContext,0)


        def method_declaration(self):
            return self.getTypedRuleContext(MParser.Method_declarationContext,0)


        def comment_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MParser.Comment_statementContext)
            else:
                return self.getTypedRuleContext(MParser.Comment_statementContext,i)


        def lfp(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MParser.LfpContext)
            else:
                return self.getTypedRuleContext(MParser.LfpContext,i)


        def annotation_constructor(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MParser.Annotation_constructorContext)
            else:
                return self.getTypedRuleContext(MParser.Annotation_constructorContext,i)


        def getRuleIndex(self):
            return MParser.RULE_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclaration" ):
                listener.enterDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclaration" ):
                listener.exitDeclaration(self)




    def declaration(self):

        localctx = MParser.DeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1523
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==MParser.COMMENT:
                self.state = 1518
                self.comment_statement()
                self.state = 1519
                self.lfp()
                self.state = 1525
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1531
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==MParser.ARONDBASE_IDENTIFIER:
                self.state = 1526
                self.annotation_constructor()
                self.state = 1527
                self.lfp()
                self.state = 1533
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1540
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,95,self._ctx)
            if la_ == 1:
                self.state = 1534
                self.attribute_declaration()
                pass

            elif la_ == 2:
                self.state = 1535
                self.category_declaration()
                pass

            elif la_ == 3:
                self.state = 1536
                self.resource_declaration()
                pass

            elif la_ == 4:
                self.state = 1537
                self.enum_declaration()
                pass

            elif la_ == 5:
                self.state = 1538
                self.widget_declaration()
                pass

            elif la_ == 6:
                self.state = 1539
                self.method_declaration()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Annotation_constructorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # Annotation_identifierContext
            self.exp = None # Literal_expressionContext

        def annotation_identifier(self):
            return self.getTypedRuleContext(MParser.Annotation_identifierContext,0)


        def LPAR(self):
            return self.getToken(MParser.LPAR, 0)

        def RPAR(self):
            return self.getToken(MParser.RPAR, 0)

        def literal_expression(self):
            return self.getTypedRuleContext(MParser.Literal_expressionContext,0)


        def getRuleIndex(self):
            return MParser.RULE_annotation_constructor

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnnotation_constructor" ):
                listener.enterAnnotation_constructor(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnnotation_constructor" ):
                listener.exitAnnotation_constructor(self)




    def annotation_constructor(self):

        localctx = MParser.Annotation_constructorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_annotation_constructor)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1542
            localctx.name = self.annotation_identifier()
            self.state = 1547
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MParser.LPAR:
                self.state = 1543
                self.match(MParser.LPAR)
                self.state = 1544
                localctx.exp = self.literal_expression()
                self.state = 1545
                self.match(MParser.RPAR)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Annotation_identifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ARONDBASE_IDENTIFIER(self):
            return self.getToken(MParser.ARONDBASE_IDENTIFIER, 0)

        def getRuleIndex(self):
            return MParser.RULE_annotation_identifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnnotation_identifier" ):
                listener.enterAnnotation_identifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnnotation_identifier" ):
                listener.exitAnnotation_identifier(self)




    def annotation_identifier(self):

        localctx = MParser.Annotation_identifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_annotation_identifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1549
            self.match(MParser.ARONDBASE_IDENTIFIER)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Resource_declarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def native_resource_declaration(self):
            return self.getTypedRuleContext(MParser.Native_resource_declarationContext,0)


        def getRuleIndex(self):
            return MParser.RULE_resource_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterResource_declaration" ):
                listener.enterResource_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitResource_declaration" ):
                listener.exitResource_declaration(self)




    def resource_declaration(self):

        localctx = MParser.Resource_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_resource_declaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1551
            self.native_resource_declaration()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Enum_declarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def enum_category_declaration(self):
            return self.getTypedRuleContext(MParser.Enum_category_declarationContext,0)


        def enum_native_declaration(self):
            return self.getTypedRuleContext(MParser.Enum_native_declarationContext,0)


        def getRuleIndex(self):
            return MParser.RULE_enum_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnum_declaration" ):
                listener.enterEnum_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnum_declaration" ):
                listener.exitEnum_declaration(self)




    def enum_declaration(self):

        localctx = MParser.Enum_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_enum_declaration)
        try:
            self.state = 1555
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,97,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1553
                self.enum_category_declaration()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1554
                self.enum_native_declaration()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Native_symbol_listContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def native_symbol(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MParser.Native_symbolContext)
            else:
                return self.getTypedRuleContext(MParser.Native_symbolContext,i)


        def lfp(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MParser.LfpContext)
            else:
                return self.getTypedRuleContext(MParser.LfpContext,i)


        def getRuleIndex(self):
            return MParser.RULE_native_symbol_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNative_symbol_list" ):
                listener.enterNative_symbol_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNative_symbol_list" ):
                listener.exitNative_symbol_list(self)




    def native_symbol_list(self):

        localctx = MParser.Native_symbol_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_native_symbol_list)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1557
            self.native_symbol()
            self.state = 1563
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,98,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1558
                    self.lfp()
                    self.state = 1559
                    self.native_symbol() 
                self.state = 1565
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,98,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Category_symbol_listContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def category_symbol(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MParser.Category_symbolContext)
            else:
                return self.getTypedRuleContext(MParser.Category_symbolContext,i)


        def lfp(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MParser.LfpContext)
            else:
                return self.getTypedRuleContext(MParser.LfpContext,i)


        def getRuleIndex(self):
            return MParser.RULE_category_symbol_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCategory_symbol_list" ):
                listener.enterCategory_symbol_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCategory_symbol_list" ):
                listener.exitCategory_symbol_list(self)




    def category_symbol_list(self):

        localctx = MParser.Category_symbol_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_category_symbol_list)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1566
            self.category_symbol()
            self.state = 1572
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,99,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1567
                    self.lfp()
                    self.state = 1568
                    self.category_symbol() 
                self.state = 1574
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,99,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Symbol_listContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def symbol_identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MParser.Symbol_identifierContext)
            else:
                return self.getTypedRuleContext(MParser.Symbol_identifierContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(MParser.COMMA)
            else:
                return self.getToken(MParser.COMMA, i)

        def getRuleIndex(self):
            return MParser.RULE_symbol_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSymbol_list" ):
                listener.enterSymbol_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSymbol_list" ):
                listener.exitSymbol_list(self)




    def symbol_list(self):

        localctx = MParser.Symbol_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_symbol_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1575
            self.symbol_identifier()
            self.state = 1580
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==MParser.COMMA:
                self.state = 1576
                self.match(MParser.COMMA)
                self.state = 1577
                self.symbol_identifier()
                self.state = 1582
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Attribute_constraintContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return MParser.RULE_attribute_constraint

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class MatchingSetContext(Attribute_constraintContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MParser.Attribute_constraintContext
            super().__init__(parser)
            self.source = None # Set_literalContext
            self.copyFrom(ctx)

        def IN(self):
            return self.getToken(MParser.IN, 0)
        def set_literal(self):
            return self.getTypedRuleContext(MParser.Set_literalContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMatchingSet" ):
                listener.enterMatchingSet(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMatchingSet" ):
                listener.exitMatchingSet(self)


    class MatchingPatternContext(Attribute_constraintContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MParser.Attribute_constraintContext
            super().__init__(parser)
            self.text = None # Token
            self.copyFrom(ctx)

        def MATCHING(self):
            return self.getToken(MParser.MATCHING, 0)
        def TEXT_LITERAL(self):
            return self.getToken(MParser.TEXT_LITERAL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMatchingPattern" ):
                listener.enterMatchingPattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMatchingPattern" ):
                listener.exitMatchingPattern(self)


    class MatchingListContext(Attribute_constraintContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MParser.Attribute_constraintContext
            super().__init__(parser)
            self.source = None # List_literalContext
            self.copyFrom(ctx)

        def IN(self):
            return self.getToken(MParser.IN, 0)
        def list_literal(self):
            return self.getTypedRuleContext(MParser.List_literalContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMatchingList" ):
                listener.enterMatchingList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMatchingList" ):
                listener.exitMatchingList(self)


    class MatchingRangeContext(Attribute_constraintContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MParser.Attribute_constraintContext
            super().__init__(parser)
            self.source = None # Range_literalContext
            self.copyFrom(ctx)

        def IN(self):
            return self.getToken(MParser.IN, 0)
        def range_literal(self):
            return self.getTypedRuleContext(MParser.Range_literalContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMatchingRange" ):
                listener.enterMatchingRange(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMatchingRange" ):
                listener.exitMatchingRange(self)


    class MatchingExpressionContext(Attribute_constraintContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MParser.Attribute_constraintContext
            super().__init__(parser)
            self.exp = None # ExpressionContext
            self.copyFrom(ctx)

        def MATCHING(self):
            return self.getToken(MParser.MATCHING, 0)
        def expression(self):
            return self.getTypedRuleContext(MParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMatchingExpression" ):
                listener.enterMatchingExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMatchingExpression" ):
                listener.exitMatchingExpression(self)



    def attribute_constraint(self):

        localctx = MParser.Attribute_constraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_attribute_constraint)
        try:
            self.state = 1593
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,101,self._ctx)
            if la_ == 1:
                localctx = MParser.MatchingListContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1583
                self.match(MParser.IN)
                self.state = 1584
                localctx.source = self.list_literal()
                pass

            elif la_ == 2:
                localctx = MParser.MatchingSetContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1585
                self.match(MParser.IN)
                self.state = 1586
                localctx.source = self.set_literal()
                pass

            elif la_ == 3:
                localctx = MParser.MatchingRangeContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 1587
                self.match(MParser.IN)
                self.state = 1588
                localctx.source = self.range_literal()
                pass

            elif la_ == 4:
                localctx = MParser.MatchingPatternContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 1589
                self.match(MParser.MATCHING)
                self.state = 1590
                localctx.text = self.match(MParser.TEXT_LITERAL)
                pass

            elif la_ == 5:
                localctx = MParser.MatchingExpressionContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 1591
                self.match(MParser.MATCHING)
                self.state = 1592
                localctx.exp = self.expression(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class List_literalContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRAK(self):
            return self.getToken(MParser.LBRAK, 0)

        def RBRAK(self):
            return self.getToken(MParser.RBRAK, 0)

        def MUTABLE(self):
            return self.getToken(MParser.MUTABLE, 0)

        def expression_list(self):
            return self.getTypedRuleContext(MParser.Expression_listContext,0)


        def getRuleIndex(self):
            return MParser.RULE_list_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterList_literal" ):
                listener.enterList_literal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitList_literal" ):
                listener.exitList_literal(self)




    def list_literal(self):

        localctx = MParser.List_literalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_list_literal)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1596
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MParser.MUTABLE:
                self.state = 1595
                self.match(MParser.MUTABLE)


            self.state = 1598
            self.match(MParser.LBRAK)
            self.state = 1600
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << MParser.LPAR) | (1 << MParser.LBRAK) | (1 << MParser.LCURL) | (1 << MParser.MINUS) | (1 << MParser.LT) | (1 << MParser.LTGT) | (1 << MParser.LTCOLONGT) | (1 << MParser.CODE))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (MParser.DOCUMENT - 64)) | (1 << (MParser.BLOB - 64)) | (1 << (MParser.EXECUTE - 64)) | (1 << (MParser.FETCH - 64)) | (1 << (MParser.MUTABLE - 64)) | (1 << (MParser.NONE - 64)) | (1 << (MParser.NOT - 64)))) != 0) or ((((_la - 137)) & ~0x3f) == 0 and ((1 << (_la - 137)) & ((1 << (MParser.READ - 137)) | (1 << (MParser.SELF - 137)) | (1 << (MParser.SORTED - 137)) | (1 << (MParser.THIS - 137)) | (1 << (MParser.BOOLEAN_LITERAL - 137)) | (1 << (MParser.CHAR_LITERAL - 137)) | (1 << (MParser.MIN_INTEGER - 137)) | (1 << (MParser.MAX_INTEGER - 137)) | (1 << (MParser.SYMBOL_IDENTIFIER - 137)) | (1 << (MParser.TYPE_IDENTIFIER - 137)) | (1 << (MParser.VARIABLE_IDENTIFIER - 137)) | (1 << (MParser.TEXT_LITERAL - 137)) | (1 << (MParser.UUID_LITERAL - 137)) | (1 << (MParser.INTEGER_LITERAL - 137)) | (1 << (MParser.HEXA_LITERAL - 137)) | (1 << (MParser.DECIMAL_LITERAL - 137)) | (1 << (MParser.DATETIME_LITERAL - 137)) | (1 << (MParser.TIME_LITERAL - 137)) | (1 << (MParser.DATE_LITERAL - 137)) | (1 << (MParser.PERIOD_LITERAL - 137)) | (1 << (MParser.VERSION_LITERAL - 137)))) != 0):
                self.state = 1599
                self.expression_list()


            self.state = 1602
            self.match(MParser.RBRAK)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Set_literalContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LT(self):
            return self.getToken(MParser.LT, 0)

        def GT(self):
            return self.getToken(MParser.GT, 0)

        def MUTABLE(self):
            return self.getToken(MParser.MUTABLE, 0)

        def expression_list(self):
            return self.getTypedRuleContext(MParser.Expression_listContext,0)


        def getRuleIndex(self):
            return MParser.RULE_set_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSet_literal" ):
                listener.enterSet_literal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSet_literal" ):
                listener.exitSet_literal(self)




    def set_literal(self):

        localctx = MParser.Set_literalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_set_literal)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1605
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MParser.MUTABLE:
                self.state = 1604
                self.match(MParser.MUTABLE)


            self.state = 1607
            self.match(MParser.LT)
            self.state = 1609
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << MParser.LPAR) | (1 << MParser.LBRAK) | (1 << MParser.LCURL) | (1 << MParser.MINUS) | (1 << MParser.LT) | (1 << MParser.LTGT) | (1 << MParser.LTCOLONGT) | (1 << MParser.CODE))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (MParser.DOCUMENT - 64)) | (1 << (MParser.BLOB - 64)) | (1 << (MParser.EXECUTE - 64)) | (1 << (MParser.FETCH - 64)) | (1 << (MParser.MUTABLE - 64)) | (1 << (MParser.NONE - 64)) | (1 << (MParser.NOT - 64)))) != 0) or ((((_la - 137)) & ~0x3f) == 0 and ((1 << (_la - 137)) & ((1 << (MParser.READ - 137)) | (1 << (MParser.SELF - 137)) | (1 << (MParser.SORTED - 137)) | (1 << (MParser.THIS - 137)) | (1 << (MParser.BOOLEAN_LITERAL - 137)) | (1 << (MParser.CHAR_LITERAL - 137)) | (1 << (MParser.MIN_INTEGER - 137)) | (1 << (MParser.MAX_INTEGER - 137)) | (1 << (MParser.SYMBOL_IDENTIFIER - 137)) | (1 << (MParser.TYPE_IDENTIFIER - 137)) | (1 << (MParser.VARIABLE_IDENTIFIER - 137)) | (1 << (MParser.TEXT_LITERAL - 137)) | (1 << (MParser.UUID_LITERAL - 137)) | (1 << (MParser.INTEGER_LITERAL - 137)) | (1 << (MParser.HEXA_LITERAL - 137)) | (1 << (MParser.DECIMAL_LITERAL - 137)) | (1 << (MParser.DATETIME_LITERAL - 137)) | (1 << (MParser.TIME_LITERAL - 137)) | (1 << (MParser.DATE_LITERAL - 137)) | (1 << (MParser.PERIOD_LITERAL - 137)) | (1 << (MParser.VERSION_LITERAL - 137)))) != 0):
                self.state = 1608
                self.expression_list()


            self.state = 1611
            self.match(MParser.GT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Expression_listContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(MParser.ExpressionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(MParser.COMMA)
            else:
                return self.getToken(MParser.COMMA, i)

        def getRuleIndex(self):
            return MParser.RULE_expression_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpression_list" ):
                listener.enterExpression_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpression_list" ):
                listener.exitExpression_list(self)




    def expression_list(self):

        localctx = MParser.Expression_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_expression_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1613
            self.expression(0)
            self.state = 1618
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==MParser.COMMA:
                self.state = 1614
                self.match(MParser.COMMA)
                self.state = 1615
                self.expression(0)
                self.state = 1620
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Range_literalContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.low = None # ExpressionContext
            self.high = None # ExpressionContext

        def LBRAK(self):
            return self.getToken(MParser.LBRAK, 0)

        def RANGE(self):
            return self.getToken(MParser.RANGE, 0)

        def RBRAK(self):
            return self.getToken(MParser.RBRAK, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(MParser.ExpressionContext,i)


        def getRuleIndex(self):
            return MParser.RULE_range_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRange_literal" ):
                listener.enterRange_literal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRange_literal" ):
                listener.exitRange_literal(self)




    def range_literal(self):

        localctx = MParser.Range_literalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_range_literal)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1621
            self.match(MParser.LBRAK)
            self.state = 1622
            localctx.low = self.expression(0)
            self.state = 1623
            self.match(MParser.RANGE)
            self.state = 1624
            localctx.high = self.expression(0)
            self.state = 1625
            self.match(MParser.RBRAK)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TypedefContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return MParser.RULE_typedef

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class IteratorTypeContext(TypedefContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MParser.TypedefContext
            super().__init__(parser)
            self.i = None # TypedefContext
            self.copyFrom(ctx)

        def ITERATOR(self):
            return self.getToken(MParser.ITERATOR, 0)
        def LT(self):
            return self.getToken(MParser.LT, 0)
        def GT(self):
            return self.getToken(MParser.GT, 0)
        def typedef(self):
            return self.getTypedRuleContext(MParser.TypedefContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIteratorType" ):
                listener.enterIteratorType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIteratorType" ):
                listener.exitIteratorType(self)


    class SetTypeContext(TypedefContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MParser.TypedefContext
            super().__init__(parser)
            self.s = None # TypedefContext
            self.copyFrom(ctx)

        def LTGT(self):
            return self.getToken(MParser.LTGT, 0)
        def typedef(self):
            return self.getTypedRuleContext(MParser.TypedefContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetType" ):
                listener.enterSetType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetType" ):
                listener.exitSetType(self)


    class ListTypeContext(TypedefContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MParser.TypedefContext
            super().__init__(parser)
            self.l = None # TypedefContext
            self.copyFrom(ctx)

        def LBRAK(self):
            return self.getToken(MParser.LBRAK, 0)
        def RBRAK(self):
            return self.getToken(MParser.RBRAK, 0)
        def typedef(self):
            return self.getTypedRuleContext(MParser.TypedefContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterListType" ):
                listener.enterListType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitListType" ):
                listener.exitListType(self)


    class DictTypeContext(TypedefContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MParser.TypedefContext
            super().__init__(parser)
            self.d = None # TypedefContext
            self.copyFrom(ctx)

        def LTCOLONGT(self):
            return self.getToken(MParser.LTCOLONGT, 0)
        def typedef(self):
            return self.getTypedRuleContext(MParser.TypedefContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDictType" ):
                listener.enterDictType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDictType" ):
                listener.exitDictType(self)


    class CursorTypeContext(TypedefContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MParser.TypedefContext
            super().__init__(parser)
            self.c = None # TypedefContext
            self.copyFrom(ctx)

        def CURSOR(self):
            return self.getToken(MParser.CURSOR, 0)
        def LT(self):
            return self.getToken(MParser.LT, 0)
        def GT(self):
            return self.getToken(MParser.GT, 0)
        def typedef(self):
            return self.getTypedRuleContext(MParser.TypedefContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCursorType" ):
                listener.enterCursorType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCursorType" ):
                listener.exitCursorType(self)


    class PrimaryTypeContext(TypedefContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MParser.TypedefContext
            super().__init__(parser)
            self.p = None # Primary_typeContext
            self.copyFrom(ctx)

        def primary_type(self):
            return self.getTypedRuleContext(MParser.Primary_typeContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrimaryType" ):
                listener.enterPrimaryType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrimaryType" ):
                listener.exitPrimaryType(self)



    def typedef(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = MParser.TypedefContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 174
        self.enterRecursionRule(localctx, 174, self.RULE_typedef, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1639
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MParser.BOOLEAN, MParser.CHARACTER, MParser.TEXT, MParser.INTEGER, MParser.DECIMAL, MParser.DATE, MParser.TIME, MParser.DATETIME, MParser.PERIOD, MParser.VERSION, MParser.CODE, MParser.DOCUMENT, MParser.BLOB, MParser.IMAGE, MParser.UUID, MParser.HTML, MParser.TYPE_IDENTIFIER]:
                localctx = MParser.PrimaryTypeContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx

                self.state = 1628
                localctx.p = self.primary_type()
                pass
            elif token in [MParser.CURSOR]:
                localctx = MParser.CursorTypeContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1629
                self.match(MParser.CURSOR)
                self.state = 1630
                self.match(MParser.LT)
                self.state = 1631
                localctx.c = self.typedef(0)
                self.state = 1632
                self.match(MParser.GT)
                pass
            elif token in [MParser.ITERATOR]:
                localctx = MParser.IteratorTypeContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1634
                self.match(MParser.ITERATOR)
                self.state = 1635
                self.match(MParser.LT)
                self.state = 1636
                localctx.i = self.typedef(0)
                self.state = 1637
                self.match(MParser.GT)
                pass
            else:
                raise NoViableAltException(self)

            self._ctx.stop = self._input.LT(-1)
            self.state = 1650
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,109,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 1648
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,108,self._ctx)
                    if la_ == 1:
                        localctx = MParser.SetTypeContext(self, MParser.TypedefContext(self, _parentctx, _parentState))
                        localctx.s = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_typedef)
                        self.state = 1641
                        if not self.precpred(self._ctx, 5):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 5)")
                        self.state = 1642
                        self.match(MParser.LTGT)
                        pass

                    elif la_ == 2:
                        localctx = MParser.ListTypeContext(self, MParser.TypedefContext(self, _parentctx, _parentState))
                        localctx.l = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_typedef)
                        self.state = 1643
                        if not self.precpred(self._ctx, 4):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 4)")
                        self.state = 1644
                        self.match(MParser.LBRAK)
                        self.state = 1645
                        self.match(MParser.RBRAK)
                        pass

                    elif la_ == 3:
                        localctx = MParser.DictTypeContext(self, MParser.TypedefContext(self, _parentctx, _parentState))
                        localctx.d = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_typedef)
                        self.state = 1646
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 1647
                        self.match(MParser.LTCOLONGT)
                        pass

             
                self.state = 1652
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,109,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class Primary_typeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return MParser.RULE_primary_type

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class NativeTypeContext(Primary_typeContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MParser.Primary_typeContext
            super().__init__(parser)
            self.n = None # Native_typeContext
            self.copyFrom(ctx)

        def native_type(self):
            return self.getTypedRuleContext(MParser.Native_typeContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNativeType" ):
                listener.enterNativeType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNativeType" ):
                listener.exitNativeType(self)


    class CategoryTypeContext(Primary_typeContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MParser.Primary_typeContext
            super().__init__(parser)
            self.c = None # Category_typeContext
            self.copyFrom(ctx)

        def category_type(self):
            return self.getTypedRuleContext(MParser.Category_typeContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCategoryType" ):
                listener.enterCategoryType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCategoryType" ):
                listener.exitCategoryType(self)



    def primary_type(self):

        localctx = MParser.Primary_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_primary_type)
        try:
            self.state = 1655
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MParser.BOOLEAN, MParser.CHARACTER, MParser.TEXT, MParser.INTEGER, MParser.DECIMAL, MParser.DATE, MParser.TIME, MParser.DATETIME, MParser.PERIOD, MParser.VERSION, MParser.CODE, MParser.DOCUMENT, MParser.BLOB, MParser.IMAGE, MParser.UUID, MParser.HTML]:
                localctx = MParser.NativeTypeContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1653
                localctx.n = self.native_type()
                pass
            elif token in [MParser.TYPE_IDENTIFIER]:
                localctx = MParser.CategoryTypeContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1654
                localctx.c = self.category_type()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Native_typeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return MParser.RULE_native_type

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class PeriodTypeContext(Native_typeContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MParser.Native_typeContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def PERIOD(self):
            return self.getToken(MParser.PERIOD, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPeriodType" ):
                listener.enterPeriodType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPeriodType" ):
                listener.exitPeriodType(self)


    class HtmlTypeContext(Native_typeContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MParser.Native_typeContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def HTML(self):
            return self.getToken(MParser.HTML, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHtmlType" ):
                listener.enterHtmlType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHtmlType" ):
                listener.exitHtmlType(self)


    class BooleanTypeContext(Native_typeContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MParser.Native_typeContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def BOOLEAN(self):
            return self.getToken(MParser.BOOLEAN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBooleanType" ):
                listener.enterBooleanType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBooleanType" ):
                listener.exitBooleanType(self)


    class DocumentTypeContext(Native_typeContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MParser.Native_typeContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DOCUMENT(self):
            return self.getToken(MParser.DOCUMENT, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDocumentType" ):
                listener.enterDocumentType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDocumentType" ):
                listener.exitDocumentType(self)


    class CharacterTypeContext(Native_typeContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MParser.Native_typeContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CHARACTER(self):
            return self.getToken(MParser.CHARACTER, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCharacterType" ):
                listener.enterCharacterType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCharacterType" ):
                listener.exitCharacterType(self)


    class VersionTypeContext(Native_typeContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MParser.Native_typeContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def VERSION(self):
            return self.getToken(MParser.VERSION, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVersionType" ):
                listener.enterVersionType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVersionType" ):
                listener.exitVersionType(self)


    class TextTypeContext(Native_typeContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MParser.Native_typeContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def TEXT(self):
            return self.getToken(MParser.TEXT, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTextType" ):
                listener.enterTextType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTextType" ):
                listener.exitTextType(self)


    class ImageTypeContext(Native_typeContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MParser.Native_typeContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def IMAGE(self):
            return self.getToken(MParser.IMAGE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImageType" ):
                listener.enterImageType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImageType" ):
                listener.exitImageType(self)


    class TimeTypeContext(Native_typeContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MParser.Native_typeContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def TIME(self):
            return self.getToken(MParser.TIME, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTimeType" ):
                listener.enterTimeType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTimeType" ):
                listener.exitTimeType(self)


    class IntegerTypeContext(Native_typeContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MParser.Native_typeContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def INTEGER(self):
            return self.getToken(MParser.INTEGER, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIntegerType" ):
                listener.enterIntegerType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIntegerType" ):
                listener.exitIntegerType(self)


    class DateTimeTypeContext(Native_typeContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MParser.Native_typeContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DATETIME(self):
            return self.getToken(MParser.DATETIME, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDateTimeType" ):
                listener.enterDateTimeType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDateTimeType" ):
                listener.exitDateTimeType(self)


    class BlobTypeContext(Native_typeContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MParser.Native_typeContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def BLOB(self):
            return self.getToken(MParser.BLOB, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBlobType" ):
                listener.enterBlobType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBlobType" ):
                listener.exitBlobType(self)


    class UUIDTypeContext(Native_typeContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MParser.Native_typeContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def UUID(self):
            return self.getToken(MParser.UUID, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUUIDType" ):
                listener.enterUUIDType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUUIDType" ):
                listener.exitUUIDType(self)


    class DecimalTypeContext(Native_typeContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MParser.Native_typeContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DECIMAL(self):
            return self.getToken(MParser.DECIMAL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDecimalType" ):
                listener.enterDecimalType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDecimalType" ):
                listener.exitDecimalType(self)


    class CodeTypeContext(Native_typeContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MParser.Native_typeContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CODE(self):
            return self.getToken(MParser.CODE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCodeType" ):
                listener.enterCodeType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCodeType" ):
                listener.exitCodeType(self)


    class DateTypeContext(Native_typeContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MParser.Native_typeContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DATE(self):
            return self.getToken(MParser.DATE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDateType" ):
                listener.enterDateType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDateType" ):
                listener.exitDateType(self)



    def native_type(self):

        localctx = MParser.Native_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_native_type)
        try:
            self.state = 1673
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MParser.BOOLEAN]:
                localctx = MParser.BooleanTypeContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1657
                self.match(MParser.BOOLEAN)
                pass
            elif token in [MParser.CHARACTER]:
                localctx = MParser.CharacterTypeContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1658
                self.match(MParser.CHARACTER)
                pass
            elif token in [MParser.TEXT]:
                localctx = MParser.TextTypeContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 1659
                self.match(MParser.TEXT)
                pass
            elif token in [MParser.IMAGE]:
                localctx = MParser.ImageTypeContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 1660
                self.match(MParser.IMAGE)
                pass
            elif token in [MParser.INTEGER]:
                localctx = MParser.IntegerTypeContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 1661
                self.match(MParser.INTEGER)
                pass
            elif token in [MParser.DECIMAL]:
                localctx = MParser.DecimalTypeContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 1662
                self.match(MParser.DECIMAL)
                pass
            elif token in [MParser.DOCUMENT]:
                localctx = MParser.DocumentTypeContext(self, localctx)
                self.enterOuterAlt(localctx, 7)
                self.state = 1663
                self.match(MParser.DOCUMENT)
                pass
            elif token in [MParser.DATE]:
                localctx = MParser.DateTypeContext(self, localctx)
                self.enterOuterAlt(localctx, 8)
                self.state = 1664
                self.match(MParser.DATE)
                pass
            elif token in [MParser.DATETIME]:
                localctx = MParser.DateTimeTypeContext(self, localctx)
                self.enterOuterAlt(localctx, 9)
                self.state = 1665
                self.match(MParser.DATETIME)
                pass
            elif token in [MParser.TIME]:
                localctx = MParser.TimeTypeContext(self, localctx)
                self.enterOuterAlt(localctx, 10)
                self.state = 1666
                self.match(MParser.TIME)
                pass
            elif token in [MParser.PERIOD]:
                localctx = MParser.PeriodTypeContext(self, localctx)
                self.enterOuterAlt(localctx, 11)
                self.state = 1667
                self.match(MParser.PERIOD)
                pass
            elif token in [MParser.VERSION]:
                localctx = MParser.VersionTypeContext(self, localctx)
                self.enterOuterAlt(localctx, 12)
                self.state = 1668
                self.match(MParser.VERSION)
                pass
            elif token in [MParser.CODE]:
                localctx = MParser.CodeTypeContext(self, localctx)
                self.enterOuterAlt(localctx, 13)
                self.state = 1669
                self.match(MParser.CODE)
                pass
            elif token in [MParser.BLOB]:
                localctx = MParser.BlobTypeContext(self, localctx)
                self.enterOuterAlt(localctx, 14)
                self.state = 1670
                self.match(MParser.BLOB)
                pass
            elif token in [MParser.UUID]:
                localctx = MParser.UUIDTypeContext(self, localctx)
                self.enterOuterAlt(localctx, 15)
                self.state = 1671
                self.match(MParser.UUID)
                pass
            elif token in [MParser.HTML]:
                localctx = MParser.HtmlTypeContext(self, localctx)
                self.enterOuterAlt(localctx, 16)
                self.state = 1672
                self.match(MParser.HTML)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Category_typeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.t1 = None # Token

        def TYPE_IDENTIFIER(self):
            return self.getToken(MParser.TYPE_IDENTIFIER, 0)

        def getRuleIndex(self):
            return MParser.RULE_category_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCategory_type" ):
                listener.enterCategory_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCategory_type" ):
                listener.exitCategory_type(self)




    def category_type(self):

        localctx = MParser.Category_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_category_type)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1675
            localctx.t1 = self.match(MParser.TYPE_IDENTIFIER)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Mutable_category_typeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def category_type(self):
            return self.getTypedRuleContext(MParser.Category_typeContext,0)


        def MUTABLE(self):
            return self.getToken(MParser.MUTABLE, 0)

        def getRuleIndex(self):
            return MParser.RULE_mutable_category_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMutable_category_type" ):
                listener.enterMutable_category_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMutable_category_type" ):
                listener.exitMutable_category_type(self)




    def mutable_category_type(self):

        localctx = MParser.Mutable_category_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_mutable_category_type)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1678
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MParser.MUTABLE:
                self.state = 1677
                self.match(MParser.MUTABLE)


            self.state = 1680
            self.category_type()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Code_typeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.t1 = None # Token

        def CODE(self):
            return self.getToken(MParser.CODE, 0)

        def getRuleIndex(self):
            return MParser.RULE_code_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCode_type" ):
                listener.enterCode_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCode_type" ):
                listener.exitCode_type(self)




    def code_type(self):

        localctx = MParser.Code_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_code_type)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1682
            localctx.t1 = self.match(MParser.CODE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Category_declarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return MParser.RULE_category_declaration

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class ConcreteCategoryDeclarationContext(Category_declarationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MParser.Category_declarationContext
            super().__init__(parser)
            self.decl = None # Concrete_category_declarationContext
            self.copyFrom(ctx)

        def concrete_category_declaration(self):
            return self.getTypedRuleContext(MParser.Concrete_category_declarationContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConcreteCategoryDeclaration" ):
                listener.enterConcreteCategoryDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConcreteCategoryDeclaration" ):
                listener.exitConcreteCategoryDeclaration(self)


    class NativeCategoryDeclarationContext(Category_declarationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MParser.Category_declarationContext
            super().__init__(parser)
            self.decl = None # Native_category_declarationContext
            self.copyFrom(ctx)

        def native_category_declaration(self):
            return self.getTypedRuleContext(MParser.Native_category_declarationContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNativeCategoryDeclaration" ):
                listener.enterNativeCategoryDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNativeCategoryDeclaration" ):
                listener.exitNativeCategoryDeclaration(self)


    class SingletonCategoryDeclarationContext(Category_declarationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MParser.Category_declarationContext
            super().__init__(parser)
            self.decl = None # Singleton_category_declarationContext
            self.copyFrom(ctx)

        def singleton_category_declaration(self):
            return self.getTypedRuleContext(MParser.Singleton_category_declarationContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSingletonCategoryDeclaration" ):
                listener.enterSingletonCategoryDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSingletonCategoryDeclaration" ):
                listener.exitSingletonCategoryDeclaration(self)



    def category_declaration(self):

        localctx = MParser.Category_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 186, self.RULE_category_declaration)
        try:
            self.state = 1687
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,113,self._ctx)
            if la_ == 1:
                localctx = MParser.ConcreteCategoryDeclarationContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1684
                localctx.decl = self.concrete_category_declaration()
                pass

            elif la_ == 2:
                localctx = MParser.NativeCategoryDeclarationContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1685
                localctx.decl = self.native_category_declaration()
                pass

            elif la_ == 3:
                localctx = MParser.SingletonCategoryDeclarationContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 1686
                localctx.decl = self.singleton_category_declaration()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Widget_declarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return MParser.RULE_widget_declaration

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class ConcreteWidgetDeclarationContext(Widget_declarationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MParser.Widget_declarationContext
            super().__init__(parser)
            self.decl = None # Concrete_widget_declarationContext
            self.copyFrom(ctx)

        def concrete_widget_declaration(self):
            return self.getTypedRuleContext(MParser.Concrete_widget_declarationContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConcreteWidgetDeclaration" ):
                listener.enterConcreteWidgetDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConcreteWidgetDeclaration" ):
                listener.exitConcreteWidgetDeclaration(self)


    class NativeWidgetDeclarationContext(Widget_declarationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MParser.Widget_declarationContext
            super().__init__(parser)
            self.decl = None # Native_widget_declarationContext
            self.copyFrom(ctx)

        def native_widget_declaration(self):
            return self.getTypedRuleContext(MParser.Native_widget_declarationContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNativeWidgetDeclaration" ):
                listener.enterNativeWidgetDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNativeWidgetDeclaration" ):
                listener.exitNativeWidgetDeclaration(self)



    def widget_declaration(self):

        localctx = MParser.Widget_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 188, self.RULE_widget_declaration)
        try:
            self.state = 1691
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MParser.WIDGET]:
                localctx = MParser.ConcreteWidgetDeclarationContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1689
                localctx.decl = self.concrete_widget_declaration()
                pass
            elif token in [MParser.NATIVE]:
                localctx = MParser.NativeWidgetDeclarationContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1690
                localctx.decl = self.native_widget_declaration()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Type_identifier_listContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def type_identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MParser.Type_identifierContext)
            else:
                return self.getTypedRuleContext(MParser.Type_identifierContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(MParser.COMMA)
            else:
                return self.getToken(MParser.COMMA, i)

        def getRuleIndex(self):
            return MParser.RULE_type_identifier_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterType_identifier_list" ):
                listener.enterType_identifier_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitType_identifier_list" ):
                listener.exitType_identifier_list(self)




    def type_identifier_list(self):

        localctx = MParser.Type_identifier_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 190, self.RULE_type_identifier_list)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1693
            self.type_identifier()
            self.state = 1698
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,115,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1694
                    self.match(MParser.COMMA)
                    self.state = 1695
                    self.type_identifier() 
                self.state = 1700
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,115,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Method_identifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variable_identifier(self):
            return self.getTypedRuleContext(MParser.Variable_identifierContext,0)


        def type_identifier(self):
            return self.getTypedRuleContext(MParser.Type_identifierContext,0)


        def getRuleIndex(self):
            return MParser.RULE_method_identifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMethod_identifier" ):
                listener.enterMethod_identifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMethod_identifier" ):
                listener.exitMethod_identifier(self)




    def method_identifier(self):

        localctx = MParser.Method_identifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 192, self.RULE_method_identifier)
        try:
            self.state = 1703
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MParser.VARIABLE_IDENTIFIER]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1701
                self.variable_identifier()
                pass
            elif token in [MParser.TYPE_IDENTIFIER]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1702
                self.type_identifier()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Identifier_or_keywordContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(MParser.IdentifierContext,0)


        def keyword(self):
            return self.getTypedRuleContext(MParser.KeywordContext,0)


        def getRuleIndex(self):
            return MParser.RULE_identifier_or_keyword

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentifier_or_keyword" ):
                listener.enterIdentifier_or_keyword(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentifier_or_keyword" ):
                listener.exitIdentifier_or_keyword(self)




    def identifier_or_keyword(self):

        localctx = MParser.Identifier_or_keywordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 194, self.RULE_identifier_or_keyword)
        try:
            self.state = 1707
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MParser.SYMBOL_IDENTIFIER, MParser.TYPE_IDENTIFIER, MParser.VARIABLE_IDENTIFIER]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1705
                self.identifier()
                pass
            elif token in [MParser.JAVA, MParser.CSHARP, MParser.PYTHON2, MParser.PYTHON3, MParser.JAVASCRIPT, MParser.SWIFT, MParser.BOOLEAN, MParser.CHARACTER, MParser.TEXT, MParser.INTEGER, MParser.DECIMAL, MParser.DATE, MParser.TIME, MParser.DATETIME, MParser.PERIOD, MParser.VERSION, MParser.METHOD_T, MParser.CODE, MParser.DOCUMENT, MParser.BLOB, MParser.IMAGE, MParser.UUID, MParser.ITERATOR, MParser.CURSOR, MParser.HTML, MParser.ABSTRACT, MParser.ALL, MParser.ALWAYS, MParser.AND, MParser.ANY, MParser.AS, MParser.ASC, MParser.ATTR, MParser.ATTRIBUTE, MParser.ATTRIBUTES, MParser.BINDINGS, MParser.BREAK, MParser.BY, MParser.CASE, MParser.CATCH, MParser.CATEGORY, MParser.CLASS, MParser.CLOSE, MParser.CONTAINS, MParser.DEF, MParser.DEFAULT, MParser.DEFINE, MParser.DELETE, MParser.DESC, MParser.DO, MParser.DOING, MParser.EACH, MParser.ELSE, MParser.ENUM, MParser.ENUMERATED, MParser.EXCEPT, MParser.EXECUTE, MParser.EXPECTING, MParser.EXTENDS, MParser.FETCH, MParser.FILTERED, MParser.FINALLY, MParser.FLUSH, MParser.FOR, MParser.FROM, MParser.GETTER, MParser.HAS, MParser.IF, MParser.IN, MParser.INDEX, MParser.INVOKE, MParser.IS, MParser.MATCHING, MParser.METHOD, MParser.METHODS, MParser.MODULO, MParser.MUTABLE, MParser.NATIVE, MParser.NONE, MParser.NOT, MParser.NOTHING, MParser.NULL, MParser.ON, MParser.ONE, MParser.OPEN, MParser.OPERATOR, MParser.OR, MParser.ORDER, MParser.OTHERWISE, MParser.PASS, MParser.RAISE, MParser.READ, MParser.RECEIVING, MParser.RESOURCE, MParser.RETURN, MParser.RETURNING, MParser.ROWS, MParser.SELF, MParser.SETTER, MParser.SINGLETON, MParser.SORTED, MParser.STORABLE, MParser.STORE, MParser.SWITCH, MParser.TEST, MParser.THIS, MParser.THROW, MParser.TO, MParser.TRY, MParser.VERIFYING, MParser.WIDGET, MParser.WITH, MParser.WHEN, MParser.WHERE, MParser.WHILE, MParser.WRITE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1706
                self.keyword()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Nospace_hyphen_identifier_or_keywordContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MINUS(self):
            return self.getToken(MParser.MINUS, 0)

        def nospace_identifier_or_keyword(self):
            return self.getTypedRuleContext(MParser.Nospace_identifier_or_keywordContext,0)


        def getRuleIndex(self):
            return MParser.RULE_nospace_hyphen_identifier_or_keyword

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNospace_hyphen_identifier_or_keyword" ):
                listener.enterNospace_hyphen_identifier_or_keyword(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNospace_hyphen_identifier_or_keyword" ):
                listener.exitNospace_hyphen_identifier_or_keyword(self)




    def nospace_hyphen_identifier_or_keyword(self):

        localctx = MParser.Nospace_hyphen_identifier_or_keywordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 196, self.RULE_nospace_hyphen_identifier_or_keyword)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1709
            if not self.wasNotWhiteSpace():
                from antlr4.error.Errors import FailedPredicateException
                raise FailedPredicateException(self, "$parser.wasNotWhiteSpace()")
            self.state = 1710
            self.match(MParser.MINUS)
            self.state = 1711
            self.nospace_identifier_or_keyword()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Nospace_identifier_or_keywordContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier_or_keyword(self):
            return self.getTypedRuleContext(MParser.Identifier_or_keywordContext,0)


        def getRuleIndex(self):
            return MParser.RULE_nospace_identifier_or_keyword

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNospace_identifier_or_keyword" ):
                listener.enterNospace_identifier_or_keyword(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNospace_identifier_or_keyword" ):
                listener.exitNospace_identifier_or_keyword(self)




    def nospace_identifier_or_keyword(self):

        localctx = MParser.Nospace_identifier_or_keywordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 198, self.RULE_nospace_identifier_or_keyword)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1713
            if not self.wasNotWhiteSpace():
                from antlr4.error.Errors import FailedPredicateException
                raise FailedPredicateException(self, "$parser.wasNotWhiteSpace()")
            self.state = 1714
            self.identifier_or_keyword()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class IdentifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return MParser.RULE_identifier

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class TypeIdentifierContext(IdentifierContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MParser.IdentifierContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def type_identifier(self):
            return self.getTypedRuleContext(MParser.Type_identifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeIdentifier" ):
                listener.enterTypeIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeIdentifier" ):
                listener.exitTypeIdentifier(self)


    class SymbolIdentifierContext(IdentifierContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MParser.IdentifierContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def symbol_identifier(self):
            return self.getTypedRuleContext(MParser.Symbol_identifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSymbolIdentifier" ):
                listener.enterSymbolIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSymbolIdentifier" ):
                listener.exitSymbolIdentifier(self)


    class VariableIdentifierContext(IdentifierContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MParser.IdentifierContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def variable_identifier(self):
            return self.getTypedRuleContext(MParser.Variable_identifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariableIdentifier" ):
                listener.enterVariableIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariableIdentifier" ):
                listener.exitVariableIdentifier(self)



    def identifier(self):

        localctx = MParser.IdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 200, self.RULE_identifier)
        try:
            self.state = 1719
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MParser.VARIABLE_IDENTIFIER]:
                localctx = MParser.VariableIdentifierContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1716
                self.variable_identifier()
                pass
            elif token in [MParser.TYPE_IDENTIFIER]:
                localctx = MParser.TypeIdentifierContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1717
                self.type_identifier()
                pass
            elif token in [MParser.SYMBOL_IDENTIFIER]:
                localctx = MParser.SymbolIdentifierContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 1718
                self.symbol_identifier()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Variable_identifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VARIABLE_IDENTIFIER(self):
            return self.getToken(MParser.VARIABLE_IDENTIFIER, 0)

        def getRuleIndex(self):
            return MParser.RULE_variable_identifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariable_identifier" ):
                listener.enterVariable_identifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariable_identifier" ):
                listener.exitVariable_identifier(self)




    def variable_identifier(self):

        localctx = MParser.Variable_identifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 202, self.RULE_variable_identifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1721
            self.match(MParser.VARIABLE_IDENTIFIER)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Attribute_identifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VARIABLE_IDENTIFIER(self):
            return self.getToken(MParser.VARIABLE_IDENTIFIER, 0)

        def STORABLE(self):
            return self.getToken(MParser.STORABLE, 0)

        def getRuleIndex(self):
            return MParser.RULE_attribute_identifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttribute_identifier" ):
                listener.enterAttribute_identifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttribute_identifier" ):
                listener.exitAttribute_identifier(self)




    def attribute_identifier(self):

        localctx = MParser.Attribute_identifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 204, self.RULE_attribute_identifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1723
            _la = self._input.LA(1)
            if not(_la==MParser.STORABLE or _la==MParser.VARIABLE_IDENTIFIER):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Type_identifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TYPE_IDENTIFIER(self):
            return self.getToken(MParser.TYPE_IDENTIFIER, 0)

        def getRuleIndex(self):
            return MParser.RULE_type_identifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterType_identifier" ):
                listener.enterType_identifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitType_identifier" ):
                listener.exitType_identifier(self)




    def type_identifier(self):

        localctx = MParser.Type_identifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 206, self.RULE_type_identifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1725
            self.match(MParser.TYPE_IDENTIFIER)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Symbol_identifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SYMBOL_IDENTIFIER(self):
            return self.getToken(MParser.SYMBOL_IDENTIFIER, 0)

        def getRuleIndex(self):
            return MParser.RULE_symbol_identifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSymbol_identifier" ):
                listener.enterSymbol_identifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSymbol_identifier" ):
                listener.exitSymbol_identifier(self)




    def symbol_identifier(self):

        localctx = MParser.Symbol_identifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 208, self.RULE_symbol_identifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1727
            self.match(MParser.SYMBOL_IDENTIFIER)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Any_identifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VARIABLE_IDENTIFIER(self):
            return self.getToken(MParser.VARIABLE_IDENTIFIER, 0)

        def TYPE_IDENTIFIER(self):
            return self.getToken(MParser.TYPE_IDENTIFIER, 0)

        def SYMBOL_IDENTIFIER(self):
            return self.getToken(MParser.SYMBOL_IDENTIFIER, 0)

        def getRuleIndex(self):
            return MParser.RULE_any_identifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAny_identifier" ):
                listener.enterAny_identifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAny_identifier" ):
                listener.exitAny_identifier(self)




    def any_identifier(self):

        localctx = MParser.Any_identifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 210, self.RULE_any_identifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1729
            _la = self._input.LA(1)
            if not(((((_la - 167)) & ~0x3f) == 0 and ((1 << (_la - 167)) & ((1 << (MParser.SYMBOL_IDENTIFIER - 167)) | (1 << (MParser.TYPE_IDENTIFIER - 167)) | (1 << (MParser.VARIABLE_IDENTIFIER - 167)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Argument_listContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def argument(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MParser.ArgumentContext)
            else:
                return self.getTypedRuleContext(MParser.ArgumentContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(MParser.COMMA)
            else:
                return self.getToken(MParser.COMMA, i)

        def getRuleIndex(self):
            return MParser.RULE_argument_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArgument_list" ):
                listener.enterArgument_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArgument_list" ):
                listener.exitArgument_list(self)




    def argument_list(self):

        localctx = MParser.Argument_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 212, self.RULE_argument_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1731
            self.argument()
            self.state = 1736
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==MParser.COMMA:
                self.state = 1732
                self.match(MParser.COMMA)
                self.state = 1733
                self.argument()
                self.state = 1738
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ArgumentContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return MParser.RULE_argument

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class OperatorArgumentContext(ArgumentContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MParser.ArgumentContext
            super().__init__(parser)
            self.arg = None # Operator_argumentContext
            self.copyFrom(ctx)

        def operator_argument(self):
            return self.getTypedRuleContext(MParser.Operator_argumentContext,0)

        def MUTABLE(self):
            return self.getToken(MParser.MUTABLE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOperatorArgument" ):
                listener.enterOperatorArgument(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOperatorArgument" ):
                listener.exitOperatorArgument(self)


    class CodeArgumentContext(ArgumentContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MParser.ArgumentContext
            super().__init__(parser)
            self.arg = None # Code_argumentContext
            self.copyFrom(ctx)

        def code_argument(self):
            return self.getTypedRuleContext(MParser.Code_argumentContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCodeArgument" ):
                listener.enterCodeArgument(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCodeArgument" ):
                listener.exitCodeArgument(self)



    def argument(self):

        localctx = MParser.ArgumentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 214, self.RULE_argument)
        self._la = 0 # Token type
        try:
            self.state = 1744
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MParser.CODE]:
                localctx = MParser.CodeArgumentContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1739
                localctx.arg = self.code_argument()
                pass
            elif token in [MParser.MUTABLE, MParser.VARIABLE_IDENTIFIER]:
                localctx = MParser.OperatorArgumentContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1741
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MParser.MUTABLE:
                    self.state = 1740
                    self.match(MParser.MUTABLE)


                self.state = 1743
                localctx.arg = self.operator_argument()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Operator_argumentContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def named_argument(self):
            return self.getTypedRuleContext(MParser.Named_argumentContext,0)


        def typed_argument(self):
            return self.getTypedRuleContext(MParser.Typed_argumentContext,0)


        def getRuleIndex(self):
            return MParser.RULE_operator_argument

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOperator_argument" ):
                listener.enterOperator_argument(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOperator_argument" ):
                listener.exitOperator_argument(self)




    def operator_argument(self):

        localctx = MParser.Operator_argumentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 216, self.RULE_operator_argument)
        try:
            self.state = 1748
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,122,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1746
                self.named_argument()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1747
                self.typed_argument()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Named_argumentContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variable_identifier(self):
            return self.getTypedRuleContext(MParser.Variable_identifierContext,0)


        def EQ(self):
            return self.getToken(MParser.EQ, 0)

        def literal_expression(self):
            return self.getTypedRuleContext(MParser.Literal_expressionContext,0)


        def getRuleIndex(self):
            return MParser.RULE_named_argument

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNamed_argument" ):
                listener.enterNamed_argument(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNamed_argument" ):
                listener.exitNamed_argument(self)




    def named_argument(self):

        localctx = MParser.Named_argumentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 218, self.RULE_named_argument)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1750
            self.variable_identifier()
            self.state = 1753
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MParser.EQ:
                self.state = 1751
                self.match(MParser.EQ)
                self.state = 1752
                self.literal_expression()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Code_argumentContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # Variable_identifierContext

        def code_type(self):
            return self.getTypedRuleContext(MParser.Code_typeContext,0)


        def variable_identifier(self):
            return self.getTypedRuleContext(MParser.Variable_identifierContext,0)


        def getRuleIndex(self):
            return MParser.RULE_code_argument

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCode_argument" ):
                listener.enterCode_argument(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCode_argument" ):
                listener.exitCode_argument(self)




    def code_argument(self):

        localctx = MParser.Code_argumentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 220, self.RULE_code_argument)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1755
            self.code_type()
            self.state = 1756
            localctx.name = self.variable_identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Category_or_any_typeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typedef(self):
            return self.getTypedRuleContext(MParser.TypedefContext,0)


        def any_type(self):
            return self.getTypedRuleContext(MParser.Any_typeContext,0)


        def getRuleIndex(self):
            return MParser.RULE_category_or_any_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCategory_or_any_type" ):
                listener.enterCategory_or_any_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCategory_or_any_type" ):
                listener.exitCategory_or_any_type(self)




    def category_or_any_type(self):

        localctx = MParser.Category_or_any_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 222, self.RULE_category_or_any_type)
        try:
            self.state = 1760
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MParser.BOOLEAN, MParser.CHARACTER, MParser.TEXT, MParser.INTEGER, MParser.DECIMAL, MParser.DATE, MParser.TIME, MParser.DATETIME, MParser.PERIOD, MParser.VERSION, MParser.CODE, MParser.DOCUMENT, MParser.BLOB, MParser.IMAGE, MParser.UUID, MParser.ITERATOR, MParser.CURSOR, MParser.HTML, MParser.TYPE_IDENTIFIER]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1758
                self.typedef(0)
                pass
            elif token in [MParser.ANY]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1759
                self.any_type(0)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Any_typeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return MParser.RULE_any_type

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class AnyListTypeContext(Any_typeContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MParser.Any_typeContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def any_type(self):
            return self.getTypedRuleContext(MParser.Any_typeContext,0)

        def LBRAK(self):
            return self.getToken(MParser.LBRAK, 0)
        def RBRAK(self):
            return self.getToken(MParser.RBRAK, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnyListType" ):
                listener.enterAnyListType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnyListType" ):
                listener.exitAnyListType(self)


    class AnyTypeContext(Any_typeContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MParser.Any_typeContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ANY(self):
            return self.getToken(MParser.ANY, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnyType" ):
                listener.enterAnyType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnyType" ):
                listener.exitAnyType(self)


    class AnyDictTypeContext(Any_typeContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MParser.Any_typeContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def any_type(self):
            return self.getTypedRuleContext(MParser.Any_typeContext,0)

        def LCURL(self):
            return self.getToken(MParser.LCURL, 0)
        def RCURL(self):
            return self.getToken(MParser.RCURL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnyDictType" ):
                listener.enterAnyDictType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnyDictType" ):
                listener.exitAnyDictType(self)



    def any_type(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = MParser.Any_typeContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 224
        self.enterRecursionRule(localctx, 224, self.RULE_any_type, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            localctx = MParser.AnyTypeContext(self, localctx)
            self._ctx = localctx
            _prevctx = localctx

            self.state = 1763
            self.match(MParser.ANY)
            self._ctx.stop = self._input.LT(-1)
            self.state = 1773
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,126,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 1771
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,125,self._ctx)
                    if la_ == 1:
                        localctx = MParser.AnyListTypeContext(self, MParser.Any_typeContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_any_type)
                        self.state = 1765
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 1766
                        self.match(MParser.LBRAK)
                        self.state = 1767
                        self.match(MParser.RBRAK)
                        pass

                    elif la_ == 2:
                        localctx = MParser.AnyDictTypeContext(self, MParser.Any_typeContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_any_type)
                        self.state = 1768
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 1769
                        self.match(MParser.LCURL)
                        self.state = 1770
                        self.match(MParser.RCURL)
                        pass

             
                self.state = 1775
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,126,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class Member_method_declaration_listContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def member_method_declaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MParser.Member_method_declarationContext)
            else:
                return self.getTypedRuleContext(MParser.Member_method_declarationContext,i)


        def lfp(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MParser.LfpContext)
            else:
                return self.getTypedRuleContext(MParser.LfpContext,i)


        def getRuleIndex(self):
            return MParser.RULE_member_method_declaration_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMember_method_declaration_list" ):
                listener.enterMember_method_declaration_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMember_method_declaration_list" ):
                listener.exitMember_method_declaration_list(self)




    def member_method_declaration_list(self):

        localctx = MParser.Member_method_declaration_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 226, self.RULE_member_method_declaration_list)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1776
            self.member_method_declaration()
            self.state = 1782
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,127,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1777
                    self.lfp()
                    self.state = 1778
                    self.member_method_declaration() 
                self.state = 1784
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,127,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Member_method_declarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def setter_method_declaration(self):
            return self.getTypedRuleContext(MParser.Setter_method_declarationContext,0)


        def getter_method_declaration(self):
            return self.getTypedRuleContext(MParser.Getter_method_declarationContext,0)


        def concrete_method_declaration(self):
            return self.getTypedRuleContext(MParser.Concrete_method_declarationContext,0)


        def abstract_method_declaration(self):
            return self.getTypedRuleContext(MParser.Abstract_method_declarationContext,0)


        def operator_method_declaration(self):
            return self.getTypedRuleContext(MParser.Operator_method_declarationContext,0)


        def comment_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MParser.Comment_statementContext)
            else:
                return self.getTypedRuleContext(MParser.Comment_statementContext,i)


        def lfp(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MParser.LfpContext)
            else:
                return self.getTypedRuleContext(MParser.LfpContext,i)


        def annotation_constructor(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MParser.Annotation_constructorContext)
            else:
                return self.getTypedRuleContext(MParser.Annotation_constructorContext,i)


        def getRuleIndex(self):
            return MParser.RULE_member_method_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMember_method_declaration" ):
                listener.enterMember_method_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMember_method_declaration" ):
                listener.exitMember_method_declaration(self)




    def member_method_declaration(self):

        localctx = MParser.Member_method_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 228, self.RULE_member_method_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1790
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==MParser.COMMENT:
                self.state = 1785
                self.comment_statement()
                self.state = 1786
                self.lfp()
                self.state = 1792
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1798
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==MParser.ARONDBASE_IDENTIFIER:
                self.state = 1793
                self.annotation_constructor()
                self.state = 1794
                self.lfp()
                self.state = 1800
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1806
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,130,self._ctx)
            if la_ == 1:
                self.state = 1801
                self.setter_method_declaration()
                pass

            elif la_ == 2:
                self.state = 1802
                self.getter_method_declaration()
                pass

            elif la_ == 3:
                self.state = 1803
                self.concrete_method_declaration()
                pass

            elif la_ == 4:
                self.state = 1804
                self.abstract_method_declaration()
                pass

            elif la_ == 5:
                self.state = 1805
                self.operator_method_declaration()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Native_member_method_declaration_listContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def native_member_method_declaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MParser.Native_member_method_declarationContext)
            else:
                return self.getTypedRuleContext(MParser.Native_member_method_declarationContext,i)


        def lfp(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MParser.LfpContext)
            else:
                return self.getTypedRuleContext(MParser.LfpContext,i)


        def getRuleIndex(self):
            return MParser.RULE_native_member_method_declaration_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNative_member_method_declaration_list" ):
                listener.enterNative_member_method_declaration_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNative_member_method_declaration_list" ):
                listener.exitNative_member_method_declaration_list(self)




    def native_member_method_declaration_list(self):

        localctx = MParser.Native_member_method_declaration_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 230, self.RULE_native_member_method_declaration_list)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1808
            self.native_member_method_declaration()
            self.state = 1814
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,131,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1809
                    self.lfp()
                    self.state = 1810
                    self.native_member_method_declaration() 
                self.state = 1816
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,131,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Native_member_method_declarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def native_getter_declaration(self):
            return self.getTypedRuleContext(MParser.Native_getter_declarationContext,0)


        def native_setter_declaration(self):
            return self.getTypedRuleContext(MParser.Native_setter_declarationContext,0)


        def native_method_declaration(self):
            return self.getTypedRuleContext(MParser.Native_method_declarationContext,0)


        def getRuleIndex(self):
            return MParser.RULE_native_member_method_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNative_member_method_declaration" ):
                listener.enterNative_member_method_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNative_member_method_declaration" ):
                listener.exitNative_member_method_declaration(self)




    def native_member_method_declaration(self):

        localctx = MParser.Native_member_method_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 232, self.RULE_native_member_method_declaration)
        try:
            self.state = 1820
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,132,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1817
                self.native_getter_declaration()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1818
                self.native_setter_declaration()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1819
                self.native_method_declaration()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Native_category_bindingContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return MParser.RULE_native_category_binding

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Python2CategoryBindingContext(Native_category_bindingContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MParser.Native_category_bindingContext
            super().__init__(parser)
            self.binding = None # Python_category_bindingContext
            self.copyFrom(ctx)

        def PYTHON2(self):
            return self.getToken(MParser.PYTHON2, 0)
        def python_category_binding(self):
            return self.getTypedRuleContext(MParser.Python_category_bindingContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPython2CategoryBinding" ):
                listener.enterPython2CategoryBinding(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPython2CategoryBinding" ):
                listener.exitPython2CategoryBinding(self)


    class Python3CategoryBindingContext(Native_category_bindingContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MParser.Native_category_bindingContext
            super().__init__(parser)
            self.binding = None # Python_category_bindingContext
            self.copyFrom(ctx)

        def PYTHON3(self):
            return self.getToken(MParser.PYTHON3, 0)
        def python_category_binding(self):
            return self.getTypedRuleContext(MParser.Python_category_bindingContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPython3CategoryBinding" ):
                listener.enterPython3CategoryBinding(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPython3CategoryBinding" ):
                listener.exitPython3CategoryBinding(self)


    class JavaCategoryBindingContext(Native_category_bindingContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MParser.Native_category_bindingContext
            super().__init__(parser)
            self.binding = None # Java_class_identifier_expressionContext
            self.copyFrom(ctx)

        def JAVA(self):
            return self.getToken(MParser.JAVA, 0)
        def java_class_identifier_expression(self):
            return self.getTypedRuleContext(MParser.Java_class_identifier_expressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJavaCategoryBinding" ):
                listener.enterJavaCategoryBinding(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJavaCategoryBinding" ):
                listener.exitJavaCategoryBinding(self)


    class CSharpCategoryBindingContext(Native_category_bindingContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MParser.Native_category_bindingContext
            super().__init__(parser)
            self.binding = None # Csharp_identifier_expressionContext
            self.copyFrom(ctx)

        def CSHARP(self):
            return self.getToken(MParser.CSHARP, 0)
        def csharp_identifier_expression(self):
            return self.getTypedRuleContext(MParser.Csharp_identifier_expressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCSharpCategoryBinding" ):
                listener.enterCSharpCategoryBinding(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCSharpCategoryBinding" ):
                listener.exitCSharpCategoryBinding(self)


    class JavaScriptCategoryBindingContext(Native_category_bindingContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MParser.Native_category_bindingContext
            super().__init__(parser)
            self.binding = None # Javascript_category_bindingContext
            self.copyFrom(ctx)

        def JAVASCRIPT(self):
            return self.getToken(MParser.JAVASCRIPT, 0)
        def javascript_category_binding(self):
            return self.getTypedRuleContext(MParser.Javascript_category_bindingContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJavaScriptCategoryBinding" ):
                listener.enterJavaScriptCategoryBinding(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJavaScriptCategoryBinding" ):
                listener.exitJavaScriptCategoryBinding(self)



    def native_category_binding(self):

        localctx = MParser.Native_category_bindingContext(self, self._ctx, self.state)
        self.enterRule(localctx, 234, self.RULE_native_category_binding)
        try:
            self.state = 1832
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MParser.JAVA]:
                localctx = MParser.JavaCategoryBindingContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1822
                self.match(MParser.JAVA)
                self.state = 1823
                localctx.binding = self.java_class_identifier_expression(0)
                pass
            elif token in [MParser.CSHARP]:
                localctx = MParser.CSharpCategoryBindingContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1824
                self.match(MParser.CSHARP)
                self.state = 1825
                localctx.binding = self.csharp_identifier_expression(0)
                pass
            elif token in [MParser.PYTHON2]:
                localctx = MParser.Python2CategoryBindingContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 1826
                self.match(MParser.PYTHON2)
                self.state = 1827
                localctx.binding = self.python_category_binding()
                pass
            elif token in [MParser.PYTHON3]:
                localctx = MParser.Python3CategoryBindingContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 1828
                self.match(MParser.PYTHON3)
                self.state = 1829
                localctx.binding = self.python_category_binding()
                pass
            elif token in [MParser.JAVASCRIPT]:
                localctx = MParser.JavaScriptCategoryBindingContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 1830
                self.match(MParser.JAVASCRIPT)
                self.state = 1831
                localctx.binding = self.javascript_category_binding()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Python_category_bindingContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(MParser.IdentifierContext,0)


        def python_module(self):
            return self.getTypedRuleContext(MParser.Python_moduleContext,0)


        def getRuleIndex(self):
            return MParser.RULE_python_category_binding

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPython_category_binding" ):
                listener.enterPython_category_binding(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPython_category_binding" ):
                listener.exitPython_category_binding(self)




    def python_category_binding(self):

        localctx = MParser.Python_category_bindingContext(self, self._ctx, self.state)
        self.enterRule(localctx, 236, self.RULE_python_category_binding)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1834
            self.identifier()
            self.state = 1836
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,134,self._ctx)
            if la_ == 1:
                self.state = 1835
                self.python_module()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Python_moduleContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FROM(self):
            return self.getToken(MParser.FROM, 0)

        def module_token(self):
            return self.getTypedRuleContext(MParser.Module_tokenContext,0)


        def COLON(self):
            return self.getToken(MParser.COLON, 0)

        def python_identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MParser.Python_identifierContext)
            else:
                return self.getTypedRuleContext(MParser.Python_identifierContext,i)


        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(MParser.DOT)
            else:
                return self.getToken(MParser.DOT, i)

        def getRuleIndex(self):
            return MParser.RULE_python_module

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPython_module" ):
                listener.enterPython_module(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPython_module" ):
                listener.exitPython_module(self)




    def python_module(self):

        localctx = MParser.Python_moduleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 238, self.RULE_python_module)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1838
            self.match(MParser.FROM)
            self.state = 1839
            self.module_token()
            self.state = 1840
            self.match(MParser.COLON)
            self.state = 1841
            self.python_identifier()
            self.state = 1846
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,135,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1842
                    self.match(MParser.DOT)
                    self.state = 1843
                    self.python_identifier() 
                self.state = 1848
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,135,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Javascript_category_bindingContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def javascript_identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MParser.Javascript_identifierContext)
            else:
                return self.getTypedRuleContext(MParser.Javascript_identifierContext,i)


        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(MParser.DOT)
            else:
                return self.getToken(MParser.DOT, i)

        def javascript_module(self):
            return self.getTypedRuleContext(MParser.Javascript_moduleContext,0)


        def getRuleIndex(self):
            return MParser.RULE_javascript_category_binding

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJavascript_category_binding" ):
                listener.enterJavascript_category_binding(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJavascript_category_binding" ):
                listener.exitJavascript_category_binding(self)




    def javascript_category_binding(self):

        localctx = MParser.Javascript_category_bindingContext(self, self._ctx, self.state)
        self.enterRule(localctx, 240, self.RULE_javascript_category_binding)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1849
            self.javascript_identifier()
            self.state = 1854
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,136,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1850
                    self.match(MParser.DOT)
                    self.state = 1851
                    self.javascript_identifier() 
                self.state = 1856
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,136,self._ctx)

            self.state = 1858
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,137,self._ctx)
            if la_ == 1:
                self.state = 1857
                self.javascript_module()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Javascript_moduleContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FROM(self):
            return self.getToken(MParser.FROM, 0)

        def module_token(self):
            return self.getTypedRuleContext(MParser.Module_tokenContext,0)


        def COLON(self):
            return self.getToken(MParser.COLON, 0)

        def javascript_identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MParser.Javascript_identifierContext)
            else:
                return self.getTypedRuleContext(MParser.Javascript_identifierContext,i)


        def SLASH(self, i:int=None):
            if i is None:
                return self.getTokens(MParser.SLASH)
            else:
                return self.getToken(MParser.SLASH, i)

        def DOT(self):
            return self.getToken(MParser.DOT, 0)

        def getRuleIndex(self):
            return MParser.RULE_javascript_module

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJavascript_module" ):
                listener.enterJavascript_module(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJavascript_module" ):
                listener.exitJavascript_module(self)




    def javascript_module(self):

        localctx = MParser.Javascript_moduleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 242, self.RULE_javascript_module)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1860
            self.match(MParser.FROM)
            self.state = 1861
            self.module_token()
            self.state = 1862
            self.match(MParser.COLON)
            self.state = 1864
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MParser.SLASH:
                self.state = 1863
                self.match(MParser.SLASH)


            self.state = 1866
            self.javascript_identifier()
            self.state = 1871
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,139,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1867
                    self.match(MParser.SLASH)
                    self.state = 1868
                    self.javascript_identifier() 
                self.state = 1873
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,139,self._ctx)

            self.state = 1876
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,140,self._ctx)
            if la_ == 1:
                self.state = 1874
                self.match(MParser.DOT)
                self.state = 1875
                self.javascript_identifier()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Variable_identifier_listContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variable_identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MParser.Variable_identifierContext)
            else:
                return self.getTypedRuleContext(MParser.Variable_identifierContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(MParser.COMMA)
            else:
                return self.getToken(MParser.COMMA, i)

        def getRuleIndex(self):
            return MParser.RULE_variable_identifier_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariable_identifier_list" ):
                listener.enterVariable_identifier_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariable_identifier_list" ):
                listener.exitVariable_identifier_list(self)




    def variable_identifier_list(self):

        localctx = MParser.Variable_identifier_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 244, self.RULE_variable_identifier_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1878
            self.variable_identifier()
            self.state = 1883
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==MParser.COMMA:
                self.state = 1879
                self.match(MParser.COMMA)
                self.state = 1880
                self.variable_identifier()
                self.state = 1885
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Attribute_identifier_listContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def attribute_identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MParser.Attribute_identifierContext)
            else:
                return self.getTypedRuleContext(MParser.Attribute_identifierContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(MParser.COMMA)
            else:
                return self.getToken(MParser.COMMA, i)

        def getRuleIndex(self):
            return MParser.RULE_attribute_identifier_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttribute_identifier_list" ):
                listener.enterAttribute_identifier_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttribute_identifier_list" ):
                listener.exitAttribute_identifier_list(self)




    def attribute_identifier_list(self):

        localctx = MParser.Attribute_identifier_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 246, self.RULE_attribute_identifier_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1886
            self.attribute_identifier()
            self.state = 1891
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==MParser.COMMA:
                self.state = 1887
                self.match(MParser.COMMA)
                self.state = 1888
                self.attribute_identifier()
                self.state = 1893
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Method_declarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def abstract_method_declaration(self):
            return self.getTypedRuleContext(MParser.Abstract_method_declarationContext,0)


        def concrete_method_declaration(self):
            return self.getTypedRuleContext(MParser.Concrete_method_declarationContext,0)


        def native_method_declaration(self):
            return self.getTypedRuleContext(MParser.Native_method_declarationContext,0)


        def test_method_declaration(self):
            return self.getTypedRuleContext(MParser.Test_method_declarationContext,0)


        def getRuleIndex(self):
            return MParser.RULE_method_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMethod_declaration" ):
                listener.enterMethod_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMethod_declaration" ):
                listener.exitMethod_declaration(self)




    def method_declaration(self):

        localctx = MParser.Method_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 248, self.RULE_method_declaration)
        try:
            self.state = 1898
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,143,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1894
                self.abstract_method_declaration()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1895
                self.concrete_method_declaration()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1896
                self.native_method_declaration()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1897
                self.test_method_declaration()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Comment_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COMMENT(self):
            return self.getToken(MParser.COMMENT, 0)

        def getRuleIndex(self):
            return MParser.RULE_comment_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComment_statement" ):
                listener.enterComment_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComment_statement" ):
                listener.exitComment_statement(self)




    def comment_statement(self):

        localctx = MParser.Comment_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 250, self.RULE_comment_statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1900
            self.match(MParser.COMMENT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Native_statement_listContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def native_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MParser.Native_statementContext)
            else:
                return self.getTypedRuleContext(MParser.Native_statementContext,i)


        def lfp(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MParser.LfpContext)
            else:
                return self.getTypedRuleContext(MParser.LfpContext,i)


        def getRuleIndex(self):
            return MParser.RULE_native_statement_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNative_statement_list" ):
                listener.enterNative_statement_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNative_statement_list" ):
                listener.exitNative_statement_list(self)




    def native_statement_list(self):

        localctx = MParser.Native_statement_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 252, self.RULE_native_statement_list)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1902
            self.native_statement()
            self.state = 1908
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,144,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1903
                    self.lfp()
                    self.state = 1904
                    self.native_statement() 
                self.state = 1910
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,144,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Native_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return MParser.RULE_native_statement

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class CSharpNativeStatementContext(Native_statementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MParser.Native_statementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CSHARP(self):
            return self.getToken(MParser.CSHARP, 0)
        def csharp_statement(self):
            return self.getTypedRuleContext(MParser.Csharp_statementContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCSharpNativeStatement" ):
                listener.enterCSharpNativeStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCSharpNativeStatement" ):
                listener.exitCSharpNativeStatement(self)


    class JavaNativeStatementContext(Native_statementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MParser.Native_statementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def JAVA(self):
            return self.getToken(MParser.JAVA, 0)
        def java_statement(self):
            return self.getTypedRuleContext(MParser.Java_statementContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJavaNativeStatement" ):
                listener.enterJavaNativeStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJavaNativeStatement" ):
                listener.exitJavaNativeStatement(self)


    class JavaScriptNativeStatementContext(Native_statementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MParser.Native_statementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def JAVASCRIPT(self):
            return self.getToken(MParser.JAVASCRIPT, 0)
        def javascript_native_statement(self):
            return self.getTypedRuleContext(MParser.Javascript_native_statementContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJavaScriptNativeStatement" ):
                listener.enterJavaScriptNativeStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJavaScriptNativeStatement" ):
                listener.exitJavaScriptNativeStatement(self)


    class Python2NativeStatementContext(Native_statementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MParser.Native_statementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def PYTHON2(self):
            return self.getToken(MParser.PYTHON2, 0)
        def python_native_statement(self):
            return self.getTypedRuleContext(MParser.Python_native_statementContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPython2NativeStatement" ):
                listener.enterPython2NativeStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPython2NativeStatement" ):
                listener.exitPython2NativeStatement(self)


    class Python3NativeStatementContext(Native_statementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MParser.Native_statementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def PYTHON3(self):
            return self.getToken(MParser.PYTHON3, 0)
        def python_native_statement(self):
            return self.getTypedRuleContext(MParser.Python_native_statementContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPython3NativeStatement" ):
                listener.enterPython3NativeStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPython3NativeStatement" ):
                listener.exitPython3NativeStatement(self)



    def native_statement(self):

        localctx = MParser.Native_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 254, self.RULE_native_statement)
        try:
            self.state = 1921
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MParser.JAVA]:
                localctx = MParser.JavaNativeStatementContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1911
                self.match(MParser.JAVA)
                self.state = 1912
                self.java_statement()
                pass
            elif token in [MParser.CSHARP]:
                localctx = MParser.CSharpNativeStatementContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1913
                self.match(MParser.CSHARP)
                self.state = 1914
                self.csharp_statement()
                pass
            elif token in [MParser.PYTHON2]:
                localctx = MParser.Python2NativeStatementContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 1915
                self.match(MParser.PYTHON2)
                self.state = 1916
                self.python_native_statement()
                pass
            elif token in [MParser.PYTHON3]:
                localctx = MParser.Python3NativeStatementContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 1917
                self.match(MParser.PYTHON3)
                self.state = 1918
                self.python_native_statement()
                pass
            elif token in [MParser.JAVASCRIPT]:
                localctx = MParser.JavaScriptNativeStatementContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 1919
                self.match(MParser.JAVASCRIPT)
                self.state = 1920
                self.javascript_native_statement()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Python_native_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def python_statement(self):
            return self.getTypedRuleContext(MParser.Python_statementContext,0)


        def SEMI(self):
            return self.getToken(MParser.SEMI, 0)

        def python_module(self):
            return self.getTypedRuleContext(MParser.Python_moduleContext,0)


        def getRuleIndex(self):
            return MParser.RULE_python_native_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPython_native_statement" ):
                listener.enterPython_native_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPython_native_statement" ):
                listener.exitPython_native_statement(self)




    def python_native_statement(self):

        localctx = MParser.Python_native_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 256, self.RULE_python_native_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1923
            self.python_statement()
            self.state = 1925
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MParser.SEMI:
                self.state = 1924
                self.match(MParser.SEMI)


            self.state = 1928
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MParser.FROM:
                self.state = 1927
                self.python_module()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Javascript_native_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def javascript_statement(self):
            return self.getTypedRuleContext(MParser.Javascript_statementContext,0)


        def SEMI(self):
            return self.getToken(MParser.SEMI, 0)

        def javascript_module(self):
            return self.getTypedRuleContext(MParser.Javascript_moduleContext,0)


        def getRuleIndex(self):
            return MParser.RULE_javascript_native_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJavascript_native_statement" ):
                listener.enterJavascript_native_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJavascript_native_statement" ):
                listener.exitJavascript_native_statement(self)




    def javascript_native_statement(self):

        localctx = MParser.Javascript_native_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 258, self.RULE_javascript_native_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1930
            self.javascript_statement()
            self.state = 1932
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MParser.SEMI:
                self.state = 1931
                self.match(MParser.SEMI)


            self.state = 1935
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MParser.FROM:
                self.state = 1934
                self.javascript_module()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Statement_listContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MParser.StatementContext)
            else:
                return self.getTypedRuleContext(MParser.StatementContext,i)


        def lfp(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MParser.LfpContext)
            else:
                return self.getTypedRuleContext(MParser.LfpContext,i)


        def getRuleIndex(self):
            return MParser.RULE_statement_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatement_list" ):
                listener.enterStatement_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatement_list" ):
                listener.exitStatement_list(self)




    def statement_list(self):

        localctx = MParser.Statement_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 260, self.RULE_statement_list)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1937
            self.statement()
            self.state = 1943
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,150,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1938
                    self.lfp()
                    self.state = 1939
                    self.statement() 
                self.state = 1945
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,150,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Assertion_listContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assertion(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MParser.AssertionContext)
            else:
                return self.getTypedRuleContext(MParser.AssertionContext,i)


        def lfp(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MParser.LfpContext)
            else:
                return self.getTypedRuleContext(MParser.LfpContext,i)


        def getRuleIndex(self):
            return MParser.RULE_assertion_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssertion_list" ):
                listener.enterAssertion_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssertion_list" ):
                listener.exitAssertion_list(self)




    def assertion_list(self):

        localctx = MParser.Assertion_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 262, self.RULE_assertion_list)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1946
            self.assertion()
            self.state = 1952
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,151,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1947
                    self.lfp()
                    self.state = 1948
                    self.assertion() 
                self.state = 1954
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,151,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Switch_case_statement_listContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def switch_case_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MParser.Switch_case_statementContext)
            else:
                return self.getTypedRuleContext(MParser.Switch_case_statementContext,i)


        def lfp(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MParser.LfpContext)
            else:
                return self.getTypedRuleContext(MParser.LfpContext,i)


        def getRuleIndex(self):
            return MParser.RULE_switch_case_statement_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSwitch_case_statement_list" ):
                listener.enterSwitch_case_statement_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSwitch_case_statement_list" ):
                listener.exitSwitch_case_statement_list(self)




    def switch_case_statement_list(self):

        localctx = MParser.Switch_case_statement_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 264, self.RULE_switch_case_statement_list)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1955
            self.switch_case_statement()
            self.state = 1961
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,152,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1956
                    self.lfp()
                    self.state = 1957
                    self.switch_case_statement() 
                self.state = 1963
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,152,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Catch_statement_listContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def catch_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MParser.Catch_statementContext)
            else:
                return self.getTypedRuleContext(MParser.Catch_statementContext,i)


        def lfp(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MParser.LfpContext)
            else:
                return self.getTypedRuleContext(MParser.LfpContext,i)


        def getRuleIndex(self):
            return MParser.RULE_catch_statement_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCatch_statement_list" ):
                listener.enterCatch_statement_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCatch_statement_list" ):
                listener.exitCatch_statement_list(self)




    def catch_statement_list(self):

        localctx = MParser.Catch_statement_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 266, self.RULE_catch_statement_list)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1964
            self.catch_statement()
            self.state = 1970
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,153,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1965
                    self.lfp()
                    self.state = 1966
                    self.catch_statement() 
                self.state = 1972
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,153,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Literal_collectionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return MParser.RULE_literal_collection

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class LiteralListLiteralContext(Literal_collectionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MParser.Literal_collectionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LBRAK(self):
            return self.getToken(MParser.LBRAK, 0)
        def literal_list_literal(self):
            return self.getTypedRuleContext(MParser.Literal_list_literalContext,0)

        def RBRAK(self):
            return self.getToken(MParser.RBRAK, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLiteralListLiteral" ):
                listener.enterLiteralListLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLiteralListLiteral" ):
                listener.exitLiteralListLiteral(self)


    class LiteralRangeLiteralContext(Literal_collectionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MParser.Literal_collectionContext
            super().__init__(parser)
            self.low = None # Atomic_literalContext
            self.high = None # Atomic_literalContext
            self.copyFrom(ctx)

        def LBRAK(self):
            return self.getToken(MParser.LBRAK, 0)
        def RANGE(self):
            return self.getToken(MParser.RANGE, 0)
        def RBRAK(self):
            return self.getToken(MParser.RBRAK, 0)
        def atomic_literal(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MParser.Atomic_literalContext)
            else:
                return self.getTypedRuleContext(MParser.Atomic_literalContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLiteralRangeLiteral" ):
                listener.enterLiteralRangeLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLiteralRangeLiteral" ):
                listener.exitLiteralRangeLiteral(self)


    class LiteralSetLiteralContext(Literal_collectionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MParser.Literal_collectionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LT(self):
            return self.getToken(MParser.LT, 0)
        def literal_list_literal(self):
            return self.getTypedRuleContext(MParser.Literal_list_literalContext,0)

        def GT(self):
            return self.getToken(MParser.GT, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLiteralSetLiteral" ):
                listener.enterLiteralSetLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLiteralSetLiteral" ):
                listener.exitLiteralSetLiteral(self)



    def literal_collection(self):

        localctx = MParser.Literal_collectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 268, self.RULE_literal_collection)
        try:
            self.state = 1987
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,154,self._ctx)
            if la_ == 1:
                localctx = MParser.LiteralRangeLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1973
                self.match(MParser.LBRAK)
                self.state = 1974
                localctx.low = self.atomic_literal()
                self.state = 1975
                self.match(MParser.RANGE)
                self.state = 1976
                localctx.high = self.atomic_literal()
                self.state = 1977
                self.match(MParser.RBRAK)
                pass

            elif la_ == 2:
                localctx = MParser.LiteralListLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1979
                self.match(MParser.LBRAK)
                self.state = 1980
                self.literal_list_literal()
                self.state = 1981
                self.match(MParser.RBRAK)
                pass

            elif la_ == 3:
                localctx = MParser.LiteralSetLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 1983
                self.match(MParser.LT)
                self.state = 1984
                self.literal_list_literal()
                self.state = 1985
                self.match(MParser.GT)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Atomic_literalContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return MParser.RULE_atomic_literal

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class MinIntegerLiteralContext(Atomic_literalContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MParser.Atomic_literalContext
            super().__init__(parser)
            self.t = None # Token
            self.copyFrom(ctx)

        def MIN_INTEGER(self):
            return self.getToken(MParser.MIN_INTEGER, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMinIntegerLiteral" ):
                listener.enterMinIntegerLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMinIntegerLiteral" ):
                listener.exitMinIntegerLiteral(self)


    class DateLiteralContext(Atomic_literalContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MParser.Atomic_literalContext
            super().__init__(parser)
            self.t = None # Token
            self.copyFrom(ctx)

        def DATE_LITERAL(self):
            return self.getToken(MParser.DATE_LITERAL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDateLiteral" ):
                listener.enterDateLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDateLiteral" ):
                listener.exitDateLiteral(self)


    class BooleanLiteralContext(Atomic_literalContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MParser.Atomic_literalContext
            super().__init__(parser)
            self.t = None # Token
            self.copyFrom(ctx)

        def BOOLEAN_LITERAL(self):
            return self.getToken(MParser.BOOLEAN_LITERAL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBooleanLiteral" ):
                listener.enterBooleanLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBooleanLiteral" ):
                listener.exitBooleanLiteral(self)


    class VersionLiteralContext(Atomic_literalContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MParser.Atomic_literalContext
            super().__init__(parser)
            self.t = None # Token
            self.copyFrom(ctx)

        def VERSION_LITERAL(self):
            return self.getToken(MParser.VERSION_LITERAL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVersionLiteral" ):
                listener.enterVersionLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVersionLiteral" ):
                listener.exitVersionLiteral(self)


    class HexadecimalLiteralContext(Atomic_literalContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MParser.Atomic_literalContext
            super().__init__(parser)
            self.t = None # Token
            self.copyFrom(ctx)

        def HEXA_LITERAL(self):
            return self.getToken(MParser.HEXA_LITERAL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHexadecimalLiteral" ):
                listener.enterHexadecimalLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHexadecimalLiteral" ):
                listener.exitHexadecimalLiteral(self)


    class UUIDLiteralContext(Atomic_literalContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MParser.Atomic_literalContext
            super().__init__(parser)
            self.t = None # Token
            self.copyFrom(ctx)

        def UUID_LITERAL(self):
            return self.getToken(MParser.UUID_LITERAL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUUIDLiteral" ):
                listener.enterUUIDLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUUIDLiteral" ):
                listener.exitUUIDLiteral(self)


    class MaxIntegerLiteralContext(Atomic_literalContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MParser.Atomic_literalContext
            super().__init__(parser)
            self.t = None # Token
            self.copyFrom(ctx)

        def MAX_INTEGER(self):
            return self.getToken(MParser.MAX_INTEGER, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMaxIntegerLiteral" ):
                listener.enterMaxIntegerLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMaxIntegerLiteral" ):
                listener.exitMaxIntegerLiteral(self)


    class DateTimeLiteralContext(Atomic_literalContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MParser.Atomic_literalContext
            super().__init__(parser)
            self.t = None # Token
            self.copyFrom(ctx)

        def DATETIME_LITERAL(self):
            return self.getToken(MParser.DATETIME_LITERAL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDateTimeLiteral" ):
                listener.enterDateTimeLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDateTimeLiteral" ):
                listener.exitDateTimeLiteral(self)


    class PeriodLiteralContext(Atomic_literalContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MParser.Atomic_literalContext
            super().__init__(parser)
            self.t = None # Token
            self.copyFrom(ctx)

        def PERIOD_LITERAL(self):
            return self.getToken(MParser.PERIOD_LITERAL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPeriodLiteral" ):
                listener.enterPeriodLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPeriodLiteral" ):
                listener.exitPeriodLiteral(self)


    class DecimalLiteralContext(Atomic_literalContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MParser.Atomic_literalContext
            super().__init__(parser)
            self.t = None # Token
            self.copyFrom(ctx)

        def DECIMAL_LITERAL(self):
            return self.getToken(MParser.DECIMAL_LITERAL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDecimalLiteral" ):
                listener.enterDecimalLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDecimalLiteral" ):
                listener.exitDecimalLiteral(self)


    class TextLiteralContext(Atomic_literalContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MParser.Atomic_literalContext
            super().__init__(parser)
            self.t = None # Token
            self.copyFrom(ctx)

        def TEXT_LITERAL(self):
            return self.getToken(MParser.TEXT_LITERAL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTextLiteral" ):
                listener.enterTextLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTextLiteral" ):
                listener.exitTextLiteral(self)


    class NullLiteralContext(Atomic_literalContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MParser.Atomic_literalContext
            super().__init__(parser)
            self.n = None # Null_literalContext
            self.copyFrom(ctx)

        def null_literal(self):
            return self.getTypedRuleContext(MParser.Null_literalContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNullLiteral" ):
                listener.enterNullLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNullLiteral" ):
                listener.exitNullLiteral(self)


    class IntegerLiteralContext(Atomic_literalContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MParser.Atomic_literalContext
            super().__init__(parser)
            self.t = None # Token
            self.copyFrom(ctx)

        def INTEGER_LITERAL(self):
            return self.getToken(MParser.INTEGER_LITERAL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIntegerLiteral" ):
                listener.enterIntegerLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIntegerLiteral" ):
                listener.exitIntegerLiteral(self)


    class TimeLiteralContext(Atomic_literalContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MParser.Atomic_literalContext
            super().__init__(parser)
            self.t = None # Token
            self.copyFrom(ctx)

        def TIME_LITERAL(self):
            return self.getToken(MParser.TIME_LITERAL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTimeLiteral" ):
                listener.enterTimeLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTimeLiteral" ):
                listener.exitTimeLiteral(self)


    class CharacterLiteralContext(Atomic_literalContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MParser.Atomic_literalContext
            super().__init__(parser)
            self.t = None # Token
            self.copyFrom(ctx)

        def CHAR_LITERAL(self):
            return self.getToken(MParser.CHAR_LITERAL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCharacterLiteral" ):
                listener.enterCharacterLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCharacterLiteral" ):
                listener.exitCharacterLiteral(self)



    def atomic_literal(self):

        localctx = MParser.Atomic_literalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 270, self.RULE_atomic_literal)
        try:
            self.state = 2004
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MParser.MIN_INTEGER]:
                localctx = MParser.MinIntegerLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1989
                localctx.t = self.match(MParser.MIN_INTEGER)
                pass
            elif token in [MParser.MAX_INTEGER]:
                localctx = MParser.MaxIntegerLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1990
                localctx.t = self.match(MParser.MAX_INTEGER)
                pass
            elif token in [MParser.INTEGER_LITERAL]:
                localctx = MParser.IntegerLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 1991
                localctx.t = self.match(MParser.INTEGER_LITERAL)
                pass
            elif token in [MParser.HEXA_LITERAL]:
                localctx = MParser.HexadecimalLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 1992
                localctx.t = self.match(MParser.HEXA_LITERAL)
                pass
            elif token in [MParser.CHAR_LITERAL]:
                localctx = MParser.CharacterLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 1993
                localctx.t = self.match(MParser.CHAR_LITERAL)
                pass
            elif token in [MParser.DATE_LITERAL]:
                localctx = MParser.DateLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 1994
                localctx.t = self.match(MParser.DATE_LITERAL)
                pass
            elif token in [MParser.TIME_LITERAL]:
                localctx = MParser.TimeLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 7)
                self.state = 1995
                localctx.t = self.match(MParser.TIME_LITERAL)
                pass
            elif token in [MParser.TEXT_LITERAL]:
                localctx = MParser.TextLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 8)
                self.state = 1996
                localctx.t = self.match(MParser.TEXT_LITERAL)
                pass
            elif token in [MParser.DECIMAL_LITERAL]:
                localctx = MParser.DecimalLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 9)
                self.state = 1997
                localctx.t = self.match(MParser.DECIMAL_LITERAL)
                pass
            elif token in [MParser.DATETIME_LITERAL]:
                localctx = MParser.DateTimeLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 10)
                self.state = 1998
                localctx.t = self.match(MParser.DATETIME_LITERAL)
                pass
            elif token in [MParser.BOOLEAN_LITERAL]:
                localctx = MParser.BooleanLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 11)
                self.state = 1999
                localctx.t = self.match(MParser.BOOLEAN_LITERAL)
                pass
            elif token in [MParser.PERIOD_LITERAL]:
                localctx = MParser.PeriodLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 12)
                self.state = 2000
                localctx.t = self.match(MParser.PERIOD_LITERAL)
                pass
            elif token in [MParser.VERSION_LITERAL]:
                localctx = MParser.VersionLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 13)
                self.state = 2001
                localctx.t = self.match(MParser.VERSION_LITERAL)
                pass
            elif token in [MParser.UUID_LITERAL]:
                localctx = MParser.UUIDLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 14)
                self.state = 2002
                localctx.t = self.match(MParser.UUID_LITERAL)
                pass
            elif token in [MParser.NONE]:
                localctx = MParser.NullLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 15)
                self.state = 2003
                localctx.n = self.null_literal()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Literal_list_literalContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def atomic_literal(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MParser.Atomic_literalContext)
            else:
                return self.getTypedRuleContext(MParser.Atomic_literalContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(MParser.COMMA)
            else:
                return self.getToken(MParser.COMMA, i)

        def getRuleIndex(self):
            return MParser.RULE_literal_list_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLiteral_list_literal" ):
                listener.enterLiteral_list_literal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLiteral_list_literal" ):
                listener.exitLiteral_list_literal(self)




    def literal_list_literal(self):

        localctx = MParser.Literal_list_literalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 272, self.RULE_literal_list_literal)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2006
            self.atomic_literal()
            self.state = 2011
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==MParser.COMMA:
                self.state = 2007
                self.match(MParser.COMMA)
                self.state = 2008
                self.atomic_literal()
                self.state = 2013
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class This_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SELF(self):
            return self.getToken(MParser.SELF, 0)

        def THIS(self):
            return self.getToken(MParser.THIS, 0)

        def getRuleIndex(self):
            return MParser.RULE_this_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterThis_expression" ):
                listener.enterThis_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitThis_expression" ):
                listener.exitThis_expression(self)




    def this_expression(self):

        localctx = MParser.This_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 274, self.RULE_this_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2014
            _la = self._input.LA(1)
            if not(_la==MParser.SELF or _la==MParser.THIS):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Parenthesis_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAR(self):
            return self.getToken(MParser.LPAR, 0)

        def expression(self):
            return self.getTypedRuleContext(MParser.ExpressionContext,0)


        def RPAR(self):
            return self.getToken(MParser.RPAR, 0)

        def getRuleIndex(self):
            return MParser.RULE_parenthesis_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParenthesis_expression" ):
                listener.enterParenthesis_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParenthesis_expression" ):
                listener.exitParenthesis_expression(self)




    def parenthesis_expression(self):

        localctx = MParser.Parenthesis_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 276, self.RULE_parenthesis_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2016
            self.match(MParser.LPAR)
            self.state = 2017
            self.expression(0)
            self.state = 2018
            self.match(MParser.RPAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Literal_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def atomic_literal(self):
            return self.getTypedRuleContext(MParser.Atomic_literalContext,0)


        def collection_literal(self):
            return self.getTypedRuleContext(MParser.Collection_literalContext,0)


        def getRuleIndex(self):
            return MParser.RULE_literal_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLiteral_expression" ):
                listener.enterLiteral_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLiteral_expression" ):
                listener.exitLiteral_expression(self)




    def literal_expression(self):

        localctx = MParser.Literal_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 278, self.RULE_literal_expression)
        try:
            self.state = 2022
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MParser.NONE, MParser.BOOLEAN_LITERAL, MParser.CHAR_LITERAL, MParser.MIN_INTEGER, MParser.MAX_INTEGER, MParser.TEXT_LITERAL, MParser.UUID_LITERAL, MParser.INTEGER_LITERAL, MParser.HEXA_LITERAL, MParser.DECIMAL_LITERAL, MParser.DATETIME_LITERAL, MParser.TIME_LITERAL, MParser.DATE_LITERAL, MParser.PERIOD_LITERAL, MParser.VERSION_LITERAL]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2020
                self.atomic_literal()
                pass
            elif token in [MParser.LPAR, MParser.LBRAK, MParser.LCURL, MParser.LT, MParser.LTCOLONGT, MParser.MUTABLE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2021
                self.collection_literal()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Collection_literalContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def range_literal(self):
            return self.getTypedRuleContext(MParser.Range_literalContext,0)


        def list_literal(self):
            return self.getTypedRuleContext(MParser.List_literalContext,0)


        def set_literal(self):
            return self.getTypedRuleContext(MParser.Set_literalContext,0)


        def dict_literal(self):
            return self.getTypedRuleContext(MParser.Dict_literalContext,0)


        def document_literal(self):
            return self.getTypedRuleContext(MParser.Document_literalContext,0)


        def tuple_literal(self):
            return self.getTypedRuleContext(MParser.Tuple_literalContext,0)


        def getRuleIndex(self):
            return MParser.RULE_collection_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCollection_literal" ):
                listener.enterCollection_literal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCollection_literal" ):
                listener.exitCollection_literal(self)




    def collection_literal(self):

        localctx = MParser.Collection_literalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 280, self.RULE_collection_literal)
        try:
            self.state = 2030
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,158,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2024
                self.range_literal()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2025
                self.list_literal()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2026
                self.set_literal()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2027
                self.dict_literal()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 2028
                self.document_literal()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 2029
                self.tuple_literal()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Tuple_literalContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAR(self):
            return self.getToken(MParser.LPAR, 0)

        def RPAR(self):
            return self.getToken(MParser.RPAR, 0)

        def MUTABLE(self):
            return self.getToken(MParser.MUTABLE, 0)

        def expression_tuple(self):
            return self.getTypedRuleContext(MParser.Expression_tupleContext,0)


        def getRuleIndex(self):
            return MParser.RULE_tuple_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTuple_literal" ):
                listener.enterTuple_literal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTuple_literal" ):
                listener.exitTuple_literal(self)




    def tuple_literal(self):

        localctx = MParser.Tuple_literalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 282, self.RULE_tuple_literal)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2033
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MParser.MUTABLE:
                self.state = 2032
                self.match(MParser.MUTABLE)


            self.state = 2035
            self.match(MParser.LPAR)
            self.state = 2037
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << MParser.LPAR) | (1 << MParser.LBRAK) | (1 << MParser.LCURL) | (1 << MParser.MINUS) | (1 << MParser.LT) | (1 << MParser.LTGT) | (1 << MParser.LTCOLONGT) | (1 << MParser.CODE))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (MParser.DOCUMENT - 64)) | (1 << (MParser.BLOB - 64)) | (1 << (MParser.EXECUTE - 64)) | (1 << (MParser.FETCH - 64)) | (1 << (MParser.MUTABLE - 64)) | (1 << (MParser.NONE - 64)) | (1 << (MParser.NOT - 64)))) != 0) or ((((_la - 137)) & ~0x3f) == 0 and ((1 << (_la - 137)) & ((1 << (MParser.READ - 137)) | (1 << (MParser.SELF - 137)) | (1 << (MParser.SORTED - 137)) | (1 << (MParser.THIS - 137)) | (1 << (MParser.BOOLEAN_LITERAL - 137)) | (1 << (MParser.CHAR_LITERAL - 137)) | (1 << (MParser.MIN_INTEGER - 137)) | (1 << (MParser.MAX_INTEGER - 137)) | (1 << (MParser.SYMBOL_IDENTIFIER - 137)) | (1 << (MParser.TYPE_IDENTIFIER - 137)) | (1 << (MParser.VARIABLE_IDENTIFIER - 137)) | (1 << (MParser.TEXT_LITERAL - 137)) | (1 << (MParser.UUID_LITERAL - 137)) | (1 << (MParser.INTEGER_LITERAL - 137)) | (1 << (MParser.HEXA_LITERAL - 137)) | (1 << (MParser.DECIMAL_LITERAL - 137)) | (1 << (MParser.DATETIME_LITERAL - 137)) | (1 << (MParser.TIME_LITERAL - 137)) | (1 << (MParser.DATE_LITERAL - 137)) | (1 << (MParser.PERIOD_LITERAL - 137)) | (1 << (MParser.VERSION_LITERAL - 137)))) != 0):
                self.state = 2036
                self.expression_tuple()


            self.state = 2039
            self.match(MParser.RPAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Dict_literalContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LTCOLONGT(self):
            return self.getToken(MParser.LTCOLONGT, 0)

        def MUTABLE(self):
            return self.getToken(MParser.MUTABLE, 0)

        def LT(self):
            return self.getToken(MParser.LT, 0)

        def dict_entry_list(self):
            return self.getTypedRuleContext(MParser.Dict_entry_listContext,0)


        def GT(self):
            return self.getToken(MParser.GT, 0)

        def COLON(self):
            return self.getToken(MParser.COLON, 0)

        def getRuleIndex(self):
            return MParser.RULE_dict_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDict_literal" ):
                listener.enterDict_literal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDict_literal" ):
                listener.exitDict_literal(self)




    def dict_literal(self):

        localctx = MParser.Dict_literalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 284, self.RULE_dict_literal)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2042
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MParser.MUTABLE:
                self.state = 2041
                self.match(MParser.MUTABLE)


            self.state = 2052
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,162,self._ctx)
            if la_ == 1:
                self.state = 2044
                self.match(MParser.LT)
                self.state = 2045
                self.dict_entry_list()
                self.state = 2046
                self.match(MParser.GT)
                pass

            elif la_ == 2:
                self.state = 2048
                self.match(MParser.LTCOLONGT)
                pass

            elif la_ == 3:
                self.state = 2049
                self.match(MParser.LT)
                self.state = 2050
                self.match(MParser.COLON)
                self.state = 2051
                self.match(MParser.GT)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Document_literalContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LCURL(self):
            return self.getToken(MParser.LCURL, 0)

        def RCURL(self):
            return self.getToken(MParser.RCURL, 0)

        def dict_entry_list(self):
            return self.getTypedRuleContext(MParser.Dict_entry_listContext,0)


        def getRuleIndex(self):
            return MParser.RULE_document_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDocument_literal" ):
                listener.enterDocument_literal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDocument_literal" ):
                listener.exitDocument_literal(self)




    def document_literal(self):

        localctx = MParser.Document_literalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 286, self.RULE_document_literal)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2054
            self.match(MParser.LCURL)
            self.state = 2056
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 167)) & ~0x3f) == 0 and ((1 << (_la - 167)) & ((1 << (MParser.SYMBOL_IDENTIFIER - 167)) | (1 << (MParser.TYPE_IDENTIFIER - 167)) | (1 << (MParser.VARIABLE_IDENTIFIER - 167)) | (1 << (MParser.TEXT_LITERAL - 167)))) != 0):
                self.state = 2055
                self.dict_entry_list()


            self.state = 2058
            self.match(MParser.RCURL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Expression_tupleContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(MParser.ExpressionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(MParser.COMMA)
            else:
                return self.getToken(MParser.COMMA, i)

        def getRuleIndex(self):
            return MParser.RULE_expression_tuple

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpression_tuple" ):
                listener.enterExpression_tuple(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpression_tuple" ):
                listener.exitExpression_tuple(self)




    def expression_tuple(self):

        localctx = MParser.Expression_tupleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 288, self.RULE_expression_tuple)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2060
            self.expression(0)
            self.state = 2061
            self.match(MParser.COMMA)
            self.state = 2070
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << MParser.LPAR) | (1 << MParser.LBRAK) | (1 << MParser.LCURL) | (1 << MParser.MINUS) | (1 << MParser.LT) | (1 << MParser.LTGT) | (1 << MParser.LTCOLONGT) | (1 << MParser.CODE))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (MParser.DOCUMENT - 64)) | (1 << (MParser.BLOB - 64)) | (1 << (MParser.EXECUTE - 64)) | (1 << (MParser.FETCH - 64)) | (1 << (MParser.MUTABLE - 64)) | (1 << (MParser.NONE - 64)) | (1 << (MParser.NOT - 64)))) != 0) or ((((_la - 137)) & ~0x3f) == 0 and ((1 << (_la - 137)) & ((1 << (MParser.READ - 137)) | (1 << (MParser.SELF - 137)) | (1 << (MParser.SORTED - 137)) | (1 << (MParser.THIS - 137)) | (1 << (MParser.BOOLEAN_LITERAL - 137)) | (1 << (MParser.CHAR_LITERAL - 137)) | (1 << (MParser.MIN_INTEGER - 137)) | (1 << (MParser.MAX_INTEGER - 137)) | (1 << (MParser.SYMBOL_IDENTIFIER - 137)) | (1 << (MParser.TYPE_IDENTIFIER - 137)) | (1 << (MParser.VARIABLE_IDENTIFIER - 137)) | (1 << (MParser.TEXT_LITERAL - 137)) | (1 << (MParser.UUID_LITERAL - 137)) | (1 << (MParser.INTEGER_LITERAL - 137)) | (1 << (MParser.HEXA_LITERAL - 137)) | (1 << (MParser.DECIMAL_LITERAL - 137)) | (1 << (MParser.DATETIME_LITERAL - 137)) | (1 << (MParser.TIME_LITERAL - 137)) | (1 << (MParser.DATE_LITERAL - 137)) | (1 << (MParser.PERIOD_LITERAL - 137)) | (1 << (MParser.VERSION_LITERAL - 137)))) != 0):
                self.state = 2062
                self.expression(0)
                self.state = 2067
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==MParser.COMMA:
                    self.state = 2063
                    self.match(MParser.COMMA)
                    self.state = 2064
                    self.expression(0)
                    self.state = 2069
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Dict_entry_listContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dict_entry(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MParser.Dict_entryContext)
            else:
                return self.getTypedRuleContext(MParser.Dict_entryContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(MParser.COMMA)
            else:
                return self.getToken(MParser.COMMA, i)

        def getRuleIndex(self):
            return MParser.RULE_dict_entry_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDict_entry_list" ):
                listener.enterDict_entry_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDict_entry_list" ):
                listener.exitDict_entry_list(self)




    def dict_entry_list(self):

        localctx = MParser.Dict_entry_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 290, self.RULE_dict_entry_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2072
            self.dict_entry()
            self.state = 2077
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==MParser.COMMA:
                self.state = 2073
                self.match(MParser.COMMA)
                self.state = 2074
                self.dict_entry()
                self.state = 2079
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Dict_entryContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.key = None # Dict_keyContext
            self.value = None # ExpressionContext

        def COLON(self):
            return self.getToken(MParser.COLON, 0)

        def dict_key(self):
            return self.getTypedRuleContext(MParser.Dict_keyContext,0)


        def expression(self):
            return self.getTypedRuleContext(MParser.ExpressionContext,0)


        def getRuleIndex(self):
            return MParser.RULE_dict_entry

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDict_entry" ):
                listener.enterDict_entry(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDict_entry" ):
                listener.exitDict_entry(self)




    def dict_entry(self):

        localctx = MParser.Dict_entryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 292, self.RULE_dict_entry)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2080
            localctx.key = self.dict_key()
            self.state = 2081
            self.match(MParser.COLON)
            self.state = 2082
            localctx.value = self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Dict_keyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return MParser.RULE_dict_key

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class DictKeyIdentifierContext(Dict_keyContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MParser.Dict_keyContext
            super().__init__(parser)
            self.name = None # Any_identifierContext
            self.copyFrom(ctx)

        def any_identifier(self):
            return self.getTypedRuleContext(MParser.Any_identifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDictKeyIdentifier" ):
                listener.enterDictKeyIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDictKeyIdentifier" ):
                listener.exitDictKeyIdentifier(self)


    class DictKeyTextContext(Dict_keyContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MParser.Dict_keyContext
            super().__init__(parser)
            self.name = None # Token
            self.copyFrom(ctx)

        def TEXT_LITERAL(self):
            return self.getToken(MParser.TEXT_LITERAL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDictKeyText" ):
                listener.enterDictKeyText(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDictKeyText" ):
                listener.exitDictKeyText(self)



    def dict_key(self):

        localctx = MParser.Dict_keyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 294, self.RULE_dict_key)
        try:
            self.state = 2086
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MParser.SYMBOL_IDENTIFIER, MParser.TYPE_IDENTIFIER, MParser.VARIABLE_IDENTIFIER]:
                localctx = MParser.DictKeyIdentifierContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2084
                localctx.name = self.any_identifier()
                pass
            elif token in [MParser.TEXT_LITERAL]:
                localctx = MParser.DictKeyTextContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2085
                localctx.name = self.match(MParser.TEXT_LITERAL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Slice_argumentsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return MParser.RULE_slice_arguments

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class SliceFirstAndLastContext(Slice_argumentsContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MParser.Slice_argumentsContext
            super().__init__(parser)
            self.first = None # ExpressionContext
            self.last = None # ExpressionContext
            self.copyFrom(ctx)

        def COLON(self):
            return self.getToken(MParser.COLON, 0)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(MParser.ExpressionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSliceFirstAndLast" ):
                listener.enterSliceFirstAndLast(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSliceFirstAndLast" ):
                listener.exitSliceFirstAndLast(self)


    class SliceLastOnlyContext(Slice_argumentsContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MParser.Slice_argumentsContext
            super().__init__(parser)
            self.last = None # ExpressionContext
            self.copyFrom(ctx)

        def COLON(self):
            return self.getToken(MParser.COLON, 0)
        def expression(self):
            return self.getTypedRuleContext(MParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSliceLastOnly" ):
                listener.enterSliceLastOnly(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSliceLastOnly" ):
                listener.exitSliceLastOnly(self)


    class SliceFirstOnlyContext(Slice_argumentsContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MParser.Slice_argumentsContext
            super().__init__(parser)
            self.first = None # ExpressionContext
            self.copyFrom(ctx)

        def COLON(self):
            return self.getToken(MParser.COLON, 0)
        def expression(self):
            return self.getTypedRuleContext(MParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSliceFirstOnly" ):
                listener.enterSliceFirstOnly(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSliceFirstOnly" ):
                listener.exitSliceFirstOnly(self)



    def slice_arguments(self):

        localctx = MParser.Slice_argumentsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 296, self.RULE_slice_arguments)
        try:
            self.state = 2097
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,168,self._ctx)
            if la_ == 1:
                localctx = MParser.SliceFirstAndLastContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2088
                localctx.first = self.expression(0)
                self.state = 2089
                self.match(MParser.COLON)
                self.state = 2090
                localctx.last = self.expression(0)
                pass

            elif la_ == 2:
                localctx = MParser.SliceFirstOnlyContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2092
                localctx.first = self.expression(0)
                self.state = 2093
                self.match(MParser.COLON)
                pass

            elif la_ == 3:
                localctx = MParser.SliceLastOnlyContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 2095
                self.match(MParser.COLON)
                self.state = 2096
                localctx.last = self.expression(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Assign_variable_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variable_identifier(self):
            return self.getTypedRuleContext(MParser.Variable_identifierContext,0)


        def assign(self):
            return self.getTypedRuleContext(MParser.AssignContext,0)


        def expression(self):
            return self.getTypedRuleContext(MParser.ExpressionContext,0)


        def getRuleIndex(self):
            return MParser.RULE_assign_variable_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssign_variable_statement" ):
                listener.enterAssign_variable_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssign_variable_statement" ):
                listener.exitAssign_variable_statement(self)




    def assign_variable_statement(self):

        localctx = MParser.Assign_variable_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 298, self.RULE_assign_variable_statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2099
            self.variable_identifier()
            self.state = 2100
            self.assign()
            self.state = 2101
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Assignable_instanceContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return MParser.RULE_assignable_instance

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class ChildInstanceContext(Assignable_instanceContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MParser.Assignable_instanceContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def assignable_instance(self):
            return self.getTypedRuleContext(MParser.Assignable_instanceContext,0)

        def child_instance(self):
            return self.getTypedRuleContext(MParser.Child_instanceContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterChildInstance" ):
                listener.enterChildInstance(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitChildInstance" ):
                listener.exitChildInstance(self)


    class RootInstanceContext(Assignable_instanceContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MParser.Assignable_instanceContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def variable_identifier(self):
            return self.getTypedRuleContext(MParser.Variable_identifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRootInstance" ):
                listener.enterRootInstance(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRootInstance" ):
                listener.exitRootInstance(self)



    def assignable_instance(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = MParser.Assignable_instanceContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 300
        self.enterRecursionRule(localctx, 300, self.RULE_assignable_instance, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            localctx = MParser.RootInstanceContext(self, localctx)
            self._ctx = localctx
            _prevctx = localctx

            self.state = 2104
            self.variable_identifier()
            self._ctx.stop = self._input.LT(-1)
            self.state = 2110
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,169,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = MParser.ChildInstanceContext(self, MParser.Assignable_instanceContext(self, _parentctx, _parentState))
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_assignable_instance)
                    self.state = 2106
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 2107
                    self.child_instance() 
                self.state = 2112
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,169,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class Is_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return MParser.RULE_is_expression

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class IsATypeExpressionContext(Is_expressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MParser.Is_expressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def VARIABLE_IDENTIFIER(self):
            return self.getToken(MParser.VARIABLE_IDENTIFIER, 0)
        def category_or_any_type(self):
            return self.getTypedRuleContext(MParser.Category_or_any_typeContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIsATypeExpression" ):
                listener.enterIsATypeExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIsATypeExpression" ):
                listener.exitIsATypeExpression(self)


    class IsOtherExpressionContext(Is_expressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MParser.Is_expressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self):
            return self.getTypedRuleContext(MParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIsOtherExpression" ):
                listener.enterIsOtherExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIsOtherExpression" ):
                listener.exitIsOtherExpression(self)



    def is_expression(self):

        localctx = MParser.Is_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 302, self.RULE_is_expression)
        try:
            self.state = 2117
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,170,self._ctx)
            if la_ == 1:
                localctx = MParser.IsATypeExpressionContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2113
                if not self.willBeAOrAn():
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "$parser.willBeAOrAn()")
                self.state = 2114
                self.match(MParser.VARIABLE_IDENTIFIER)
                self.state = 2115
                self.category_or_any_type()
                pass

            elif la_ == 2:
                localctx = MParser.IsOtherExpressionContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2116
                self.expression(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Arrow_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return MParser.RULE_arrow_expression

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class ArrowExpressionBodyContext(Arrow_expressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MParser.Arrow_expressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def arrow_prefix(self):
            return self.getTypedRuleContext(MParser.Arrow_prefixContext,0)

        def expression(self):
            return self.getTypedRuleContext(MParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArrowExpressionBody" ):
                listener.enterArrowExpressionBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArrowExpressionBody" ):
                listener.exitArrowExpressionBody(self)


    class ArrowStatementsBodyContext(Arrow_expressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MParser.Arrow_expressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def arrow_prefix(self):
            return self.getTypedRuleContext(MParser.Arrow_prefixContext,0)

        def LCURL(self):
            return self.getToken(MParser.LCURL, 0)
        def statement_list(self):
            return self.getTypedRuleContext(MParser.Statement_listContext,0)

        def RCURL(self):
            return self.getToken(MParser.RCURL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArrowStatementsBody" ):
                listener.enterArrowStatementsBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArrowStatementsBody" ):
                listener.exitArrowStatementsBody(self)



    def arrow_expression(self):

        localctx = MParser.Arrow_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 304, self.RULE_arrow_expression)
        try:
            self.state = 2127
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,171,self._ctx)
            if la_ == 1:
                localctx = MParser.ArrowExpressionBodyContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2119
                self.arrow_prefix()
                self.state = 2120
                self.expression(0)
                pass

            elif la_ == 2:
                localctx = MParser.ArrowStatementsBodyContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2122
                self.arrow_prefix()
                self.state = 2123
                self.match(MParser.LCURL)
                self.state = 2124
                self.statement_list()
                self.state = 2125
                self.match(MParser.RCURL)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Arrow_prefixContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.s1 = None # Ws_plusContext
            self.s2 = None # Ws_plusContext

        def arrow_args(self):
            return self.getTypedRuleContext(MParser.Arrow_argsContext,0)


        def EGT(self):
            return self.getToken(MParser.EGT, 0)

        def ws_plus(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MParser.Ws_plusContext)
            else:
                return self.getTypedRuleContext(MParser.Ws_plusContext,i)


        def getRuleIndex(self):
            return MParser.RULE_arrow_prefix

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArrow_prefix" ):
                listener.enterArrow_prefix(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArrow_prefix" ):
                listener.exitArrow_prefix(self)




    def arrow_prefix(self):

        localctx = MParser.Arrow_prefixContext(self, self._ctx, self.state)
        self.enterRule(localctx, 306, self.RULE_arrow_prefix)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2129
            self.arrow_args()
            self.state = 2130
            localctx.s1 = self.ws_plus()
            self.state = 2131
            self.match(MParser.EGT)
            self.state = 2132
            localctx.s2 = self.ws_plus()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Arrow_argsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return MParser.RULE_arrow_args

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class ArrowListArgContext(Arrow_argsContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MParser.Arrow_argsContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LPAR(self):
            return self.getToken(MParser.LPAR, 0)
        def RPAR(self):
            return self.getToken(MParser.RPAR, 0)
        def variable_identifier_list(self):
            return self.getTypedRuleContext(MParser.Variable_identifier_listContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArrowListArg" ):
                listener.enterArrowListArg(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArrowListArg" ):
                listener.exitArrowListArg(self)


    class ArrowSingleArgContext(Arrow_argsContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MParser.Arrow_argsContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def variable_identifier(self):
            return self.getTypedRuleContext(MParser.Variable_identifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArrowSingleArg" ):
                listener.enterArrowSingleArg(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArrowSingleArg" ):
                listener.exitArrowSingleArg(self)



    def arrow_args(self):

        localctx = MParser.Arrow_argsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 308, self.RULE_arrow_args)
        self._la = 0 # Token type
        try:
            self.state = 2140
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MParser.VARIABLE_IDENTIFIER]:
                localctx = MParser.ArrowSingleArgContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2134
                self.variable_identifier()
                pass
            elif token in [MParser.LPAR]:
                localctx = MParser.ArrowListArgContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2135
                self.match(MParser.LPAR)
                self.state = 2137
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MParser.VARIABLE_IDENTIFIER:
                    self.state = 2136
                    self.variable_identifier_list()


                self.state = 2139
                self.match(MParser.RPAR)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Sorted_keyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def instance_expression(self):
            return self.getTypedRuleContext(MParser.Instance_expressionContext,0)


        def arrow_expression(self):
            return self.getTypedRuleContext(MParser.Arrow_expressionContext,0)


        def getRuleIndex(self):
            return MParser.RULE_sorted_key

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSorted_key" ):
                listener.enterSorted_key(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSorted_key" ):
                listener.exitSorted_key(self)




    def sorted_key(self):

        localctx = MParser.Sorted_keyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 310, self.RULE_sorted_key)
        try:
            self.state = 2144
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,174,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2142
                self.instance_expression(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2143
                self.arrow_expression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Read_all_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.source = None # ExpressionContext

        def READ(self):
            return self.getToken(MParser.READ, 0)

        def ALL(self):
            return self.getToken(MParser.ALL, 0)

        def FROM(self):
            return self.getToken(MParser.FROM, 0)

        def expression(self):
            return self.getTypedRuleContext(MParser.ExpressionContext,0)


        def getRuleIndex(self):
            return MParser.RULE_read_all_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRead_all_expression" ):
                listener.enterRead_all_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRead_all_expression" ):
                listener.exitRead_all_expression(self)




    def read_all_expression(self):

        localctx = MParser.Read_all_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 312, self.RULE_read_all_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2146
            self.match(MParser.READ)
            self.state = 2147
            self.match(MParser.ALL)
            self.state = 2148
            self.match(MParser.FROM)
            self.state = 2149
            localctx.source = self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Read_one_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.source = None # ExpressionContext

        def READ(self):
            return self.getToken(MParser.READ, 0)

        def ONE(self):
            return self.getToken(MParser.ONE, 0)

        def FROM(self):
            return self.getToken(MParser.FROM, 0)

        def expression(self):
            return self.getTypedRuleContext(MParser.ExpressionContext,0)


        def getRuleIndex(self):
            return MParser.RULE_read_one_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRead_one_expression" ):
                listener.enterRead_one_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRead_one_expression" ):
                listener.exitRead_one_expression(self)




    def read_one_expression(self):

        localctx = MParser.Read_one_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 314, self.RULE_read_one_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2151
            self.match(MParser.READ)
            self.state = 2152
            self.match(MParser.ONE)
            self.state = 2153
            self.match(MParser.FROM)
            self.state = 2154
            localctx.source = self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Order_by_listContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def order_by(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MParser.Order_byContext)
            else:
                return self.getTypedRuleContext(MParser.Order_byContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(MParser.COMMA)
            else:
                return self.getToken(MParser.COMMA, i)

        def getRuleIndex(self):
            return MParser.RULE_order_by_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOrder_by_list" ):
                listener.enterOrder_by_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOrder_by_list" ):
                listener.exitOrder_by_list(self)




    def order_by_list(self):

        localctx = MParser.Order_by_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 316, self.RULE_order_by_list)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2156
            self.order_by()
            self.state = 2161
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,175,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2157
                    self.match(MParser.COMMA)
                    self.state = 2158
                    self.order_by() 
                self.state = 2163
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,175,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Order_byContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variable_identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MParser.Variable_identifierContext)
            else:
                return self.getTypedRuleContext(MParser.Variable_identifierContext,i)


        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(MParser.DOT)
            else:
                return self.getToken(MParser.DOT, i)

        def ASC(self):
            return self.getToken(MParser.ASC, 0)

        def DESC(self):
            return self.getToken(MParser.DESC, 0)

        def getRuleIndex(self):
            return MParser.RULE_order_by

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOrder_by" ):
                listener.enterOrder_by(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOrder_by" ):
                listener.exitOrder_by(self)




    def order_by(self):

        localctx = MParser.Order_byContext(self, self._ctx, self.state)
        self.enterRule(localctx, 318, self.RULE_order_by)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2164
            self.variable_identifier()
            self.state = 2169
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,176,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2165
                    self.match(MParser.DOT)
                    self.state = 2166
                    self.variable_identifier() 
                self.state = 2171
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,176,self._ctx)

            self.state = 2173
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,177,self._ctx)
            if la_ == 1:
                self.state = 2172
                _la = self._input.LA(1)
                if not(_la==MParser.ASC or _la==MParser.DESC):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class OperatorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return MParser.RULE_operator

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class OperatorPlusContext(OperatorContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MParser.OperatorContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def PLUS(self):
            return self.getToken(MParser.PLUS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOperatorPlus" ):
                listener.enterOperatorPlus(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOperatorPlus" ):
                listener.exitOperatorPlus(self)


    class OperatorDivideContext(OperatorContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MParser.OperatorContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def divide(self):
            return self.getTypedRuleContext(MParser.DivideContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOperatorDivide" ):
                listener.enterOperatorDivide(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOperatorDivide" ):
                listener.exitOperatorDivide(self)


    class OperatorIDivideContext(OperatorContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MParser.OperatorContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def idivide(self):
            return self.getTypedRuleContext(MParser.IdivideContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOperatorIDivide" ):
                listener.enterOperatorIDivide(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOperatorIDivide" ):
                listener.exitOperatorIDivide(self)


    class OperatorMultiplyContext(OperatorContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MParser.OperatorContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def multiply(self):
            return self.getTypedRuleContext(MParser.MultiplyContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOperatorMultiply" ):
                listener.enterOperatorMultiply(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOperatorMultiply" ):
                listener.exitOperatorMultiply(self)


    class OperatorMinusContext(OperatorContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MParser.OperatorContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def MINUS(self):
            return self.getToken(MParser.MINUS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOperatorMinus" ):
                listener.enterOperatorMinus(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOperatorMinus" ):
                listener.exitOperatorMinus(self)


    class OperatorModuloContext(OperatorContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MParser.OperatorContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def modulo(self):
            return self.getTypedRuleContext(MParser.ModuloContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOperatorModulo" ):
                listener.enterOperatorModulo(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOperatorModulo" ):
                listener.exitOperatorModulo(self)



    def operator(self):

        localctx = MParser.OperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 320, self.RULE_operator)
        try:
            self.state = 2181
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MParser.PLUS]:
                localctx = MParser.OperatorPlusContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2175
                self.match(MParser.PLUS)
                pass
            elif token in [MParser.MINUS]:
                localctx = MParser.OperatorMinusContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2176
                self.match(MParser.MINUS)
                pass
            elif token in [MParser.STAR]:
                localctx = MParser.OperatorMultiplyContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 2177
                self.multiply()
                pass
            elif token in [MParser.SLASH]:
                localctx = MParser.OperatorDivideContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 2178
                self.divide()
                pass
            elif token in [MParser.BSLASH]:
                localctx = MParser.OperatorIDivideContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 2179
                self.idivide()
                pass
            elif token in [MParser.PERCENT, MParser.MODULO]:
                localctx = MParser.OperatorModuloContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 2180
                self.modulo()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class KeywordContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def JAVA(self):
            return self.getToken(MParser.JAVA, 0)

        def CSHARP(self):
            return self.getToken(MParser.CSHARP, 0)

        def PYTHON2(self):
            return self.getToken(MParser.PYTHON2, 0)

        def PYTHON3(self):
            return self.getToken(MParser.PYTHON3, 0)

        def JAVASCRIPT(self):
            return self.getToken(MParser.JAVASCRIPT, 0)

        def SWIFT(self):
            return self.getToken(MParser.SWIFT, 0)

        def BOOLEAN(self):
            return self.getToken(MParser.BOOLEAN, 0)

        def CHARACTER(self):
            return self.getToken(MParser.CHARACTER, 0)

        def TEXT(self):
            return self.getToken(MParser.TEXT, 0)

        def INTEGER(self):
            return self.getToken(MParser.INTEGER, 0)

        def DECIMAL(self):
            return self.getToken(MParser.DECIMAL, 0)

        def DATE(self):
            return self.getToken(MParser.DATE, 0)

        def TIME(self):
            return self.getToken(MParser.TIME, 0)

        def DATETIME(self):
            return self.getToken(MParser.DATETIME, 0)

        def PERIOD(self):
            return self.getToken(MParser.PERIOD, 0)

        def VERSION(self):
            return self.getToken(MParser.VERSION, 0)

        def METHOD_T(self):
            return self.getToken(MParser.METHOD_T, 0)

        def CODE(self):
            return self.getToken(MParser.CODE, 0)

        def DOCUMENT(self):
            return self.getToken(MParser.DOCUMENT, 0)

        def BLOB(self):
            return self.getToken(MParser.BLOB, 0)

        def IMAGE(self):
            return self.getToken(MParser.IMAGE, 0)

        def UUID(self):
            return self.getToken(MParser.UUID, 0)

        def ITERATOR(self):
            return self.getToken(MParser.ITERATOR, 0)

        def CURSOR(self):
            return self.getToken(MParser.CURSOR, 0)

        def HTML(self):
            return self.getToken(MParser.HTML, 0)

        def ABSTRACT(self):
            return self.getToken(MParser.ABSTRACT, 0)

        def ALL(self):
            return self.getToken(MParser.ALL, 0)

        def ALWAYS(self):
            return self.getToken(MParser.ALWAYS, 0)

        def AND(self):
            return self.getToken(MParser.AND, 0)

        def ANY(self):
            return self.getToken(MParser.ANY, 0)

        def AS(self):
            return self.getToken(MParser.AS, 0)

        def ASC(self):
            return self.getToken(MParser.ASC, 0)

        def ATTR(self):
            return self.getToken(MParser.ATTR, 0)

        def ATTRIBUTE(self):
            return self.getToken(MParser.ATTRIBUTE, 0)

        def ATTRIBUTES(self):
            return self.getToken(MParser.ATTRIBUTES, 0)

        def BINDINGS(self):
            return self.getToken(MParser.BINDINGS, 0)

        def BREAK(self):
            return self.getToken(MParser.BREAK, 0)

        def BY(self):
            return self.getToken(MParser.BY, 0)

        def CASE(self):
            return self.getToken(MParser.CASE, 0)

        def CATCH(self):
            return self.getToken(MParser.CATCH, 0)

        def CATEGORY(self):
            return self.getToken(MParser.CATEGORY, 0)

        def CLASS(self):
            return self.getToken(MParser.CLASS, 0)

        def CLOSE(self):
            return self.getToken(MParser.CLOSE, 0)

        def CONTAINS(self):
            return self.getToken(MParser.CONTAINS, 0)

        def DEF(self):
            return self.getToken(MParser.DEF, 0)

        def DEFAULT(self):
            return self.getToken(MParser.DEFAULT, 0)

        def DEFINE(self):
            return self.getToken(MParser.DEFINE, 0)

        def DELETE(self):
            return self.getToken(MParser.DELETE, 0)

        def DESC(self):
            return self.getToken(MParser.DESC, 0)

        def DO(self):
            return self.getToken(MParser.DO, 0)

        def DOING(self):
            return self.getToken(MParser.DOING, 0)

        def EACH(self):
            return self.getToken(MParser.EACH, 0)

        def ELSE(self):
            return self.getToken(MParser.ELSE, 0)

        def ENUM(self):
            return self.getToken(MParser.ENUM, 0)

        def ENUMERATED(self):
            return self.getToken(MParser.ENUMERATED, 0)

        def EXCEPT(self):
            return self.getToken(MParser.EXCEPT, 0)

        def EXECUTE(self):
            return self.getToken(MParser.EXECUTE, 0)

        def EXPECTING(self):
            return self.getToken(MParser.EXPECTING, 0)

        def EXTENDS(self):
            return self.getToken(MParser.EXTENDS, 0)

        def FETCH(self):
            return self.getToken(MParser.FETCH, 0)

        def FILTERED(self):
            return self.getToken(MParser.FILTERED, 0)

        def FINALLY(self):
            return self.getToken(MParser.FINALLY, 0)

        def FLUSH(self):
            return self.getToken(MParser.FLUSH, 0)

        def FOR(self):
            return self.getToken(MParser.FOR, 0)

        def FROM(self):
            return self.getToken(MParser.FROM, 0)

        def GETTER(self):
            return self.getToken(MParser.GETTER, 0)

        def HAS(self):
            return self.getToken(MParser.HAS, 0)

        def IF(self):
            return self.getToken(MParser.IF, 0)

        def IN(self):
            return self.getToken(MParser.IN, 0)

        def INDEX(self):
            return self.getToken(MParser.INDEX, 0)

        def INVOKE(self):
            return self.getToken(MParser.INVOKE, 0)

        def IS(self):
            return self.getToken(MParser.IS, 0)

        def MATCHING(self):
            return self.getToken(MParser.MATCHING, 0)

        def METHOD(self):
            return self.getToken(MParser.METHOD, 0)

        def METHODS(self):
            return self.getToken(MParser.METHODS, 0)

        def MODULO(self):
            return self.getToken(MParser.MODULO, 0)

        def MUTABLE(self):
            return self.getToken(MParser.MUTABLE, 0)

        def NATIVE(self):
            return self.getToken(MParser.NATIVE, 0)

        def NONE(self):
            return self.getToken(MParser.NONE, 0)

        def NOT(self):
            return self.getToken(MParser.NOT, 0)

        def NOTHING(self):
            return self.getToken(MParser.NOTHING, 0)

        def NULL(self):
            return self.getToken(MParser.NULL, 0)

        def ON(self):
            return self.getToken(MParser.ON, 0)

        def ONE(self):
            return self.getToken(MParser.ONE, 0)

        def OPEN(self):
            return self.getToken(MParser.OPEN, 0)

        def OPERATOR(self):
            return self.getToken(MParser.OPERATOR, 0)

        def OR(self):
            return self.getToken(MParser.OR, 0)

        def ORDER(self):
            return self.getToken(MParser.ORDER, 0)

        def OTHERWISE(self):
            return self.getToken(MParser.OTHERWISE, 0)

        def PASS(self):
            return self.getToken(MParser.PASS, 0)

        def RAISE(self):
            return self.getToken(MParser.RAISE, 0)

        def READ(self):
            return self.getToken(MParser.READ, 0)

        def RECEIVING(self):
            return self.getToken(MParser.RECEIVING, 0)

        def RESOURCE(self):
            return self.getToken(MParser.RESOURCE, 0)

        def RETURN(self):
            return self.getToken(MParser.RETURN, 0)

        def RETURNING(self):
            return self.getToken(MParser.RETURNING, 0)

        def ROWS(self):
            return self.getToken(MParser.ROWS, 0)

        def SELF(self):
            return self.getToken(MParser.SELF, 0)

        def SETTER(self):
            return self.getToken(MParser.SETTER, 0)

        def SINGLETON(self):
            return self.getToken(MParser.SINGLETON, 0)

        def SORTED(self):
            return self.getToken(MParser.SORTED, 0)

        def STORABLE(self):
            return self.getToken(MParser.STORABLE, 0)

        def STORE(self):
            return self.getToken(MParser.STORE, 0)

        def SWITCH(self):
            return self.getToken(MParser.SWITCH, 0)

        def TEST(self):
            return self.getToken(MParser.TEST, 0)

        def THIS(self):
            return self.getToken(MParser.THIS, 0)

        def THROW(self):
            return self.getToken(MParser.THROW, 0)

        def TO(self):
            return self.getToken(MParser.TO, 0)

        def TRY(self):
            return self.getToken(MParser.TRY, 0)

        def VERIFYING(self):
            return self.getToken(MParser.VERIFYING, 0)

        def WIDGET(self):
            return self.getToken(MParser.WIDGET, 0)

        def WITH(self):
            return self.getToken(MParser.WITH, 0)

        def WHEN(self):
            return self.getToken(MParser.WHEN, 0)

        def WHERE(self):
            return self.getToken(MParser.WHERE, 0)

        def WHILE(self):
            return self.getToken(MParser.WHILE, 0)

        def WRITE(self):
            return self.getToken(MParser.WRITE, 0)

        def getRuleIndex(self):
            return MParser.RULE_keyword

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterKeyword" ):
                listener.enterKeyword(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitKeyword" ):
                listener.exitKeyword(self)




    def keyword(self):

        localctx = MParser.KeywordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 322, self.RULE_keyword)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2183
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << MParser.JAVA) | (1 << MParser.CSHARP) | (1 << MParser.PYTHON2) | (1 << MParser.PYTHON3) | (1 << MParser.JAVASCRIPT) | (1 << MParser.SWIFT) | (1 << MParser.BOOLEAN) | (1 << MParser.CHARACTER) | (1 << MParser.TEXT) | (1 << MParser.INTEGER) | (1 << MParser.DECIMAL) | (1 << MParser.DATE) | (1 << MParser.TIME) | (1 << MParser.DATETIME) | (1 << MParser.PERIOD) | (1 << MParser.VERSION) | (1 << MParser.METHOD_T) | (1 << MParser.CODE))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (MParser.DOCUMENT - 64)) | (1 << (MParser.BLOB - 64)) | (1 << (MParser.IMAGE - 64)) | (1 << (MParser.UUID - 64)) | (1 << (MParser.ITERATOR - 64)) | (1 << (MParser.CURSOR - 64)) | (1 << (MParser.HTML - 64)) | (1 << (MParser.ABSTRACT - 64)) | (1 << (MParser.ALL - 64)) | (1 << (MParser.ALWAYS - 64)) | (1 << (MParser.AND - 64)) | (1 << (MParser.ANY - 64)) | (1 << (MParser.AS - 64)) | (1 << (MParser.ASC - 64)) | (1 << (MParser.ATTR - 64)) | (1 << (MParser.ATTRIBUTE - 64)) | (1 << (MParser.ATTRIBUTES - 64)) | (1 << (MParser.BINDINGS - 64)) | (1 << (MParser.BREAK - 64)) | (1 << (MParser.BY - 64)) | (1 << (MParser.CASE - 64)) | (1 << (MParser.CATCH - 64)) | (1 << (MParser.CATEGORY - 64)) | (1 << (MParser.CLASS - 64)) | (1 << (MParser.CLOSE - 64)) | (1 << (MParser.CONTAINS - 64)) | (1 << (MParser.DEF - 64)) | (1 << (MParser.DEFAULT - 64)) | (1 << (MParser.DEFINE - 64)) | (1 << (MParser.DELETE - 64)) | (1 << (MParser.DESC - 64)) | (1 << (MParser.DO - 64)) | (1 << (MParser.DOING - 64)) | (1 << (MParser.EACH - 64)) | (1 << (MParser.ELSE - 64)) | (1 << (MParser.ENUM - 64)) | (1 << (MParser.ENUMERATED - 64)) | (1 << (MParser.EXCEPT - 64)) | (1 << (MParser.EXECUTE - 64)) | (1 << (MParser.EXPECTING - 64)) | (1 << (MParser.EXTENDS - 64)) | (1 << (MParser.FETCH - 64)) | (1 << (MParser.FILTERED - 64)) | (1 << (MParser.FINALLY - 64)) | (1 << (MParser.FLUSH - 64)) | (1 << (MParser.FOR - 64)) | (1 << (MParser.FROM - 64)) | (1 << (MParser.GETTER - 64)) | (1 << (MParser.HAS - 64)) | (1 << (MParser.IF - 64)) | (1 << (MParser.IN - 64)) | (1 << (MParser.INDEX - 64)) | (1 << (MParser.INVOKE - 64)) | (1 << (MParser.IS - 64)) | (1 << (MParser.MATCHING - 64)) | (1 << (MParser.METHOD - 64)) | (1 << (MParser.METHODS - 64)) | (1 << (MParser.MODULO - 64)) | (1 << (MParser.MUTABLE - 64)) | (1 << (MParser.NATIVE - 64)) | (1 << (MParser.NONE - 64)) | (1 << (MParser.NOT - 64)) | (1 << (MParser.NOTHING - 64)) | (1 << (MParser.NULL - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (MParser.ON - 128)) | (1 << (MParser.ONE - 128)) | (1 << (MParser.OPEN - 128)) | (1 << (MParser.OPERATOR - 128)) | (1 << (MParser.OR - 128)) | (1 << (MParser.ORDER - 128)) | (1 << (MParser.OTHERWISE - 128)) | (1 << (MParser.PASS - 128)) | (1 << (MParser.RAISE - 128)) | (1 << (MParser.READ - 128)) | (1 << (MParser.RECEIVING - 128)) | (1 << (MParser.RESOURCE - 128)) | (1 << (MParser.RETURN - 128)) | (1 << (MParser.RETURNING - 128)) | (1 << (MParser.ROWS - 128)) | (1 << (MParser.SELF - 128)) | (1 << (MParser.SETTER - 128)) | (1 << (MParser.SINGLETON - 128)) | (1 << (MParser.SORTED - 128)) | (1 << (MParser.STORABLE - 128)) | (1 << (MParser.STORE - 128)) | (1 << (MParser.SWITCH - 128)) | (1 << (MParser.TEST - 128)) | (1 << (MParser.THIS - 128)) | (1 << (MParser.THROW - 128)) | (1 << (MParser.TO - 128)) | (1 << (MParser.TRY - 128)) | (1 << (MParser.VERIFYING - 128)) | (1 << (MParser.WIDGET - 128)) | (1 << (MParser.WITH - 128)) | (1 << (MParser.WHEN - 128)) | (1 << (MParser.WHERE - 128)) | (1 << (MParser.WHILE - 128)) | (1 << (MParser.WRITE - 128)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class New_tokenContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.i1 = None # Token

        def VARIABLE_IDENTIFIER(self):
            return self.getToken(MParser.VARIABLE_IDENTIFIER, 0)

        def getRuleIndex(self):
            return MParser.RULE_new_token

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNew_token" ):
                listener.enterNew_token(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNew_token" ):
                listener.exitNew_token(self)




    def new_token(self):

        localctx = MParser.New_tokenContext(self, self._ctx, self.state)
        self.enterRule(localctx, 324, self.RULE_new_token)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2185
            localctx.i1 = self.match(MParser.VARIABLE_IDENTIFIER)
            self.state = 2186
            if not self.isText(localctx.i1,"new"):
                from antlr4.error.Errors import FailedPredicateException
                raise FailedPredicateException(self, "$parser.isText($i1,\"new\")")
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Key_tokenContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.i1 = None # Token

        def VARIABLE_IDENTIFIER(self):
            return self.getToken(MParser.VARIABLE_IDENTIFIER, 0)

        def getRuleIndex(self):
            return MParser.RULE_key_token

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterKey_token" ):
                listener.enterKey_token(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitKey_token" ):
                listener.exitKey_token(self)




    def key_token(self):

        localctx = MParser.Key_tokenContext(self, self._ctx, self.state)
        self.enterRule(localctx, 326, self.RULE_key_token)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2188
            localctx.i1 = self.match(MParser.VARIABLE_IDENTIFIER)
            self.state = 2189
            if not self.isText(localctx.i1,"key"):
                from antlr4.error.Errors import FailedPredicateException
                raise FailedPredicateException(self, "$parser.isText($i1,\"key\")")
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Module_tokenContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.i1 = None # Token

        def VARIABLE_IDENTIFIER(self):
            return self.getToken(MParser.VARIABLE_IDENTIFIER, 0)

        def getRuleIndex(self):
            return MParser.RULE_module_token

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModule_token" ):
                listener.enterModule_token(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModule_token" ):
                listener.exitModule_token(self)




    def module_token(self):

        localctx = MParser.Module_tokenContext(self, self._ctx, self.state)
        self.enterRule(localctx, 328, self.RULE_module_token)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2191
            localctx.i1 = self.match(MParser.VARIABLE_IDENTIFIER)
            self.state = 2192
            if not self.isText(localctx.i1,"module"):
                from antlr4.error.Errors import FailedPredicateException
                raise FailedPredicateException(self, "$parser.isText($i1,\"module\")")
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Value_tokenContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.i1 = None # Token

        def VARIABLE_IDENTIFIER(self):
            return self.getToken(MParser.VARIABLE_IDENTIFIER, 0)

        def getRuleIndex(self):
            return MParser.RULE_value_token

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterValue_token" ):
                listener.enterValue_token(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitValue_token" ):
                listener.exitValue_token(self)




    def value_token(self):

        localctx = MParser.Value_tokenContext(self, self._ctx, self.state)
        self.enterRule(localctx, 330, self.RULE_value_token)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2194
            localctx.i1 = self.match(MParser.VARIABLE_IDENTIFIER)
            self.state = 2195
            if not self.isText(localctx.i1,"value"):
                from antlr4.error.Errors import FailedPredicateException
                raise FailedPredicateException(self, "$parser.isText($i1,\"value\")")
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Symbols_tokenContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.i1 = None # Token

        def VARIABLE_IDENTIFIER(self):
            return self.getToken(MParser.VARIABLE_IDENTIFIER, 0)

        def getRuleIndex(self):
            return MParser.RULE_symbols_token

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSymbols_token" ):
                listener.enterSymbols_token(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSymbols_token" ):
                listener.exitSymbols_token(self)




    def symbols_token(self):

        localctx = MParser.Symbols_tokenContext(self, self._ctx, self.state)
        self.enterRule(localctx, 332, self.RULE_symbols_token)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2197
            localctx.i1 = self.match(MParser.VARIABLE_IDENTIFIER)
            self.state = 2198
            if not self.isText(localctx.i1,"symbols"):
                from antlr4.error.Errors import FailedPredicateException
                raise FailedPredicateException(self, "$parser.isText($i1,\"symbols\")")
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AssignContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EQ(self):
            return self.getToken(MParser.EQ, 0)

        def getRuleIndex(self):
            return MParser.RULE_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssign" ):
                listener.enterAssign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssign" ):
                listener.exitAssign(self)




    def assign(self):

        localctx = MParser.AssignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 334, self.RULE_assign)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2200
            self.match(MParser.EQ)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class MultiplyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STAR(self):
            return self.getToken(MParser.STAR, 0)

        def getRuleIndex(self):
            return MParser.RULE_multiply

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMultiply" ):
                listener.enterMultiply(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMultiply" ):
                listener.exitMultiply(self)




    def multiply(self):

        localctx = MParser.MultiplyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 336, self.RULE_multiply)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2202
            self.match(MParser.STAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DivideContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SLASH(self):
            return self.getToken(MParser.SLASH, 0)

        def getRuleIndex(self):
            return MParser.RULE_divide

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDivide" ):
                listener.enterDivide(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDivide" ):
                listener.exitDivide(self)




    def divide(self):

        localctx = MParser.DivideContext(self, self._ctx, self.state)
        self.enterRule(localctx, 338, self.RULE_divide)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2204
            self.match(MParser.SLASH)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class IdivideContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BSLASH(self):
            return self.getToken(MParser.BSLASH, 0)

        def getRuleIndex(self):
            return MParser.RULE_idivide

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdivide" ):
                listener.enterIdivide(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdivide" ):
                listener.exitIdivide(self)




    def idivide(self):

        localctx = MParser.IdivideContext(self, self._ctx, self.state)
        self.enterRule(localctx, 340, self.RULE_idivide)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2206
            self.match(MParser.BSLASH)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ModuloContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PERCENT(self):
            return self.getToken(MParser.PERCENT, 0)

        def MODULO(self):
            return self.getToken(MParser.MODULO, 0)

        def getRuleIndex(self):
            return MParser.RULE_modulo

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModulo" ):
                listener.enterModulo(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModulo" ):
                listener.exitModulo(self)




    def modulo(self):

        localctx = MParser.ModuloContext(self, self._ctx, self.state)
        self.enterRule(localctx, 342, self.RULE_modulo)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2208
            _la = self._input.LA(1)
            if not(_la==MParser.PERCENT or _la==MParser.MODULO):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Javascript_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return MParser.RULE_javascript_statement

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class JavascriptStatementContext(Javascript_statementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MParser.Javascript_statementContext
            super().__init__(parser)
            self.exp = None # Javascript_expressionContext
            self.copyFrom(ctx)

        def SEMI(self):
            return self.getToken(MParser.SEMI, 0)
        def javascript_expression(self):
            return self.getTypedRuleContext(MParser.Javascript_expressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJavascriptStatement" ):
                listener.enterJavascriptStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJavascriptStatement" ):
                listener.exitJavascriptStatement(self)


    class JavascriptReturnStatementContext(Javascript_statementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MParser.Javascript_statementContext
            super().__init__(parser)
            self.exp = None # Javascript_expressionContext
            self.copyFrom(ctx)

        def RETURN(self):
            return self.getToken(MParser.RETURN, 0)
        def SEMI(self):
            return self.getToken(MParser.SEMI, 0)
        def javascript_expression(self):
            return self.getTypedRuleContext(MParser.Javascript_expressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJavascriptReturnStatement" ):
                listener.enterJavascriptReturnStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJavascriptReturnStatement" ):
                listener.exitJavascriptReturnStatement(self)



    def javascript_statement(self):

        localctx = MParser.Javascript_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 344, self.RULE_javascript_statement)
        try:
            self.state = 2217
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MParser.RETURN]:
                localctx = MParser.JavascriptReturnStatementContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2210
                self.match(MParser.RETURN)
                self.state = 2211
                localctx.exp = self.javascript_expression(0)
                self.state = 2212
                self.match(MParser.SEMI)
                pass
            elif token in [MParser.LPAR, MParser.LBRAK, MParser.BOOLEAN, MParser.CHARACTER, MParser.TEXT, MParser.INTEGER, MParser.DECIMAL, MParser.DATE, MParser.TIME, MParser.DATETIME, MParser.PERIOD, MParser.VERSION, MParser.UUID, MParser.HTML, MParser.NONE, MParser.NULL, MParser.READ, MParser.SELF, MParser.TEST, MParser.THIS, MParser.WRITE, MParser.BOOLEAN_LITERAL, MParser.CHAR_LITERAL, MParser.SYMBOL_IDENTIFIER, MParser.TYPE_IDENTIFIER, MParser.VARIABLE_IDENTIFIER, MParser.DOLLAR_IDENTIFIER, MParser.TEXT_LITERAL, MParser.INTEGER_LITERAL, MParser.DECIMAL_LITERAL]:
                localctx = MParser.JavascriptStatementContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2214
                localctx.exp = self.javascript_expression(0)
                self.state = 2215
                self.match(MParser.SEMI)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Javascript_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return MParser.RULE_javascript_expression

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class JavascriptSelectorExpressionContext(Javascript_expressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MParser.Javascript_expressionContext
            super().__init__(parser)
            self.parent = None # Javascript_expressionContext
            self.child = None # Javascript_selector_expressionContext
            self.copyFrom(ctx)

        def javascript_expression(self):
            return self.getTypedRuleContext(MParser.Javascript_expressionContext,0)

        def javascript_selector_expression(self):
            return self.getTypedRuleContext(MParser.Javascript_selector_expressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJavascriptSelectorExpression" ):
                listener.enterJavascriptSelectorExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJavascriptSelectorExpression" ):
                listener.exitJavascriptSelectorExpression(self)


    class JavascriptPrimaryExpressionContext(Javascript_expressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MParser.Javascript_expressionContext
            super().__init__(parser)
            self.exp = None # Javascript_primary_expressionContext
            self.copyFrom(ctx)

        def javascript_primary_expression(self):
            return self.getTypedRuleContext(MParser.Javascript_primary_expressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJavascriptPrimaryExpression" ):
                listener.enterJavascriptPrimaryExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJavascriptPrimaryExpression" ):
                listener.exitJavascriptPrimaryExpression(self)



    def javascript_expression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = MParser.Javascript_expressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 346
        self.enterRecursionRule(localctx, 346, self.RULE_javascript_expression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            localctx = MParser.JavascriptPrimaryExpressionContext(self, localctx)
            self._ctx = localctx
            _prevctx = localctx

            self.state = 2220
            localctx.exp = self.javascript_primary_expression()
            self._ctx.stop = self._input.LT(-1)
            self.state = 2226
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,180,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = MParser.JavascriptSelectorExpressionContext(self, MParser.Javascript_expressionContext(self, _parentctx, _parentState))
                    localctx.parent = _prevctx
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_javascript_expression)
                    self.state = 2222
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 2223
                    localctx.child = self.javascript_selector_expression() 
                self.state = 2228
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,180,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class Javascript_primary_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def javascript_this_expression(self):
            return self.getTypedRuleContext(MParser.Javascript_this_expressionContext,0)


        def javascript_new_expression(self):
            return self.getTypedRuleContext(MParser.Javascript_new_expressionContext,0)


        def javascript_parenthesis_expression(self):
            return self.getTypedRuleContext(MParser.Javascript_parenthesis_expressionContext,0)


        def javascript_identifier_expression(self):
            return self.getTypedRuleContext(MParser.Javascript_identifier_expressionContext,0)


        def javascript_literal_expression(self):
            return self.getTypedRuleContext(MParser.Javascript_literal_expressionContext,0)


        def javascript_method_expression(self):
            return self.getTypedRuleContext(MParser.Javascript_method_expressionContext,0)


        def javascript_item_expression(self):
            return self.getTypedRuleContext(MParser.Javascript_item_expressionContext,0)


        def getRuleIndex(self):
            return MParser.RULE_javascript_primary_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJavascript_primary_expression" ):
                listener.enterJavascript_primary_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJavascript_primary_expression" ):
                listener.exitJavascript_primary_expression(self)




    def javascript_primary_expression(self):

        localctx = MParser.Javascript_primary_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 348, self.RULE_javascript_primary_expression)
        try:
            self.state = 2236
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,181,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2229
                self.javascript_this_expression()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2230
                self.javascript_new_expression()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2231
                self.javascript_parenthesis_expression()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2232
                self.javascript_identifier_expression()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 2233
                self.javascript_literal_expression()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 2234
                self.javascript_method_expression()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 2235
                self.javascript_item_expression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Javascript_this_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def this_expression(self):
            return self.getTypedRuleContext(MParser.This_expressionContext,0)


        def getRuleIndex(self):
            return MParser.RULE_javascript_this_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJavascript_this_expression" ):
                listener.enterJavascript_this_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJavascript_this_expression" ):
                listener.exitJavascript_this_expression(self)




    def javascript_this_expression(self):

        localctx = MParser.Javascript_this_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 350, self.RULE_javascript_this_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2238
            self.this_expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Javascript_new_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def new_token(self):
            return self.getTypedRuleContext(MParser.New_tokenContext,0)


        def javascript_method_expression(self):
            return self.getTypedRuleContext(MParser.Javascript_method_expressionContext,0)


        def getRuleIndex(self):
            return MParser.RULE_javascript_new_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJavascript_new_expression" ):
                listener.enterJavascript_new_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJavascript_new_expression" ):
                listener.exitJavascript_new_expression(self)




    def javascript_new_expression(self):

        localctx = MParser.Javascript_new_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 352, self.RULE_javascript_new_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2240
            self.new_token()
            self.state = 2241
            self.javascript_method_expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Javascript_selector_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return MParser.RULE_javascript_selector_expression

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class JavaScriptMemberExpressionContext(Javascript_selector_expressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MParser.Javascript_selector_expressionContext
            super().__init__(parser)
            self.name = None # Javascript_identifierContext
            self.copyFrom(ctx)

        def DOT(self):
            return self.getToken(MParser.DOT, 0)
        def javascript_identifier(self):
            return self.getTypedRuleContext(MParser.Javascript_identifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJavaScriptMemberExpression" ):
                listener.enterJavaScriptMemberExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJavaScriptMemberExpression" ):
                listener.exitJavaScriptMemberExpression(self)


    class JavaScriptItemExpressionContext(Javascript_selector_expressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MParser.Javascript_selector_expressionContext
            super().__init__(parser)
            self.exp = None # Javascript_item_expressionContext
            self.copyFrom(ctx)

        def javascript_item_expression(self):
            return self.getTypedRuleContext(MParser.Javascript_item_expressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJavaScriptItemExpression" ):
                listener.enterJavaScriptItemExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJavaScriptItemExpression" ):
                listener.exitJavaScriptItemExpression(self)


    class JavaScriptMethodExpressionContext(Javascript_selector_expressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MParser.Javascript_selector_expressionContext
            super().__init__(parser)
            self.method = None # Javascript_method_expressionContext
            self.copyFrom(ctx)

        def DOT(self):
            return self.getToken(MParser.DOT, 0)
        def javascript_method_expression(self):
            return self.getTypedRuleContext(MParser.Javascript_method_expressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJavaScriptMethodExpression" ):
                listener.enterJavaScriptMethodExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJavaScriptMethodExpression" ):
                listener.exitJavaScriptMethodExpression(self)



    def javascript_selector_expression(self):

        localctx = MParser.Javascript_selector_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 354, self.RULE_javascript_selector_expression)
        try:
            self.state = 2248
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,182,self._ctx)
            if la_ == 1:
                localctx = MParser.JavaScriptMethodExpressionContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2243
                self.match(MParser.DOT)
                self.state = 2244
                localctx.method = self.javascript_method_expression()
                pass

            elif la_ == 2:
                localctx = MParser.JavaScriptMemberExpressionContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2245
                self.match(MParser.DOT)
                self.state = 2246
                localctx.name = self.javascript_identifier()
                pass

            elif la_ == 3:
                localctx = MParser.JavaScriptItemExpressionContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 2247
                localctx.exp = self.javascript_item_expression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Javascript_method_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # Javascript_identifierContext
            self.args = None # Javascript_argumentsContext

        def LPAR(self):
            return self.getToken(MParser.LPAR, 0)

        def RPAR(self):
            return self.getToken(MParser.RPAR, 0)

        def javascript_identifier(self):
            return self.getTypedRuleContext(MParser.Javascript_identifierContext,0)


        def javascript_arguments(self):
            return self.getTypedRuleContext(MParser.Javascript_argumentsContext,0)


        def getRuleIndex(self):
            return MParser.RULE_javascript_method_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJavascript_method_expression" ):
                listener.enterJavascript_method_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJavascript_method_expression" ):
                listener.exitJavascript_method_expression(self)




    def javascript_method_expression(self):

        localctx = MParser.Javascript_method_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 356, self.RULE_javascript_method_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2250
            localctx.name = self.javascript_identifier()
            self.state = 2251
            self.match(MParser.LPAR)
            self.state = 2253
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 20)) & ~0x3f) == 0 and ((1 << (_la - 20)) & ((1 << (MParser.LPAR - 20)) | (1 << (MParser.LBRAK - 20)) | (1 << (MParser.BOOLEAN - 20)) | (1 << (MParser.CHARACTER - 20)) | (1 << (MParser.TEXT - 20)) | (1 << (MParser.INTEGER - 20)) | (1 << (MParser.DECIMAL - 20)) | (1 << (MParser.DATE - 20)) | (1 << (MParser.TIME - 20)) | (1 << (MParser.DATETIME - 20)) | (1 << (MParser.PERIOD - 20)) | (1 << (MParser.VERSION - 20)) | (1 << (MParser.UUID - 20)) | (1 << (MParser.HTML - 20)))) != 0) or ((((_la - 124)) & ~0x3f) == 0 and ((1 << (_la - 124)) & ((1 << (MParser.NONE - 124)) | (1 << (MParser.NULL - 124)) | (1 << (MParser.READ - 124)) | (1 << (MParser.SELF - 124)) | (1 << (MParser.TEST - 124)) | (1 << (MParser.THIS - 124)) | (1 << (MParser.WRITE - 124)) | (1 << (MParser.BOOLEAN_LITERAL - 124)) | (1 << (MParser.CHAR_LITERAL - 124)) | (1 << (MParser.SYMBOL_IDENTIFIER - 124)) | (1 << (MParser.TYPE_IDENTIFIER - 124)) | (1 << (MParser.VARIABLE_IDENTIFIER - 124)) | (1 << (MParser.DOLLAR_IDENTIFIER - 124)) | (1 << (MParser.TEXT_LITERAL - 124)) | (1 << (MParser.INTEGER_LITERAL - 124)) | (1 << (MParser.DECIMAL_LITERAL - 124)))) != 0):
                self.state = 2252
                localctx.args = self.javascript_arguments(0)


            self.state = 2255
            self.match(MParser.RPAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Javascript_argumentsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return MParser.RULE_javascript_arguments

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class JavascriptArgumentListContext(Javascript_argumentsContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MParser.Javascript_argumentsContext
            super().__init__(parser)
            self.item = None # Javascript_expressionContext
            self.copyFrom(ctx)

        def javascript_expression(self):
            return self.getTypedRuleContext(MParser.Javascript_expressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJavascriptArgumentList" ):
                listener.enterJavascriptArgumentList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJavascriptArgumentList" ):
                listener.exitJavascriptArgumentList(self)


    class JavascriptArgumentListItemContext(Javascript_argumentsContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MParser.Javascript_argumentsContext
            super().__init__(parser)
            self.items = None # Javascript_argumentsContext
            self.item = None # Javascript_expressionContext
            self.copyFrom(ctx)

        def COMMA(self):
            return self.getToken(MParser.COMMA, 0)
        def javascript_arguments(self):
            return self.getTypedRuleContext(MParser.Javascript_argumentsContext,0)

        def javascript_expression(self):
            return self.getTypedRuleContext(MParser.Javascript_expressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJavascriptArgumentListItem" ):
                listener.enterJavascriptArgumentListItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJavascriptArgumentListItem" ):
                listener.exitJavascriptArgumentListItem(self)



    def javascript_arguments(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = MParser.Javascript_argumentsContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 358
        self.enterRecursionRule(localctx, 358, self.RULE_javascript_arguments, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            localctx = MParser.JavascriptArgumentListContext(self, localctx)
            self._ctx = localctx
            _prevctx = localctx

            self.state = 2258
            localctx.item = self.javascript_expression(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 2265
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,184,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = MParser.JavascriptArgumentListItemContext(self, MParser.Javascript_argumentsContext(self, _parentctx, _parentState))
                    localctx.items = _prevctx
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_javascript_arguments)
                    self.state = 2260
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 2261
                    self.match(MParser.COMMA)
                    self.state = 2262
                    localctx.item = self.javascript_expression(0) 
                self.state = 2267
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,184,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class Javascript_item_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.exp = None # Javascript_expressionContext

        def LBRAK(self):
            return self.getToken(MParser.LBRAK, 0)

        def RBRAK(self):
            return self.getToken(MParser.RBRAK, 0)

        def javascript_expression(self):
            return self.getTypedRuleContext(MParser.Javascript_expressionContext,0)


        def getRuleIndex(self):
            return MParser.RULE_javascript_item_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJavascript_item_expression" ):
                listener.enterJavascript_item_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJavascript_item_expression" ):
                listener.exitJavascript_item_expression(self)




    def javascript_item_expression(self):

        localctx = MParser.Javascript_item_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 360, self.RULE_javascript_item_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2268
            self.match(MParser.LBRAK)
            self.state = 2269
            localctx.exp = self.javascript_expression(0)
            self.state = 2270
            self.match(MParser.RBRAK)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Javascript_parenthesis_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.exp = None # Javascript_expressionContext

        def LPAR(self):
            return self.getToken(MParser.LPAR, 0)

        def RPAR(self):
            return self.getToken(MParser.RPAR, 0)

        def javascript_expression(self):
            return self.getTypedRuleContext(MParser.Javascript_expressionContext,0)


        def getRuleIndex(self):
            return MParser.RULE_javascript_parenthesis_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJavascript_parenthesis_expression" ):
                listener.enterJavascript_parenthesis_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJavascript_parenthesis_expression" ):
                listener.exitJavascript_parenthesis_expression(self)




    def javascript_parenthesis_expression(self):

        localctx = MParser.Javascript_parenthesis_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 362, self.RULE_javascript_parenthesis_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2272
            self.match(MParser.LPAR)
            self.state = 2273
            localctx.exp = self.javascript_expression(0)
            self.state = 2274
            self.match(MParser.RPAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Javascript_identifier_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # Javascript_identifierContext

        def javascript_identifier(self):
            return self.getTypedRuleContext(MParser.Javascript_identifierContext,0)


        def getRuleIndex(self):
            return MParser.RULE_javascript_identifier_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJavascript_identifier_expression" ):
                listener.enterJavascript_identifier_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJavascript_identifier_expression" ):
                listener.exitJavascript_identifier_expression(self)




    def javascript_identifier_expression(self):

        localctx = MParser.Javascript_identifier_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 364, self.RULE_javascript_identifier_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2276
            localctx.name = self.javascript_identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Javascript_literal_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return MParser.RULE_javascript_literal_expression

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class JavascriptIntegerLiteralContext(Javascript_literal_expressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MParser.Javascript_literal_expressionContext
            super().__init__(parser)
            self.t = None # Token
            self.copyFrom(ctx)

        def INTEGER_LITERAL(self):
            return self.getToken(MParser.INTEGER_LITERAL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJavascriptIntegerLiteral" ):
                listener.enterJavascriptIntegerLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJavascriptIntegerLiteral" ):
                listener.exitJavascriptIntegerLiteral(self)


    class JavascriptBooleanLiteralContext(Javascript_literal_expressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MParser.Javascript_literal_expressionContext
            super().__init__(parser)
            self.t = None # Token
            self.copyFrom(ctx)

        def BOOLEAN_LITERAL(self):
            return self.getToken(MParser.BOOLEAN_LITERAL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJavascriptBooleanLiteral" ):
                listener.enterJavascriptBooleanLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJavascriptBooleanLiteral" ):
                listener.exitJavascriptBooleanLiteral(self)


    class JavascriptCharacterLiteralContext(Javascript_literal_expressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MParser.Javascript_literal_expressionContext
            super().__init__(parser)
            self.t = None # Token
            self.copyFrom(ctx)

        def CHAR_LITERAL(self):
            return self.getToken(MParser.CHAR_LITERAL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJavascriptCharacterLiteral" ):
                listener.enterJavascriptCharacterLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJavascriptCharacterLiteral" ):
                listener.exitJavascriptCharacterLiteral(self)


    class JavascriptTextLiteralContext(Javascript_literal_expressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MParser.Javascript_literal_expressionContext
            super().__init__(parser)
            self.t = None # Token
            self.copyFrom(ctx)

        def TEXT_LITERAL(self):
            return self.getToken(MParser.TEXT_LITERAL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJavascriptTextLiteral" ):
                listener.enterJavascriptTextLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJavascriptTextLiteral" ):
                listener.exitJavascriptTextLiteral(self)


    class JavascriptDecimalLiteralContext(Javascript_literal_expressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MParser.Javascript_literal_expressionContext
            super().__init__(parser)
            self.t = None # Token
            self.copyFrom(ctx)

        def DECIMAL_LITERAL(self):
            return self.getToken(MParser.DECIMAL_LITERAL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJavascriptDecimalLiteral" ):
                listener.enterJavascriptDecimalLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJavascriptDecimalLiteral" ):
                listener.exitJavascriptDecimalLiteral(self)



    def javascript_literal_expression(self):

        localctx = MParser.Javascript_literal_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 366, self.RULE_javascript_literal_expression)
        try:
            self.state = 2283
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MParser.INTEGER_LITERAL]:
                localctx = MParser.JavascriptIntegerLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2278
                localctx.t = self.match(MParser.INTEGER_LITERAL)
                pass
            elif token in [MParser.DECIMAL_LITERAL]:
                localctx = MParser.JavascriptDecimalLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2279
                localctx.t = self.match(MParser.DECIMAL_LITERAL)
                pass
            elif token in [MParser.TEXT_LITERAL]:
                localctx = MParser.JavascriptTextLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 2280
                localctx.t = self.match(MParser.TEXT_LITERAL)
                pass
            elif token in [MParser.BOOLEAN_LITERAL]:
                localctx = MParser.JavascriptBooleanLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 2281
                localctx.t = self.match(MParser.BOOLEAN_LITERAL)
                pass
            elif token in [MParser.CHAR_LITERAL]:
                localctx = MParser.JavascriptCharacterLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 2282
                localctx.t = self.match(MParser.CHAR_LITERAL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Javascript_identifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VARIABLE_IDENTIFIER(self):
            return self.getToken(MParser.VARIABLE_IDENTIFIER, 0)

        def SYMBOL_IDENTIFIER(self):
            return self.getToken(MParser.SYMBOL_IDENTIFIER, 0)

        def DOLLAR_IDENTIFIER(self):
            return self.getToken(MParser.DOLLAR_IDENTIFIER, 0)

        def TYPE_IDENTIFIER(self):
            return self.getToken(MParser.TYPE_IDENTIFIER, 0)

        def BOOLEAN(self):
            return self.getToken(MParser.BOOLEAN, 0)

        def CHARACTER(self):
            return self.getToken(MParser.CHARACTER, 0)

        def TEXT(self):
            return self.getToken(MParser.TEXT, 0)

        def INTEGER(self):
            return self.getToken(MParser.INTEGER, 0)

        def DECIMAL(self):
            return self.getToken(MParser.DECIMAL, 0)

        def DATE(self):
            return self.getToken(MParser.DATE, 0)

        def TIME(self):
            return self.getToken(MParser.TIME, 0)

        def DATETIME(self):
            return self.getToken(MParser.DATETIME, 0)

        def PERIOD(self):
            return self.getToken(MParser.PERIOD, 0)

        def VERSION(self):
            return self.getToken(MParser.VERSION, 0)

        def UUID(self):
            return self.getToken(MParser.UUID, 0)

        def HTML(self):
            return self.getToken(MParser.HTML, 0)

        def READ(self):
            return self.getToken(MParser.READ, 0)

        def WRITE(self):
            return self.getToken(MParser.WRITE, 0)

        def TEST(self):
            return self.getToken(MParser.TEST, 0)

        def SELF(self):
            return self.getToken(MParser.SELF, 0)

        def NONE(self):
            return self.getToken(MParser.NONE, 0)

        def NULL(self):
            return self.getToken(MParser.NULL, 0)

        def getRuleIndex(self):
            return MParser.RULE_javascript_identifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJavascript_identifier" ):
                listener.enterJavascript_identifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJavascript_identifier" ):
                listener.exitJavascript_identifier(self)




    def javascript_identifier(self):

        localctx = MParser.Javascript_identifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 368, self.RULE_javascript_identifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2285
            _la = self._input.LA(1)
            if not(((((_la - 52)) & ~0x3f) == 0 and ((1 << (_la - 52)) & ((1 << (MParser.BOOLEAN - 52)) | (1 << (MParser.CHARACTER - 52)) | (1 << (MParser.TEXT - 52)) | (1 << (MParser.INTEGER - 52)) | (1 << (MParser.DECIMAL - 52)) | (1 << (MParser.DATE - 52)) | (1 << (MParser.TIME - 52)) | (1 << (MParser.DATETIME - 52)) | (1 << (MParser.PERIOD - 52)) | (1 << (MParser.VERSION - 52)) | (1 << (MParser.UUID - 52)) | (1 << (MParser.HTML - 52)))) != 0) or ((((_la - 124)) & ~0x3f) == 0 and ((1 << (_la - 124)) & ((1 << (MParser.NONE - 124)) | (1 << (MParser.NULL - 124)) | (1 << (MParser.READ - 124)) | (1 << (MParser.SELF - 124)) | (1 << (MParser.TEST - 124)) | (1 << (MParser.WRITE - 124)) | (1 << (MParser.SYMBOL_IDENTIFIER - 124)) | (1 << (MParser.TYPE_IDENTIFIER - 124)) | (1 << (MParser.VARIABLE_IDENTIFIER - 124)) | (1 << (MParser.DOLLAR_IDENTIFIER - 124)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Python_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return MParser.RULE_python_statement

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class PythonStatementContext(Python_statementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MParser.Python_statementContext
            super().__init__(parser)
            self.exp = None # Python_expressionContext
            self.copyFrom(ctx)

        def python_expression(self):
            return self.getTypedRuleContext(MParser.Python_expressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPythonStatement" ):
                listener.enterPythonStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPythonStatement" ):
                listener.exitPythonStatement(self)


    class PythonReturnStatementContext(Python_statementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MParser.Python_statementContext
            super().__init__(parser)
            self.exp = None # Python_expressionContext
            self.copyFrom(ctx)

        def RETURN(self):
            return self.getToken(MParser.RETURN, 0)
        def python_expression(self):
            return self.getTypedRuleContext(MParser.Python_expressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPythonReturnStatement" ):
                listener.enterPythonReturnStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPythonReturnStatement" ):
                listener.exitPythonReturnStatement(self)



    def python_statement(self):

        localctx = MParser.Python_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 370, self.RULE_python_statement)
        try:
            self.state = 2290
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MParser.RETURN]:
                localctx = MParser.PythonReturnStatementContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2287
                self.match(MParser.RETURN)
                self.state = 2288
                localctx.exp = self.python_expression(0)
                pass
            elif token in [MParser.LPAR, MParser.BOOLEAN, MParser.CHARACTER, MParser.TEXT, MParser.INTEGER, MParser.DECIMAL, MParser.DATE, MParser.TIME, MParser.DATETIME, MParser.PERIOD, MParser.VERSION, MParser.UUID, MParser.HTML, MParser.NONE, MParser.NULL, MParser.READ, MParser.SELF, MParser.TEST, MParser.THIS, MParser.WRITE, MParser.BOOLEAN_LITERAL, MParser.CHAR_LITERAL, MParser.SYMBOL_IDENTIFIER, MParser.TYPE_IDENTIFIER, MParser.VARIABLE_IDENTIFIER, MParser.DOLLAR_IDENTIFIER, MParser.TEXT_LITERAL, MParser.INTEGER_LITERAL, MParser.DECIMAL_LITERAL]:
                localctx = MParser.PythonStatementContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2289
                localctx.exp = self.python_expression(0)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Python_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return MParser.RULE_python_expression

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class PythonSelectorExpressionContext(Python_expressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MParser.Python_expressionContext
            super().__init__(parser)
            self.parent = None # Python_expressionContext
            self.child = None # Python_selector_expressionContext
            self.copyFrom(ctx)

        def python_expression(self):
            return self.getTypedRuleContext(MParser.Python_expressionContext,0)

        def python_selector_expression(self):
            return self.getTypedRuleContext(MParser.Python_selector_expressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPythonSelectorExpression" ):
                listener.enterPythonSelectorExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPythonSelectorExpression" ):
                listener.exitPythonSelectorExpression(self)


    class PythonPrimaryExpressionContext(Python_expressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MParser.Python_expressionContext
            super().__init__(parser)
            self.exp = None # Python_primary_expressionContext
            self.copyFrom(ctx)

        def python_primary_expression(self):
            return self.getTypedRuleContext(MParser.Python_primary_expressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPythonPrimaryExpression" ):
                listener.enterPythonPrimaryExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPythonPrimaryExpression" ):
                listener.exitPythonPrimaryExpression(self)



    def python_expression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = MParser.Python_expressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 372
        self.enterRecursionRule(localctx, 372, self.RULE_python_expression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            localctx = MParser.PythonPrimaryExpressionContext(self, localctx)
            self._ctx = localctx
            _prevctx = localctx

            self.state = 2293
            localctx.exp = self.python_primary_expression()
            self._ctx.stop = self._input.LT(-1)
            self.state = 2299
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,187,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = MParser.PythonSelectorExpressionContext(self, MParser.Python_expressionContext(self, _parentctx, _parentState))
                    localctx.parent = _prevctx
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_python_expression)
                    self.state = 2295
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 2296
                    localctx.child = self.python_selector_expression() 
                self.state = 2301
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,187,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class Python_primary_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return MParser.RULE_python_primary_expression

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class PythonParenthesisExpressionContext(Python_primary_expressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MParser.Python_primary_expressionContext
            super().__init__(parser)
            self.exp = None # Python_parenthesis_expressionContext
            self.copyFrom(ctx)

        def python_parenthesis_expression(self):
            return self.getTypedRuleContext(MParser.Python_parenthesis_expressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPythonParenthesisExpression" ):
                listener.enterPythonParenthesisExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPythonParenthesisExpression" ):
                listener.exitPythonParenthesisExpression(self)


    class PythonIdentifierExpressionContext(Python_primary_expressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MParser.Python_primary_expressionContext
            super().__init__(parser)
            self.exp = None # Python_identifier_expressionContext
            self.copyFrom(ctx)

        def python_identifier_expression(self):
            return self.getTypedRuleContext(MParser.Python_identifier_expressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPythonIdentifierExpression" ):
                listener.enterPythonIdentifierExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPythonIdentifierExpression" ):
                listener.exitPythonIdentifierExpression(self)


    class PythonSelfExpressionContext(Python_primary_expressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MParser.Python_primary_expressionContext
            super().__init__(parser)
            self.exp = None # Python_self_expressionContext
            self.copyFrom(ctx)

        def python_self_expression(self):
            return self.getTypedRuleContext(MParser.Python_self_expressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPythonSelfExpression" ):
                listener.enterPythonSelfExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPythonSelfExpression" ):
                listener.exitPythonSelfExpression(self)


    class PythonLiteralExpressionContext(Python_primary_expressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MParser.Python_primary_expressionContext
            super().__init__(parser)
            self.exp = None # Python_literal_expressionContext
            self.copyFrom(ctx)

        def python_literal_expression(self):
            return self.getTypedRuleContext(MParser.Python_literal_expressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPythonLiteralExpression" ):
                listener.enterPythonLiteralExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPythonLiteralExpression" ):
                listener.exitPythonLiteralExpression(self)


    class PythonGlobalMethodExpressionContext(Python_primary_expressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MParser.Python_primary_expressionContext
            super().__init__(parser)
            self.exp = None # Python_method_expressionContext
            self.copyFrom(ctx)

        def python_method_expression(self):
            return self.getTypedRuleContext(MParser.Python_method_expressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPythonGlobalMethodExpression" ):
                listener.enterPythonGlobalMethodExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPythonGlobalMethodExpression" ):
                listener.exitPythonGlobalMethodExpression(self)



    def python_primary_expression(self):

        localctx = MParser.Python_primary_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 374, self.RULE_python_primary_expression)
        try:
            self.state = 2307
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,188,self._ctx)
            if la_ == 1:
                localctx = MParser.PythonSelfExpressionContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2302
                localctx.exp = self.python_self_expression()
                pass

            elif la_ == 2:
                localctx = MParser.PythonParenthesisExpressionContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2303
                localctx.exp = self.python_parenthesis_expression()
                pass

            elif la_ == 3:
                localctx = MParser.PythonIdentifierExpressionContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 2304
                localctx.exp = self.python_identifier_expression(0)
                pass

            elif la_ == 4:
                localctx = MParser.PythonLiteralExpressionContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 2305
                localctx.exp = self.python_literal_expression()
                pass

            elif la_ == 5:
                localctx = MParser.PythonGlobalMethodExpressionContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 2306
                localctx.exp = self.python_method_expression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Python_self_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def this_expression(self):
            return self.getTypedRuleContext(MParser.This_expressionContext,0)


        def getRuleIndex(self):
            return MParser.RULE_python_self_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPython_self_expression" ):
                listener.enterPython_self_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPython_self_expression" ):
                listener.exitPython_self_expression(self)




    def python_self_expression(self):

        localctx = MParser.Python_self_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 376, self.RULE_python_self_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2309
            self.this_expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Python_selector_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return MParser.RULE_python_selector_expression

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class PythonMethodExpressionContext(Python_selector_expressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MParser.Python_selector_expressionContext
            super().__init__(parser)
            self.exp = None # Python_method_expressionContext
            self.copyFrom(ctx)

        def DOT(self):
            return self.getToken(MParser.DOT, 0)
        def python_method_expression(self):
            return self.getTypedRuleContext(MParser.Python_method_expressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPythonMethodExpression" ):
                listener.enterPythonMethodExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPythonMethodExpression" ):
                listener.exitPythonMethodExpression(self)


    class PythonItemExpressionContext(Python_selector_expressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MParser.Python_selector_expressionContext
            super().__init__(parser)
            self.exp = None # Python_expressionContext
            self.copyFrom(ctx)

        def LBRAK(self):
            return self.getToken(MParser.LBRAK, 0)
        def RBRAK(self):
            return self.getToken(MParser.RBRAK, 0)
        def python_expression(self):
            return self.getTypedRuleContext(MParser.Python_expressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPythonItemExpression" ):
                listener.enterPythonItemExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPythonItemExpression" ):
                listener.exitPythonItemExpression(self)



    def python_selector_expression(self):

        localctx = MParser.Python_selector_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 378, self.RULE_python_selector_expression)
        try:
            self.state = 2317
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MParser.DOT]:
                localctx = MParser.PythonMethodExpressionContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2311
                self.match(MParser.DOT)
                self.state = 2312
                localctx.exp = self.python_method_expression()
                pass
            elif token in [MParser.LBRAK]:
                localctx = MParser.PythonItemExpressionContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2313
                self.match(MParser.LBRAK)
                self.state = 2314
                localctx.exp = self.python_expression(0)
                self.state = 2315
                self.match(MParser.RBRAK)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Python_method_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # Python_identifierContext
            self.args = None # Python_argument_listContext

        def LPAR(self):
            return self.getToken(MParser.LPAR, 0)

        def RPAR(self):
            return self.getToken(MParser.RPAR, 0)

        def python_identifier(self):
            return self.getTypedRuleContext(MParser.Python_identifierContext,0)


        def python_argument_list(self):
            return self.getTypedRuleContext(MParser.Python_argument_listContext,0)


        def getRuleIndex(self):
            return MParser.RULE_python_method_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPython_method_expression" ):
                listener.enterPython_method_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPython_method_expression" ):
                listener.exitPython_method_expression(self)




    def python_method_expression(self):

        localctx = MParser.Python_method_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 380, self.RULE_python_method_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2319
            localctx.name = self.python_identifier()
            self.state = 2320
            self.match(MParser.LPAR)
            self.state = 2322
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 20)) & ~0x3f) == 0 and ((1 << (_la - 20)) & ((1 << (MParser.LPAR - 20)) | (1 << (MParser.BOOLEAN - 20)) | (1 << (MParser.CHARACTER - 20)) | (1 << (MParser.TEXT - 20)) | (1 << (MParser.INTEGER - 20)) | (1 << (MParser.DECIMAL - 20)) | (1 << (MParser.DATE - 20)) | (1 << (MParser.TIME - 20)) | (1 << (MParser.DATETIME - 20)) | (1 << (MParser.PERIOD - 20)) | (1 << (MParser.VERSION - 20)) | (1 << (MParser.UUID - 20)) | (1 << (MParser.HTML - 20)))) != 0) or ((((_la - 124)) & ~0x3f) == 0 and ((1 << (_la - 124)) & ((1 << (MParser.NONE - 124)) | (1 << (MParser.NULL - 124)) | (1 << (MParser.READ - 124)) | (1 << (MParser.SELF - 124)) | (1 << (MParser.TEST - 124)) | (1 << (MParser.THIS - 124)) | (1 << (MParser.WRITE - 124)) | (1 << (MParser.BOOLEAN_LITERAL - 124)) | (1 << (MParser.CHAR_LITERAL - 124)) | (1 << (MParser.SYMBOL_IDENTIFIER - 124)) | (1 << (MParser.TYPE_IDENTIFIER - 124)) | (1 << (MParser.VARIABLE_IDENTIFIER - 124)) | (1 << (MParser.DOLLAR_IDENTIFIER - 124)) | (1 << (MParser.TEXT_LITERAL - 124)) | (1 << (MParser.INTEGER_LITERAL - 124)) | (1 << (MParser.DECIMAL_LITERAL - 124)))) != 0):
                self.state = 2321
                localctx.args = self.python_argument_list()


            self.state = 2324
            self.match(MParser.RPAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Python_argument_listContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return MParser.RULE_python_argument_list

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class PythonOrdinalOnlyArgumentListContext(Python_argument_listContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MParser.Python_argument_listContext
            super().__init__(parser)
            self.ordinal = None # Python_ordinal_argument_listContext
            self.copyFrom(ctx)

        def python_ordinal_argument_list(self):
            return self.getTypedRuleContext(MParser.Python_ordinal_argument_listContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPythonOrdinalOnlyArgumentList" ):
                listener.enterPythonOrdinalOnlyArgumentList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPythonOrdinalOnlyArgumentList" ):
                listener.exitPythonOrdinalOnlyArgumentList(self)


    class PythonNamedOnlyArgumentListContext(Python_argument_listContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MParser.Python_argument_listContext
            super().__init__(parser)
            self.named = None # Python_named_argument_listContext
            self.copyFrom(ctx)

        def python_named_argument_list(self):
            return self.getTypedRuleContext(MParser.Python_named_argument_listContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPythonNamedOnlyArgumentList" ):
                listener.enterPythonNamedOnlyArgumentList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPythonNamedOnlyArgumentList" ):
                listener.exitPythonNamedOnlyArgumentList(self)


    class PythonArgumentListContext(Python_argument_listContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MParser.Python_argument_listContext
            super().__init__(parser)
            self.ordinal = None # Python_ordinal_argument_listContext
            self.named = None # Python_named_argument_listContext
            self.copyFrom(ctx)

        def COMMA(self):
            return self.getToken(MParser.COMMA, 0)
        def python_ordinal_argument_list(self):
            return self.getTypedRuleContext(MParser.Python_ordinal_argument_listContext,0)

        def python_named_argument_list(self):
            return self.getTypedRuleContext(MParser.Python_named_argument_listContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPythonArgumentList" ):
                listener.enterPythonArgumentList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPythonArgumentList" ):
                listener.exitPythonArgumentList(self)



    def python_argument_list(self):

        localctx = MParser.Python_argument_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 382, self.RULE_python_argument_list)
        try:
            self.state = 2332
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,191,self._ctx)
            if la_ == 1:
                localctx = MParser.PythonOrdinalOnlyArgumentListContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2326
                localctx.ordinal = self.python_ordinal_argument_list(0)
                pass

            elif la_ == 2:
                localctx = MParser.PythonNamedOnlyArgumentListContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2327
                localctx.named = self.python_named_argument_list(0)
                pass

            elif la_ == 3:
                localctx = MParser.PythonArgumentListContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 2328
                localctx.ordinal = self.python_ordinal_argument_list(0)
                self.state = 2329
                self.match(MParser.COMMA)
                self.state = 2330
                localctx.named = self.python_named_argument_list(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Python_ordinal_argument_listContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return MParser.RULE_python_ordinal_argument_list

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class PythonOrdinalArgumentListContext(Python_ordinal_argument_listContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MParser.Python_ordinal_argument_listContext
            super().__init__(parser)
            self.item = None # Python_expressionContext
            self.copyFrom(ctx)

        def python_expression(self):
            return self.getTypedRuleContext(MParser.Python_expressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPythonOrdinalArgumentList" ):
                listener.enterPythonOrdinalArgumentList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPythonOrdinalArgumentList" ):
                listener.exitPythonOrdinalArgumentList(self)


    class PythonOrdinalArgumentListItemContext(Python_ordinal_argument_listContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MParser.Python_ordinal_argument_listContext
            super().__init__(parser)
            self.items = None # Python_ordinal_argument_listContext
            self.item = None # Python_expressionContext
            self.copyFrom(ctx)

        def COMMA(self):
            return self.getToken(MParser.COMMA, 0)
        def python_ordinal_argument_list(self):
            return self.getTypedRuleContext(MParser.Python_ordinal_argument_listContext,0)

        def python_expression(self):
            return self.getTypedRuleContext(MParser.Python_expressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPythonOrdinalArgumentListItem" ):
                listener.enterPythonOrdinalArgumentListItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPythonOrdinalArgumentListItem" ):
                listener.exitPythonOrdinalArgumentListItem(self)



    def python_ordinal_argument_list(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = MParser.Python_ordinal_argument_listContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 384
        self.enterRecursionRule(localctx, 384, self.RULE_python_ordinal_argument_list, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            localctx = MParser.PythonOrdinalArgumentListContext(self, localctx)
            self._ctx = localctx
            _prevctx = localctx

            self.state = 2335
            localctx.item = self.python_expression(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 2342
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,192,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = MParser.PythonOrdinalArgumentListItemContext(self, MParser.Python_ordinal_argument_listContext(self, _parentctx, _parentState))
                    localctx.items = _prevctx
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_python_ordinal_argument_list)
                    self.state = 2337
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 2338
                    self.match(MParser.COMMA)
                    self.state = 2339
                    localctx.item = self.python_expression(0) 
                self.state = 2344
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,192,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class Python_named_argument_listContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return MParser.RULE_python_named_argument_list

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class PythonNamedArgumentListContext(Python_named_argument_listContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MParser.Python_named_argument_listContext
            super().__init__(parser)
            self.name = None # Python_identifierContext
            self.exp = None # Python_expressionContext
            self.copyFrom(ctx)

        def EQ(self):
            return self.getToken(MParser.EQ, 0)
        def python_identifier(self):
            return self.getTypedRuleContext(MParser.Python_identifierContext,0)

        def python_expression(self):
            return self.getTypedRuleContext(MParser.Python_expressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPythonNamedArgumentList" ):
                listener.enterPythonNamedArgumentList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPythonNamedArgumentList" ):
                listener.exitPythonNamedArgumentList(self)


    class PythonNamedArgumentListItemContext(Python_named_argument_listContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MParser.Python_named_argument_listContext
            super().__init__(parser)
            self.items = None # Python_named_argument_listContext
            self.name = None # Python_identifierContext
            self.exp = None # Python_expressionContext
            self.copyFrom(ctx)

        def COMMA(self):
            return self.getToken(MParser.COMMA, 0)
        def EQ(self):
            return self.getToken(MParser.EQ, 0)
        def python_named_argument_list(self):
            return self.getTypedRuleContext(MParser.Python_named_argument_listContext,0)

        def python_identifier(self):
            return self.getTypedRuleContext(MParser.Python_identifierContext,0)

        def python_expression(self):
            return self.getTypedRuleContext(MParser.Python_expressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPythonNamedArgumentListItem" ):
                listener.enterPythonNamedArgumentListItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPythonNamedArgumentListItem" ):
                listener.exitPythonNamedArgumentListItem(self)



    def python_named_argument_list(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = MParser.Python_named_argument_listContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 386
        self.enterRecursionRule(localctx, 386, self.RULE_python_named_argument_list, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            localctx = MParser.PythonNamedArgumentListContext(self, localctx)
            self._ctx = localctx
            _prevctx = localctx

            self.state = 2346
            localctx.name = self.python_identifier()
            self.state = 2347
            self.match(MParser.EQ)
            self.state = 2348
            localctx.exp = self.python_expression(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 2358
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,193,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = MParser.PythonNamedArgumentListItemContext(self, MParser.Python_named_argument_listContext(self, _parentctx, _parentState))
                    localctx.items = _prevctx
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_python_named_argument_list)
                    self.state = 2350
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 2351
                    self.match(MParser.COMMA)
                    self.state = 2352
                    localctx.name = self.python_identifier()
                    self.state = 2353
                    self.match(MParser.EQ)
                    self.state = 2354
                    localctx.exp = self.python_expression(0) 
                self.state = 2360
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,193,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class Python_parenthesis_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.exp = None # Python_expressionContext

        def LPAR(self):
            return self.getToken(MParser.LPAR, 0)

        def RPAR(self):
            return self.getToken(MParser.RPAR, 0)

        def python_expression(self):
            return self.getTypedRuleContext(MParser.Python_expressionContext,0)


        def getRuleIndex(self):
            return MParser.RULE_python_parenthesis_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPython_parenthesis_expression" ):
                listener.enterPython_parenthesis_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPython_parenthesis_expression" ):
                listener.exitPython_parenthesis_expression(self)




    def python_parenthesis_expression(self):

        localctx = MParser.Python_parenthesis_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 388, self.RULE_python_parenthesis_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2361
            self.match(MParser.LPAR)
            self.state = 2362
            localctx.exp = self.python_expression(0)
            self.state = 2363
            self.match(MParser.RPAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Python_identifier_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return MParser.RULE_python_identifier_expression

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class PythonChildIdentifierContext(Python_identifier_expressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MParser.Python_identifier_expressionContext
            super().__init__(parser)
            self.parent = None # Python_identifier_expressionContext
            self.name = None # Python_identifierContext
            self.copyFrom(ctx)

        def DOT(self):
            return self.getToken(MParser.DOT, 0)
        def python_identifier_expression(self):
            return self.getTypedRuleContext(MParser.Python_identifier_expressionContext,0)

        def python_identifier(self):
            return self.getTypedRuleContext(MParser.Python_identifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPythonChildIdentifier" ):
                listener.enterPythonChildIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPythonChildIdentifier" ):
                listener.exitPythonChildIdentifier(self)


    class PythonPromptoIdentifierContext(Python_identifier_expressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MParser.Python_identifier_expressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DOLLAR_IDENTIFIER(self):
            return self.getToken(MParser.DOLLAR_IDENTIFIER, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPythonPromptoIdentifier" ):
                listener.enterPythonPromptoIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPythonPromptoIdentifier" ):
                listener.exitPythonPromptoIdentifier(self)


    class PythonIdentifierContext(Python_identifier_expressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MParser.Python_identifier_expressionContext
            super().__init__(parser)
            self.name = None # Python_identifierContext
            self.copyFrom(ctx)

        def python_identifier(self):
            return self.getTypedRuleContext(MParser.Python_identifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPythonIdentifier" ):
                listener.enterPythonIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPythonIdentifier" ):
                listener.exitPythonIdentifier(self)



    def python_identifier_expression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = MParser.Python_identifier_expressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 390
        self.enterRecursionRule(localctx, 390, self.RULE_python_identifier_expression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2368
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MParser.DOLLAR_IDENTIFIER]:
                localctx = MParser.PythonPromptoIdentifierContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx

                self.state = 2366
                self.match(MParser.DOLLAR_IDENTIFIER)
                pass
            elif token in [MParser.BOOLEAN, MParser.CHARACTER, MParser.TEXT, MParser.INTEGER, MParser.DECIMAL, MParser.DATE, MParser.TIME, MParser.DATETIME, MParser.PERIOD, MParser.VERSION, MParser.UUID, MParser.HTML, MParser.NONE, MParser.NULL, MParser.READ, MParser.TEST, MParser.THIS, MParser.WRITE, MParser.SYMBOL_IDENTIFIER, MParser.TYPE_IDENTIFIER, MParser.VARIABLE_IDENTIFIER]:
                localctx = MParser.PythonIdentifierContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2367
                localctx.name = self.python_identifier()
                pass
            else:
                raise NoViableAltException(self)

            self._ctx.stop = self._input.LT(-1)
            self.state = 2375
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,195,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = MParser.PythonChildIdentifierContext(self, MParser.Python_identifier_expressionContext(self, _parentctx, _parentState))
                    localctx.parent = _prevctx
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_python_identifier_expression)
                    self.state = 2370
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 2371
                    self.match(MParser.DOT)
                    self.state = 2372
                    localctx.name = self.python_identifier() 
                self.state = 2377
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,195,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class Python_literal_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return MParser.RULE_python_literal_expression

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class PythonIntegerLiteralContext(Python_literal_expressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MParser.Python_literal_expressionContext
            super().__init__(parser)
            self.t = None # Token
            self.copyFrom(ctx)

        def INTEGER_LITERAL(self):
            return self.getToken(MParser.INTEGER_LITERAL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPythonIntegerLiteral" ):
                listener.enterPythonIntegerLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPythonIntegerLiteral" ):
                listener.exitPythonIntegerLiteral(self)


    class PythonBooleanLiteralContext(Python_literal_expressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MParser.Python_literal_expressionContext
            super().__init__(parser)
            self.t = None # Token
            self.copyFrom(ctx)

        def BOOLEAN_LITERAL(self):
            return self.getToken(MParser.BOOLEAN_LITERAL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPythonBooleanLiteral" ):
                listener.enterPythonBooleanLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPythonBooleanLiteral" ):
                listener.exitPythonBooleanLiteral(self)


    class PythonCharacterLiteralContext(Python_literal_expressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MParser.Python_literal_expressionContext
            super().__init__(parser)
            self.t = None # Token
            self.copyFrom(ctx)

        def CHAR_LITERAL(self):
            return self.getToken(MParser.CHAR_LITERAL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPythonCharacterLiteral" ):
                listener.enterPythonCharacterLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPythonCharacterLiteral" ):
                listener.exitPythonCharacterLiteral(self)


    class PythonTextLiteralContext(Python_literal_expressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MParser.Python_literal_expressionContext
            super().__init__(parser)
            self.t = None # Token
            self.copyFrom(ctx)

        def TEXT_LITERAL(self):
            return self.getToken(MParser.TEXT_LITERAL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPythonTextLiteral" ):
                listener.enterPythonTextLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPythonTextLiteral" ):
                listener.exitPythonTextLiteral(self)


    class PythonDecimalLiteralContext(Python_literal_expressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MParser.Python_literal_expressionContext
            super().__init__(parser)
            self.t = None # Token
            self.copyFrom(ctx)

        def DECIMAL_LITERAL(self):
            return self.getToken(MParser.DECIMAL_LITERAL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPythonDecimalLiteral" ):
                listener.enterPythonDecimalLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPythonDecimalLiteral" ):
                listener.exitPythonDecimalLiteral(self)



    def python_literal_expression(self):

        localctx = MParser.Python_literal_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 392, self.RULE_python_literal_expression)
        try:
            self.state = 2383
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MParser.INTEGER_LITERAL]:
                localctx = MParser.PythonIntegerLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2378
                localctx.t = self.match(MParser.INTEGER_LITERAL)
                pass
            elif token in [MParser.DECIMAL_LITERAL]:
                localctx = MParser.PythonDecimalLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2379
                localctx.t = self.match(MParser.DECIMAL_LITERAL)
                pass
            elif token in [MParser.TEXT_LITERAL]:
                localctx = MParser.PythonTextLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 2380
                localctx.t = self.match(MParser.TEXT_LITERAL)
                pass
            elif token in [MParser.BOOLEAN_LITERAL]:
                localctx = MParser.PythonBooleanLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 2381
                localctx.t = self.match(MParser.BOOLEAN_LITERAL)
                pass
            elif token in [MParser.CHAR_LITERAL]:
                localctx = MParser.PythonCharacterLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 2382
                localctx.t = self.match(MParser.CHAR_LITERAL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Python_identifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VARIABLE_IDENTIFIER(self):
            return self.getToken(MParser.VARIABLE_IDENTIFIER, 0)

        def SYMBOL_IDENTIFIER(self):
            return self.getToken(MParser.SYMBOL_IDENTIFIER, 0)

        def TYPE_IDENTIFIER(self):
            return self.getToken(MParser.TYPE_IDENTIFIER, 0)

        def BOOLEAN(self):
            return self.getToken(MParser.BOOLEAN, 0)

        def CHARACTER(self):
            return self.getToken(MParser.CHARACTER, 0)

        def TEXT(self):
            return self.getToken(MParser.TEXT, 0)

        def INTEGER(self):
            return self.getToken(MParser.INTEGER, 0)

        def DECIMAL(self):
            return self.getToken(MParser.DECIMAL, 0)

        def DATE(self):
            return self.getToken(MParser.DATE, 0)

        def TIME(self):
            return self.getToken(MParser.TIME, 0)

        def DATETIME(self):
            return self.getToken(MParser.DATETIME, 0)

        def PERIOD(self):
            return self.getToken(MParser.PERIOD, 0)

        def VERSION(self):
            return self.getToken(MParser.VERSION, 0)

        def UUID(self):
            return self.getToken(MParser.UUID, 0)

        def HTML(self):
            return self.getToken(MParser.HTML, 0)

        def READ(self):
            return self.getToken(MParser.READ, 0)

        def WRITE(self):
            return self.getToken(MParser.WRITE, 0)

        def TEST(self):
            return self.getToken(MParser.TEST, 0)

        def THIS(self):
            return self.getToken(MParser.THIS, 0)

        def NONE(self):
            return self.getToken(MParser.NONE, 0)

        def NULL(self):
            return self.getToken(MParser.NULL, 0)

        def getRuleIndex(self):
            return MParser.RULE_python_identifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPython_identifier" ):
                listener.enterPython_identifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPython_identifier" ):
                listener.exitPython_identifier(self)




    def python_identifier(self):

        localctx = MParser.Python_identifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 394, self.RULE_python_identifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2385
            _la = self._input.LA(1)
            if not(((((_la - 52)) & ~0x3f) == 0 and ((1 << (_la - 52)) & ((1 << (MParser.BOOLEAN - 52)) | (1 << (MParser.CHARACTER - 52)) | (1 << (MParser.TEXT - 52)) | (1 << (MParser.INTEGER - 52)) | (1 << (MParser.DECIMAL - 52)) | (1 << (MParser.DATE - 52)) | (1 << (MParser.TIME - 52)) | (1 << (MParser.DATETIME - 52)) | (1 << (MParser.PERIOD - 52)) | (1 << (MParser.VERSION - 52)) | (1 << (MParser.UUID - 52)) | (1 << (MParser.HTML - 52)))) != 0) or ((((_la - 124)) & ~0x3f) == 0 and ((1 << (_la - 124)) & ((1 << (MParser.NONE - 124)) | (1 << (MParser.NULL - 124)) | (1 << (MParser.READ - 124)) | (1 << (MParser.TEST - 124)) | (1 << (MParser.THIS - 124)) | (1 << (MParser.WRITE - 124)) | (1 << (MParser.SYMBOL_IDENTIFIER - 124)) | (1 << (MParser.TYPE_IDENTIFIER - 124)) | (1 << (MParser.VARIABLE_IDENTIFIER - 124)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Java_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return MParser.RULE_java_statement

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class JavaReturnStatementContext(Java_statementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MParser.Java_statementContext
            super().__init__(parser)
            self.exp = None # Java_expressionContext
            self.copyFrom(ctx)

        def RETURN(self):
            return self.getToken(MParser.RETURN, 0)
        def SEMI(self):
            return self.getToken(MParser.SEMI, 0)
        def java_expression(self):
            return self.getTypedRuleContext(MParser.Java_expressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJavaReturnStatement" ):
                listener.enterJavaReturnStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJavaReturnStatement" ):
                listener.exitJavaReturnStatement(self)


    class JavaStatementContext(Java_statementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MParser.Java_statementContext
            super().__init__(parser)
            self.exp = None # Java_expressionContext
            self.copyFrom(ctx)

        def SEMI(self):
            return self.getToken(MParser.SEMI, 0)
        def java_expression(self):
            return self.getTypedRuleContext(MParser.Java_expressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJavaStatement" ):
                listener.enterJavaStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJavaStatement" ):
                listener.exitJavaStatement(self)



    def java_statement(self):

        localctx = MParser.Java_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 396, self.RULE_java_statement)
        try:
            self.state = 2394
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MParser.RETURN]:
                localctx = MParser.JavaReturnStatementContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2387
                self.match(MParser.RETURN)
                self.state = 2388
                localctx.exp = self.java_expression(0)
                self.state = 2389
                self.match(MParser.SEMI)
                pass
            elif token in [MParser.LPAR, MParser.BOOLEAN, MParser.CHARACTER, MParser.TEXT, MParser.INTEGER, MParser.DECIMAL, MParser.DATE, MParser.TIME, MParser.DATETIME, MParser.PERIOD, MParser.VERSION, MParser.UUID, MParser.HTML, MParser.NONE, MParser.NULL, MParser.READ, MParser.SELF, MParser.TEST, MParser.THIS, MParser.WRITE, MParser.BOOLEAN_LITERAL, MParser.CHAR_LITERAL, MParser.SYMBOL_IDENTIFIER, MParser.TYPE_IDENTIFIER, MParser.VARIABLE_IDENTIFIER, MParser.NATIVE_IDENTIFIER, MParser.DOLLAR_IDENTIFIER, MParser.TEXT_LITERAL, MParser.INTEGER_LITERAL, MParser.DECIMAL_LITERAL]:
                localctx = MParser.JavaStatementContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2391
                localctx.exp = self.java_expression(0)
                self.state = 2392
                self.match(MParser.SEMI)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Java_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return MParser.RULE_java_expression

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class JavaSelectorExpressionContext(Java_expressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MParser.Java_expressionContext
            super().__init__(parser)
            self.parent = None # Java_expressionContext
            self.child = None # Java_selector_expressionContext
            self.copyFrom(ctx)

        def java_expression(self):
            return self.getTypedRuleContext(MParser.Java_expressionContext,0)

        def java_selector_expression(self):
            return self.getTypedRuleContext(MParser.Java_selector_expressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJavaSelectorExpression" ):
                listener.enterJavaSelectorExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJavaSelectorExpression" ):
                listener.exitJavaSelectorExpression(self)


    class JavaPrimaryExpressionContext(Java_expressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MParser.Java_expressionContext
            super().__init__(parser)
            self.exp = None # Java_primary_expressionContext
            self.copyFrom(ctx)

        def java_primary_expression(self):
            return self.getTypedRuleContext(MParser.Java_primary_expressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJavaPrimaryExpression" ):
                listener.enterJavaPrimaryExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJavaPrimaryExpression" ):
                listener.exitJavaPrimaryExpression(self)



    def java_expression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = MParser.Java_expressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 398
        self.enterRecursionRule(localctx, 398, self.RULE_java_expression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            localctx = MParser.JavaPrimaryExpressionContext(self, localctx)
            self._ctx = localctx
            _prevctx = localctx

            self.state = 2397
            localctx.exp = self.java_primary_expression()
            self._ctx.stop = self._input.LT(-1)
            self.state = 2403
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,198,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = MParser.JavaSelectorExpressionContext(self, MParser.Java_expressionContext(self, _parentctx, _parentState))
                    localctx.parent = _prevctx
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_java_expression)
                    self.state = 2399
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 2400
                    localctx.child = self.java_selector_expression() 
                self.state = 2405
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,198,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class Java_primary_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def java_this_expression(self):
            return self.getTypedRuleContext(MParser.Java_this_expressionContext,0)


        def java_new_expression(self):
            return self.getTypedRuleContext(MParser.Java_new_expressionContext,0)


        def java_parenthesis_expression(self):
            return self.getTypedRuleContext(MParser.Java_parenthesis_expressionContext,0)


        def java_identifier_expression(self):
            return self.getTypedRuleContext(MParser.Java_identifier_expressionContext,0)


        def java_literal_expression(self):
            return self.getTypedRuleContext(MParser.Java_literal_expressionContext,0)


        def getRuleIndex(self):
            return MParser.RULE_java_primary_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJava_primary_expression" ):
                listener.enterJava_primary_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJava_primary_expression" ):
                listener.exitJava_primary_expression(self)




    def java_primary_expression(self):

        localctx = MParser.Java_primary_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 400, self.RULE_java_primary_expression)
        try:
            self.state = 2411
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,199,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2406
                self.java_this_expression()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2407
                self.java_new_expression()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2408
                self.java_parenthesis_expression()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2409
                self.java_identifier_expression(0)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 2410
                self.java_literal_expression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Java_this_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def this_expression(self):
            return self.getTypedRuleContext(MParser.This_expressionContext,0)


        def getRuleIndex(self):
            return MParser.RULE_java_this_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJava_this_expression" ):
                listener.enterJava_this_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJava_this_expression" ):
                listener.exitJava_this_expression(self)




    def java_this_expression(self):

        localctx = MParser.Java_this_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 402, self.RULE_java_this_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2413
            self.this_expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Java_new_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def new_token(self):
            return self.getTypedRuleContext(MParser.New_tokenContext,0)


        def java_method_expression(self):
            return self.getTypedRuleContext(MParser.Java_method_expressionContext,0)


        def getRuleIndex(self):
            return MParser.RULE_java_new_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJava_new_expression" ):
                listener.enterJava_new_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJava_new_expression" ):
                listener.exitJava_new_expression(self)




    def java_new_expression(self):

        localctx = MParser.Java_new_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 404, self.RULE_java_new_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2415
            self.new_token()
            self.state = 2416
            self.java_method_expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Java_selector_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return MParser.RULE_java_selector_expression

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class JavaItemExpressionContext(Java_selector_expressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MParser.Java_selector_expressionContext
            super().__init__(parser)
            self.exp = None # Java_item_expressionContext
            self.copyFrom(ctx)

        def java_item_expression(self):
            return self.getTypedRuleContext(MParser.Java_item_expressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJavaItemExpression" ):
                listener.enterJavaItemExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJavaItemExpression" ):
                listener.exitJavaItemExpression(self)


    class JavaMethodExpressionContext(Java_selector_expressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MParser.Java_selector_expressionContext
            super().__init__(parser)
            self.exp = None # Java_method_expressionContext
            self.copyFrom(ctx)

        def DOT(self):
            return self.getToken(MParser.DOT, 0)
        def java_method_expression(self):
            return self.getTypedRuleContext(MParser.Java_method_expressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJavaMethodExpression" ):
                listener.enterJavaMethodExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJavaMethodExpression" ):
                listener.exitJavaMethodExpression(self)



    def java_selector_expression(self):

        localctx = MParser.Java_selector_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 406, self.RULE_java_selector_expression)
        try:
            self.state = 2421
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MParser.DOT]:
                localctx = MParser.JavaMethodExpressionContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2418
                self.match(MParser.DOT)
                self.state = 2419
                localctx.exp = self.java_method_expression()
                pass
            elif token in [MParser.LBRAK]:
                localctx = MParser.JavaItemExpressionContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2420
                localctx.exp = self.java_item_expression()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Java_method_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # Java_identifierContext
            self.args = None # Java_argumentsContext

        def LPAR(self):
            return self.getToken(MParser.LPAR, 0)

        def RPAR(self):
            return self.getToken(MParser.RPAR, 0)

        def java_identifier(self):
            return self.getTypedRuleContext(MParser.Java_identifierContext,0)


        def java_arguments(self):
            return self.getTypedRuleContext(MParser.Java_argumentsContext,0)


        def getRuleIndex(self):
            return MParser.RULE_java_method_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJava_method_expression" ):
                listener.enterJava_method_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJava_method_expression" ):
                listener.exitJava_method_expression(self)




    def java_method_expression(self):

        localctx = MParser.Java_method_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 408, self.RULE_java_method_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2423
            localctx.name = self.java_identifier()
            self.state = 2424
            self.match(MParser.LPAR)
            self.state = 2426
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 20)) & ~0x3f) == 0 and ((1 << (_la - 20)) & ((1 << (MParser.LPAR - 20)) | (1 << (MParser.BOOLEAN - 20)) | (1 << (MParser.CHARACTER - 20)) | (1 << (MParser.TEXT - 20)) | (1 << (MParser.INTEGER - 20)) | (1 << (MParser.DECIMAL - 20)) | (1 << (MParser.DATE - 20)) | (1 << (MParser.TIME - 20)) | (1 << (MParser.DATETIME - 20)) | (1 << (MParser.PERIOD - 20)) | (1 << (MParser.VERSION - 20)) | (1 << (MParser.UUID - 20)) | (1 << (MParser.HTML - 20)))) != 0) or ((((_la - 124)) & ~0x3f) == 0 and ((1 << (_la - 124)) & ((1 << (MParser.NONE - 124)) | (1 << (MParser.NULL - 124)) | (1 << (MParser.READ - 124)) | (1 << (MParser.SELF - 124)) | (1 << (MParser.TEST - 124)) | (1 << (MParser.THIS - 124)) | (1 << (MParser.WRITE - 124)) | (1 << (MParser.BOOLEAN_LITERAL - 124)) | (1 << (MParser.CHAR_LITERAL - 124)) | (1 << (MParser.SYMBOL_IDENTIFIER - 124)) | (1 << (MParser.TYPE_IDENTIFIER - 124)) | (1 << (MParser.VARIABLE_IDENTIFIER - 124)) | (1 << (MParser.NATIVE_IDENTIFIER - 124)) | (1 << (MParser.DOLLAR_IDENTIFIER - 124)) | (1 << (MParser.TEXT_LITERAL - 124)) | (1 << (MParser.INTEGER_LITERAL - 124)) | (1 << (MParser.DECIMAL_LITERAL - 124)))) != 0):
                self.state = 2425
                localctx.args = self.java_arguments(0)


            self.state = 2428
            self.match(MParser.RPAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Java_argumentsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return MParser.RULE_java_arguments

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class JavaArgumentListItemContext(Java_argumentsContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MParser.Java_argumentsContext
            super().__init__(parser)
            self.items = None # Java_argumentsContext
            self.item = None # Java_expressionContext
            self.copyFrom(ctx)

        def COMMA(self):
            return self.getToken(MParser.COMMA, 0)
        def java_arguments(self):
            return self.getTypedRuleContext(MParser.Java_argumentsContext,0)

        def java_expression(self):
            return self.getTypedRuleContext(MParser.Java_expressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJavaArgumentListItem" ):
                listener.enterJavaArgumentListItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJavaArgumentListItem" ):
                listener.exitJavaArgumentListItem(self)


    class JavaArgumentListContext(Java_argumentsContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MParser.Java_argumentsContext
            super().__init__(parser)
            self.item = None # Java_expressionContext
            self.copyFrom(ctx)

        def java_expression(self):
            return self.getTypedRuleContext(MParser.Java_expressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJavaArgumentList" ):
                listener.enterJavaArgumentList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJavaArgumentList" ):
                listener.exitJavaArgumentList(self)



    def java_arguments(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = MParser.Java_argumentsContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 410
        self.enterRecursionRule(localctx, 410, self.RULE_java_arguments, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            localctx = MParser.JavaArgumentListContext(self, localctx)
            self._ctx = localctx
            _prevctx = localctx

            self.state = 2431
            localctx.item = self.java_expression(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 2438
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,202,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = MParser.JavaArgumentListItemContext(self, MParser.Java_argumentsContext(self, _parentctx, _parentState))
                    localctx.items = _prevctx
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_java_arguments)
                    self.state = 2433
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 2434
                    self.match(MParser.COMMA)
                    self.state = 2435
                    localctx.item = self.java_expression(0) 
                self.state = 2440
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,202,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class Java_item_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.exp = None # Java_expressionContext

        def LBRAK(self):
            return self.getToken(MParser.LBRAK, 0)

        def RBRAK(self):
            return self.getToken(MParser.RBRAK, 0)

        def java_expression(self):
            return self.getTypedRuleContext(MParser.Java_expressionContext,0)


        def getRuleIndex(self):
            return MParser.RULE_java_item_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJava_item_expression" ):
                listener.enterJava_item_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJava_item_expression" ):
                listener.exitJava_item_expression(self)




    def java_item_expression(self):

        localctx = MParser.Java_item_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 412, self.RULE_java_item_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2441
            self.match(MParser.LBRAK)
            self.state = 2442
            localctx.exp = self.java_expression(0)
            self.state = 2443
            self.match(MParser.RBRAK)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Java_parenthesis_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.exp = None # Java_expressionContext

        def LPAR(self):
            return self.getToken(MParser.LPAR, 0)

        def RPAR(self):
            return self.getToken(MParser.RPAR, 0)

        def java_expression(self):
            return self.getTypedRuleContext(MParser.Java_expressionContext,0)


        def getRuleIndex(self):
            return MParser.RULE_java_parenthesis_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJava_parenthesis_expression" ):
                listener.enterJava_parenthesis_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJava_parenthesis_expression" ):
                listener.exitJava_parenthesis_expression(self)




    def java_parenthesis_expression(self):

        localctx = MParser.Java_parenthesis_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 414, self.RULE_java_parenthesis_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2445
            self.match(MParser.LPAR)
            self.state = 2446
            localctx.exp = self.java_expression(0)
            self.state = 2447
            self.match(MParser.RPAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Java_identifier_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return MParser.RULE_java_identifier_expression

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class JavaIdentifierContext(Java_identifier_expressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MParser.Java_identifier_expressionContext
            super().__init__(parser)
            self.name = None # Java_identifierContext
            self.copyFrom(ctx)

        def java_identifier(self):
            return self.getTypedRuleContext(MParser.Java_identifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJavaIdentifier" ):
                listener.enterJavaIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJavaIdentifier" ):
                listener.exitJavaIdentifier(self)


    class JavaChildIdentifierContext(Java_identifier_expressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MParser.Java_identifier_expressionContext
            super().__init__(parser)
            self.parent = None # Java_identifier_expressionContext
            self.name = None # Java_identifierContext
            self.copyFrom(ctx)

        def DOT(self):
            return self.getToken(MParser.DOT, 0)
        def java_identifier_expression(self):
            return self.getTypedRuleContext(MParser.Java_identifier_expressionContext,0)

        def java_identifier(self):
            return self.getTypedRuleContext(MParser.Java_identifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJavaChildIdentifier" ):
                listener.enterJavaChildIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJavaChildIdentifier" ):
                listener.exitJavaChildIdentifier(self)



    def java_identifier_expression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = MParser.Java_identifier_expressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 416
        self.enterRecursionRule(localctx, 416, self.RULE_java_identifier_expression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            localctx = MParser.JavaIdentifierContext(self, localctx)
            self._ctx = localctx
            _prevctx = localctx

            self.state = 2450
            localctx.name = self.java_identifier()
            self._ctx.stop = self._input.LT(-1)
            self.state = 2457
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,203,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = MParser.JavaChildIdentifierContext(self, MParser.Java_identifier_expressionContext(self, _parentctx, _parentState))
                    localctx.parent = _prevctx
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_java_identifier_expression)
                    self.state = 2452
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 2453
                    self.match(MParser.DOT)
                    self.state = 2454
                    localctx.name = self.java_identifier() 
                self.state = 2459
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,203,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class Java_class_identifier_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return MParser.RULE_java_class_identifier_expression

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class JavaClassIdentifierContext(Java_class_identifier_expressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MParser.Java_class_identifier_expressionContext
            super().__init__(parser)
            self.klass = None # Java_identifier_expressionContext
            self.copyFrom(ctx)

        def java_identifier_expression(self):
            return self.getTypedRuleContext(MParser.Java_identifier_expressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJavaClassIdentifier" ):
                listener.enterJavaClassIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJavaClassIdentifier" ):
                listener.exitJavaClassIdentifier(self)


    class JavaChildClassIdentifierContext(Java_class_identifier_expressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MParser.Java_class_identifier_expressionContext
            super().__init__(parser)
            self.parent = None # Java_class_identifier_expressionContext
            self.name = None # Token
            self.copyFrom(ctx)

        def java_class_identifier_expression(self):
            return self.getTypedRuleContext(MParser.Java_class_identifier_expressionContext,0)

        def DOLLAR_IDENTIFIER(self):
            return self.getToken(MParser.DOLLAR_IDENTIFIER, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJavaChildClassIdentifier" ):
                listener.enterJavaChildClassIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJavaChildClassIdentifier" ):
                listener.exitJavaChildClassIdentifier(self)



    def java_class_identifier_expression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = MParser.Java_class_identifier_expressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 418
        self.enterRecursionRule(localctx, 418, self.RULE_java_class_identifier_expression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            localctx = MParser.JavaClassIdentifierContext(self, localctx)
            self._ctx = localctx
            _prevctx = localctx

            self.state = 2461
            localctx.klass = self.java_identifier_expression(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 2467
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,204,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = MParser.JavaChildClassIdentifierContext(self, MParser.Java_class_identifier_expressionContext(self, _parentctx, _parentState))
                    localctx.parent = _prevctx
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_java_class_identifier_expression)
                    self.state = 2463
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 2464
                    localctx.name = self.match(MParser.DOLLAR_IDENTIFIER) 
                self.state = 2469
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,204,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class Java_literal_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return MParser.RULE_java_literal_expression

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class JavaBooleanLiteralContext(Java_literal_expressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MParser.Java_literal_expressionContext
            super().__init__(parser)
            self.t = None # Token
            self.copyFrom(ctx)

        def BOOLEAN_LITERAL(self):
            return self.getToken(MParser.BOOLEAN_LITERAL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJavaBooleanLiteral" ):
                listener.enterJavaBooleanLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJavaBooleanLiteral" ):
                listener.exitJavaBooleanLiteral(self)


    class JavaCharacterLiteralContext(Java_literal_expressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MParser.Java_literal_expressionContext
            super().__init__(parser)
            self.t = None # Token
            self.copyFrom(ctx)

        def CHAR_LITERAL(self):
            return self.getToken(MParser.CHAR_LITERAL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJavaCharacterLiteral" ):
                listener.enterJavaCharacterLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJavaCharacterLiteral" ):
                listener.exitJavaCharacterLiteral(self)


    class JavaIntegerLiteralContext(Java_literal_expressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MParser.Java_literal_expressionContext
            super().__init__(parser)
            self.t = None # Token
            self.copyFrom(ctx)

        def INTEGER_LITERAL(self):
            return self.getToken(MParser.INTEGER_LITERAL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJavaIntegerLiteral" ):
                listener.enterJavaIntegerLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJavaIntegerLiteral" ):
                listener.exitJavaIntegerLiteral(self)


    class JavaTextLiteralContext(Java_literal_expressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MParser.Java_literal_expressionContext
            super().__init__(parser)
            self.t = None # Token
            self.copyFrom(ctx)

        def TEXT_LITERAL(self):
            return self.getToken(MParser.TEXT_LITERAL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJavaTextLiteral" ):
                listener.enterJavaTextLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJavaTextLiteral" ):
                listener.exitJavaTextLiteral(self)


    class JavaDecimalLiteralContext(Java_literal_expressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MParser.Java_literal_expressionContext
            super().__init__(parser)
            self.t = None # Token
            self.copyFrom(ctx)

        def DECIMAL_LITERAL(self):
            return self.getToken(MParser.DECIMAL_LITERAL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJavaDecimalLiteral" ):
                listener.enterJavaDecimalLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJavaDecimalLiteral" ):
                listener.exitJavaDecimalLiteral(self)



    def java_literal_expression(self):

        localctx = MParser.Java_literal_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 420, self.RULE_java_literal_expression)
        try:
            self.state = 2475
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MParser.INTEGER_LITERAL]:
                localctx = MParser.JavaIntegerLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2470
                localctx.t = self.match(MParser.INTEGER_LITERAL)
                pass
            elif token in [MParser.DECIMAL_LITERAL]:
                localctx = MParser.JavaDecimalLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2471
                localctx.t = self.match(MParser.DECIMAL_LITERAL)
                pass
            elif token in [MParser.TEXT_LITERAL]:
                localctx = MParser.JavaTextLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 2472
                localctx.t = self.match(MParser.TEXT_LITERAL)
                pass
            elif token in [MParser.BOOLEAN_LITERAL]:
                localctx = MParser.JavaBooleanLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 2473
                localctx.t = self.match(MParser.BOOLEAN_LITERAL)
                pass
            elif token in [MParser.CHAR_LITERAL]:
                localctx = MParser.JavaCharacterLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 2474
                localctx.t = self.match(MParser.CHAR_LITERAL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Java_identifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VARIABLE_IDENTIFIER(self):
            return self.getToken(MParser.VARIABLE_IDENTIFIER, 0)

        def SYMBOL_IDENTIFIER(self):
            return self.getToken(MParser.SYMBOL_IDENTIFIER, 0)

        def NATIVE_IDENTIFIER(self):
            return self.getToken(MParser.NATIVE_IDENTIFIER, 0)

        def DOLLAR_IDENTIFIER(self):
            return self.getToken(MParser.DOLLAR_IDENTIFIER, 0)

        def TYPE_IDENTIFIER(self):
            return self.getToken(MParser.TYPE_IDENTIFIER, 0)

        def BOOLEAN(self):
            return self.getToken(MParser.BOOLEAN, 0)

        def CHARACTER(self):
            return self.getToken(MParser.CHARACTER, 0)

        def TEXT(self):
            return self.getToken(MParser.TEXT, 0)

        def INTEGER(self):
            return self.getToken(MParser.INTEGER, 0)

        def DECIMAL(self):
            return self.getToken(MParser.DECIMAL, 0)

        def DATE(self):
            return self.getToken(MParser.DATE, 0)

        def TIME(self):
            return self.getToken(MParser.TIME, 0)

        def DATETIME(self):
            return self.getToken(MParser.DATETIME, 0)

        def PERIOD(self):
            return self.getToken(MParser.PERIOD, 0)

        def VERSION(self):
            return self.getToken(MParser.VERSION, 0)

        def UUID(self):
            return self.getToken(MParser.UUID, 0)

        def HTML(self):
            return self.getToken(MParser.HTML, 0)

        def READ(self):
            return self.getToken(MParser.READ, 0)

        def WRITE(self):
            return self.getToken(MParser.WRITE, 0)

        def TEST(self):
            return self.getToken(MParser.TEST, 0)

        def SELF(self):
            return self.getToken(MParser.SELF, 0)

        def NONE(self):
            return self.getToken(MParser.NONE, 0)

        def NULL(self):
            return self.getToken(MParser.NULL, 0)

        def getRuleIndex(self):
            return MParser.RULE_java_identifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJava_identifier" ):
                listener.enterJava_identifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJava_identifier" ):
                listener.exitJava_identifier(self)




    def java_identifier(self):

        localctx = MParser.Java_identifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 422, self.RULE_java_identifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2477
            _la = self._input.LA(1)
            if not(((((_la - 52)) & ~0x3f) == 0 and ((1 << (_la - 52)) & ((1 << (MParser.BOOLEAN - 52)) | (1 << (MParser.CHARACTER - 52)) | (1 << (MParser.TEXT - 52)) | (1 << (MParser.INTEGER - 52)) | (1 << (MParser.DECIMAL - 52)) | (1 << (MParser.DATE - 52)) | (1 << (MParser.TIME - 52)) | (1 << (MParser.DATETIME - 52)) | (1 << (MParser.PERIOD - 52)) | (1 << (MParser.VERSION - 52)) | (1 << (MParser.UUID - 52)) | (1 << (MParser.HTML - 52)))) != 0) or ((((_la - 124)) & ~0x3f) == 0 and ((1 << (_la - 124)) & ((1 << (MParser.NONE - 124)) | (1 << (MParser.NULL - 124)) | (1 << (MParser.READ - 124)) | (1 << (MParser.SELF - 124)) | (1 << (MParser.TEST - 124)) | (1 << (MParser.WRITE - 124)) | (1 << (MParser.SYMBOL_IDENTIFIER - 124)) | (1 << (MParser.TYPE_IDENTIFIER - 124)) | (1 << (MParser.VARIABLE_IDENTIFIER - 124)) | (1 << (MParser.NATIVE_IDENTIFIER - 124)) | (1 << (MParser.DOLLAR_IDENTIFIER - 124)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Csharp_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return MParser.RULE_csharp_statement

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class CSharpReturnStatementContext(Csharp_statementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MParser.Csharp_statementContext
            super().__init__(parser)
            self.exp = None # Csharp_expressionContext
            self.copyFrom(ctx)

        def RETURN(self):
            return self.getToken(MParser.RETURN, 0)
        def SEMI(self):
            return self.getToken(MParser.SEMI, 0)
        def csharp_expression(self):
            return self.getTypedRuleContext(MParser.Csharp_expressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCSharpReturnStatement" ):
                listener.enterCSharpReturnStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCSharpReturnStatement" ):
                listener.exitCSharpReturnStatement(self)


    class CSharpStatementContext(Csharp_statementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MParser.Csharp_statementContext
            super().__init__(parser)
            self.exp = None # Csharp_expressionContext
            self.copyFrom(ctx)

        def SEMI(self):
            return self.getToken(MParser.SEMI, 0)
        def csharp_expression(self):
            return self.getTypedRuleContext(MParser.Csharp_expressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCSharpStatement" ):
                listener.enterCSharpStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCSharpStatement" ):
                listener.exitCSharpStatement(self)



    def csharp_statement(self):

        localctx = MParser.Csharp_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 424, self.RULE_csharp_statement)
        try:
            self.state = 2486
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MParser.RETURN]:
                localctx = MParser.CSharpReturnStatementContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2479
                self.match(MParser.RETURN)
                self.state = 2480
                localctx.exp = self.csharp_expression(0)
                self.state = 2481
                self.match(MParser.SEMI)
                pass
            elif token in [MParser.LPAR, MParser.BOOLEAN, MParser.CHARACTER, MParser.TEXT, MParser.INTEGER, MParser.DECIMAL, MParser.DATE, MParser.TIME, MParser.DATETIME, MParser.PERIOD, MParser.VERSION, MParser.UUID, MParser.HTML, MParser.NONE, MParser.NULL, MParser.READ, MParser.SELF, MParser.TEST, MParser.THIS, MParser.WRITE, MParser.BOOLEAN_LITERAL, MParser.CHAR_LITERAL, MParser.SYMBOL_IDENTIFIER, MParser.TYPE_IDENTIFIER, MParser.VARIABLE_IDENTIFIER, MParser.DOLLAR_IDENTIFIER, MParser.TEXT_LITERAL, MParser.INTEGER_LITERAL, MParser.DECIMAL_LITERAL]:
                localctx = MParser.CSharpStatementContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2483
                localctx.exp = self.csharp_expression(0)
                self.state = 2484
                self.match(MParser.SEMI)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Csharp_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return MParser.RULE_csharp_expression

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class CSharpSelectorExpressionContext(Csharp_expressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MParser.Csharp_expressionContext
            super().__init__(parser)
            self.parent = None # Csharp_expressionContext
            self.child = None # Csharp_selector_expressionContext
            self.copyFrom(ctx)

        def csharp_expression(self):
            return self.getTypedRuleContext(MParser.Csharp_expressionContext,0)

        def csharp_selector_expression(self):
            return self.getTypedRuleContext(MParser.Csharp_selector_expressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCSharpSelectorExpression" ):
                listener.enterCSharpSelectorExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCSharpSelectorExpression" ):
                listener.exitCSharpSelectorExpression(self)


    class CSharpPrimaryExpressionContext(Csharp_expressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MParser.Csharp_expressionContext
            super().__init__(parser)
            self.exp = None # Csharp_primary_expressionContext
            self.copyFrom(ctx)

        def csharp_primary_expression(self):
            return self.getTypedRuleContext(MParser.Csharp_primary_expressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCSharpPrimaryExpression" ):
                listener.enterCSharpPrimaryExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCSharpPrimaryExpression" ):
                listener.exitCSharpPrimaryExpression(self)



    def csharp_expression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = MParser.Csharp_expressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 426
        self.enterRecursionRule(localctx, 426, self.RULE_csharp_expression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            localctx = MParser.CSharpPrimaryExpressionContext(self, localctx)
            self._ctx = localctx
            _prevctx = localctx

            self.state = 2489
            localctx.exp = self.csharp_primary_expression()
            self._ctx.stop = self._input.LT(-1)
            self.state = 2495
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,207,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = MParser.CSharpSelectorExpressionContext(self, MParser.Csharp_expressionContext(self, _parentctx, _parentState))
                    localctx.parent = _prevctx
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_csharp_expression)
                    self.state = 2491
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 2492
                    localctx.child = self.csharp_selector_expression() 
                self.state = 2497
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,207,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class Csharp_primary_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def csharp_this_expression(self):
            return self.getTypedRuleContext(MParser.Csharp_this_expressionContext,0)


        def csharp_new_expression(self):
            return self.getTypedRuleContext(MParser.Csharp_new_expressionContext,0)


        def csharp_parenthesis_expression(self):
            return self.getTypedRuleContext(MParser.Csharp_parenthesis_expressionContext,0)


        def csharp_identifier_expression(self):
            return self.getTypedRuleContext(MParser.Csharp_identifier_expressionContext,0)


        def csharp_literal_expression(self):
            return self.getTypedRuleContext(MParser.Csharp_literal_expressionContext,0)


        def getRuleIndex(self):
            return MParser.RULE_csharp_primary_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCsharp_primary_expression" ):
                listener.enterCsharp_primary_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCsharp_primary_expression" ):
                listener.exitCsharp_primary_expression(self)




    def csharp_primary_expression(self):

        localctx = MParser.Csharp_primary_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 428, self.RULE_csharp_primary_expression)
        try:
            self.state = 2503
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,208,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2498
                self.csharp_this_expression()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2499
                self.csharp_new_expression()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2500
                self.csharp_parenthesis_expression()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2501
                self.csharp_identifier_expression(0)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 2502
                self.csharp_literal_expression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Csharp_this_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def this_expression(self):
            return self.getTypedRuleContext(MParser.This_expressionContext,0)


        def getRuleIndex(self):
            return MParser.RULE_csharp_this_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCsharp_this_expression" ):
                listener.enterCsharp_this_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCsharp_this_expression" ):
                listener.exitCsharp_this_expression(self)




    def csharp_this_expression(self):

        localctx = MParser.Csharp_this_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 430, self.RULE_csharp_this_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2505
            self.this_expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Csharp_new_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def new_token(self):
            return self.getTypedRuleContext(MParser.New_tokenContext,0)


        def csharp_method_expression(self):
            return self.getTypedRuleContext(MParser.Csharp_method_expressionContext,0)


        def getRuleIndex(self):
            return MParser.RULE_csharp_new_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCsharp_new_expression" ):
                listener.enterCsharp_new_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCsharp_new_expression" ):
                listener.exitCsharp_new_expression(self)




    def csharp_new_expression(self):

        localctx = MParser.Csharp_new_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 432, self.RULE_csharp_new_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2507
            self.new_token()
            self.state = 2508
            self.csharp_method_expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Csharp_selector_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return MParser.RULE_csharp_selector_expression

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class CSharpMethodExpressionContext(Csharp_selector_expressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MParser.Csharp_selector_expressionContext
            super().__init__(parser)
            self.exp = None # Csharp_method_expressionContext
            self.copyFrom(ctx)

        def DOT(self):
            return self.getToken(MParser.DOT, 0)
        def csharp_method_expression(self):
            return self.getTypedRuleContext(MParser.Csharp_method_expressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCSharpMethodExpression" ):
                listener.enterCSharpMethodExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCSharpMethodExpression" ):
                listener.exitCSharpMethodExpression(self)


    class CSharpItemExpressionContext(Csharp_selector_expressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MParser.Csharp_selector_expressionContext
            super().__init__(parser)
            self.exp = None # Csharp_item_expressionContext
            self.copyFrom(ctx)

        def csharp_item_expression(self):
            return self.getTypedRuleContext(MParser.Csharp_item_expressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCSharpItemExpression" ):
                listener.enterCSharpItemExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCSharpItemExpression" ):
                listener.exitCSharpItemExpression(self)



    def csharp_selector_expression(self):

        localctx = MParser.Csharp_selector_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 434, self.RULE_csharp_selector_expression)
        try:
            self.state = 2513
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MParser.DOT]:
                localctx = MParser.CSharpMethodExpressionContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2510
                self.match(MParser.DOT)
                self.state = 2511
                localctx.exp = self.csharp_method_expression()
                pass
            elif token in [MParser.LBRAK]:
                localctx = MParser.CSharpItemExpressionContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2512
                localctx.exp = self.csharp_item_expression()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Csharp_method_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # Csharp_identifierContext
            self.args = None # Csharp_argumentsContext

        def LPAR(self):
            return self.getToken(MParser.LPAR, 0)

        def RPAR(self):
            return self.getToken(MParser.RPAR, 0)

        def csharp_identifier(self):
            return self.getTypedRuleContext(MParser.Csharp_identifierContext,0)


        def csharp_arguments(self):
            return self.getTypedRuleContext(MParser.Csharp_argumentsContext,0)


        def getRuleIndex(self):
            return MParser.RULE_csharp_method_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCsharp_method_expression" ):
                listener.enterCsharp_method_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCsharp_method_expression" ):
                listener.exitCsharp_method_expression(self)




    def csharp_method_expression(self):

        localctx = MParser.Csharp_method_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 436, self.RULE_csharp_method_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2515
            localctx.name = self.csharp_identifier()
            self.state = 2516
            self.match(MParser.LPAR)
            self.state = 2518
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 20)) & ~0x3f) == 0 and ((1 << (_la - 20)) & ((1 << (MParser.LPAR - 20)) | (1 << (MParser.BOOLEAN - 20)) | (1 << (MParser.CHARACTER - 20)) | (1 << (MParser.TEXT - 20)) | (1 << (MParser.INTEGER - 20)) | (1 << (MParser.DECIMAL - 20)) | (1 << (MParser.DATE - 20)) | (1 << (MParser.TIME - 20)) | (1 << (MParser.DATETIME - 20)) | (1 << (MParser.PERIOD - 20)) | (1 << (MParser.VERSION - 20)) | (1 << (MParser.UUID - 20)) | (1 << (MParser.HTML - 20)))) != 0) or ((((_la - 124)) & ~0x3f) == 0 and ((1 << (_la - 124)) & ((1 << (MParser.NONE - 124)) | (1 << (MParser.NULL - 124)) | (1 << (MParser.READ - 124)) | (1 << (MParser.SELF - 124)) | (1 << (MParser.TEST - 124)) | (1 << (MParser.THIS - 124)) | (1 << (MParser.WRITE - 124)) | (1 << (MParser.BOOLEAN_LITERAL - 124)) | (1 << (MParser.CHAR_LITERAL - 124)) | (1 << (MParser.SYMBOL_IDENTIFIER - 124)) | (1 << (MParser.TYPE_IDENTIFIER - 124)) | (1 << (MParser.VARIABLE_IDENTIFIER - 124)) | (1 << (MParser.DOLLAR_IDENTIFIER - 124)) | (1 << (MParser.TEXT_LITERAL - 124)) | (1 << (MParser.INTEGER_LITERAL - 124)) | (1 << (MParser.DECIMAL_LITERAL - 124)))) != 0):
                self.state = 2517
                localctx.args = self.csharp_arguments(0)


            self.state = 2520
            self.match(MParser.RPAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Csharp_argumentsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return MParser.RULE_csharp_arguments

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class CSharpArgumentListContext(Csharp_argumentsContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MParser.Csharp_argumentsContext
            super().__init__(parser)
            self.item = None # Csharp_expressionContext
            self.copyFrom(ctx)

        def csharp_expression(self):
            return self.getTypedRuleContext(MParser.Csharp_expressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCSharpArgumentList" ):
                listener.enterCSharpArgumentList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCSharpArgumentList" ):
                listener.exitCSharpArgumentList(self)


    class CSharpArgumentListItemContext(Csharp_argumentsContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MParser.Csharp_argumentsContext
            super().__init__(parser)
            self.items = None # Csharp_argumentsContext
            self.item = None # Csharp_expressionContext
            self.copyFrom(ctx)

        def COMMA(self):
            return self.getToken(MParser.COMMA, 0)
        def csharp_arguments(self):
            return self.getTypedRuleContext(MParser.Csharp_argumentsContext,0)

        def csharp_expression(self):
            return self.getTypedRuleContext(MParser.Csharp_expressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCSharpArgumentListItem" ):
                listener.enterCSharpArgumentListItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCSharpArgumentListItem" ):
                listener.exitCSharpArgumentListItem(self)



    def csharp_arguments(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = MParser.Csharp_argumentsContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 438
        self.enterRecursionRule(localctx, 438, self.RULE_csharp_arguments, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            localctx = MParser.CSharpArgumentListContext(self, localctx)
            self._ctx = localctx
            _prevctx = localctx

            self.state = 2523
            localctx.item = self.csharp_expression(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 2530
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,211,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = MParser.CSharpArgumentListItemContext(self, MParser.Csharp_argumentsContext(self, _parentctx, _parentState))
                    localctx.items = _prevctx
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_csharp_arguments)
                    self.state = 2525
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 2526
                    self.match(MParser.COMMA)
                    self.state = 2527
                    localctx.item = self.csharp_expression(0) 
                self.state = 2532
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,211,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class Csharp_item_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.exp = None # Csharp_expressionContext

        def LBRAK(self):
            return self.getToken(MParser.LBRAK, 0)

        def RBRAK(self):
            return self.getToken(MParser.RBRAK, 0)

        def csharp_expression(self):
            return self.getTypedRuleContext(MParser.Csharp_expressionContext,0)


        def getRuleIndex(self):
            return MParser.RULE_csharp_item_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCsharp_item_expression" ):
                listener.enterCsharp_item_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCsharp_item_expression" ):
                listener.exitCsharp_item_expression(self)




    def csharp_item_expression(self):

        localctx = MParser.Csharp_item_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 440, self.RULE_csharp_item_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2533
            self.match(MParser.LBRAK)
            self.state = 2534
            localctx.exp = self.csharp_expression(0)
            self.state = 2535
            self.match(MParser.RBRAK)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Csharp_parenthesis_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.exp = None # Csharp_expressionContext

        def LPAR(self):
            return self.getToken(MParser.LPAR, 0)

        def RPAR(self):
            return self.getToken(MParser.RPAR, 0)

        def csharp_expression(self):
            return self.getTypedRuleContext(MParser.Csharp_expressionContext,0)


        def getRuleIndex(self):
            return MParser.RULE_csharp_parenthesis_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCsharp_parenthesis_expression" ):
                listener.enterCsharp_parenthesis_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCsharp_parenthesis_expression" ):
                listener.exitCsharp_parenthesis_expression(self)




    def csharp_parenthesis_expression(self):

        localctx = MParser.Csharp_parenthesis_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 442, self.RULE_csharp_parenthesis_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2537
            self.match(MParser.LPAR)
            self.state = 2538
            localctx.exp = self.csharp_expression(0)
            self.state = 2539
            self.match(MParser.RPAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Csharp_identifier_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return MParser.RULE_csharp_identifier_expression

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class CSharpIdentifierContext(Csharp_identifier_expressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MParser.Csharp_identifier_expressionContext
            super().__init__(parser)
            self.name = None # Csharp_identifierContext
            self.copyFrom(ctx)

        def csharp_identifier(self):
            return self.getTypedRuleContext(MParser.Csharp_identifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCSharpIdentifier" ):
                listener.enterCSharpIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCSharpIdentifier" ):
                listener.exitCSharpIdentifier(self)


    class CSharpChildIdentifierContext(Csharp_identifier_expressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MParser.Csharp_identifier_expressionContext
            super().__init__(parser)
            self.parent = None # Csharp_identifier_expressionContext
            self.name = None # Csharp_identifierContext
            self.copyFrom(ctx)

        def DOT(self):
            return self.getToken(MParser.DOT, 0)
        def csharp_identifier_expression(self):
            return self.getTypedRuleContext(MParser.Csharp_identifier_expressionContext,0)

        def csharp_identifier(self):
            return self.getTypedRuleContext(MParser.Csharp_identifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCSharpChildIdentifier" ):
                listener.enterCSharpChildIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCSharpChildIdentifier" ):
                listener.exitCSharpChildIdentifier(self)


    class CSharpPromptoIdentifierContext(Csharp_identifier_expressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MParser.Csharp_identifier_expressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DOLLAR_IDENTIFIER(self):
            return self.getToken(MParser.DOLLAR_IDENTIFIER, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCSharpPromptoIdentifier" ):
                listener.enterCSharpPromptoIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCSharpPromptoIdentifier" ):
                listener.exitCSharpPromptoIdentifier(self)



    def csharp_identifier_expression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = MParser.Csharp_identifier_expressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 444
        self.enterRecursionRule(localctx, 444, self.RULE_csharp_identifier_expression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2544
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MParser.DOLLAR_IDENTIFIER]:
                localctx = MParser.CSharpPromptoIdentifierContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx

                self.state = 2542
                self.match(MParser.DOLLAR_IDENTIFIER)
                pass
            elif token in [MParser.BOOLEAN, MParser.CHARACTER, MParser.TEXT, MParser.INTEGER, MParser.DECIMAL, MParser.DATE, MParser.TIME, MParser.DATETIME, MParser.PERIOD, MParser.VERSION, MParser.UUID, MParser.HTML, MParser.NONE, MParser.NULL, MParser.READ, MParser.SELF, MParser.TEST, MParser.WRITE, MParser.SYMBOL_IDENTIFIER, MParser.TYPE_IDENTIFIER, MParser.VARIABLE_IDENTIFIER]:
                localctx = MParser.CSharpIdentifierContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2543
                localctx.name = self.csharp_identifier()
                pass
            else:
                raise NoViableAltException(self)

            self._ctx.stop = self._input.LT(-1)
            self.state = 2551
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,213,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = MParser.CSharpChildIdentifierContext(self, MParser.Csharp_identifier_expressionContext(self, _parentctx, _parentState))
                    localctx.parent = _prevctx
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_csharp_identifier_expression)
                    self.state = 2546
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 2547
                    self.match(MParser.DOT)
                    self.state = 2548
                    localctx.name = self.csharp_identifier() 
                self.state = 2553
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,213,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class Csharp_literal_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return MParser.RULE_csharp_literal_expression

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class CSharpBooleanLiteralContext(Csharp_literal_expressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MParser.Csharp_literal_expressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def BOOLEAN_LITERAL(self):
            return self.getToken(MParser.BOOLEAN_LITERAL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCSharpBooleanLiteral" ):
                listener.enterCSharpBooleanLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCSharpBooleanLiteral" ):
                listener.exitCSharpBooleanLiteral(self)


    class CSharpIntegerLiteralContext(Csharp_literal_expressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MParser.Csharp_literal_expressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def INTEGER_LITERAL(self):
            return self.getToken(MParser.INTEGER_LITERAL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCSharpIntegerLiteral" ):
                listener.enterCSharpIntegerLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCSharpIntegerLiteral" ):
                listener.exitCSharpIntegerLiteral(self)


    class CSharpDecimalLiteralContext(Csharp_literal_expressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MParser.Csharp_literal_expressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DECIMAL_LITERAL(self):
            return self.getToken(MParser.DECIMAL_LITERAL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCSharpDecimalLiteral" ):
                listener.enterCSharpDecimalLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCSharpDecimalLiteral" ):
                listener.exitCSharpDecimalLiteral(self)


    class CSharpCharacterLiteralContext(Csharp_literal_expressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MParser.Csharp_literal_expressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CHAR_LITERAL(self):
            return self.getToken(MParser.CHAR_LITERAL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCSharpCharacterLiteral" ):
                listener.enterCSharpCharacterLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCSharpCharacterLiteral" ):
                listener.exitCSharpCharacterLiteral(self)


    class CSharpTextLiteralContext(Csharp_literal_expressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MParser.Csharp_literal_expressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def TEXT_LITERAL(self):
            return self.getToken(MParser.TEXT_LITERAL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCSharpTextLiteral" ):
                listener.enterCSharpTextLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCSharpTextLiteral" ):
                listener.exitCSharpTextLiteral(self)



    def csharp_literal_expression(self):

        localctx = MParser.Csharp_literal_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 446, self.RULE_csharp_literal_expression)
        try:
            self.state = 2559
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MParser.INTEGER_LITERAL]:
                localctx = MParser.CSharpIntegerLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2554
                self.match(MParser.INTEGER_LITERAL)
                pass
            elif token in [MParser.DECIMAL_LITERAL]:
                localctx = MParser.CSharpDecimalLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2555
                self.match(MParser.DECIMAL_LITERAL)
                pass
            elif token in [MParser.TEXT_LITERAL]:
                localctx = MParser.CSharpTextLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 2556
                self.match(MParser.TEXT_LITERAL)
                pass
            elif token in [MParser.BOOLEAN_LITERAL]:
                localctx = MParser.CSharpBooleanLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 2557
                self.match(MParser.BOOLEAN_LITERAL)
                pass
            elif token in [MParser.CHAR_LITERAL]:
                localctx = MParser.CSharpCharacterLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 2558
                self.match(MParser.CHAR_LITERAL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Csharp_identifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VARIABLE_IDENTIFIER(self):
            return self.getToken(MParser.VARIABLE_IDENTIFIER, 0)

        def SYMBOL_IDENTIFIER(self):
            return self.getToken(MParser.SYMBOL_IDENTIFIER, 0)

        def TYPE_IDENTIFIER(self):
            return self.getToken(MParser.TYPE_IDENTIFIER, 0)

        def BOOLEAN(self):
            return self.getToken(MParser.BOOLEAN, 0)

        def CHARACTER(self):
            return self.getToken(MParser.CHARACTER, 0)

        def TEXT(self):
            return self.getToken(MParser.TEXT, 0)

        def INTEGER(self):
            return self.getToken(MParser.INTEGER, 0)

        def DECIMAL(self):
            return self.getToken(MParser.DECIMAL, 0)

        def DATE(self):
            return self.getToken(MParser.DATE, 0)

        def TIME(self):
            return self.getToken(MParser.TIME, 0)

        def DATETIME(self):
            return self.getToken(MParser.DATETIME, 0)

        def PERIOD(self):
            return self.getToken(MParser.PERIOD, 0)

        def VERSION(self):
            return self.getToken(MParser.VERSION, 0)

        def UUID(self):
            return self.getToken(MParser.UUID, 0)

        def HTML(self):
            return self.getToken(MParser.HTML, 0)

        def READ(self):
            return self.getToken(MParser.READ, 0)

        def WRITE(self):
            return self.getToken(MParser.WRITE, 0)

        def TEST(self):
            return self.getToken(MParser.TEST, 0)

        def SELF(self):
            return self.getToken(MParser.SELF, 0)

        def NONE(self):
            return self.getToken(MParser.NONE, 0)

        def NULL(self):
            return self.getToken(MParser.NULL, 0)

        def getRuleIndex(self):
            return MParser.RULE_csharp_identifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCsharp_identifier" ):
                listener.enterCsharp_identifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCsharp_identifier" ):
                listener.exitCsharp_identifier(self)




    def csharp_identifier(self):

        localctx = MParser.Csharp_identifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 448, self.RULE_csharp_identifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2561
            _la = self._input.LA(1)
            if not(((((_la - 52)) & ~0x3f) == 0 and ((1 << (_la - 52)) & ((1 << (MParser.BOOLEAN - 52)) | (1 << (MParser.CHARACTER - 52)) | (1 << (MParser.TEXT - 52)) | (1 << (MParser.INTEGER - 52)) | (1 << (MParser.DECIMAL - 52)) | (1 << (MParser.DATE - 52)) | (1 << (MParser.TIME - 52)) | (1 << (MParser.DATETIME - 52)) | (1 << (MParser.PERIOD - 52)) | (1 << (MParser.VERSION - 52)) | (1 << (MParser.UUID - 52)) | (1 << (MParser.HTML - 52)))) != 0) or ((((_la - 124)) & ~0x3f) == 0 and ((1 << (_la - 124)) & ((1 << (MParser.NONE - 124)) | (1 << (MParser.NULL - 124)) | (1 << (MParser.READ - 124)) | (1 << (MParser.SELF - 124)) | (1 << (MParser.TEST - 124)) | (1 << (MParser.WRITE - 124)) | (1 << (MParser.SYMBOL_IDENTIFIER - 124)) | (1 << (MParser.TYPE_IDENTIFIER - 124)) | (1 << (MParser.VARIABLE_IDENTIFIER - 124)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Jsx_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def jsx_element(self):
            return self.getTypedRuleContext(MParser.Jsx_elementContext,0)


        def jsx_fragment(self):
            return self.getTypedRuleContext(MParser.Jsx_fragmentContext,0)


        def getRuleIndex(self):
            return MParser.RULE_jsx_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJsx_expression" ):
                listener.enterJsx_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJsx_expression" ):
                listener.exitJsx_expression(self)




    def jsx_expression(self):

        localctx = MParser.Jsx_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 450, self.RULE_jsx_expression)
        try:
            self.state = 2565
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,215,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2563
                self.jsx_element()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2564
                self.jsx_fragment()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Jsx_elementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return MParser.RULE_jsx_element

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class JsxSelfClosingContext(Jsx_elementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MParser.Jsx_elementContext
            super().__init__(parser)
            self.jsx = None # Jsx_self_closingContext
            self.copyFrom(ctx)

        def jsx_self_closing(self):
            return self.getTypedRuleContext(MParser.Jsx_self_closingContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJsxSelfClosing" ):
                listener.enterJsxSelfClosing(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJsxSelfClosing" ):
                listener.exitJsxSelfClosing(self)


    class JsxElementContext(Jsx_elementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MParser.Jsx_elementContext
            super().__init__(parser)
            self.opening = None # Jsx_openingContext
            self.children_ = None # Jsx_childrenContext
            self.closing = None # Jsx_closingContext
            self.copyFrom(ctx)

        def jsx_opening(self):
            return self.getTypedRuleContext(MParser.Jsx_openingContext,0)

        def jsx_closing(self):
            return self.getTypedRuleContext(MParser.Jsx_closingContext,0)

        def jsx_children(self):
            return self.getTypedRuleContext(MParser.Jsx_childrenContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJsxElement" ):
                listener.enterJsxElement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJsxElement" ):
                listener.exitJsxElement(self)



    def jsx_element(self):

        localctx = MParser.Jsx_elementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 452, self.RULE_jsx_element)
        try:
            self.state = 2574
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,217,self._ctx)
            if la_ == 1:
                localctx = MParser.JsxSelfClosingContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2567
                localctx.jsx = self.jsx_self_closing()
                pass

            elif la_ == 2:
                localctx = MParser.JsxElementContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2568
                localctx.opening = self.jsx_opening()
                self.state = 2570
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,216,self._ctx)
                if la_ == 1:
                    self.state = 2569
                    localctx.children_ = self.jsx_children()


                self.state = 2572
                localctx.closing = self.jsx_closing()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Jsx_fragmentContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.children_ = None # Jsx_childrenContext

        def jsx_fragment_start(self):
            return self.getTypedRuleContext(MParser.Jsx_fragment_startContext,0)


        def jsx_fragment_end(self):
            return self.getTypedRuleContext(MParser.Jsx_fragment_endContext,0)


        def jsx_children(self):
            return self.getTypedRuleContext(MParser.Jsx_childrenContext,0)


        def getRuleIndex(self):
            return MParser.RULE_jsx_fragment

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJsx_fragment" ):
                listener.enterJsx_fragment(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJsx_fragment" ):
                listener.exitJsx_fragment(self)




    def jsx_fragment(self):

        localctx = MParser.Jsx_fragmentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 454, self.RULE_jsx_fragment)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2576
            self.jsx_fragment_start()
            self.state = 2578
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,218,self._ctx)
            if la_ == 1:
                self.state = 2577
                localctx.children_ = self.jsx_children()


            self.state = 2580
            self.jsx_fragment_end()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Jsx_fragment_startContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LT(self):
            return self.getToken(MParser.LT, 0)

        def GT(self):
            return self.getToken(MParser.GT, 0)

        def LTGT(self):
            return self.getToken(MParser.LTGT, 0)

        def getRuleIndex(self):
            return MParser.RULE_jsx_fragment_start

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJsx_fragment_start" ):
                listener.enterJsx_fragment_start(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJsx_fragment_start" ):
                listener.exitJsx_fragment_start(self)




    def jsx_fragment_start(self):

        localctx = MParser.Jsx_fragment_startContext(self, self._ctx, self.state)
        self.enterRule(localctx, 456, self.RULE_jsx_fragment_start)
        try:
            self.state = 2585
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MParser.LT]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2582
                self.match(MParser.LT)
                self.state = 2583
                self.match(MParser.GT)
                pass
            elif token in [MParser.LTGT]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2584
                self.match(MParser.LTGT)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Jsx_fragment_endContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LT(self):
            return self.getToken(MParser.LT, 0)

        def SLASH(self):
            return self.getToken(MParser.SLASH, 0)

        def GT(self):
            return self.getToken(MParser.GT, 0)

        def getRuleIndex(self):
            return MParser.RULE_jsx_fragment_end

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJsx_fragment_end" ):
                listener.enterJsx_fragment_end(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJsx_fragment_end" ):
                listener.exitJsx_fragment_end(self)




    def jsx_fragment_end(self):

        localctx = MParser.Jsx_fragment_endContext(self, self._ctx, self.state)
        self.enterRule(localctx, 458, self.RULE_jsx_fragment_end)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2587
            self.match(MParser.LT)
            self.state = 2588
            self.match(MParser.SLASH)
            self.state = 2589
            self.match(MParser.GT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Jsx_self_closingContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # Jsx_element_nameContext
            self.attributes = None # Jsx_attributeContext

        def LT(self):
            return self.getToken(MParser.LT, 0)

        def ws_plus(self):
            return self.getTypedRuleContext(MParser.Ws_plusContext,0)


        def SLASH(self):
            return self.getToken(MParser.SLASH, 0)

        def GT(self):
            return self.getToken(MParser.GT, 0)

        def jsx_element_name(self):
            return self.getTypedRuleContext(MParser.Jsx_element_nameContext,0)


        def jsx_attribute(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MParser.Jsx_attributeContext)
            else:
                return self.getTypedRuleContext(MParser.Jsx_attributeContext,i)


        def getRuleIndex(self):
            return MParser.RULE_jsx_self_closing

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJsx_self_closing" ):
                listener.enterJsx_self_closing(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJsx_self_closing" ):
                listener.exitJsx_self_closing(self)




    def jsx_self_closing(self):

        localctx = MParser.Jsx_self_closingContext(self, self._ctx, self.state)
        self.enterRule(localctx, 460, self.RULE_jsx_self_closing)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2591
            self.match(MParser.LT)
            self.state = 2592
            localctx.name = self.jsx_element_name()
            self.state = 2593
            self.ws_plus()
            self.state = 2597
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << MParser.JAVA) | (1 << MParser.CSHARP) | (1 << MParser.PYTHON2) | (1 << MParser.PYTHON3) | (1 << MParser.JAVASCRIPT) | (1 << MParser.SWIFT) | (1 << MParser.BOOLEAN) | (1 << MParser.CHARACTER) | (1 << MParser.TEXT) | (1 << MParser.INTEGER) | (1 << MParser.DECIMAL) | (1 << MParser.DATE) | (1 << MParser.TIME) | (1 << MParser.DATETIME) | (1 << MParser.PERIOD) | (1 << MParser.VERSION) | (1 << MParser.METHOD_T) | (1 << MParser.CODE))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (MParser.DOCUMENT - 64)) | (1 << (MParser.BLOB - 64)) | (1 << (MParser.IMAGE - 64)) | (1 << (MParser.UUID - 64)) | (1 << (MParser.ITERATOR - 64)) | (1 << (MParser.CURSOR - 64)) | (1 << (MParser.HTML - 64)) | (1 << (MParser.ABSTRACT - 64)) | (1 << (MParser.ALL - 64)) | (1 << (MParser.ALWAYS - 64)) | (1 << (MParser.AND - 64)) | (1 << (MParser.ANY - 64)) | (1 << (MParser.AS - 64)) | (1 << (MParser.ASC - 64)) | (1 << (MParser.ATTR - 64)) | (1 << (MParser.ATTRIBUTE - 64)) | (1 << (MParser.ATTRIBUTES - 64)) | (1 << (MParser.BINDINGS - 64)) | (1 << (MParser.BREAK - 64)) | (1 << (MParser.BY - 64)) | (1 << (MParser.CASE - 64)) | (1 << (MParser.CATCH - 64)) | (1 << (MParser.CATEGORY - 64)) | (1 << (MParser.CLASS - 64)) | (1 << (MParser.CLOSE - 64)) | (1 << (MParser.CONTAINS - 64)) | (1 << (MParser.DEF - 64)) | (1 << (MParser.DEFAULT - 64)) | (1 << (MParser.DEFINE - 64)) | (1 << (MParser.DELETE - 64)) | (1 << (MParser.DESC - 64)) | (1 << (MParser.DO - 64)) | (1 << (MParser.DOING - 64)) | (1 << (MParser.EACH - 64)) | (1 << (MParser.ELSE - 64)) | (1 << (MParser.ENUM - 64)) | (1 << (MParser.ENUMERATED - 64)) | (1 << (MParser.EXCEPT - 64)) | (1 << (MParser.EXECUTE - 64)) | (1 << (MParser.EXPECTING - 64)) | (1 << (MParser.EXTENDS - 64)) | (1 << (MParser.FETCH - 64)) | (1 << (MParser.FILTERED - 64)) | (1 << (MParser.FINALLY - 64)) | (1 << (MParser.FLUSH - 64)) | (1 << (MParser.FOR - 64)) | (1 << (MParser.FROM - 64)) | (1 << (MParser.GETTER - 64)) | (1 << (MParser.HAS - 64)) | (1 << (MParser.IF - 64)) | (1 << (MParser.IN - 64)) | (1 << (MParser.INDEX - 64)) | (1 << (MParser.INVOKE - 64)) | (1 << (MParser.IS - 64)) | (1 << (MParser.MATCHING - 64)) | (1 << (MParser.METHOD - 64)) | (1 << (MParser.METHODS - 64)) | (1 << (MParser.MODULO - 64)) | (1 << (MParser.MUTABLE - 64)) | (1 << (MParser.NATIVE - 64)) | (1 << (MParser.NONE - 64)) | (1 << (MParser.NOT - 64)) | (1 << (MParser.NOTHING - 64)) | (1 << (MParser.NULL - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (MParser.ON - 128)) | (1 << (MParser.ONE - 128)) | (1 << (MParser.OPEN - 128)) | (1 << (MParser.OPERATOR - 128)) | (1 << (MParser.OR - 128)) | (1 << (MParser.ORDER - 128)) | (1 << (MParser.OTHERWISE - 128)) | (1 << (MParser.PASS - 128)) | (1 << (MParser.RAISE - 128)) | (1 << (MParser.READ - 128)) | (1 << (MParser.RECEIVING - 128)) | (1 << (MParser.RESOURCE - 128)) | (1 << (MParser.RETURN - 128)) | (1 << (MParser.RETURNING - 128)) | (1 << (MParser.ROWS - 128)) | (1 << (MParser.SELF - 128)) | (1 << (MParser.SETTER - 128)) | (1 << (MParser.SINGLETON - 128)) | (1 << (MParser.SORTED - 128)) | (1 << (MParser.STORABLE - 128)) | (1 << (MParser.STORE - 128)) | (1 << (MParser.SWITCH - 128)) | (1 << (MParser.TEST - 128)) | (1 << (MParser.THIS - 128)) | (1 << (MParser.THROW - 128)) | (1 << (MParser.TO - 128)) | (1 << (MParser.TRY - 128)) | (1 << (MParser.VERIFYING - 128)) | (1 << (MParser.WIDGET - 128)) | (1 << (MParser.WITH - 128)) | (1 << (MParser.WHEN - 128)) | (1 << (MParser.WHERE - 128)) | (1 << (MParser.WHILE - 128)) | (1 << (MParser.WRITE - 128)) | (1 << (MParser.SYMBOL_IDENTIFIER - 128)) | (1 << (MParser.TYPE_IDENTIFIER - 128)) | (1 << (MParser.VARIABLE_IDENTIFIER - 128)))) != 0):
                self.state = 2594
                localctx.attributes = self.jsx_attribute()
                self.state = 2599
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2600
            self.match(MParser.SLASH)
            self.state = 2601
            self.match(MParser.GT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Jsx_openingContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # Jsx_element_nameContext
            self.attributes = None # Jsx_attributeContext

        def LT(self):
            return self.getToken(MParser.LT, 0)

        def ws_plus(self):
            return self.getTypedRuleContext(MParser.Ws_plusContext,0)


        def GT(self):
            return self.getToken(MParser.GT, 0)

        def jsx_element_name(self):
            return self.getTypedRuleContext(MParser.Jsx_element_nameContext,0)


        def jsx_attribute(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MParser.Jsx_attributeContext)
            else:
                return self.getTypedRuleContext(MParser.Jsx_attributeContext,i)


        def getRuleIndex(self):
            return MParser.RULE_jsx_opening

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJsx_opening" ):
                listener.enterJsx_opening(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJsx_opening" ):
                listener.exitJsx_opening(self)




    def jsx_opening(self):

        localctx = MParser.Jsx_openingContext(self, self._ctx, self.state)
        self.enterRule(localctx, 462, self.RULE_jsx_opening)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2603
            self.match(MParser.LT)
            self.state = 2604
            localctx.name = self.jsx_element_name()
            self.state = 2605
            self.ws_plus()
            self.state = 2609
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << MParser.JAVA) | (1 << MParser.CSHARP) | (1 << MParser.PYTHON2) | (1 << MParser.PYTHON3) | (1 << MParser.JAVASCRIPT) | (1 << MParser.SWIFT) | (1 << MParser.BOOLEAN) | (1 << MParser.CHARACTER) | (1 << MParser.TEXT) | (1 << MParser.INTEGER) | (1 << MParser.DECIMAL) | (1 << MParser.DATE) | (1 << MParser.TIME) | (1 << MParser.DATETIME) | (1 << MParser.PERIOD) | (1 << MParser.VERSION) | (1 << MParser.METHOD_T) | (1 << MParser.CODE))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (MParser.DOCUMENT - 64)) | (1 << (MParser.BLOB - 64)) | (1 << (MParser.IMAGE - 64)) | (1 << (MParser.UUID - 64)) | (1 << (MParser.ITERATOR - 64)) | (1 << (MParser.CURSOR - 64)) | (1 << (MParser.HTML - 64)) | (1 << (MParser.ABSTRACT - 64)) | (1 << (MParser.ALL - 64)) | (1 << (MParser.ALWAYS - 64)) | (1 << (MParser.AND - 64)) | (1 << (MParser.ANY - 64)) | (1 << (MParser.AS - 64)) | (1 << (MParser.ASC - 64)) | (1 << (MParser.ATTR - 64)) | (1 << (MParser.ATTRIBUTE - 64)) | (1 << (MParser.ATTRIBUTES - 64)) | (1 << (MParser.BINDINGS - 64)) | (1 << (MParser.BREAK - 64)) | (1 << (MParser.BY - 64)) | (1 << (MParser.CASE - 64)) | (1 << (MParser.CATCH - 64)) | (1 << (MParser.CATEGORY - 64)) | (1 << (MParser.CLASS - 64)) | (1 << (MParser.CLOSE - 64)) | (1 << (MParser.CONTAINS - 64)) | (1 << (MParser.DEF - 64)) | (1 << (MParser.DEFAULT - 64)) | (1 << (MParser.DEFINE - 64)) | (1 << (MParser.DELETE - 64)) | (1 << (MParser.DESC - 64)) | (1 << (MParser.DO - 64)) | (1 << (MParser.DOING - 64)) | (1 << (MParser.EACH - 64)) | (1 << (MParser.ELSE - 64)) | (1 << (MParser.ENUM - 64)) | (1 << (MParser.ENUMERATED - 64)) | (1 << (MParser.EXCEPT - 64)) | (1 << (MParser.EXECUTE - 64)) | (1 << (MParser.EXPECTING - 64)) | (1 << (MParser.EXTENDS - 64)) | (1 << (MParser.FETCH - 64)) | (1 << (MParser.FILTERED - 64)) | (1 << (MParser.FINALLY - 64)) | (1 << (MParser.FLUSH - 64)) | (1 << (MParser.FOR - 64)) | (1 << (MParser.FROM - 64)) | (1 << (MParser.GETTER - 64)) | (1 << (MParser.HAS - 64)) | (1 << (MParser.IF - 64)) | (1 << (MParser.IN - 64)) | (1 << (MParser.INDEX - 64)) | (1 << (MParser.INVOKE - 64)) | (1 << (MParser.IS - 64)) | (1 << (MParser.MATCHING - 64)) | (1 << (MParser.METHOD - 64)) | (1 << (MParser.METHODS - 64)) | (1 << (MParser.MODULO - 64)) | (1 << (MParser.MUTABLE - 64)) | (1 << (MParser.NATIVE - 64)) | (1 << (MParser.NONE - 64)) | (1 << (MParser.NOT - 64)) | (1 << (MParser.NOTHING - 64)) | (1 << (MParser.NULL - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (MParser.ON - 128)) | (1 << (MParser.ONE - 128)) | (1 << (MParser.OPEN - 128)) | (1 << (MParser.OPERATOR - 128)) | (1 << (MParser.OR - 128)) | (1 << (MParser.ORDER - 128)) | (1 << (MParser.OTHERWISE - 128)) | (1 << (MParser.PASS - 128)) | (1 << (MParser.RAISE - 128)) | (1 << (MParser.READ - 128)) | (1 << (MParser.RECEIVING - 128)) | (1 << (MParser.RESOURCE - 128)) | (1 << (MParser.RETURN - 128)) | (1 << (MParser.RETURNING - 128)) | (1 << (MParser.ROWS - 128)) | (1 << (MParser.SELF - 128)) | (1 << (MParser.SETTER - 128)) | (1 << (MParser.SINGLETON - 128)) | (1 << (MParser.SORTED - 128)) | (1 << (MParser.STORABLE - 128)) | (1 << (MParser.STORE - 128)) | (1 << (MParser.SWITCH - 128)) | (1 << (MParser.TEST - 128)) | (1 << (MParser.THIS - 128)) | (1 << (MParser.THROW - 128)) | (1 << (MParser.TO - 128)) | (1 << (MParser.TRY - 128)) | (1 << (MParser.VERIFYING - 128)) | (1 << (MParser.WIDGET - 128)) | (1 << (MParser.WITH - 128)) | (1 << (MParser.WHEN - 128)) | (1 << (MParser.WHERE - 128)) | (1 << (MParser.WHILE - 128)) | (1 << (MParser.WRITE - 128)) | (1 << (MParser.SYMBOL_IDENTIFIER - 128)) | (1 << (MParser.TYPE_IDENTIFIER - 128)) | (1 << (MParser.VARIABLE_IDENTIFIER - 128)))) != 0):
                self.state = 2606
                localctx.attributes = self.jsx_attribute()
                self.state = 2611
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2612
            self.match(MParser.GT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Jsx_closingContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # Jsx_element_nameContext

        def LT(self):
            return self.getToken(MParser.LT, 0)

        def SLASH(self):
            return self.getToken(MParser.SLASH, 0)

        def GT(self):
            return self.getToken(MParser.GT, 0)

        def jsx_element_name(self):
            return self.getTypedRuleContext(MParser.Jsx_element_nameContext,0)


        def getRuleIndex(self):
            return MParser.RULE_jsx_closing

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJsx_closing" ):
                listener.enterJsx_closing(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJsx_closing" ):
                listener.exitJsx_closing(self)




    def jsx_closing(self):

        localctx = MParser.Jsx_closingContext(self, self._ctx, self.state)
        self.enterRule(localctx, 464, self.RULE_jsx_closing)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2614
            self.match(MParser.LT)
            self.state = 2615
            self.match(MParser.SLASH)
            self.state = 2616
            localctx.name = self.jsx_element_name()
            self.state = 2617
            self.match(MParser.GT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Jsx_element_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def jsx_identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MParser.Jsx_identifierContext)
            else:
                return self.getTypedRuleContext(MParser.Jsx_identifierContext,i)


        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(MParser.DOT)
            else:
                return self.getToken(MParser.DOT, i)

        def getRuleIndex(self):
            return MParser.RULE_jsx_element_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJsx_element_name" ):
                listener.enterJsx_element_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJsx_element_name" ):
                listener.exitJsx_element_name(self)




    def jsx_element_name(self):

        localctx = MParser.Jsx_element_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 466, self.RULE_jsx_element_name)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2619
            self.jsx_identifier()
            self.state = 2624
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==MParser.DOT:
                self.state = 2620
                self.match(MParser.DOT)
                self.state = 2621
                self.jsx_identifier()
                self.state = 2626
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Jsx_identifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier_or_keyword(self):
            return self.getTypedRuleContext(MParser.Identifier_or_keywordContext,0)


        def nospace_hyphen_identifier_or_keyword(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MParser.Nospace_hyphen_identifier_or_keywordContext)
            else:
                return self.getTypedRuleContext(MParser.Nospace_hyphen_identifier_or_keywordContext,i)


        def getRuleIndex(self):
            return MParser.RULE_jsx_identifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJsx_identifier" ):
                listener.enterJsx_identifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJsx_identifier" ):
                listener.exitJsx_identifier(self)




    def jsx_identifier(self):

        localctx = MParser.Jsx_identifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 468, self.RULE_jsx_identifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2627
            self.identifier_or_keyword()
            self.state = 2631
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,223,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2628
                    self.nospace_hyphen_identifier_or_keyword() 
                self.state = 2633
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,223,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Jsx_attributeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # Jsx_identifierContext
            self.value = None # Jsx_attribute_valueContext

        def ws_plus(self):
            return self.getTypedRuleContext(MParser.Ws_plusContext,0)


        def jsx_identifier(self):
            return self.getTypedRuleContext(MParser.Jsx_identifierContext,0)


        def EQ(self):
            return self.getToken(MParser.EQ, 0)

        def jsx_attribute_value(self):
            return self.getTypedRuleContext(MParser.Jsx_attribute_valueContext,0)


        def getRuleIndex(self):
            return MParser.RULE_jsx_attribute

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJsx_attribute" ):
                listener.enterJsx_attribute(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJsx_attribute" ):
                listener.exitJsx_attribute(self)




    def jsx_attribute(self):

        localctx = MParser.Jsx_attributeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 470, self.RULE_jsx_attribute)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2634
            localctx.name = self.jsx_identifier()
            self.state = 2637
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MParser.EQ:
                self.state = 2635
                self.match(MParser.EQ)
                self.state = 2636
                localctx.value = self.jsx_attribute_value()


            self.state = 2639
            self.ws_plus()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Jsx_attribute_valueContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return MParser.RULE_jsx_attribute_value

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class JsxValueContext(Jsx_attribute_valueContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MParser.Jsx_attribute_valueContext
            super().__init__(parser)
            self.exp = None # ExpressionContext
            self.copyFrom(ctx)

        def LCURL(self):
            return self.getToken(MParser.LCURL, 0)
        def RCURL(self):
            return self.getToken(MParser.RCURL, 0)
        def expression(self):
            return self.getTypedRuleContext(MParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJsxValue" ):
                listener.enterJsxValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJsxValue" ):
                listener.exitJsxValue(self)


    class JsxLiteralContext(Jsx_attribute_valueContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MParser.Jsx_attribute_valueContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def TEXT_LITERAL(self):
            return self.getToken(MParser.TEXT_LITERAL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJsxLiteral" ):
                listener.enterJsxLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJsxLiteral" ):
                listener.exitJsxLiteral(self)



    def jsx_attribute_value(self):

        localctx = MParser.Jsx_attribute_valueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 472, self.RULE_jsx_attribute_value)
        try:
            self.state = 2646
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MParser.TEXT_LITERAL]:
                localctx = MParser.JsxLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2641
                self.match(MParser.TEXT_LITERAL)
                pass
            elif token in [MParser.LCURL]:
                localctx = MParser.JsxValueContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2642
                self.match(MParser.LCURL)
                self.state = 2643
                localctx.exp = self.expression(0)
                self.state = 2644
                self.match(MParser.RCURL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Jsx_childrenContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def jsx_child(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MParser.Jsx_childContext)
            else:
                return self.getTypedRuleContext(MParser.Jsx_childContext,i)


        def getRuleIndex(self):
            return MParser.RULE_jsx_children

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJsx_children" ):
                listener.enterJsx_children(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJsx_children" ):
                listener.exitJsx_children(self)




    def jsx_children(self):

        localctx = MParser.Jsx_childrenContext(self, self._ctx, self.state)
        self.enterRule(localctx, 474, self.RULE_jsx_children)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2649 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 2648
                    self.jsx_child()

                else:
                    raise NoViableAltException(self)
                self.state = 2651 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,226,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Jsx_childContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return MParser.RULE_jsx_child

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class JsxTextContext(Jsx_childContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MParser.Jsx_childContext
            super().__init__(parser)
            self.text = None # Jsx_textContext
            self.copyFrom(ctx)

        def jsx_text(self):
            return self.getTypedRuleContext(MParser.Jsx_textContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJsxText" ):
                listener.enterJsxText(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJsxText" ):
                listener.exitJsxText(self)


    class JsxChildContext(Jsx_childContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MParser.Jsx_childContext
            super().__init__(parser)
            self.jsx = None # Jsx_elementContext
            self.copyFrom(ctx)

        def jsx_element(self):
            return self.getTypedRuleContext(MParser.Jsx_elementContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJsxChild" ):
                listener.enterJsxChild(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJsxChild" ):
                listener.exitJsxChild(self)


    class JsxCodeContext(Jsx_childContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MParser.Jsx_childContext
            super().__init__(parser)
            self.exp = None # ExpressionContext
            self.copyFrom(ctx)

        def LCURL(self):
            return self.getToken(MParser.LCURL, 0)
        def RCURL(self):
            return self.getToken(MParser.RCURL, 0)
        def expression(self):
            return self.getTypedRuleContext(MParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJsxCode" ):
                listener.enterJsxCode(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJsxCode" ):
                listener.exitJsxCode(self)



    def jsx_child(self):

        localctx = MParser.Jsx_childContext(self, self._ctx, self.state)
        self.enterRule(localctx, 476, self.RULE_jsx_child)
        self._la = 0 # Token type
        try:
            self.state = 2660
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MParser.INDENT, MParser.DEDENT, MParser.LF_TAB, MParser.LF_MORE, MParser.LF, MParser.TAB, MParser.WS, MParser.COMMENT, MParser.JAVA, MParser.CSHARP, MParser.PYTHON2, MParser.PYTHON3, MParser.JAVASCRIPT, MParser.SWIFT, MParser.COLON, MParser.SEMI, MParser.COMMA, MParser.RANGE, MParser.DOT, MParser.LPAR, MParser.RPAR, MParser.LBRAK, MParser.RBRAK, MParser.QMARK, MParser.XMARK, MParser.AMP, MParser.AMP2, MParser.PIPE, MParser.PIPE2, MParser.PLUS, MParser.MINUS, MParser.STAR, MParser.SLASH, MParser.BSLASH, MParser.PERCENT, MParser.GTE, MParser.LTE, MParser.LTGT, MParser.LTCOLONGT, MParser.EQ, MParser.XEQ, MParser.EQ2, MParser.TEQ, MParser.TILDE, MParser.LARROW, MParser.RARROW, MParser.EGT, MParser.BOOLEAN, MParser.CHARACTER, MParser.TEXT, MParser.INTEGER, MParser.DECIMAL, MParser.DATE, MParser.TIME, MParser.DATETIME, MParser.PERIOD, MParser.VERSION, MParser.METHOD_T, MParser.CODE, MParser.DOCUMENT, MParser.BLOB, MParser.IMAGE, MParser.UUID, MParser.ITERATOR, MParser.CURSOR, MParser.HTML, MParser.ABSTRACT, MParser.ALL, MParser.ALWAYS, MParser.AND, MParser.ANY, MParser.AS, MParser.ASC, MParser.ATTR, MParser.ATTRIBUTE, MParser.ATTRIBUTES, MParser.BINDINGS, MParser.BREAK, MParser.BY, MParser.CASE, MParser.CATCH, MParser.CATEGORY, MParser.CLASS, MParser.CLOSE, MParser.CONTAINS, MParser.DEF, MParser.DEFAULT, MParser.DEFINE, MParser.DELETE, MParser.DESC, MParser.DO, MParser.DOING, MParser.EACH, MParser.ELSE, MParser.ENUM, MParser.ENUMERATED, MParser.EXCEPT, MParser.EXECUTE, MParser.EXPECTING, MParser.EXTENDS, MParser.FETCH, MParser.FILTERED, MParser.FINALLY, MParser.FLUSH, MParser.FOR, MParser.FROM, MParser.GETTER, MParser.HAS, MParser.IF, MParser.IN, MParser.INDEX, MParser.INVOKE, MParser.IS, MParser.MATCHING, MParser.METHOD, MParser.METHODS, MParser.MODULO, MParser.MUTABLE, MParser.NATIVE, MParser.NONE, MParser.NOT, MParser.NOTHING, MParser.NULL, MParser.ON, MParser.ONE, MParser.OPEN, MParser.OPERATOR, MParser.OR, MParser.ORDER, MParser.OTHERWISE, MParser.PASS, MParser.RAISE, MParser.READ, MParser.RECEIVING, MParser.RESOURCE, MParser.RETURN, MParser.RETURNING, MParser.ROWS, MParser.SELF, MParser.SETTER, MParser.SINGLETON, MParser.SORTED, MParser.STORABLE, MParser.STORE, MParser.SWITCH, MParser.TEST, MParser.THEN, MParser.THIS, MParser.THROW, MParser.TO, MParser.TRY, MParser.VERIFYING, MParser.WIDGET, MParser.WITH, MParser.WHEN, MParser.WHERE, MParser.WHILE, MParser.WRITE, MParser.BOOLEAN_LITERAL, MParser.CHAR_LITERAL, MParser.MIN_INTEGER, MParser.MAX_INTEGER, MParser.SYMBOL_IDENTIFIER, MParser.TYPE_IDENTIFIER, MParser.VARIABLE_IDENTIFIER, MParser.NATIVE_IDENTIFIER, MParser.DOLLAR_IDENTIFIER, MParser.ARONDBASE_IDENTIFIER, MParser.TEXT_LITERAL, MParser.UUID_LITERAL, MParser.INTEGER_LITERAL, MParser.HEXA_LITERAL, MParser.DECIMAL_LITERAL, MParser.DATETIME_LITERAL, MParser.TIME_LITERAL, MParser.DATE_LITERAL, MParser.PERIOD_LITERAL, MParser.VERSION_LITERAL]:
                localctx = MParser.JsxTextContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2653
                localctx.text = self.jsx_text()
                pass
            elif token in [MParser.LT]:
                localctx = MParser.JsxChildContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2654
                localctx.jsx = self.jsx_element()
                pass
            elif token in [MParser.LCURL]:
                localctx = MParser.JsxCodeContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 2655
                self.match(MParser.LCURL)
                self.state = 2657
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << MParser.LPAR) | (1 << MParser.LBRAK) | (1 << MParser.LCURL) | (1 << MParser.MINUS) | (1 << MParser.LT) | (1 << MParser.LTGT) | (1 << MParser.LTCOLONGT) | (1 << MParser.CODE))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (MParser.DOCUMENT - 64)) | (1 << (MParser.BLOB - 64)) | (1 << (MParser.EXECUTE - 64)) | (1 << (MParser.FETCH - 64)) | (1 << (MParser.MUTABLE - 64)) | (1 << (MParser.NONE - 64)) | (1 << (MParser.NOT - 64)))) != 0) or ((((_la - 137)) & ~0x3f) == 0 and ((1 << (_la - 137)) & ((1 << (MParser.READ - 137)) | (1 << (MParser.SELF - 137)) | (1 << (MParser.SORTED - 137)) | (1 << (MParser.THIS - 137)) | (1 << (MParser.BOOLEAN_LITERAL - 137)) | (1 << (MParser.CHAR_LITERAL - 137)) | (1 << (MParser.MIN_INTEGER - 137)) | (1 << (MParser.MAX_INTEGER - 137)) | (1 << (MParser.SYMBOL_IDENTIFIER - 137)) | (1 << (MParser.TYPE_IDENTIFIER - 137)) | (1 << (MParser.VARIABLE_IDENTIFIER - 137)) | (1 << (MParser.TEXT_LITERAL - 137)) | (1 << (MParser.UUID_LITERAL - 137)) | (1 << (MParser.INTEGER_LITERAL - 137)) | (1 << (MParser.HEXA_LITERAL - 137)) | (1 << (MParser.DECIMAL_LITERAL - 137)) | (1 << (MParser.DATETIME_LITERAL - 137)) | (1 << (MParser.TIME_LITERAL - 137)) | (1 << (MParser.DATE_LITERAL - 137)) | (1 << (MParser.PERIOD_LITERAL - 137)) | (1 << (MParser.VERSION_LITERAL - 137)))) != 0):
                    self.state = 2656
                    localctx.exp = self.expression(0)


                self.state = 2659
                self.match(MParser.RCURL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Jsx_textContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LCURL(self, i:int=None):
            if i is None:
                return self.getTokens(MParser.LCURL)
            else:
                return self.getToken(MParser.LCURL, i)

        def RCURL(self, i:int=None):
            if i is None:
                return self.getTokens(MParser.RCURL)
            else:
                return self.getToken(MParser.RCURL, i)

        def LT(self, i:int=None):
            if i is None:
                return self.getTokens(MParser.LT)
            else:
                return self.getToken(MParser.LT, i)

        def GT(self, i:int=None):
            if i is None:
                return self.getTokens(MParser.GT)
            else:
                return self.getToken(MParser.GT, i)

        def getRuleIndex(self):
            return MParser.RULE_jsx_text

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJsx_text" ):
                listener.enterJsx_text(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJsx_text" ):
                listener.exitJsx_text(self)




    def jsx_text(self):

        localctx = MParser.Jsx_textContext(self, self._ctx, self.state)
        self.enterRule(localctx, 478, self.RULE_jsx_text)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2663 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 2662
                    _la = self._input.LA(1)
                    if _la <= 0 or (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << MParser.LCURL) | (1 << MParser.RCURL) | (1 << MParser.GT) | (1 << MParser.LT))) != 0):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()

                else:
                    raise NoViableAltException(self)
                self.state = 2665 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,229,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Css_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.field = None # Css_fieldContext

        def LCURL(self):
            return self.getToken(MParser.LCURL, 0)

        def RCURL(self):
            return self.getToken(MParser.RCURL, 0)

        def css_field(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MParser.Css_fieldContext)
            else:
                return self.getTypedRuleContext(MParser.Css_fieldContext,i)


        def getRuleIndex(self):
            return MParser.RULE_css_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCss_expression" ):
                listener.enterCss_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCss_expression" ):
                listener.exitCss_expression(self)




    def css_expression(self):

        localctx = MParser.Css_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 480, self.RULE_css_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2667
            self.match(MParser.LCURL)
            self.state = 2669 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 2668
                localctx.field = self.css_field()
                self.state = 2671 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << MParser.JAVA) | (1 << MParser.CSHARP) | (1 << MParser.PYTHON2) | (1 << MParser.PYTHON3) | (1 << MParser.JAVASCRIPT) | (1 << MParser.SWIFT) | (1 << MParser.MINUS) | (1 << MParser.BOOLEAN) | (1 << MParser.CHARACTER) | (1 << MParser.TEXT) | (1 << MParser.INTEGER) | (1 << MParser.DECIMAL) | (1 << MParser.DATE) | (1 << MParser.TIME) | (1 << MParser.DATETIME) | (1 << MParser.PERIOD) | (1 << MParser.VERSION) | (1 << MParser.METHOD_T) | (1 << MParser.CODE))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (MParser.DOCUMENT - 64)) | (1 << (MParser.BLOB - 64)) | (1 << (MParser.IMAGE - 64)) | (1 << (MParser.UUID - 64)) | (1 << (MParser.ITERATOR - 64)) | (1 << (MParser.CURSOR - 64)) | (1 << (MParser.HTML - 64)) | (1 << (MParser.ABSTRACT - 64)) | (1 << (MParser.ALL - 64)) | (1 << (MParser.ALWAYS - 64)) | (1 << (MParser.AND - 64)) | (1 << (MParser.ANY - 64)) | (1 << (MParser.AS - 64)) | (1 << (MParser.ASC - 64)) | (1 << (MParser.ATTR - 64)) | (1 << (MParser.ATTRIBUTE - 64)) | (1 << (MParser.ATTRIBUTES - 64)) | (1 << (MParser.BINDINGS - 64)) | (1 << (MParser.BREAK - 64)) | (1 << (MParser.BY - 64)) | (1 << (MParser.CASE - 64)) | (1 << (MParser.CATCH - 64)) | (1 << (MParser.CATEGORY - 64)) | (1 << (MParser.CLASS - 64)) | (1 << (MParser.CLOSE - 64)) | (1 << (MParser.CONTAINS - 64)) | (1 << (MParser.DEF - 64)) | (1 << (MParser.DEFAULT - 64)) | (1 << (MParser.DEFINE - 64)) | (1 << (MParser.DELETE - 64)) | (1 << (MParser.DESC - 64)) | (1 << (MParser.DO - 64)) | (1 << (MParser.DOING - 64)) | (1 << (MParser.EACH - 64)) | (1 << (MParser.ELSE - 64)) | (1 << (MParser.ENUM - 64)) | (1 << (MParser.ENUMERATED - 64)) | (1 << (MParser.EXCEPT - 64)) | (1 << (MParser.EXECUTE - 64)) | (1 << (MParser.EXPECTING - 64)) | (1 << (MParser.EXTENDS - 64)) | (1 << (MParser.FETCH - 64)) | (1 << (MParser.FILTERED - 64)) | (1 << (MParser.FINALLY - 64)) | (1 << (MParser.FLUSH - 64)) | (1 << (MParser.FOR - 64)) | (1 << (MParser.FROM - 64)) | (1 << (MParser.GETTER - 64)) | (1 << (MParser.HAS - 64)) | (1 << (MParser.IF - 64)) | (1 << (MParser.IN - 64)) | (1 << (MParser.INDEX - 64)) | (1 << (MParser.INVOKE - 64)) | (1 << (MParser.IS - 64)) | (1 << (MParser.MATCHING - 64)) | (1 << (MParser.METHOD - 64)) | (1 << (MParser.METHODS - 64)) | (1 << (MParser.MODULO - 64)) | (1 << (MParser.MUTABLE - 64)) | (1 << (MParser.NATIVE - 64)) | (1 << (MParser.NONE - 64)) | (1 << (MParser.NOT - 64)) | (1 << (MParser.NOTHING - 64)) | (1 << (MParser.NULL - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (MParser.ON - 128)) | (1 << (MParser.ONE - 128)) | (1 << (MParser.OPEN - 128)) | (1 << (MParser.OPERATOR - 128)) | (1 << (MParser.OR - 128)) | (1 << (MParser.ORDER - 128)) | (1 << (MParser.OTHERWISE - 128)) | (1 << (MParser.PASS - 128)) | (1 << (MParser.RAISE - 128)) | (1 << (MParser.READ - 128)) | (1 << (MParser.RECEIVING - 128)) | (1 << (MParser.RESOURCE - 128)) | (1 << (MParser.RETURN - 128)) | (1 << (MParser.RETURNING - 128)) | (1 << (MParser.ROWS - 128)) | (1 << (MParser.SELF - 128)) | (1 << (MParser.SETTER - 128)) | (1 << (MParser.SINGLETON - 128)) | (1 << (MParser.SORTED - 128)) | (1 << (MParser.STORABLE - 128)) | (1 << (MParser.STORE - 128)) | (1 << (MParser.SWITCH - 128)) | (1 << (MParser.TEST - 128)) | (1 << (MParser.THIS - 128)) | (1 << (MParser.THROW - 128)) | (1 << (MParser.TO - 128)) | (1 << (MParser.TRY - 128)) | (1 << (MParser.VERIFYING - 128)) | (1 << (MParser.WIDGET - 128)) | (1 << (MParser.WITH - 128)) | (1 << (MParser.WHEN - 128)) | (1 << (MParser.WHERE - 128)) | (1 << (MParser.WHILE - 128)) | (1 << (MParser.WRITE - 128)) | (1 << (MParser.SYMBOL_IDENTIFIER - 128)) | (1 << (MParser.TYPE_IDENTIFIER - 128)) | (1 << (MParser.VARIABLE_IDENTIFIER - 128)))) != 0)):
                    break

            self.state = 2673
            self.match(MParser.RCURL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Css_fieldContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # Css_identifierContext
            self.value = None # Css_valueContext

        def COLON(self):
            return self.getToken(MParser.COLON, 0)

        def SEMI(self):
            return self.getToken(MParser.SEMI, 0)

        def css_identifier(self):
            return self.getTypedRuleContext(MParser.Css_identifierContext,0)


        def css_value(self):
            return self.getTypedRuleContext(MParser.Css_valueContext,0)


        def getRuleIndex(self):
            return MParser.RULE_css_field

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCss_field" ):
                listener.enterCss_field(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCss_field" ):
                listener.exitCss_field(self)




    def css_field(self):

        localctx = MParser.Css_fieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 482, self.RULE_css_field)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2675
            localctx.name = self.css_identifier(0)
            self.state = 2676
            self.match(MParser.COLON)
            self.state = 2677
            localctx.value = self.css_value()
            self.state = 2678
            self.match(MParser.SEMI)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Css_identifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier_or_keyword(self):
            return self.getTypedRuleContext(MParser.Identifier_or_keywordContext,0)


        def MINUS(self):
            return self.getToken(MParser.MINUS, 0)

        def nospace_identifier_or_keyword(self):
            return self.getTypedRuleContext(MParser.Nospace_identifier_or_keywordContext,0)


        def css_identifier(self):
            return self.getTypedRuleContext(MParser.Css_identifierContext,0)


        def nospace_hyphen_identifier_or_keyword(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MParser.Nospace_hyphen_identifier_or_keywordContext)
            else:
                return self.getTypedRuleContext(MParser.Nospace_hyphen_identifier_or_keywordContext,i)


        def getRuleIndex(self):
            return MParser.RULE_css_identifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCss_identifier" ):
                listener.enterCss_identifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCss_identifier" ):
                listener.exitCss_identifier(self)



    def css_identifier(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = MParser.Css_identifierContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 484
        self.enterRecursionRule(localctx, 484, self.RULE_css_identifier, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2684
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MParser.JAVA, MParser.CSHARP, MParser.PYTHON2, MParser.PYTHON3, MParser.JAVASCRIPT, MParser.SWIFT, MParser.BOOLEAN, MParser.CHARACTER, MParser.TEXT, MParser.INTEGER, MParser.DECIMAL, MParser.DATE, MParser.TIME, MParser.DATETIME, MParser.PERIOD, MParser.VERSION, MParser.METHOD_T, MParser.CODE, MParser.DOCUMENT, MParser.BLOB, MParser.IMAGE, MParser.UUID, MParser.ITERATOR, MParser.CURSOR, MParser.HTML, MParser.ABSTRACT, MParser.ALL, MParser.ALWAYS, MParser.AND, MParser.ANY, MParser.AS, MParser.ASC, MParser.ATTR, MParser.ATTRIBUTE, MParser.ATTRIBUTES, MParser.BINDINGS, MParser.BREAK, MParser.BY, MParser.CASE, MParser.CATCH, MParser.CATEGORY, MParser.CLASS, MParser.CLOSE, MParser.CONTAINS, MParser.DEF, MParser.DEFAULT, MParser.DEFINE, MParser.DELETE, MParser.DESC, MParser.DO, MParser.DOING, MParser.EACH, MParser.ELSE, MParser.ENUM, MParser.ENUMERATED, MParser.EXCEPT, MParser.EXECUTE, MParser.EXPECTING, MParser.EXTENDS, MParser.FETCH, MParser.FILTERED, MParser.FINALLY, MParser.FLUSH, MParser.FOR, MParser.FROM, MParser.GETTER, MParser.HAS, MParser.IF, MParser.IN, MParser.INDEX, MParser.INVOKE, MParser.IS, MParser.MATCHING, MParser.METHOD, MParser.METHODS, MParser.MODULO, MParser.MUTABLE, MParser.NATIVE, MParser.NONE, MParser.NOT, MParser.NOTHING, MParser.NULL, MParser.ON, MParser.ONE, MParser.OPEN, MParser.OPERATOR, MParser.OR, MParser.ORDER, MParser.OTHERWISE, MParser.PASS, MParser.RAISE, MParser.READ, MParser.RECEIVING, MParser.RESOURCE, MParser.RETURN, MParser.RETURNING, MParser.ROWS, MParser.SELF, MParser.SETTER, MParser.SINGLETON, MParser.SORTED, MParser.STORABLE, MParser.STORE, MParser.SWITCH, MParser.TEST, MParser.THIS, MParser.THROW, MParser.TO, MParser.TRY, MParser.VERIFYING, MParser.WIDGET, MParser.WITH, MParser.WHEN, MParser.WHERE, MParser.WHILE, MParser.WRITE, MParser.SYMBOL_IDENTIFIER, MParser.TYPE_IDENTIFIER, MParser.VARIABLE_IDENTIFIER]:
                self.state = 2681
                self.identifier_or_keyword()
                pass
            elif token in [MParser.MINUS]:
                self.state = 2682
                self.match(MParser.MINUS)
                self.state = 2683
                self.nospace_identifier_or_keyword()
                pass
            else:
                raise NoViableAltException(self)

            self._ctx.stop = self._input.LT(-1)
            self.state = 2694
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,233,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = MParser.Css_identifierContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_css_identifier)
                    self.state = 2686
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 2688 
                    self._errHandler.sync(self)
                    _alt = 1
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt == 1:
                            self.state = 2687
                            self.nospace_hyphen_identifier_or_keyword()

                        else:
                            raise NoViableAltException(self)
                        self.state = 2690 
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,232,self._ctx)
             
                self.state = 2696
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,233,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class Css_valueContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return MParser.RULE_css_value

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class CssTextContext(Css_valueContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MParser.Css_valueContext
            super().__init__(parser)
            self.text = None # Css_textContext
            self.copyFrom(ctx)

        def css_text(self):
            return self.getTypedRuleContext(MParser.Css_textContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCssText" ):
                listener.enterCssText(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCssText" ):
                listener.exitCssText(self)


    class CssValueContext(Css_valueContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MParser.Css_valueContext
            super().__init__(parser)
            self.exp = None # ExpressionContext
            self.copyFrom(ctx)

        def LCURL(self):
            return self.getToken(MParser.LCURL, 0)
        def RCURL(self):
            return self.getToken(MParser.RCURL, 0)
        def expression(self):
            return self.getTypedRuleContext(MParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCssValue" ):
                listener.enterCssValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCssValue" ):
                listener.exitCssValue(self)



    def css_value(self):

        localctx = MParser.Css_valueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 486, self.RULE_css_value)
        try:
            self.state = 2702
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MParser.LCURL]:
                localctx = MParser.CssValueContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2697
                self.match(MParser.LCURL)
                self.state = 2698
                localctx.exp = self.expression(0)
                self.state = 2699
                self.match(MParser.RCURL)
                pass
            elif token in [MParser.INDENT, MParser.DEDENT, MParser.LF_TAB, MParser.LF_MORE, MParser.LF, MParser.TAB, MParser.COMMENT, MParser.JAVA, MParser.CSHARP, MParser.PYTHON2, MParser.PYTHON3, MParser.JAVASCRIPT, MParser.SWIFT, MParser.COMMA, MParser.RANGE, MParser.DOT, MParser.LPAR, MParser.RPAR, MParser.LBRAK, MParser.RBRAK, MParser.QMARK, MParser.XMARK, MParser.AMP, MParser.AMP2, MParser.PIPE, MParser.PIPE2, MParser.PLUS, MParser.MINUS, MParser.STAR, MParser.SLASH, MParser.BSLASH, MParser.PERCENT, MParser.GT, MParser.GTE, MParser.LT, MParser.LTE, MParser.LTGT, MParser.LTCOLONGT, MParser.EQ, MParser.XEQ, MParser.EQ2, MParser.TEQ, MParser.TILDE, MParser.LARROW, MParser.RARROW, MParser.EGT, MParser.BOOLEAN, MParser.CHARACTER, MParser.TEXT, MParser.INTEGER, MParser.DECIMAL, MParser.DATE, MParser.TIME, MParser.DATETIME, MParser.PERIOD, MParser.VERSION, MParser.METHOD_T, MParser.CODE, MParser.DOCUMENT, MParser.BLOB, MParser.IMAGE, MParser.UUID, MParser.ITERATOR, MParser.CURSOR, MParser.HTML, MParser.ABSTRACT, MParser.ALL, MParser.ALWAYS, MParser.AND, MParser.ANY, MParser.AS, MParser.ASC, MParser.ATTR, MParser.ATTRIBUTE, MParser.ATTRIBUTES, MParser.BINDINGS, MParser.BREAK, MParser.BY, MParser.CASE, MParser.CATCH, MParser.CATEGORY, MParser.CLASS, MParser.CLOSE, MParser.CONTAINS, MParser.DEF, MParser.DEFAULT, MParser.DEFINE, MParser.DELETE, MParser.DESC, MParser.DO, MParser.DOING, MParser.EACH, MParser.ELSE, MParser.ENUM, MParser.ENUMERATED, MParser.EXCEPT, MParser.EXECUTE, MParser.EXPECTING, MParser.EXTENDS, MParser.FETCH, MParser.FILTERED, MParser.FINALLY, MParser.FLUSH, MParser.FOR, MParser.FROM, MParser.GETTER, MParser.HAS, MParser.IF, MParser.IN, MParser.INDEX, MParser.INVOKE, MParser.IS, MParser.MATCHING, MParser.METHOD, MParser.METHODS, MParser.MODULO, MParser.MUTABLE, MParser.NATIVE, MParser.NONE, MParser.NOT, MParser.NOTHING, MParser.NULL, MParser.ON, MParser.ONE, MParser.OPEN, MParser.OPERATOR, MParser.OR, MParser.ORDER, MParser.OTHERWISE, MParser.PASS, MParser.RAISE, MParser.READ, MParser.RECEIVING, MParser.RESOURCE, MParser.RETURN, MParser.RETURNING, MParser.ROWS, MParser.SELF, MParser.SETTER, MParser.SINGLETON, MParser.SORTED, MParser.STORABLE, MParser.STORE, MParser.SWITCH, MParser.TEST, MParser.THEN, MParser.THIS, MParser.THROW, MParser.TO, MParser.TRY, MParser.VERIFYING, MParser.WIDGET, MParser.WITH, MParser.WHEN, MParser.WHERE, MParser.WHILE, MParser.WRITE, MParser.BOOLEAN_LITERAL, MParser.CHAR_LITERAL, MParser.MIN_INTEGER, MParser.MAX_INTEGER, MParser.SYMBOL_IDENTIFIER, MParser.TYPE_IDENTIFIER, MParser.VARIABLE_IDENTIFIER, MParser.NATIVE_IDENTIFIER, MParser.DOLLAR_IDENTIFIER, MParser.ARONDBASE_IDENTIFIER, MParser.TEXT_LITERAL, MParser.UUID_LITERAL, MParser.INTEGER_LITERAL, MParser.HEXA_LITERAL, MParser.DECIMAL_LITERAL, MParser.DATETIME_LITERAL, MParser.TIME_LITERAL, MParser.DATE_LITERAL, MParser.PERIOD_LITERAL, MParser.VERSION_LITERAL]:
                localctx = MParser.CssTextContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2701
                localctx.text = self.css_text()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Css_textContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LCURL(self, i:int=None):
            if i is None:
                return self.getTokens(MParser.LCURL)
            else:
                return self.getToken(MParser.LCURL, i)

        def RCURL(self, i:int=None):
            if i is None:
                return self.getTokens(MParser.RCURL)
            else:
                return self.getToken(MParser.RCURL, i)

        def COLON(self, i:int=None):
            if i is None:
                return self.getTokens(MParser.COLON)
            else:
                return self.getToken(MParser.COLON, i)

        def SEMI(self, i:int=None):
            if i is None:
                return self.getTokens(MParser.SEMI)
            else:
                return self.getToken(MParser.SEMI, i)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(MParser.WS)
            else:
                return self.getToken(MParser.WS, i)

        def getRuleIndex(self):
            return MParser.RULE_css_text

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCss_text" ):
                listener.enterCss_text(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCss_text" ):
                listener.exitCss_text(self)




    def css_text(self):

        localctx = MParser.Css_textContext(self, self._ctx, self.state)
        self.enterRule(localctx, 488, self.RULE_css_text)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2705 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 2704
                _la = self._input.LA(1)
                if _la <= 0 or (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << MParser.WS) | (1 << MParser.COLON) | (1 << MParser.SEMI) | (1 << MParser.LCURL) | (1 << MParser.RCURL))) != 0):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2707 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << MParser.INDENT) | (1 << MParser.DEDENT) | (1 << MParser.LF_TAB) | (1 << MParser.LF_MORE) | (1 << MParser.LF) | (1 << MParser.TAB) | (1 << MParser.COMMENT) | (1 << MParser.JAVA) | (1 << MParser.CSHARP) | (1 << MParser.PYTHON2) | (1 << MParser.PYTHON3) | (1 << MParser.JAVASCRIPT) | (1 << MParser.SWIFT) | (1 << MParser.COMMA) | (1 << MParser.RANGE) | (1 << MParser.DOT) | (1 << MParser.LPAR) | (1 << MParser.RPAR) | (1 << MParser.LBRAK) | (1 << MParser.RBRAK) | (1 << MParser.QMARK) | (1 << MParser.XMARK) | (1 << MParser.AMP) | (1 << MParser.AMP2) | (1 << MParser.PIPE) | (1 << MParser.PIPE2) | (1 << MParser.PLUS) | (1 << MParser.MINUS) | (1 << MParser.STAR) | (1 << MParser.SLASH) | (1 << MParser.BSLASH) | (1 << MParser.PERCENT) | (1 << MParser.GT) | (1 << MParser.GTE) | (1 << MParser.LT) | (1 << MParser.LTE) | (1 << MParser.LTGT) | (1 << MParser.LTCOLONGT) | (1 << MParser.EQ) | (1 << MParser.XEQ) | (1 << MParser.EQ2) | (1 << MParser.TEQ) | (1 << MParser.TILDE) | (1 << MParser.LARROW) | (1 << MParser.RARROW) | (1 << MParser.EGT) | (1 << MParser.BOOLEAN) | (1 << MParser.CHARACTER) | (1 << MParser.TEXT) | (1 << MParser.INTEGER) | (1 << MParser.DECIMAL) | (1 << MParser.DATE) | (1 << MParser.TIME) | (1 << MParser.DATETIME) | (1 << MParser.PERIOD) | (1 << MParser.VERSION) | (1 << MParser.METHOD_T) | (1 << MParser.CODE))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (MParser.DOCUMENT - 64)) | (1 << (MParser.BLOB - 64)) | (1 << (MParser.IMAGE - 64)) | (1 << (MParser.UUID - 64)) | (1 << (MParser.ITERATOR - 64)) | (1 << (MParser.CURSOR - 64)) | (1 << (MParser.HTML - 64)) | (1 << (MParser.ABSTRACT - 64)) | (1 << (MParser.ALL - 64)) | (1 << (MParser.ALWAYS - 64)) | (1 << (MParser.AND - 64)) | (1 << (MParser.ANY - 64)) | (1 << (MParser.AS - 64)) | (1 << (MParser.ASC - 64)) | (1 << (MParser.ATTR - 64)) | (1 << (MParser.ATTRIBUTE - 64)) | (1 << (MParser.ATTRIBUTES - 64)) | (1 << (MParser.BINDINGS - 64)) | (1 << (MParser.BREAK - 64)) | (1 << (MParser.BY - 64)) | (1 << (MParser.CASE - 64)) | (1 << (MParser.CATCH - 64)) | (1 << (MParser.CATEGORY - 64)) | (1 << (MParser.CLASS - 64)) | (1 << (MParser.CLOSE - 64)) | (1 << (MParser.CONTAINS - 64)) | (1 << (MParser.DEF - 64)) | (1 << (MParser.DEFAULT - 64)) | (1 << (MParser.DEFINE - 64)) | (1 << (MParser.DELETE - 64)) | (1 << (MParser.DESC - 64)) | (1 << (MParser.DO - 64)) | (1 << (MParser.DOING - 64)) | (1 << (MParser.EACH - 64)) | (1 << (MParser.ELSE - 64)) | (1 << (MParser.ENUM - 64)) | (1 << (MParser.ENUMERATED - 64)) | (1 << (MParser.EXCEPT - 64)) | (1 << (MParser.EXECUTE - 64)) | (1 << (MParser.EXPECTING - 64)) | (1 << (MParser.EXTENDS - 64)) | (1 << (MParser.FETCH - 64)) | (1 << (MParser.FILTERED - 64)) | (1 << (MParser.FINALLY - 64)) | (1 << (MParser.FLUSH - 64)) | (1 << (MParser.FOR - 64)) | (1 << (MParser.FROM - 64)) | (1 << (MParser.GETTER - 64)) | (1 << (MParser.HAS - 64)) | (1 << (MParser.IF - 64)) | (1 << (MParser.IN - 64)) | (1 << (MParser.INDEX - 64)) | (1 << (MParser.INVOKE - 64)) | (1 << (MParser.IS - 64)) | (1 << (MParser.MATCHING - 64)) | (1 << (MParser.METHOD - 64)) | (1 << (MParser.METHODS - 64)) | (1 << (MParser.MODULO - 64)) | (1 << (MParser.MUTABLE - 64)) | (1 << (MParser.NATIVE - 64)) | (1 << (MParser.NONE - 64)) | (1 << (MParser.NOT - 64)) | (1 << (MParser.NOTHING - 64)) | (1 << (MParser.NULL - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (MParser.ON - 128)) | (1 << (MParser.ONE - 128)) | (1 << (MParser.OPEN - 128)) | (1 << (MParser.OPERATOR - 128)) | (1 << (MParser.OR - 128)) | (1 << (MParser.ORDER - 128)) | (1 << (MParser.OTHERWISE - 128)) | (1 << (MParser.PASS - 128)) | (1 << (MParser.RAISE - 128)) | (1 << (MParser.READ - 128)) | (1 << (MParser.RECEIVING - 128)) | (1 << (MParser.RESOURCE - 128)) | (1 << (MParser.RETURN - 128)) | (1 << (MParser.RETURNING - 128)) | (1 << (MParser.ROWS - 128)) | (1 << (MParser.SELF - 128)) | (1 << (MParser.SETTER - 128)) | (1 << (MParser.SINGLETON - 128)) | (1 << (MParser.SORTED - 128)) | (1 << (MParser.STORABLE - 128)) | (1 << (MParser.STORE - 128)) | (1 << (MParser.SWITCH - 128)) | (1 << (MParser.TEST - 128)) | (1 << (MParser.THEN - 128)) | (1 << (MParser.THIS - 128)) | (1 << (MParser.THROW - 128)) | (1 << (MParser.TO - 128)) | (1 << (MParser.TRY - 128)) | (1 << (MParser.VERIFYING - 128)) | (1 << (MParser.WIDGET - 128)) | (1 << (MParser.WITH - 128)) | (1 << (MParser.WHEN - 128)) | (1 << (MParser.WHERE - 128)) | (1 << (MParser.WHILE - 128)) | (1 << (MParser.WRITE - 128)) | (1 << (MParser.BOOLEAN_LITERAL - 128)) | (1 << (MParser.CHAR_LITERAL - 128)) | (1 << (MParser.MIN_INTEGER - 128)) | (1 << (MParser.MAX_INTEGER - 128)) | (1 << (MParser.SYMBOL_IDENTIFIER - 128)) | (1 << (MParser.TYPE_IDENTIFIER - 128)) | (1 << (MParser.VARIABLE_IDENTIFIER - 128)) | (1 << (MParser.NATIVE_IDENTIFIER - 128)) | (1 << (MParser.DOLLAR_IDENTIFIER - 128)) | (1 << (MParser.ARONDBASE_IDENTIFIER - 128)) | (1 << (MParser.TEXT_LITERAL - 128)) | (1 << (MParser.UUID_LITERAL - 128)) | (1 << (MParser.INTEGER_LITERAL - 128)) | (1 << (MParser.HEXA_LITERAL - 128)) | (1 << (MParser.DECIMAL_LITERAL - 128)) | (1 << (MParser.DATETIME_LITERAL - 128)) | (1 << (MParser.TIME_LITERAL - 128)) | (1 << (MParser.DATE_LITERAL - 128)) | (1 << (MParser.PERIOD_LITERAL - 128)) | (1 << (MParser.VERSION_LITERAL - 128)))) != 0)):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[19] = self.native_category_binding_list_sempred
        self._predicates[39] = self.else_if_statement_list_sempred
        self._predicates[45] = self.expression_sempred
        self._predicates[48] = self.instance_expression_sempred
        self._predicates[49] = self.mutable_instance_expression_sempred
        self._predicates[55] = self.copy_from_sempred
        self._predicates[56] = self.argument_assignment_list_sempred
        self._predicates[64] = self.child_instance_sempred
        self._predicates[87] = self.typedef_sempred
        self._predicates[98] = self.nospace_hyphen_identifier_or_keyword_sempred
        self._predicates[99] = self.nospace_identifier_or_keyword_sempred
        self._predicates[112] = self.any_type_sempred
        self._predicates[150] = self.assignable_instance_sempred
        self._predicates[151] = self.is_expression_sempred
        self._predicates[162] = self.new_token_sempred
        self._predicates[163] = self.key_token_sempred
        self._predicates[164] = self.module_token_sempred
        self._predicates[165] = self.value_token_sempred
        self._predicates[166] = self.symbols_token_sempred
        self._predicates[173] = self.javascript_expression_sempred
        self._predicates[179] = self.javascript_arguments_sempred
        self._predicates[186] = self.python_expression_sempred
        self._predicates[192] = self.python_ordinal_argument_list_sempred
        self._predicates[193] = self.python_named_argument_list_sempred
        self._predicates[195] = self.python_identifier_expression_sempred
        self._predicates[199] = self.java_expression_sempred
        self._predicates[205] = self.java_arguments_sempred
        self._predicates[208] = self.java_identifier_expression_sempred
        self._predicates[209] = self.java_class_identifier_expression_sempred
        self._predicates[213] = self.csharp_expression_sempred
        self._predicates[219] = self.csharp_arguments_sempred
        self._predicates[222] = self.csharp_identifier_expression_sempred
        self._predicates[242] = self.css_identifier_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def native_category_binding_list_sempred(self, localctx:Native_category_binding_listContext, predIndex:int):
            if predIndex == 0:
                return self.precpred(self._ctx, 1)
         

    def else_if_statement_list_sempred(self, localctx:Else_if_statement_listContext, predIndex:int):
            if predIndex == 1:
                return self.precpred(self._ctx, 1)
         

    def expression_sempred(self, localctx:ExpressionContext, predIndex:int):
            if predIndex == 2:
                return self.precpred(self._ctx, 32)
         

            if predIndex == 3:
                return self.precpred(self._ctx, 31)
         

            if predIndex == 4:
                return self.precpred(self._ctx, 30)
         

            if predIndex == 5:
                return self.precpred(self._ctx, 29)
         

            if predIndex == 6:
                return self.precpred(self._ctx, 28)
         

            if predIndex == 7:
                return self.precpred(self._ctx, 26)
         

            if predIndex == 8:
                return self.precpred(self._ctx, 25)
         

            if predIndex == 9:
                return self.precpred(self._ctx, 24)
         

            if predIndex == 10:
                return self.precpred(self._ctx, 23)
         

            if predIndex == 11:
                return self.precpred(self._ctx, 20)
         

            if predIndex == 12:
                return self.precpred(self._ctx, 19)
         

            if predIndex == 13:
                return self.precpred(self._ctx, 18)
         

            if predIndex == 14:
                return self.precpred(self._ctx, 17)
         

            if predIndex == 15:
                return self.precpred(self._ctx, 16)
         

            if predIndex == 16:
                return self.precpred(self._ctx, 15)
         

            if predIndex == 17:
                return self.precpred(self._ctx, 14)
         

            if predIndex == 18:
                return self.precpred(self._ctx, 13)
         

            if predIndex == 19:
                return self.precpred(self._ctx, 12)
         

            if predIndex == 20:
                return self.precpred(self._ctx, 11)
         

            if predIndex == 21:
                return self.precpred(self._ctx, 10)
         

            if predIndex == 22:
                return self.precpred(self._ctx, 9)
         

            if predIndex == 23:
                return self.precpred(self._ctx, 8)
         

            if predIndex == 24:
                return self.precpred(self._ctx, 7)
         

            if predIndex == 25:
                return self.precpred(self._ctx, 6)
         

            if predIndex == 26:
                return self.precpred(self._ctx, 5)
         

            if predIndex == 27:
                return self.precpred(self._ctx, 1)
         

            if predIndex == 28:
                return self.precpred(self._ctx, 35)
         

            if predIndex == 29:
                return self.precpred(self._ctx, 27)
         

            if predIndex == 30:
                return self.precpred(self._ctx, 22)
         

            if predIndex == 31:
                return self.precpred(self._ctx, 21)
         

    def instance_expression_sempred(self, localctx:Instance_expressionContext, predIndex:int):
            if predIndex == 32:
                return self.precpred(self._ctx, 1)
         

    def mutable_instance_expression_sempred(self, localctx:Mutable_instance_expressionContext, predIndex:int):
            if predIndex == 33:
                return self.precpred(self._ctx, 1)
         

    def copy_from_sempred(self, localctx:Copy_fromContext, predIndex:int):
            if predIndex == 34:
                return self.willNotBe(self.equalToken())
         

    def argument_assignment_list_sempred(self, localctx:Argument_assignment_listContext, predIndex:int):
            if predIndex == 35:
                return self.willNotBe(self.equalToken())
         

            if predIndex == 36:
                return self.precpred(self._ctx, 1)
         

    def child_instance_sempred(self, localctx:Child_instanceContext, predIndex:int):
            if predIndex == 37:
                return self.wasNot(MParser.WS)
         

            if predIndex == 38:
                return self.wasNot(MParser.WS)
         

    def typedef_sempred(self, localctx:TypedefContext, predIndex:int):
            if predIndex == 39:
                return self.precpred(self._ctx, 5)
         

            if predIndex == 40:
                return self.precpred(self._ctx, 4)
         

            if predIndex == 41:
                return self.precpred(self._ctx, 3)
         

    def nospace_hyphen_identifier_or_keyword_sempred(self, localctx:Nospace_hyphen_identifier_or_keywordContext, predIndex:int):
            if predIndex == 42:
                return self.wasNotWhiteSpace()
         

    def nospace_identifier_or_keyword_sempred(self, localctx:Nospace_identifier_or_keywordContext, predIndex:int):
            if predIndex == 43:
                return self.wasNotWhiteSpace()
         

    def any_type_sempred(self, localctx:Any_typeContext, predIndex:int):
            if predIndex == 44:
                return self.precpred(self._ctx, 2)
         

            if predIndex == 45:
                return self.precpred(self._ctx, 1)
         

    def assignable_instance_sempred(self, localctx:Assignable_instanceContext, predIndex:int):
            if predIndex == 46:
                return self.precpred(self._ctx, 1)
         

    def is_expression_sempred(self, localctx:Is_expressionContext, predIndex:int):
            if predIndex == 47:
                return self.willBeAOrAn()
         

    def new_token_sempred(self, localctx:New_tokenContext, predIndex:int):
            if predIndex == 48:
                return self.isText(localctx.i1,"new")
         

    def key_token_sempred(self, localctx:Key_tokenContext, predIndex:int):
            if predIndex == 49:
                return self.isText(localctx.i1,"key")
         

    def module_token_sempred(self, localctx:Module_tokenContext, predIndex:int):
            if predIndex == 50:
                return self.isText(localctx.i1,"module")
         

    def value_token_sempred(self, localctx:Value_tokenContext, predIndex:int):
            if predIndex == 51:
                return self.isText(localctx.i1,"value")
         

    def symbols_token_sempred(self, localctx:Symbols_tokenContext, predIndex:int):
            if predIndex == 52:
                return self.isText(localctx.i1,"symbols")
         

    def javascript_expression_sempred(self, localctx:Javascript_expressionContext, predIndex:int):
            if predIndex == 53:
                return self.precpred(self._ctx, 1)
         

    def javascript_arguments_sempred(self, localctx:Javascript_argumentsContext, predIndex:int):
            if predIndex == 54:
                return self.precpred(self._ctx, 1)
         

    def python_expression_sempred(self, localctx:Python_expressionContext, predIndex:int):
            if predIndex == 55:
                return self.precpred(self._ctx, 1)
         

    def python_ordinal_argument_list_sempred(self, localctx:Python_ordinal_argument_listContext, predIndex:int):
            if predIndex == 56:
                return self.precpred(self._ctx, 1)
         

    def python_named_argument_list_sempred(self, localctx:Python_named_argument_listContext, predIndex:int):
            if predIndex == 57:
                return self.precpred(self._ctx, 1)
         

    def python_identifier_expression_sempred(self, localctx:Python_identifier_expressionContext, predIndex:int):
            if predIndex == 58:
                return self.precpred(self._ctx, 1)
         

    def java_expression_sempred(self, localctx:Java_expressionContext, predIndex:int):
            if predIndex == 59:
                return self.precpred(self._ctx, 1)
         

    def java_arguments_sempred(self, localctx:Java_argumentsContext, predIndex:int):
            if predIndex == 60:
                return self.precpred(self._ctx, 1)
         

    def java_identifier_expression_sempred(self, localctx:Java_identifier_expressionContext, predIndex:int):
            if predIndex == 61:
                return self.precpred(self._ctx, 1)
         

    def java_class_identifier_expression_sempred(self, localctx:Java_class_identifier_expressionContext, predIndex:int):
            if predIndex == 62:
                return self.precpred(self._ctx, 1)
         

    def csharp_expression_sempred(self, localctx:Csharp_expressionContext, predIndex:int):
            if predIndex == 63:
                return self.precpred(self._ctx, 1)
         

    def csharp_arguments_sempred(self, localctx:Csharp_argumentsContext, predIndex:int):
            if predIndex == 64:
                return self.precpred(self._ctx, 1)
         

    def csharp_identifier_expression_sempred(self, localctx:Csharp_identifier_expressionContext, predIndex:int):
            if predIndex == 65:
                return self.precpred(self._ctx, 1)
         

    def css_identifier_sempred(self, localctx:Css_identifierContext, predIndex:int):
            if predIndex == 66:
                return self.precpred(self._ctx, 1)
         




